
FDCAN_Bootloader_Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006044  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f0  080062f0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f8  080062f8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a530  2000006c  0800636c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a59c  0800636c  0002a59c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010916  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af0  00000000  00000000  000309ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000334e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a43  00000000  00000000  00034260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d838  00000000  00000000  00034ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001189a  00000000  00000000  000524db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b844d  00000000  00000000  00063d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036d0  00000000  00000000  0011c1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011f894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060e8 	.word	0x080060e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080060e8 	.word	0x080060e8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_FDCAN1_Init+0x8c>)
 8000638:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000642:	22c0      	movs	r2, #192	; 0xc0
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000650:	2201      	movs	r2, #1
 8000652:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000656:	2200      	movs	r2, #0
 8000658:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800065c:	2200      	movs	r2, #0
 800065e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000662:	2208      	movs	r2, #8
 8000664:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000668:	2203      	movs	r2, #3
 800066a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800066e:	220c      	movs	r2, #12
 8000670:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000674:	2203      	movs	r2, #3
 8000676:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800067a:	2202      	movs	r2, #2
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000680:	2203      	movs	r2, #3
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000686:	220c      	movs	r2, #12
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800068c:	2203      	movs	r2, #3
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000692:	2201      	movs	r2, #1
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800069e:	2200      	movs	r2, #0
 80006a0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fde7 	bl	8001278 <HAL_FDCAN_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80006ae:	f000 f99b 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000a0 	.word	0x200000a0
 80006bc:	40006400 	.word	0x40006400

080006c0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b09d      	sub	sp, #116	; 0x74
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	235c      	movs	r3, #92	; 0x5c
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f004 ff26 	bl	8005524 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	2410      	movs	r4, #16
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	234c      	movs	r3, #76	; 0x4c
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f004 ff1e 	bl	8005524 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <HAL_FDCAN_MspInit+0xc8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d146      	bne.n	8000780 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0492      	lsls	r2, r2, #18
 80006f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	f002 fb6c 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800070c:	f000 f96c 	bl	80009e8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0149      	lsls	r1, r1, #5
 800071a:	430a      	orrs	r2, r1
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	015b      	lsls	r3, r3, #5
 8000726:	4013      	ands	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 800072e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000732:	2108      	movs	r1, #8
 8000734:	430a      	orrs	r2, r1
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 800073a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073c:	2208      	movs	r2, #8
 800073e:	4013      	ands	r3, r2
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000744:	215c      	movs	r1, #92	; 0x5c
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2203      	movs	r2, #3
 800074a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2202      	movs	r2, #2
 8000750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2203      	movs	r2, #3
 8000762:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000764:	187b      	adds	r3, r7, r1
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_FDCAN_MspInit+0xd0>)
 8000768:	0019      	movs	r1, r3
 800076a:	0010      	movs	r0, r2
 800076c:	f001 fc58 	bl	8002020 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2015      	movs	r0, #21
 8000776:	f000 fc85 	bl	8001084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800077a:	2015      	movs	r0, #21
 800077c:	f000 fc97 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b01d      	add	sp, #116	; 0x74
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	40006400 	.word	0x40006400
 800078c:	40021000 	.word	0x40021000
 8000790:	50000c00 	.word	0x50000c00

08000794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	2414      	movs	r4, #20
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 febd 	bl	8005524 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007b0:	2120      	movs	r1, #32
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2220      	movs	r2, #32
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2202      	movs	r2, #2
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007f8:	2104      	movs	r1, #4
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2204      	movs	r2, #4
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_GPIO_Init+0x11c>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000810:	2108      	movs	r1, #8
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2208      	movs	r2, #8
 800081c:	4013      	ands	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000822:	4924      	ldr	r1, [pc, #144]	; (80008b4 <MX_GPIO_Init+0x120>)
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2200      	movs	r2, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fd64 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x124>)
 8000832:	2200      	movs	r2, #0
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fd5e 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <MX_GPIO_Init+0x120>)
 8000840:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2201      	movs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	193a      	adds	r2, r7, r4
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fbdf 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2201      	movs	r2, #1
 8000872:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000874:	193b      	adds	r3, r7, r4
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <MX_GPIO_Init+0x124>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f001 fbd0 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 800089a:	187b      	adds	r3, r7, r1
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x124>)
 800089e:	0019      	movs	r1, r3
 80008a0:	0010      	movs	r0, r2
 80008a2:	f001 fbbd 	bl	8002020 <HAL_GPIO_Init>

}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b00b      	add	sp, #44	; 0x2c
 80008ac:	bd90      	pop	{r4, r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000
 80008b4:	00008203 	.word	0x00008203
 80008b8:	50000800 	.word	0x50000800

080008bc <__io_putchar>:

#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	1d39      	adds	r1, r7, #4
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <__io_putchar+0x20>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	f002 fd19 	bl	8003304 <HAL_UART_Transmit>
    return ch;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000108 	.word	0x20000108

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fa61 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f81f 	bl	800092c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  int i=0,ack;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff ff4f 	bl	8000794 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80008f6:	f7ff fe9b 	bl	8000630 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80008fa:	f000 f975 	bl	8000be8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("host\n");
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <main+0x48>)
 8000900:	0018      	movs	r0, r3
 8000902:	f004 fd13 	bl	800532c <puts>
  FDCAN_Enable();
 8000906:	f004 f839 	bl	800497c <FDCAN_Enable>
  FDCAN_GetCommand();
 800090a:	f004 f9d5 	bl	8004cb8 <FDCAN_GetCommand>
  FDCAN_GetID();
 800090e:	f004 fa4f 	bl	8004db0 <FDCAN_GetID>
  FDCAN_ReadMemory();
 8000912:	f004 fa9d 	bl	8004e50 <FDCAN_ReadMemory>
  FDCAN_WriteMemory();
 8000916:	f004 fb11 	bl	8004f3c <FDCAN_WriteMemory>
//  HAL_Delay(10);
  FDCAN_ReadMemory();
 800091a:	f004 fa99 	bl	8004e50 <FDCAN_ReadMemory>
  FDCAN_EraseMemory();
 800091e:	f004 fb73 	bl	8005008 <FDCAN_EraseMemory>
//  HAL_Delay(100);
  FDCAN_ReadMemory();
 8000922:	f004 fa95 	bl	8004e50 <FDCAN_ReadMemory>
//  FDCAN_ReadMemory();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000926:	e7fe      	b.n	8000926 <main+0x46>
 8000928:	08006100 	.word	0x08006100

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b095      	sub	sp, #84	; 0x54
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	2414      	movs	r4, #20
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	233c      	movs	r3, #60	; 0x3c
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f004 fdf1 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	0018      	movs	r0, r3
 8000946:	2310      	movs	r3, #16
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f004 fdea 	bl	8005524 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fced 	bl	8002334 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	0052      	lsls	r2, r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000968:	0021      	movs	r1, r4
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2202      	movs	r2, #2
 800097a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2202      	movs	r2, #2
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2208      	movs	r2, #8
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0292      	lsls	r2, r2, #10
 8000994:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	0492      	lsls	r2, r2, #18
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2280      	movs	r2, #128	; 0x80
 80009a2:	0592      	lsls	r2, r2, #22
 80009a4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fd0f 	bl	80023cc <HAL_RCC_OscConfig>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009b2:	f000 f819 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2202      	movs	r2, #2
 80009c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2102      	movs	r1, #2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f002 f85a 	bl	8002a8c <HAL_RCC_ClockConfig>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009dc:	f000 f804 	bl	80009e8 <Error_Handler>
  }
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b015      	add	sp, #84	; 0x54
 80009e6:	bd90      	pop	{r4, r7, pc}

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_MspInit+0x4c>)
 80009fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0549      	lsls	r1, r1, #21
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	055b      	lsls	r3, r3, #21
 8000a28:	4013      	ands	r3, r2
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fa64 	bl	8000f00 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 fa0a 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 f85e 	bl	8001b3c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	200000a0 	.word	0x200000a0

08000a8c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 fcda 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000108 	.word	0x20000108

08000aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab6:	e000      	b.n	8000aba <_read+0x16>
 8000ab8:	bf00      	nop
 8000aba:	0001      	movs	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
  }

  return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b006      	add	sp, #24
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e009      	b.n	8000b04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	0018      	movs	r0, r3
 8000afa:	f7ff fedf 	bl	80008bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf1      	blt.n	8000af0 <_write+0x12>
  }
  return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b006      	add	sp, #24
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:

int _close(int file)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	425b      	negs	r3, r3
}
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	0192      	lsls	r2, r2, #6
 8000b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b004      	add	sp, #16
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f004 fd16 	bl	80055d0 <__errno>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	425b      	negs	r3, r3
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	18d2      	adds	r2, r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b006      	add	sp, #24
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20024000 	.word	0x20024000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20000104 	.word	0x20000104
 8000bd8:	2000a5a0 	.word	0x2000a5a0

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000bee:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <MX_USART3_UART_Init+0x98>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000bf4:	22e1      	movs	r2, #225	; 0xe1
 8000bf6:	0252      	lsls	r2, r2, #9
 8000bf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 fb10 	bl	8003258 <HAL_UART_Init>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f7ff fed4 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	0018      	movs	r0, r3
 8000c46:	f003 fd63 	bl	8004710 <HAL_UARTEx_SetTxFifoThreshold>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f7ff fecb 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f003 fd9a 	bl	8004790 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f7ff fec2 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <MX_USART3_UART_Init+0x94>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f003 fd18 	bl	800469c <HAL_UARTEx_DisableFifoMode>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f7ff feba 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000108 	.word	0x20000108
 8000c80:	40004800 	.word	0x40004800

08000c84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b09d      	sub	sp, #116	; 0x74
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	235c      	movs	r3, #92	; 0x5c
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	0018      	movs	r0, r3
 8000c92:	2314      	movs	r3, #20
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f004 fc44 	bl	8005524 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	2410      	movs	r4, #16
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	234c      	movs	r3, #76	; 0x4c
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f004 fc3c 	bl	8005524 <memset>
  if(uartHandle->Instance==USART3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a26      	ldr	r2, [pc, #152]	; (8000d4c <HAL_UART_MspInit+0xc8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d146      	bne.n	8000d44 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2204      	movs	r2, #4
 8000cba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f002 f88b 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cce:	f7ff fe8b 	bl	80009e8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	02c9      	lsls	r1, r1, #11
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	02db      	lsls	r3, r3, #11
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0xcc>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	2202      	movs	r2, #2
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d06:	215c      	movs	r1, #92	; 0x5c
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	22c0      	movs	r2, #192	; 0xc0
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2202      	movs	r2, #2
 8000d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2204      	movs	r2, #4
 8000d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_UART_MspInit+0xd0>)
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	0010      	movs	r0, r2
 8000d30:	f001 f976 	bl	8002020 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 2, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2102      	movs	r1, #2
 8000d38:	201d      	movs	r0, #29
 8000d3a:	f000 f9a3 	bl	8001084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000d3e:	201d      	movs	r0, #29
 8000d40:	f000 f9b5 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b01d      	add	sp, #116	; 0x74
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	50000400 	.word	0x50000400

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d5c:	f7ff ff3e 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d86:	f004 fc29 	bl	80055dc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d8a:	f7ff fda9 	bl	80008e0 <main>

08000d8e <LoopForever>:

LoopForever:
  b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   r0, =_estack
 8000d90:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d9c:	08006300 	.word	0x08006300
  ldr r2, =_sbss
 8000da0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000da4:	2000a59c 	.word	0x2000a59c

08000da8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC1_COMP_IRQHandler>
	...

08000dac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x3c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Init+0x3c>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	0049      	lsls	r1, r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 f810 	bl	8000dec <HAL_InitTick>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff fe0c 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40022000 	.word	0x40022000

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	230f      	movs	r3, #15
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <HAL_InitTick+0x88>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d02b      	beq.n	8000e5c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_InitTick+0x8c>)
 8000e06:	681c      	ldr	r4, [r3, #0]
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_InitTick+0x88>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	23fa      	movs	r3, #250	; 0xfa
 8000e10:	0098      	lsls	r0, r3, #2
 8000e12:	f7ff f981 	bl	8000118 <__udivsi3>
 8000e16:	0003      	movs	r3, r0
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f7ff f97c 	bl	8000118 <__udivsi3>
 8000e20:	0003      	movs	r3, r0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f953 	bl	80010ce <HAL_SYSTICK_Config>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d112      	bne.n	8000e52 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d80a      	bhi.n	8000e48 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f922 	bl	8001084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_InitTick+0x90>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	e00d      	b.n	8000e64 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e008      	b.n	8000e64 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e52:	230f      	movs	r3, #15
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	e003      	b.n	8000e64 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b005      	add	sp, #20
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	001a      	movs	r2, r3
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	18d2      	adds	r2, r2, r3
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	2000019c 	.word	0x2000019c

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <HAL_GetTick+0x10>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	2000019c 	.word	0x2000019c

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff fff0 	bl	8000ea4 <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	189b      	adds	r3, r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	f7ff ffe0 	bl	8000ea4 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b004      	add	sp, #16
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	0019      	movs	r1, r3
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40010000 	.word	0x40010000
 8000f28:	fffff9ff 	.word	0xfffff9ff

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	0002      	movs	r2, r0
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d809      	bhi.n	8000f54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	231f      	movs	r3, #31
 8000f48:	401a      	ands	r2, r3
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_EnableIRQ+0x30>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4091      	lsls	r1, r2
 8000f50:	000a      	movs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	0002      	movs	r2, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b7f      	cmp	r3, #127	; 0x7f
 8000f74:	d828      	bhi.n	8000fc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f76:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <__NVIC_SetPriority+0xd4>)
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	33c0      	adds	r3, #192	; 0xc0
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	589b      	ldr	r3, [r3, r2]
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	400a      	ands	r2, r1
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	21ff      	movs	r1, #255	; 0xff
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	22ff      	movs	r2, #255	; 0xff
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0018      	movs	r0, r3
 8000fac:	2303      	movs	r3, #3
 8000fae:	4003      	ands	r3, r0
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb4:	481f      	ldr	r0, [pc, #124]	; (8001034 <__NVIC_SetPriority+0xd4>)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	33c0      	adds	r3, #192	; 0xc0
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fc6:	e031      	b.n	800102c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <__NVIC_SetPriority+0xd8>)
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	0019      	movs	r1, r3
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3306      	adds	r3, #6
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	18d3      	adds	r3, r2, r3
 8000fde:	3304      	adds	r3, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	1dfa      	adds	r2, r7, #7
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	2203      	movs	r2, #3
 8000fea:	400a      	ands	r2, r1
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	21ff      	movs	r1, #255	; 0xff
 8000ff0:	4091      	lsls	r1, r2
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	43d2      	mvns	r2, r2
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	22ff      	movs	r2, #255	; 0xff
 8001000:	401a      	ands	r2, r3
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	0018      	movs	r0, r3
 8001008:	2303      	movs	r3, #3
 800100a:	4003      	ands	r3, r0
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <__NVIC_SetPriority+0xd8>)
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	001c      	movs	r4, r3
 8001018:	230f      	movs	r3, #15
 800101a:	4023      	ands	r3, r4
 800101c:	3b08      	subs	r3, #8
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	430a      	orrs	r2, r1
 8001022:	3306      	adds	r3, #6
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	18c3      	adds	r3, r0, r3
 8001028:	3304      	adds	r3, #4
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b003      	add	sp, #12
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	045b      	lsls	r3, r3, #17
 800104c:	429a      	cmp	r2, r3
 800104e:	d301      	bcc.n	8001054 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001050:	2301      	movs	r3, #1
 8001052:	e010      	b.n	8001076 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <SysTick_Config+0x44>)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	3a01      	subs	r2, #1
 800105a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	2103      	movs	r1, #3
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff ff7c 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x44>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x44>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	210f      	movs	r1, #15
 8001090:	187b      	adds	r3, r7, r1
 8001092:	1c02      	adds	r2, r0, #0
 8001094:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	187b      	adds	r3, r7, r1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b25b      	sxtb	r3, r3
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ff5d 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b004      	add	sp, #16
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	0002      	movs	r2, r0
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff ff33 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ffaf 	bl	800103c <SysTick_Config>
 80010de:	0003      	movs	r3, r0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e04f      	b.n	800119a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2225      	movs	r2, #37	; 0x25
 80010fe:	5c9b      	ldrb	r3, [r3, r2]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d008      	beq.n	8001118 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2204      	movs	r2, #4
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	; 0x24
 8001110:	2100      	movs	r1, #0
 8001112:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e040      	b.n	800119a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	210e      	movs	r1, #14
 8001124:	438a      	bics	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001132:	491c      	ldr	r1, [pc, #112]	; (80011a4 <HAL_DMA_Abort+0xbc>)
 8001134:	400a      	ands	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2101      	movs	r1, #1
 8001144:	438a      	bics	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	221c      	movs	r2, #28
 800114e:	401a      	ands	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	2101      	movs	r1, #1
 8001156:	4091      	lsls	r1, r2
 8001158:	000a      	movs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001164:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00c      	beq.n	8001188 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	490a      	ldr	r1, [pc, #40]	; (80011a4 <HAL_DMA_Abort+0xbc>)
 800117a:	400a      	ands	r2, r1
 800117c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001186:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2225      	movs	r2, #37	; 0x25
 800118c:	2101      	movs	r1, #1
 800118e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	2100      	movs	r1, #0
 8001196:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	fffffeff 	.word	0xfffffeff

080011a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b0:	210f      	movs	r1, #15
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2225      	movs	r2, #37	; 0x25
 80011bc:	5c9b      	ldrb	r3, [r3, r2]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d006      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2204      	movs	r2, #4
 80011c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e048      	b.n	8001264 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	210e      	movs	r1, #14
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	438a      	bics	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fc:	491d      	ldr	r1, [pc, #116]	; (8001274 <HAL_DMA_Abort_IT+0xcc>)
 80011fe:	400a      	ands	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	221c      	movs	r2, #28
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2101      	movs	r1, #1
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800121e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	4910      	ldr	r1, [pc, #64]	; (8001274 <HAL_DMA_Abort_IT+0xcc>)
 8001234:	400a      	ands	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001240:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2225      	movs	r2, #37	; 0x25
 8001246:	2101      	movs	r1, #1
 8001248:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2224      	movs	r2, #36	; 0x24
 800124e:	2100      	movs	r1, #0
 8001250:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	0010      	movs	r0, r2
 8001262:	4798      	blx	r3
    }
  }
  return status;
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	fffffeff 	.word	0xfffffeff

08001278 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e14e      	b.n	8001528 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	225c      	movs	r2, #92	; 0x5c
 800128e:	5c9b      	ldrb	r3, [r3, r2]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	225d      	movs	r2, #93	; 0x5d
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff fa0d 	bl	80006c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699a      	ldr	r2, [r3, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2110      	movs	r1, #16
 80012b2:	438a      	bics	r2, r1
 80012b4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b6:	f7ff fdf5 	bl	8000ea4 <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012be:	e012      	b.n	80012e6 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012c0:	f7ff fdf0 	bl	8000ea4 <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d90b      	bls.n	80012e6 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	2201      	movs	r2, #1
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	225c      	movs	r2, #92	; 0x5c
 80012de:	2103      	movs	r1, #3
 80012e0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e120      	b.n	8001528 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	2208      	movs	r2, #8
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d0e5      	beq.n	80012c0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff fdce 	bl	8000ea4 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800130c:	e012      	b.n	8001334 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800130e:	f7ff fdc9 	bl	8000ea4 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b0a      	cmp	r3, #10
 800131a:	d90b      	bls.n	8001334 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001320:	2201      	movs	r2, #1
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	225c      	movs	r2, #92	; 0x5c
 800132c:	2103      	movs	r1, #3
 800132e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0f9      	b.n	8001528 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	d0e6      	beq.n	800130e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2102      	movs	r1, #2
 800134c:	430a      	orrs	r2, r1
 800134e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a76      	ldr	r2, [pc, #472]	; (8001530 <HAL_FDCAN_Init+0x2b8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d103      	bne.n	8001362 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800135a:	4a76      	ldr	r2, [pc, #472]	; (8001534 <HAL_FDCAN_Init+0x2bc>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7c1b      	ldrb	r3, [r3, #16]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d108      	bne.n	800137c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699a      	ldr	r2, [r3, #24]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	438a      	bics	r2, r1
 8001378:	619a      	str	r2, [r3, #24]
 800137a:	e007      	b.n	800138c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	430a      	orrs	r2, r1
 800138a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7c5b      	ldrb	r3, [r3, #17]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d109      	bne.n	80013a8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	01c9      	lsls	r1, r1, #7
 80013a2:	430a      	orrs	r2, r1
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	e007      	b.n	80013b8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699a      	ldr	r2, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4961      	ldr	r1, [pc, #388]	; (8001538 <HAL_FDCAN_Init+0x2c0>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7c9b      	ldrb	r3, [r3, #18]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d108      	bne.n	80013d2 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	495c      	ldr	r1, [pc, #368]	; (800153c <HAL_FDCAN_Init+0x2c4>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	619a      	str	r2, [r3, #24]
 80013d0:	e008      	b.n	80013e4 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	0149      	lsls	r1, r1, #5
 80013e0:	430a      	orrs	r2, r1
 80013e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a55      	ldr	r2, [pc, #340]	; (8001540 <HAL_FDCAN_Init+0x2c8>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	21a4      	movs	r1, #164	; 0xa4
 8001408:	438a      	bics	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2110      	movs	r1, #16
 8001418:	438a      	bics	r2, r1
 800141a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2104      	movs	r1, #4
 8001430:	430a      	orrs	r2, r1
 8001432:	619a      	str	r2, [r3, #24]
 8001434:	e02c      	b.n	8001490 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d028      	beq.n	8001490 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d01c      	beq.n	8001480 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	430a      	orrs	r2, r1
 8001454:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2110      	movs	r1, #16
 8001462:	430a      	orrs	r2, r1
 8001464:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d110      	bne.n	8001490 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699a      	ldr	r2, [r3, #24]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2120      	movs	r1, #32
 800147a:	430a      	orrs	r2, r1
 800147c:	619a      	str	r2, [r3, #24]
 800147e:	e007      	b.n	8001490 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2120      	movs	r1, #32
 800148c:	430a      	orrs	r2, r1
 800148e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	3b01      	subs	r3, #1
 8001496:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	3b01      	subs	r3, #1
 800149e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014a8:	431a      	orrs	r2, r3
 80014aa:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d115      	bne.n	80014f4 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	3b01      	subs	r3, #1
 80014d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	3b01      	subs	r3, #1
 80014de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014e0:	431a      	orrs	r2, r3
 80014e2:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	3b01      	subs	r3, #1
 80014ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	22c0      	movs	r2, #192	; 0xc0
 80014fa:	5899      	ldr	r1, [r3, r2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	21c0      	movs	r1, #192	; 0xc0
 8001508:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	0018      	movs	r0, r3
 800150e:	f000 fc9f 	bl	8001e50 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	225c      	movs	r2, #92	; 0x5c
 8001522:	2101      	movs	r1, #1
 8001524:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40006400 	.word	0x40006400
 8001534:	40006500 	.word	0x40006500
 8001538:	ffffbfff 	.word	0xffffbfff
 800153c:	ffffefff 	.word	0xffffefff
 8001540:	fffffcff 	.word	0xfffffcff

08001544 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800154e:	2017      	movs	r0, #23
 8001550:	183b      	adds	r3, r7, r0
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	215c      	movs	r1, #92	; 0x5c
 8001556:	5c52      	ldrb	r2, [r2, r1]
 8001558:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800155a:	0002      	movs	r2, r0
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d003      	beq.n	800156c <HAL_FDCAN_ConfigFilter+0x28>
 8001564:	18bb      	adds	r3, r7, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d13d      	bne.n	80015e8 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d119      	bne.n	80015a8 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001580:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001588:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e01d      	b.n	80015e4 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	075a      	lsls	r2, r3, #29
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	079a      	lsls	r2, r3, #30
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3304      	adds	r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e006      	b.n	80015f6 <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ec:	2202      	movs	r2, #2
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
  }
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b006      	add	sp, #24
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	225c      	movs	r2, #92	; 0x5c
 800160e:	5c9b      	ldrb	r3, [r3, r2]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	0219      	lsls	r1, r3, #8
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	430a      	orrs	r2, r1
 8001622:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e006      	b.n	8001636 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162c:	2204      	movs	r2, #4
 800162e:	431a      	orrs	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
  }
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	225c      	movs	r2, #92	; 0x5c
 800164a:	5c9b      	ldrb	r3, [r3, r2]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10a      	bne.n	8001668 <HAL_FDCAN_EnableTxDelayCompensation+0x2a>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0409      	lsls	r1, r1, #16
 8001660:	430a      	orrs	r2, r1
 8001662:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	e006      	b.n	8001676 <HAL_FDCAN_EnableTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	2204      	movs	r2, #4
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
  }
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	225c      	movs	r2, #92	; 0x5c
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d110      	bne.n	80016b4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	225c      	movs	r2, #92	; 0x5c
 8001696:	2102      	movs	r1, #2
 8001698:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	438a      	bics	r2, r1
 80016a8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	e006      	b.n	80016c2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b8:	2204      	movs	r2, #4
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
  }
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	225c      	movs	r2, #92	; 0x5c
 80016da:	5c9b      	ldrb	r3, [r3, r2]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d12d      	bne.n	800173e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	22c4      	movs	r2, #196	; 0xc4
 80016e8:	589a      	ldr	r2, [r3, r2]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	039b      	lsls	r3, r3, #14
 80016ee:	4013      	ands	r3, r2
 80016f0:	d008      	beq.n	8001704 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e023      	b.n	800174c <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	22c4      	movs	r2, #196	; 0xc4
 800170a:	589b      	ldr	r3, [r3, r2]
 800170c:	0c1b      	lsrs	r3, r3, #16
 800170e:	2203      	movs	r2, #3
 8001710:	4013      	ands	r3, r2
 8001712:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 fc04 	bl	8001f28 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4091      	lsls	r1, r2
 800172a:	000a      	movs	r2, r1
 800172c:	21cc      	movs	r1, #204	; 0xcc
 800172e:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001730:	2201      	movs	r2, #1
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e006      	b.n	800174c <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	2208      	movs	r2, #8
 8001744:	431a      	orrs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
  }
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001766:	201b      	movs	r0, #27
 8001768:	183b      	adds	r3, r7, r0
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	215c      	movs	r1, #92	; 0x5c
 800176e:	5c52      	ldrb	r2, [r2, r1]
 8001770:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001772:	183b      	adds	r3, r7, r0
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d000      	beq.n	800177c <HAL_FDCAN_GetRxMessage+0x28>
 800177a:	e0ec      	b.n	8001956 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b40      	cmp	r3, #64	; 0x40
 8001780:	d137      	bne.n	80017f2 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2290      	movs	r2, #144	; 0x90
 8001788:	589b      	ldr	r3, [r3, r2]
 800178a:	220f      	movs	r2, #15
 800178c:	4013      	ands	r3, r2
 800178e:	d108      	bne.n	80017a2 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	431a      	orrs	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0e0      	b.n	8001964 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2290      	movs	r2, #144	; 0x90
 80017a8:	589b      	ldr	r3, [r3, r2]
 80017aa:	0e1b      	lsrs	r3, r3, #24
 80017ac:	2201      	movs	r2, #1
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10a      	bne.n	80017ca <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	589b      	ldr	r3, [r3, r2]
 80017bc:	0a5b      	lsrs	r3, r3, #9
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2290      	movs	r2, #144	; 0x90
 80017d0:	589b      	ldr	r3, [r3, r2]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	0013      	movs	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	189b      	adds	r3, r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	18cb      	adds	r3, r1, r3
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
 80017f0:	e036      	b.n	8001860 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2298      	movs	r2, #152	; 0x98
 80017f8:	589b      	ldr	r3, [r3, r2]
 80017fa:	220f      	movs	r2, #15
 80017fc:	4013      	ands	r3, r2
 80017fe:	d108      	bne.n	8001812 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	0052      	lsls	r2, r2, #1
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0a8      	b.n	8001964 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2298      	movs	r2, #152	; 0x98
 8001818:	589b      	ldr	r3, [r3, r2]
 800181a:	0e1b      	lsrs	r3, r3, #24
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10a      	bne.n	800183a <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	589b      	ldr	r3, [r3, r2]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001836:	2301      	movs	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2298      	movs	r2, #152	; 0x98
 8001840:	589b      	ldr	r3, [r3, r2]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	2203      	movs	r2, #3
 8001846:	4013      	ands	r3, r2
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	18d3      	adds	r3, r2, r3
 800184c:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	0013      	movs	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	189b      	adds	r3, r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	18cb      	adds	r3, r1, r3
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	05db      	lsls	r3, r3, #23
 8001868:	401a      	ands	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0c9b      	lsrs	r3, r3, #18
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	0d5a      	lsrs	r2, r3, #21
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e005      	b.n	8001892 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	059b      	lsls	r3, r3, #22
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0fdb      	lsrs	r3, r3, #31
 80018a6:	07da      	lsls	r2, r3, #31
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3304      	adds	r3, #4
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	0c1a      	lsrs	r2, r3, #16
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	220f      	movs	r2, #15
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	035b      	lsls	r3, r3, #13
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	039b      	lsls	r3, r3, #14
 80018e2:	401a      	ands	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0e1b      	lsrs	r3, r3, #24
 80018ee:	227f      	movs	r2, #127	; 0x7f
 80018f0:	401a      	ands	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0fda      	lsrs	r2, r3, #31
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3304      	adds	r3, #4
 8001904:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	e00a      	b.n	8001926 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	18d2      	adds	r2, r2, r3
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	18cb      	adds	r3, r1, r3
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	3301      	adds	r3, #1
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_FDCAN_GetRxMessage+0x218>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	001a      	movs	r2, r3
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	4293      	cmp	r3, r2
 8001934:	d3ec      	bcc.n	8001910 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	d105      	bne.n	8001948 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2194      	movs	r1, #148	; 0x94
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	505a      	str	r2, [r3, r1]
 8001946:	e004      	b.n	8001952 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	219c      	movs	r1, #156	; 0x9c
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e006      	b.n	8001964 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	2208      	movs	r2, #8
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
  }
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b00a      	add	sp, #40	; 0x28
 800196a:	bd80      	pop	{r7, pc}
 800196c:	08006284 	.word	0x08006284

08001970 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	22c4      	movs	r2, #196	; 0xc4
 800197e:	589b      	ldr	r3, [r3, r2]
 8001980:	2207      	movs	r2, #7
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b004      	add	sp, #16
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800199c:	2017      	movs	r0, #23
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	215c      	movs	r1, #92	; 0x5c
 80019a4:	5c52      	ldrb	r2, [r2, r1]
 80019a6:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80019a8:	0002      	movs	r2, r0
 80019aa:	18bb      	adds	r3, r7, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d004      	beq.n	80019bc <HAL_FDCAN_ActivateNotification+0x2c>
 80019b2:	18bb      	adds	r3, r7, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d000      	beq.n	80019bc <HAL_FDCAN_ActivateNotification+0x2c>
 80019ba:	e0b4      	b.n	8001b26 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2207      	movs	r2, #7
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d034      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2238      	movs	r2, #56	; 0x38
 80019d8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019da:	d003      	beq.n	80019e4 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d02c      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	23e0      	movs	r3, #224	; 0xe0
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019ec:	d003      	beq.n	80019f6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2204      	movs	r2, #4
 80019f2:	4013      	ands	r3, r2
 80019f4:	d023      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	23f0      	movs	r3, #240	; 0xf0
 80019fa:	015b      	lsls	r3, r3, #5
 80019fc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019fe:	d003      	beq.n	8001a08 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2208      	movs	r2, #8
 8001a04:	4013      	ands	r3, r2
 8001a06:	d01a      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	23e0      	movs	r3, #224	; 0xe0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a10:	d003      	beq.n	8001a1a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2210      	movs	r2, #16
 8001a16:	4013      	ands	r3, r2
 8001a18:	d011      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	23c0      	movs	r3, #192	; 0xc0
 8001a1e:	029b      	lsls	r3, r3, #10
 8001a20:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a22:	d003      	beq.n	8001a2c <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	2220      	movs	r2, #32
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d008      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	23fc      	movs	r3, #252	; 0xfc
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a34:	d00b      	beq.n	8001a4e <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d107      	bne.n	8001a4e <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2207      	movs	r2, #7
 8001a52:	4013      	ands	r3, r2
 8001a54:	d003      	beq.n	8001a5e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d134      	bne.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2238      	movs	r2, #56	; 0x38
 8001a62:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a64:	d003      	beq.n	8001a6e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d12c      	bne.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	23e0      	movs	r3, #224	; 0xe0
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a76:	d003      	beq.n	8001a80 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	23f0      	movs	r3, #240	; 0xf0
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a88:	d003      	beq.n	8001a92 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d11a      	bne.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	23e0      	movs	r3, #224	; 0xe0
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a9a:	d003      	beq.n	8001aa4 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	23c0      	movs	r3, #192	; 0xc0
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001aac:	d003      	beq.n	8001ab6 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d108      	bne.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	23fc      	movs	r3, #252	; 0xfc
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001abe:	d00b      	beq.n	8001ad8 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d007      	beq.n	8001ad8 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	4013      	ands	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	22dc      	movs	r2, #220	; 0xdc
 8001ae6:	5899      	ldr	r1, [r3, r2]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	21dc      	movs	r1, #220	; 0xdc
 8001af2:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	22e0      	movs	r2, #224	; 0xe0
 8001b04:	5899      	ldr	r1, [r3, r2]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	21e0      	movs	r1, #224	; 0xe0
 8001b10:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e006      	b.n	8001b34 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
  }
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b006      	add	sp, #24
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b4a:	23e0      	movs	r3, #224	; 0xe0
 8001b4c:	015b      	lsls	r3, r3, #5
 8001b4e:	4013      	ands	r3, r2
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b64:	2207      	movs	r2, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	4013      	ands	r3, r2
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7c:	2238      	movs	r2, #56	; 0x38
 8001b7e:	4013      	ands	r3, r2
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b94:	23f1      	movs	r3, #241	; 0xf1
 8001b96:	041b      	lsls	r3, r3, #16
 8001b98:	4013      	ands	r3, r2
 8001b9a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bae:	23e0      	movs	r3, #224	; 0xe0
 8001bb0:	031b      	lsls	r3, r3, #12
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd0:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	4013      	ands	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f000 f916 	bl	8001e1e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d01b      	beq.n	8001c34 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d016      	beq.n	8001c34 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	22d8      	movs	r2, #216	; 0xd8
 8001c0c:	589b      	ldr	r3, [r3, r2]
 8001c0e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	22e0      	movs	r2, #224	; 0xe0
 8001c16:	589a      	ldr	r2, [r3, r2]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	0052      	lsls	r2, r2, #1
 8001c26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0011      	movs	r1, r2
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 f8dc 	bl	8001dec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 f8ac 	bl	8001da6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0011      	movs	r1, r2
 8001c62:	0018      	movs	r0, r3
 8001c64:	f002 ff94 	bl	8004b90 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c74:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f89b 	bl	8001db8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d008      	beq.n	8001ca8 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f891 	bl	8001dca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	4013      	ands	r3, r2
 8001cae:	d019      	beq.n	8001ce4 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d015      	beq.n	8001ce4 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	22d4      	movs	r2, #212	; 0xd4
 8001cbe:	589b      	ldr	r3, [r3, r2]
 8001cc0:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	22dc      	movs	r2, #220	; 0xdc
 8001cc8:	589a      	ldr	r2, [r3, r2]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0011      	movs	r1, r2
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f87b 	bl	8001dda <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	4013      	ands	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	019b      	lsls	r3, r3, #6
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d008      	beq.n	8001d0a <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	0192      	lsls	r2, r2, #6
 8001d00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 f87a 	bl	8001dfe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d008      	beq.n	8001d30 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	0212      	lsls	r2, r2, #8
 8001d26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f000 f86f 	bl	8001e0e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	01db      	lsls	r3, r3, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	d00f      	beq.n	8001d5a <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	d00a      	beq.n	8001d5a <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	01d2      	lsls	r2, r2, #7
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0011      	movs	r1, r2
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f865 	bl	8001e3e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a3a      	ldr	r2, [r7, #32]
 8001d80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 f848 	bl	8001e2e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b00c      	add	sp, #48	; 0x30
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b002      	add	sp, #8
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b002      	add	sp, #8
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001e5a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d105      	bne.n	8001e72 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	22d4      	movs	r2, #212	; 0xd4
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4694      	mov	ip, r2
 8001e6e:	4463      	add	r3, ip
 8001e70:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	589b      	ldr	r3, [r3, r2]
 8001e80:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3370      	adds	r3, #112	; 0x70
 8001e9a:	001a      	movs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	589b      	ldr	r3, [r3, r2]
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	061a      	lsls	r2, r3, #24
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	33b0      	adds	r3, #176	; 0xb0
 8001ec2:	001a      	movs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3389      	adds	r3, #137	; 0x89
 8001ecc:	33ff      	adds	r3, #255	; 0xff
 8001ece:	001a      	movs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2298      	movs	r2, #152	; 0x98
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	189a      	adds	r2, r3, r2
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	229e      	movs	r2, #158	; 0x9e
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	189a      	adds	r2, r3, r2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e005      	b.n	8001efe <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	22d4      	movs	r2, #212	; 0xd4
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	4694      	mov	ip, r2
 8001f06:	4463      	add	r3, ip
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d3f1      	bcc.n	8001ef2 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	4000b400 	.word	0x4000b400
 8001f1c:	40006800 	.word	0x40006800
 8001f20:	ffe0ffff 	.word	0xffe0ffff
 8001f24:	f0ffffff 	.word	0xf0ffffff

08001f28 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f46:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e00b      	b.n	8001f6c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001f5c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001f62:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	05d2      	lsls	r2, r2, #23
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f76:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f7c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f82:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	0013      	movs	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	189b      	adds	r3, r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	18cb      	adds	r3, r1, r3
 8001f9e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	e020      	b.n	8002000 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	18cb      	adds	r3, r1, r3
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fd6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	18cb      	adds	r3, r1, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fe4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	188a      	adds	r2, r1, r2
 8001fec:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fee:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <FDCAN_CopyMessageToRAM+0xf4>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	001a      	movs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4293      	cmp	r3, r2
 800200e:	d3d6      	bcc.n	8001fbe <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b008      	add	sp, #32
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	08006284 	.word	0x08006284

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202e:	e14d      	b.n	80022cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4091      	lsls	r1, r2
 800203a:	000a      	movs	r2, r1
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d100      	bne.n	8002048 <HAL_GPIO_Init+0x28>
 8002046:	e13e      	b.n	80022c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	4013      	ands	r3, r2
 8002050:	2b01      	cmp	r3, #1
 8002052:	d005      	beq.n	8002060 <HAL_GPIO_Init+0x40>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	4013      	ands	r3, r2
 800205c:	2b02      	cmp	r3, #2
 800205e:	d130      	bne.n	80020c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	409a      	lsls	r2, r3
 800206e:	0013      	movs	r3, r2
 8002070:	43da      	mvns	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	409a      	lsls	r2, r3
 8002082:	0013      	movs	r3, r2
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002096:	2201      	movs	r2, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	43da      	mvns	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	2201      	movs	r2, #1
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
 80020b4:	0013      	movs	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2203      	movs	r2, #3
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d017      	beq.n	80020fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2203      	movs	r2, #3
 8002104:	4013      	ands	r3, r2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d123      	bne.n	8002152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	58d3      	ldr	r3, [r2, r3]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2207      	movs	r2, #7
 800211c:	4013      	ands	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	409a      	lsls	r2, r3
 8002124:	0013      	movs	r3, r2
 8002126:	43da      	mvns	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2107      	movs	r1, #7
 8002136:	400b      	ands	r3, r1
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	409a      	lsls	r2, r3
 800213c:	0013      	movs	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	6939      	ldr	r1, [r7, #16]
 8002150:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	401a      	ands	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	409a      	lsls	r2, r3
 8002178:	0013      	movs	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	23c0      	movs	r3, #192	; 0xc0
 800218c:	029b      	lsls	r3, r3, #10
 800218e:	4013      	ands	r3, r2
 8002190:	d100      	bne.n	8002194 <HAL_GPIO_Init+0x174>
 8002192:	e098      	b.n	80022c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002194:	4a53      	ldr	r2, [pc, #332]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	089b      	lsrs	r3, r3, #2
 800219a:	3318      	adds	r3, #24
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	589b      	ldr	r3, [r3, r2]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2203      	movs	r2, #3
 80021a6:	4013      	ands	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	220f      	movs	r2, #15
 80021ac:	409a      	lsls	r2, r3
 80021ae:	0013      	movs	r3, r2
 80021b0:	43da      	mvns	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	23a0      	movs	r3, #160	; 0xa0
 80021bc:	05db      	lsls	r3, r3, #23
 80021be:	429a      	cmp	r2, r3
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x1d6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a48      	ldr	r2, [pc, #288]	; (80022e8 <HAL_GPIO_Init+0x2c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x1d2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a47      	ldr	r2, [pc, #284]	; (80022ec <HAL_GPIO_Init+0x2cc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x1ce>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a46      	ldr	r2, [pc, #280]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x1ca>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <HAL_GPIO_Init+0x2d4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x1c6>
 80021e2:	2304      	movs	r3, #4
 80021e4:	e008      	b.n	80021f8 <HAL_GPIO_Init+0x1d8>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e006      	b.n	80021f8 <HAL_GPIO_Init+0x1d8>
 80021ea:	2303      	movs	r3, #3
 80021ec:	e004      	b.n	80021f8 <HAL_GPIO_Init+0x1d8>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x1d8>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_GPIO_Init+0x1d8>
 80021f6:	2300      	movs	r3, #0
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	2103      	movs	r1, #3
 80021fc:	400a      	ands	r2, r1
 80021fe:	00d2      	lsls	r2, r2, #3
 8002200:	4093      	lsls	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002208:	4936      	ldr	r1, [pc, #216]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3318      	adds	r3, #24
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	43da      	mvns	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	035b      	lsls	r3, r3, #13
 800222e:	4013      	ands	r3, r2
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43da      	mvns	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	039b      	lsls	r3, r3, #14
 8002258:	4013      	ands	r3, r2
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 800226c:	2384      	movs	r3, #132	; 0x84
 800226e:	58d3      	ldr	r3, [r2, r3]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43da      	mvns	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	029b      	lsls	r3, r3, #10
 8002284:	4013      	ands	r3, r2
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002290:	4914      	ldr	r1, [pc, #80]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 8002292:	2284      	movs	r2, #132	; 0x84
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	58d3      	ldr	r3, [r2, r3]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43da      	mvns	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	4013      	ands	r3, r2
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022be:	4909      	ldr	r1, [pc, #36]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3301      	adds	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	40da      	lsrs	r2, r3
 80022d4:	1e13      	subs	r3, r2, #0
 80022d6:	d000      	beq.n	80022da <HAL_GPIO_Init+0x2ba>
 80022d8:	e6aa      	b.n	8002030 <HAL_GPIO_Init+0x10>
  }
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021800 	.word	0x40021800
 80022e8:	50000400 	.word	0x50000400
 80022ec:	50000800 	.word	0x50000800
 80022f0:	50000c00 	.word	0x50000c00
 80022f4:	50001000 	.word	0x50001000

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	0008      	movs	r0, r1
 8002302:	0011      	movs	r1, r2
 8002304:	1cbb      	adds	r3, r7, #2
 8002306:	1c02      	adds	r2, r0, #0
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	1c7b      	adds	r3, r7, #1
 800230c:	1c0a      	adds	r2, r1, #0
 800230e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	1c7b      	adds	r3, r7, #1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d004      	beq.n	8002322 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002318:	1cbb      	adds	r3, r7, #2
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002322:	1cbb      	adds	r3, r7, #2
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d11f      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	0013      	movs	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	189b      	adds	r3, r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002366:	0018      	movs	r0, r3
 8002368:	f7fd fed6 	bl	8000118 <__udivsi3>
 800236c:	0003      	movs	r3, r0
 800236e:	3301      	adds	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002372:	e008      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3b01      	subs	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	e001      	b.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e009      	b.n	800239a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	401a      	ands	r2, r3
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	429a      	cmp	r2, r3
 8002396:	d0ed      	beq.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40007000 	.word	0x40007000
 80023a8:	fffff9ff 	.word	0xfffff9ff
 80023ac:	20000000 	.word	0x20000000
 80023b0:	000f4240 	.word	0x000f4240

080023b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	23e0      	movs	r3, #224	; 0xe0
 80023be:	01db      	lsls	r3, r3, #7
 80023c0:	4013      	ands	r3, r2
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	f000 fb50 	bl	8002a80 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d100      	bne.n	80023ec <HAL_RCC_OscConfig+0x20>
 80023ea:	e07c      	b.n	80024e6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ec:	4bc3      	ldr	r3, [pc, #780]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2238      	movs	r2, #56	; 0x38
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f6:	4bc1      	ldr	r3, [pc, #772]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2203      	movs	r2, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x40>
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d002      	beq.n	8002412 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4bba      	ldr	r3, [pc, #744]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	4013      	ands	r3, r2
 800241c:	d062      	beq.n	80024e4 <HAL_RCC_OscConfig+0x118>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d15e      	bne.n	80024e4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e32a      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	025b      	lsls	r3, r3, #9
 8002432:	429a      	cmp	r2, r3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_OscConfig+0x7a>
 8002436:	4bb1      	ldr	r3, [pc, #708]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4bb0      	ldr	r3, [pc, #704]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0249      	lsls	r1, r1, #9
 8002440:	430a      	orrs	r2, r1
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e020      	b.n	8002488 <HAL_RCC_OscConfig+0xbc>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	23a0      	movs	r3, #160	; 0xa0
 800244c:	02db      	lsls	r3, r3, #11
 800244e:	429a      	cmp	r2, r3
 8002450:	d10e      	bne.n	8002470 <HAL_RCC_OscConfig+0xa4>
 8002452:	4baa      	ldr	r3, [pc, #680]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4ba9      	ldr	r3, [pc, #676]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	02c9      	lsls	r1, r1, #11
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4ba6      	ldr	r3, [pc, #664]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4ba5      	ldr	r3, [pc, #660]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0249      	lsls	r1, r1, #9
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xbc>
 8002470:	4ba2      	ldr	r3, [pc, #648]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4ba1      	ldr	r3, [pc, #644]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002476:	49a2      	ldr	r1, [pc, #648]	; (8002700 <HAL_RCC_OscConfig+0x334>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	4b9f      	ldr	r3, [pc, #636]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002482:	49a0      	ldr	r1, [pc, #640]	; (8002704 <HAL_RCC_OscConfig+0x338>)
 8002484:	400a      	ands	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d014      	beq.n	80024ba <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fd08 	bl	8000ea4 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249a:	f7fe fd03 	bl	8000ea4 <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e2e9      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ac:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	029b      	lsls	r3, r3, #10
 80024b4:	4013      	ands	r3, r2
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0xce>
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fcf3 	bl	8000ea4 <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fcee 	bl	8000ea4 <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e2d4      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d6:	4b89      	ldr	r3, [pc, #548]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	029b      	lsls	r3, r3, #10
 80024de:	4013      	ands	r3, r2
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0xf8>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	4013      	ands	r3, r2
 80024ee:	d100      	bne.n	80024f2 <HAL_RCC_OscConfig+0x126>
 80024f0:	e099      	b.n	8002626 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	; 0x38
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fc:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2203      	movs	r2, #3
 8002502:	4013      	ands	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b10      	cmp	r3, #16
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0x146>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d002      	beq.n	8002518 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d135      	bne.n	8002584 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002518:	4b78      	ldr	r3, [pc, #480]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4013      	ands	r3, r2
 8002522:	d005      	beq.n	8002530 <HAL_RCC_OscConfig+0x164>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e2a7      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b72      	ldr	r3, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a74      	ldr	r2, [pc, #464]	; (8002708 <HAL_RCC_OscConfig+0x33c>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d112      	bne.n	8002572 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800254c:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6e      	ldr	r2, [pc, #440]	; (800270c <HAL_RCC_OscConfig+0x340>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0adb      	lsrs	r3, r3, #11
 8002566:	2207      	movs	r2, #7
 8002568:	4013      	ands	r3, r2
 800256a:	4a69      	ldr	r2, [pc, #420]	; (8002710 <HAL_RCC_OscConfig+0x344>)
 800256c:	40da      	lsrs	r2, r3
 800256e:	4b69      	ldr	r3, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x348>)
 8002570:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002572:	4b69      	ldr	r3, [pc, #420]	; (8002718 <HAL_RCC_OscConfig+0x34c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0018      	movs	r0, r3
 8002578:	f7fe fc38 	bl	8000dec <HAL_InitTick>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d051      	beq.n	8002624 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e27d      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d030      	beq.n	80025ee <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800258c:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5e      	ldr	r2, [pc, #376]	; (800270c <HAL_RCC_OscConfig+0x340>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	4b58      	ldr	r3, [pc, #352]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b55      	ldr	r3, [pc, #340]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025a6:	2180      	movs	r1, #128	; 0x80
 80025a8:	0049      	lsls	r1, r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fc79 	bl	8000ea4 <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe fc74 	bl	8000ea4 <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e25a      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4013      	ands	r3, r2
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4a4b      	ldr	r2, [pc, #300]	; (8002708 <HAL_RCC_OscConfig+0x33c>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	021a      	lsls	r2, r3, #8
 80025e6:	4b45      	ldr	r3, [pc, #276]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	e01b      	b.n	8002626 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80025f4:	4949      	ldr	r1, [pc, #292]	; (800271c <HAL_RCC_OscConfig+0x350>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7fe fc53 	bl	8000ea4 <HAL_GetTick>
 80025fe:	0003      	movs	r3, r0
 8002600:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002604:	f7fe fc4e 	bl	8000ea4 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e234      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4013      	ands	r3, r2
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x238>
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002624:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2208      	movs	r2, #8
 800262c:	4013      	ands	r3, r2
 800262e:	d047      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2238      	movs	r2, #56	; 0x38
 8002636:	4013      	ands	r3, r2
 8002638:	2b18      	cmp	r3, #24
 800263a:	d10a      	bne.n	8002652 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	2202      	movs	r2, #2
 8002642:	4013      	ands	r3, r2
 8002644:	d03c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2f4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d138      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e216      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d019      	beq.n	800268e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800265a:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 800265c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800265e:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002660:	2101      	movs	r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fc1d 	bl	8000ea4 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fc18 	bl	8000ea4 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1fe      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	2202      	movs	r2, #2
 8002688:	4013      	ands	r3, r2
 800268a:	d0f1      	beq.n	8002670 <HAL_RCC_OscConfig+0x2a4>
 800268c:	e018      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002690:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 8002694:	2101      	movs	r1, #1
 8002696:	438a      	bics	r2, r1
 8002698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fc03 	bl	8000ea4 <HAL_GetTick>
 800269e:	0003      	movs	r3, r0
 80026a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fbfe 	bl	8000ea4 <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1e4      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	2202      	movs	r2, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d1f1      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d100      	bne.n	80026cc <HAL_RCC_OscConfig+0x300>
 80026ca:	e0c7      	b.n	800285c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2238      	movs	r2, #56	; 0x38
 80026da:	4013      	ands	r3, r2
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d11f      	bne.n	8002720 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x330>)
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2202      	movs	r2, #2
 80026e6:	4013      	ands	r3, r2
 80026e8:	d100      	bne.n	80026ec <HAL_RCC_OscConfig+0x320>
 80026ea:	e0b7      	b.n	800285c <HAL_RCC_OscConfig+0x490>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d000      	beq.n	80026f6 <HAL_RCC_OscConfig+0x32a>
 80026f4:	e0b2      	b.n	800285c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1c2      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40021000 	.word	0x40021000
 8002700:	fffeffff 	.word	0xfffeffff
 8002704:	fffbffff 	.word	0xfffbffff
 8002708:	ffff80ff 	.word	0xffff80ff
 800270c:	ffffc7ff 	.word	0xffffc7ff
 8002710:	00f42400 	.word	0x00f42400
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004
 800271c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002720:	4bb5      	ldr	r3, [pc, #724]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	055b      	lsls	r3, r3, #21
 8002728:	4013      	ands	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_RCC_OscConfig+0x364>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x366>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4bb0      	ldr	r3, [pc, #704]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273a:	4baf      	ldr	r3, [pc, #700]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	430a      	orrs	r2, r1
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
 8002744:	4bac      	ldr	r3, [pc, #688]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4013      	ands	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002752:	231f      	movs	r3, #31
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275a:	4ba8      	ldr	r3, [pc, #672]	; (80029fc <HAL_RCC_OscConfig+0x630>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4013      	ands	r3, r2
 8002764:	d11a      	bne.n	800279c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002766:	4ba5      	ldr	r3, [pc, #660]	; (80029fc <HAL_RCC_OscConfig+0x630>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4ba4      	ldr	r3, [pc, #656]	; (80029fc <HAL_RCC_OscConfig+0x630>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0049      	lsls	r1, r1, #1
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002774:	f7fe fb96 	bl	8000ea4 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fb91 	bl	8000ea4 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e177      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002790:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <HAL_RCC_OscConfig+0x630>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3e6>
 80027a4:	4b94      	ldr	r3, [pc, #592]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027a8:	4b93      	ldr	r3, [pc, #588]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80027b0:	e01c      	b.n	80027ec <HAL_RCC_OscConfig+0x420>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x408>
 80027ba:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027be:	4b8e      	ldr	r3, [pc, #568]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027c0:	2104      	movs	r1, #4
 80027c2:	430a      	orrs	r2, r1
 80027c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c6:	4b8c      	ldr	r3, [pc, #560]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ca:	4b8b      	ldr	r3, [pc, #556]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	430a      	orrs	r2, r1
 80027d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80027d2:	e00b      	b.n	80027ec <HAL_RCC_OscConfig+0x420>
 80027d4:	4b88      	ldr	r3, [pc, #544]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027d8:	4b87      	ldr	r3, [pc, #540]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	65da      	str	r2, [r3, #92]	; 0x5c
 80027e0:	4b85      	ldr	r3, [pc, #532]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e4:	4b84      	ldr	r3, [pc, #528]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80027e6:	2104      	movs	r1, #4
 80027e8:	438a      	bics	r2, r1
 80027ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d014      	beq.n	800281e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fb56 	bl	8000ea4 <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fb51 	bl	8000ea4 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a7d      	ldr	r2, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x634>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e136      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002812:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x432>
 800281c:	e013      	b.n	8002846 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fb41 	bl	8000ea4 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002826:	e009      	b.n	800283c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fb3c 	bl	8000ea4 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	4a73      	ldr	r2, [pc, #460]	; (8002a00 <HAL_RCC_OscConfig+0x634>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e121      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800283c:	4b6e      	ldr	r3, [pc, #440]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002846:	231f      	movs	r3, #31
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002850:	4b69      	ldr	r3, [pc, #420]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002854:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002856:	496b      	ldr	r1, [pc, #428]	; (8002a04 <HAL_RCC_OscConfig+0x638>)
 8002858:	400a      	ands	r2, r1
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2220      	movs	r2, #32
 8002862:	4013      	ands	r3, r2
 8002864:	d039      	beq.n	80028da <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800286e:	4b62      	ldr	r3, [pc, #392]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	03c9      	lsls	r1, r1, #15
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe fb12 	bl	8000ea4 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002886:	f7fe fb0d 	bl	8000ea4 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0f3      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x4ba>
 80028a4:	e019      	b.n	80028da <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a6:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80028ac:	4956      	ldr	r1, [pc, #344]	; (8002a08 <HAL_RCC_OscConfig+0x63c>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe faf7 	bl	8000ea4 <HAL_GetTick>
 80028b6:	0003      	movs	r3, r0
 80028b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028bc:	f7fe faf2 	bl	8000ea4 <HAL_GetTick>
 80028c0:	0002      	movs	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0d8      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028ce:	4b4a      	ldr	r3, [pc, #296]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d100      	bne.n	80028e4 <HAL_RCC_OscConfig+0x518>
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e4:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2238      	movs	r2, #56	; 0x38
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	d100      	bne.n	80028f2 <HAL_RCC_OscConfig+0x526>
 80028f0:	e07b      	b.n	80029ea <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d156      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002900:	4942      	ldr	r1, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x640>)
 8002902:	400a      	ands	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7fe facd 	bl	8000ea4 <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fac8 	bl	8000ea4 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0ae      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	049b      	lsls	r3, r3, #18
 800292a:	4013      	ands	r3, r2
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292e:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a37      	ldr	r2, [pc, #220]	; (8002a10 <HAL_RCC_OscConfig+0x644>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	431a      	orrs	r2, r3
 800295c:	4b26      	ldr	r3, [pc, #152]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0449      	lsls	r1, r1, #17
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	0549      	lsls	r1, r1, #21
 800297a:	430a      	orrs	r2, r1
 800297c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fa91 	bl	8000ea4 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe fa8c 	bl	8000ea4 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e072      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	049b      	lsls	r3, r3, #18
 80029a2:	4013      	ands	r3, r2
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x5bc>
 80029a6:	e06a      	b.n	8002a7e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80029ae:	4917      	ldr	r1, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x640>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa76 	bl	8000ea4 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fa71 	bl	8000ea4 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e057      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	049b      	lsls	r3, r3, #18
 80029d8:	4013      	ands	r3, r2
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_OscConfig+0x62c>)
 80029e2:	490c      	ldr	r1, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x648>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	e049      	b.n	8002a7e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d112      	bne.n	8002a18 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e044      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	00001388 	.word	0x00001388
 8002a04:	efffffff 	.word	0xefffffff
 8002a08:	ffbfffff 	.word	0xffbfffff
 8002a0c:	feffffff 	.word	0xfeffffff
 8002a10:	11c1808c 	.word	0x11c1808c
 8002a14:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x6bc>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2203      	movs	r2, #3
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d126      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2270      	movs	r2, #112	; 0x70
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d11f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	23fe      	movs	r3, #254	; 0xfe
 8002a3e:	01db      	lsls	r3, r3, #7
 8002a40:	401a      	ands	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d116      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	23f8      	movs	r3, #248	; 0xf8
 8002a50:	039b      	lsls	r3, r3, #14
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10e      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	23e0      	movs	r3, #224	; 0xe0
 8002a60:	051b      	lsls	r3, r3, #20
 8002a62:	401a      	ands	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	0f5b      	lsrs	r3, r3, #29
 8002a70:	075a      	lsls	r2, r3, #29
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b008      	add	sp, #32
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0e9      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d91e      	bls.n	8002aec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe f9f0 	bl	8000ea4 <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ac8:	e009      	b.n	8002ade <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aca:	f7fe f9eb 	bl	8000ea4 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4a6a      	ldr	r2, [pc, #424]	; (8002c80 <HAL_RCC_ClockConfig+0x1f4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0ca      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1ee      	bne.n	8002aca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2202      	movs	r2, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	d015      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2204      	movs	r2, #4
 8002afc:	4013      	ands	r3, r2
 8002afe:	d006      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b00:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	21e0      	movs	r1, #224	; 0xe0
 8002b08:	01c9      	lsls	r1, r1, #7
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4a5d      	ldr	r2, [pc, #372]	; (8002c88 <HAL_RCC_ClockConfig+0x1fc>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d057      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d12b      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e097      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	049b      	lsls	r3, r3, #18
 8002b54:	4013      	ands	r3, r2
 8002b56:	d11f      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e08b      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b64:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d113      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e07f      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7c:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d108      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e074      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2202      	movs	r2, #2
 8002b90:	4013      	ands	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e06d      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	4393      	bics	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe f97a 	bl	8000ea4 <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb4:	e009      	b.n	8002bca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb6:	f7fe f975 	bl	8000ea4 <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	4a2f      	ldr	r2, [pc, #188]	; (8002c80 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e054      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2238      	movs	r2, #56	; 0x38
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1ec      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2207      	movs	r2, #7
 8002be2:	4013      	ands	r3, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d21e      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe f952 	bl	8000ea4 <HAL_GetTick>
 8002c00:	0003      	movs	r3, r0
 8002c02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c04:	e009      	b.n	8002c1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c06:	f7fe f94d 	bl	8000ea4 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <HAL_RCC_ClockConfig+0x1f4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e02c      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2207      	movs	r2, #7
 8002c20:	4013      	ands	r3, r2
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <HAL_RCC_ClockConfig+0x200>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c46:	f000 f829 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c4a:	0001      	movs	r1, r0
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	220f      	movs	r2, #15
 8002c54:	401a      	ands	r2, r3
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_ClockConfig+0x204>)
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	58d3      	ldr	r3, [r2, r3]
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	4013      	ands	r3, r2
 8002c60:	000a      	movs	r2, r1
 8002c62:	40da      	lsrs	r2, r3
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x208>)
 8002c66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_ClockConfig+0x20c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fe f8bd 	bl	8000dec <HAL_InitTick>
 8002c72:	0003      	movs	r3, r0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	00001388 	.word	0x00001388
 8002c84:	40021000 	.word	0x40021000
 8002c88:	fffff0ff 	.word	0xfffff0ff
 8002c8c:	ffff8fff 	.word	0xffff8fff
 8002c90:	08006224 	.word	0x08006224
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca2:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2238      	movs	r2, #56	; 0x38
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d10f      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0adb      	lsrs	r3, r3, #11
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	0013      	movs	r3, r2
 8002cbc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cbe:	6839      	ldr	r1, [r7, #0]
 8002cc0:	4835      	ldr	r0, [pc, #212]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cc2:	f7fd fa29 	bl	8000118 <__udivsi3>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	e05d      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ccc:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2238      	movs	r2, #56	; 0x38
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d102      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	e054      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2238      	movs	r2, #56	; 0x38
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d138      	bne.n	8002d5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf4:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	3301      	adds	r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	4824      	ldr	r0, [pc, #144]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002d0c:	f7fd fa04 	bl	8000118 <__udivsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	0019      	movs	r1, r3
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	227f      	movs	r2, #127	; 0x7f
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	434b      	muls	r3, r1
 8002d20:	617b      	str	r3, [r7, #20]
        break;
 8002d22:	e00d      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	481c      	ldr	r0, [pc, #112]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d28:	f7fd f9f6 	bl	8000118 <__udivsi3>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	0019      	movs	r1, r3
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	227f      	movs	r2, #127	; 0x7f
 8002d38:	4013      	ands	r3, r2
 8002d3a:	434b      	muls	r3, r1
 8002d3c:	617b      	str	r3, [r7, #20]
        break;
 8002d3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0f5b      	lsrs	r3, r3, #29
 8002d46:	2207      	movs	r2, #7
 8002d48:	4013      	ands	r3, r2
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	6978      	ldr	r0, [r7, #20]
 8002d52:	f7fd f9e1 	bl	8000118 <__udivsi3>
 8002d56:	0003      	movs	r3, r0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2238      	movs	r2, #56	; 0x38
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d103      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2238      	movs	r2, #56	; 0x38
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b18      	cmp	r3, #24
 8002d7a:	d103      	bne.n	8002d84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d7c:	23fa      	movs	r3, #250	; 0xfa
 8002d7e:	01db      	lsls	r3, r3, #7
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	e001      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d88:	693b      	ldr	r3, [r7, #16]
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	40021000 	.word	0x40021000
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002db8:	f7ff fff2 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dbc:	0004      	movs	r4, r0
 8002dbe:	f7ff faf9 	bl	80023b4 <LL_RCC_GetAPB1Prescaler>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	0b1a      	lsrs	r2, r3, #12
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc8:	0092      	lsls	r2, r2, #2
 8002dca:	58d3      	ldr	r3, [r2, r3]
 8002dcc:	221f      	movs	r2, #31
 8002dce:	4013      	ands	r3, r2
 8002dd0:	40dc      	lsrs	r4, r3
 8002dd2:	0023      	movs	r3, r4
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	08006264 	.word	0x08006264

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002de8:	2313      	movs	r3, #19
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df0:	2312      	movs	r3, #18
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	4013      	ands	r3, r2
 8002e02:	d100      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e04:	e0ad      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2011      	movs	r0, #17
 8002e08:	183b      	adds	r3, r7, r0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	055b      	lsls	r3, r3, #21
 8002e16:	4013      	ands	r3, r2
 8002e18:	d110      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b44      	ldr	r3, [pc, #272]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	0549      	lsls	r1, r1, #21
 8002e24:	430a      	orrs	r2, r1
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e28:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	055b      	lsls	r3, r3, #21
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e36:	183b      	adds	r3, r7, r0
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0049      	lsls	r1, r1, #1
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e4a:	f7fe f82b 	bl	8000ea4 <HAL_GetTick>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e52:	e00b      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7fe f826 	bl	8000ea4 <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d904      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e62:	2313      	movs	r3, #19
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2203      	movs	r2, #3
 8002e68:	701a      	strb	r2, [r3, #0]
        break;
 8002e6a:	e005      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e6c:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d0ed      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e78:	2313      	movs	r3, #19
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d15e      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e86:	23c0      	movs	r3, #192	; 0xc0
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d019      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d014      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	0249      	lsls	r1, r1, #9
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ebc:	491e      	ldr	r1, [pc, #120]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d016      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fd ffe8 	bl	8000ea4 <HAL_GetTick>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fd ffe3 	bl	8000ea4 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d904      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002eea:	2313      	movs	r3, #19
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2203      	movs	r2, #3
 8002ef0:	701a      	strb	r2, [r3, #0]
            break;
 8002ef2:	e004      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	d0ed      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002efe:	2313      	movs	r3, #19
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f1c:	e016      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f1e:	2312      	movs	r3, #18
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2213      	movs	r2, #19
 8002f24:	18ba      	adds	r2, r7, r2
 8002f26:	7812      	ldrb	r2, [r2, #0]
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
 8002f34:	fffffcff 	.word	0xfffffcff
 8002f38:	fffeffff 	.word	0xfffeffff
 8002f3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	2312      	movs	r3, #18
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2213      	movs	r2, #19
 8002f46:	18ba      	adds	r2, r7, r2
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4c:	2311      	movs	r3, #17
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4bb6      	ldr	r3, [pc, #728]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f5a:	4bb5      	ldr	r3, [pc, #724]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f5c:	49b5      	ldr	r1, [pc, #724]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f6c:	4bb0      	ldr	r3, [pc, #704]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	2203      	movs	r2, #3
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4bad      	ldr	r3, [pc, #692]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2202      	movs	r2, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f8a:	4ba9      	ldr	r3, [pc, #676]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4393      	bics	r3, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	4ba5      	ldr	r3, [pc, #660]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fa8:	4ba1      	ldr	r3, [pc, #644]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2230      	movs	r2, #48	; 0x30
 8002fae:	4393      	bics	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b9e      	ldr	r3, [pc, #632]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc6:	4b9a      	ldr	r3, [pc, #616]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	4a9b      	ldr	r2, [pc, #620]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	4b96      	ldr	r3, [pc, #600]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	015b      	lsls	r3, r3, #5
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002fe6:	4b92      	ldr	r3, [pc, #584]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	4a94      	ldr	r2, [pc, #592]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4013      	ands	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003006:	4b8a      	ldr	r3, [pc, #552]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	4a8d      	ldr	r2, [pc, #564]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003014:	4b86      	ldr	r3, [pc, #536]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003016:	430a      	orrs	r2, r1
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4013      	ands	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003026:	4b82      	ldr	r3, [pc, #520]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	4a86      	ldr	r2, [pc, #536]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003036:	430a      	orrs	r2, r1
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2220      	movs	r2, #32
 8003040:	4013      	ands	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003044:	4b7a      	ldr	r3, [pc, #488]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	4a7f      	ldr	r2, [pc, #508]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	4b77      	ldr	r3, [pc, #476]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003054:	430a      	orrs	r2, r1
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003062:	4b73      	ldr	r3, [pc, #460]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	4a79      	ldr	r2, [pc, #484]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003072:	430a      	orrs	r2, r1
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	01db      	lsls	r3, r3, #7
 800307e:	4013      	ands	r3, r2
 8003080:	d015      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003082:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	0899      	lsrs	r1, r3, #2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003090:	430a      	orrs	r2, r1
 8003092:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	05db      	lsls	r3, r3, #23
 800309c:	429a      	cmp	r2, r3
 800309e:	d106      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030a0:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	4b62      	ldr	r3, [pc, #392]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0249      	lsls	r1, r1, #9
 80030aa:	430a      	orrs	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	031b      	lsls	r3, r3, #12
 80030b6:	4013      	ands	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	4393      	bics	r3, r2
 80030c2:	0019      	movs	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ca:	430a      	orrs	r2, r1
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	039b      	lsls	r3, r3, #14
 80030d6:	4013      	ands	r3, r2
 80030d8:	d016      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030da:	4b55      	ldr	r3, [pc, #340]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	4a5c      	ldr	r2, [pc, #368]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e8:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	03db      	lsls	r3, r3, #15
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d106      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030fa:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	0449      	lsls	r1, r1, #17
 8003104:	430a      	orrs	r2, r1
 8003106:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	03db      	lsls	r3, r3, #15
 8003110:	4013      	ands	r3, r2
 8003112:	d016      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003114:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	4a4e      	ldr	r2, [pc, #312]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003122:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003124:	430a      	orrs	r2, r1
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	045b      	lsls	r3, r3, #17
 8003130:	429a      	cmp	r2, r3
 8003132:	d106      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003134:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	0449      	lsls	r1, r1, #17
 800313e:	430a      	orrs	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d014      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800314e:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	2203      	movs	r2, #3
 8003154:	4393      	bics	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1a      	ldr	r2, [r3, #32]
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800315e:	430a      	orrs	r2, r1
 8003160:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d106      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	4b30      	ldr	r3, [pc, #192]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	0249      	lsls	r1, r1, #9
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	019b      	lsls	r3, r3, #6
 8003180:	4013      	ands	r3, r2
 8003182:	d014      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	220c      	movs	r2, #12
 800318a:	4393      	bics	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003194:	430a      	orrs	r2, r1
 8003196:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b04      	cmp	r3, #4
 800319e:	d106      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031a0:	4b23      	ldr	r3, [pc, #140]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	0249      	lsls	r1, r1, #9
 80031aa:	430a      	orrs	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	045b      	lsls	r3, r3, #17
 80031b6:	4013      	ands	r3, r2
 80031b8:	d016      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d106      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	0449      	lsls	r1, r1, #17
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	049b      	lsls	r3, r3, #18
 80031f0:	4013      	ands	r3, r2
 80031f2:	d016      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031f4:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003204:	430a      	orrs	r2, r1
 8003206:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	429a      	cmp	r2, r3
 8003212:	d106      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800321a:	2180      	movs	r1, #128	; 0x80
 800321c:	0449      	lsls	r1, r1, #17
 800321e:	430a      	orrs	r2, r1
 8003220:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003222:	2312      	movs	r3, #18
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	781b      	ldrb	r3, [r3, #0]
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b006      	add	sp, #24
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	efffffff 	.word	0xefffffff
 8003238:	fffff3ff 	.word	0xfffff3ff
 800323c:	fffffcff 	.word	0xfffffcff
 8003240:	fff3ffff 	.word	0xfff3ffff
 8003244:	ffcfffff 	.word	0xffcfffff
 8003248:	ffffcfff 	.word	0xffffcfff
 800324c:	ffff3fff 	.word	0xffff3fff
 8003250:	ffbfffff 	.word	0xffbfffff
 8003254:	feffffff 	.word	0xfeffffff

08003258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e046      	b.n	80032f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2288      	movs	r2, #136	; 0x88
 800326e:	589b      	ldr	r3, [r3, r2]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2284      	movs	r2, #132	; 0x84
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd fd00 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2288      	movs	r2, #136	; 0x88
 8003288:	2124      	movs	r1, #36	; 0x24
 800328a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 ff68 	bl	800417c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 fc0e 	bl	8003ad0 <UART_SetConfig>
 80032b4:	0003      	movs	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01c      	b.n	80032f8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	490d      	ldr	r1, [pc, #52]	; (8003300 <HAL_UART_Init+0xa8>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	212a      	movs	r1, #42	; 0x2a
 80032da:	438a      	bics	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	430a      	orrs	r2, r1
 80032ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 fff7 	bl	80042e4 <UART_CheckIdleState>
 80032f6:	0003      	movs	r3, r0
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	ffffb7ff 	.word	0xffffb7ff

08003304 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2288      	movs	r2, #136	; 0x88
 8003318:	589b      	ldr	r3, [r3, r2]
 800331a:	2b20      	cmp	r3, #32
 800331c:	d000      	beq.n	8003320 <HAL_UART_Transmit+0x1c>
 800331e:	e090      	b.n	8003442 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_UART_Transmit+0x2a>
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e088      	b.n	8003444 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	429a      	cmp	r2, r3
 800333c:	d109      	bne.n	8003352 <HAL_UART_Transmit+0x4e>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2201      	movs	r2, #1
 800334a:	4013      	ands	r3, r2
 800334c:	d001      	beq.n	8003352 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e078      	b.n	8003444 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2290      	movs	r2, #144	; 0x90
 8003356:	2100      	movs	r1, #0
 8003358:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2288      	movs	r2, #136	; 0x88
 800335e:	2121      	movs	r1, #33	; 0x21
 8003360:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003362:	f7fd fd9f 	bl	8000ea4 <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1dba      	adds	r2, r7, #6
 800336e:	2154      	movs	r1, #84	; 0x54
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1dba      	adds	r2, r7, #6
 8003378:	2156      	movs	r1, #86	; 0x56
 800337a:	8812      	ldrh	r2, [r2, #0]
 800337c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	429a      	cmp	r2, r3
 8003388:	d108      	bne.n	800339c <HAL_UART_Transmit+0x98>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e003      	b.n	80033a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033a4:	e030      	b.n	8003408 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	0013      	movs	r3, r2
 80033b0:	2200      	movs	r2, #0
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	f001 f840 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2288      	movs	r2, #136	; 0x88
 80033c0:	2120      	movs	r1, #32
 80033c2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e03d      	b.n	8003444 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	001a      	movs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	05d2      	lsls	r2, r2, #23
 80033da:	0dd2      	lsrs	r2, r2, #23
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3302      	adds	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e007      	b.n	80033f6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2256      	movs	r2, #86	; 0x56
 80033fa:	5a9b      	ldrh	r3, [r3, r2]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b299      	uxth	r1, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2256      	movs	r2, #86	; 0x56
 8003406:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2256      	movs	r2, #86	; 0x56
 800340c:	5a9b      	ldrh	r3, [r3, r2]
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1c8      	bne.n	80033a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	0013      	movs	r3, r2
 800341e:	2200      	movs	r2, #0
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	f001 f809 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2288      	movs	r2, #136	; 0x88
 800342e:	2120      	movs	r1, #32
 8003430:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e006      	b.n	8003444 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2288      	movs	r2, #136	; 0x88
 800343a:	2120      	movs	r1, #32
 800343c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b008      	add	sp, #32
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b0aa      	sub	sp, #168	; 0xa8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	22a4      	movs	r2, #164	; 0xa4
 800345c:	18b9      	adds	r1, r7, r2
 800345e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	20a0      	movs	r0, #160	; 0xa0
 8003468:	1839      	adds	r1, r7, r0
 800346a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	249c      	movs	r4, #156	; 0x9c
 8003474:	1939      	adds	r1, r7, r4
 8003476:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003478:	0011      	movs	r1, r2
 800347a:	18bb      	adds	r3, r7, r2
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4aa2      	ldr	r2, [pc, #648]	; (8003708 <HAL_UART_IRQHandler+0x2bc>)
 8003480:	4013      	ands	r3, r2
 8003482:	2298      	movs	r2, #152	; 0x98
 8003484:	18bd      	adds	r5, r7, r2
 8003486:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003488:	18bb      	adds	r3, r7, r2
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11a      	bne.n	80034c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003490:	187b      	adds	r3, r7, r1
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2220      	movs	r2, #32
 8003496:	4013      	ands	r3, r2
 8003498:	d015      	beq.n	80034c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800349a:	183b      	adds	r3, r7, r0
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2220      	movs	r2, #32
 80034a0:	4013      	ands	r3, r2
 80034a2:	d105      	bne.n	80034b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	055b      	lsls	r3, r3, #21
 80034ac:	4013      	ands	r3, r2
 80034ae:	d00a      	beq.n	80034c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d100      	bne.n	80034ba <HAL_UART_IRQHandler+0x6e>
 80034b8:	e2dc      	b.n	8003a74 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	0010      	movs	r0, r2
 80034c2:	4798      	blx	r3
      }
      return;
 80034c4:	e2d6      	b.n	8003a74 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034c6:	2398      	movs	r3, #152	; 0x98
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d100      	bne.n	80034d2 <HAL_UART_IRQHandler+0x86>
 80034d0:	e122      	b.n	8003718 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034d2:	239c      	movs	r3, #156	; 0x9c
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a8c      	ldr	r2, [pc, #560]	; (800370c <HAL_UART_IRQHandler+0x2c0>)
 80034da:	4013      	ands	r3, r2
 80034dc:	d106      	bne.n	80034ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a8a      	ldr	r2, [pc, #552]	; (8003710 <HAL_UART_IRQHandler+0x2c4>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	d100      	bne.n	80034ec <HAL_UART_IRQHandler+0xa0>
 80034ea:	e115      	b.n	8003718 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034ec:	23a4      	movs	r3, #164	; 0xa4
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d012      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
 80034f8:	23a0      	movs	r3, #160	; 0xa0
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4013      	ands	r3, r2
 8003504:	d00b      	beq.n	800351e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2290      	movs	r2, #144	; 0x90
 8003512:	589b      	ldr	r3, [r3, r2]
 8003514:	2201      	movs	r2, #1
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2190      	movs	r1, #144	; 0x90
 800351c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800351e:	23a4      	movs	r3, #164	; 0xa4
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d011      	beq.n	800354e <HAL_UART_IRQHandler+0x102>
 800352a:	239c      	movs	r3, #156	; 0x9c
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2202      	movs	r2, #2
 800353c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2290      	movs	r2, #144	; 0x90
 8003542:	589b      	ldr	r3, [r3, r2]
 8003544:	2204      	movs	r2, #4
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2190      	movs	r1, #144	; 0x90
 800354c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800354e:	23a4      	movs	r3, #164	; 0xa4
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2204      	movs	r2, #4
 8003556:	4013      	ands	r3, r2
 8003558:	d011      	beq.n	800357e <HAL_UART_IRQHandler+0x132>
 800355a:	239c      	movs	r3, #156	; 0x9c
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	d00b      	beq.n	800357e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2204      	movs	r2, #4
 800356c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2290      	movs	r2, #144	; 0x90
 8003572:	589b      	ldr	r3, [r3, r2]
 8003574:	2202      	movs	r2, #2
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2190      	movs	r1, #144	; 0x90
 800357c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800357e:	23a4      	movs	r3, #164	; 0xa4
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	d017      	beq.n	80035ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800358a:	23a0      	movs	r3, #160	; 0xa0
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2220      	movs	r2, #32
 8003592:	4013      	ands	r3, r2
 8003594:	d105      	bne.n	80035a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003596:	239c      	movs	r3, #156	; 0x9c
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a5b      	ldr	r2, [pc, #364]	; (800370c <HAL_UART_IRQHandler+0x2c0>)
 800359e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035a0:	d00b      	beq.n	80035ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2208      	movs	r2, #8
 80035a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2290      	movs	r2, #144	; 0x90
 80035ae:	589b      	ldr	r3, [r3, r2]
 80035b0:	2208      	movs	r2, #8
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2190      	movs	r1, #144	; 0x90
 80035b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035ba:	23a4      	movs	r3, #164	; 0xa4
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_UART_IRQHandler+0x1a4>
 80035c8:	23a0      	movs	r3, #160	; 0xa0
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	04db      	lsls	r3, r3, #19
 80035d2:	4013      	ands	r3, r2
 80035d4:	d00c      	beq.n	80035f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2290      	movs	r2, #144	; 0x90
 80035e4:	589b      	ldr	r3, [r3, r2]
 80035e6:	2220      	movs	r2, #32
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2190      	movs	r1, #144	; 0x90
 80035ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2290      	movs	r2, #144	; 0x90
 80035f4:	589b      	ldr	r3, [r3, r2]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d100      	bne.n	80035fc <HAL_UART_IRQHandler+0x1b0>
 80035fa:	e23d      	b.n	8003a78 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035fc:	23a4      	movs	r3, #164	; 0xa4
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2220      	movs	r2, #32
 8003604:	4013      	ands	r3, r2
 8003606:	d015      	beq.n	8003634 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003608:	23a0      	movs	r3, #160	; 0xa0
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2220      	movs	r2, #32
 8003610:	4013      	ands	r3, r2
 8003612:	d106      	bne.n	8003622 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003614:	239c      	movs	r3, #156	; 0x9c
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	055b      	lsls	r3, r3, #21
 800361e:	4013      	ands	r3, r2
 8003620:	d008      	beq.n	8003634 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	0010      	movs	r0, r2
 8003632:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2290      	movs	r2, #144	; 0x90
 8003638:	589b      	ldr	r3, [r3, r2]
 800363a:	2194      	movs	r1, #148	; 0x94
 800363c:	187a      	adds	r2, r7, r1
 800363e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	4013      	ands	r3, r2
 800364a:	2b40      	cmp	r3, #64	; 0x40
 800364c:	d004      	beq.n	8003658 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800364e:	187b      	adds	r3, r7, r1
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2228      	movs	r2, #40	; 0x28
 8003654:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003656:	d04c      	beq.n	80036f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 ff5c 	bl	8004518 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	4013      	ands	r3, r2
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d13c      	bne.n	80036e8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366e:	f3ef 8310 	mrs	r3, PRIMASK
 8003672:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	2090      	movs	r0, #144	; 0x90
 8003678:	183a      	adds	r2, r7, r0
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	2301      	movs	r3, #1
 800367e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2140      	movs	r1, #64	; 0x40
 8003694:	438a      	bics	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	183b      	adds	r3, r7, r0
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	589b      	ldr	r3, [r3, r2]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d016      	beq.n	80036de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	589b      	ldr	r3, [r3, r2]
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_UART_IRQHandler+0x2c8>)
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	589b      	ldr	r3, [r3, r2]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fd fd71 	bl	80011a8 <HAL_DMA_Abort_IT>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d01c      	beq.n	8003704 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	5852      	ldr	r2, [r2, r1]
 80036d8:	0010      	movs	r0, r2
 80036da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e012      	b.n	8003704 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f9e1 	bl	8003aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e6:	e00d      	b.n	8003704 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f000 f9dc 	bl	8003aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	e008      	b.n	8003704 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 f9d7 	bl	8003aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2290      	movs	r2, #144	; 0x90
 80036fe:	2100      	movs	r1, #0
 8003700:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003702:	e1b9      	b.n	8003a78 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	46c0      	nop			; (mov r8, r8)
    return;
 8003706:	e1b7      	b.n	8003a78 <HAL_UART_IRQHandler+0x62c>
 8003708:	0000080f 	.word	0x0000080f
 800370c:	10000001 	.word	0x10000001
 8003710:	04000120 	.word	0x04000120
 8003714:	080045e5 	.word	0x080045e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d000      	beq.n	8003722 <HAL_UART_IRQHandler+0x2d6>
 8003720:	e13e      	b.n	80039a0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003722:	23a4      	movs	r3, #164	; 0xa4
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	4013      	ands	r3, r2
 800372c:	d100      	bne.n	8003730 <HAL_UART_IRQHandler+0x2e4>
 800372e:	e137      	b.n	80039a0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003730:	23a0      	movs	r3, #160	; 0xa0
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2210      	movs	r2, #16
 8003738:	4013      	ands	r3, r2
 800373a:	d100      	bne.n	800373e <HAL_UART_IRQHandler+0x2f2>
 800373c:	e130      	b.n	80039a0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2240      	movs	r2, #64	; 0x40
 800374e:	4013      	ands	r3, r2
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d000      	beq.n	8003756 <HAL_UART_IRQHandler+0x30a>
 8003754:	e0a4      	b.n	80038a0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	589b      	ldr	r3, [r3, r2]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	217e      	movs	r1, #126	; 0x7e
 8003762:	187b      	adds	r3, r7, r1
 8003764:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003766:	187b      	adds	r3, r7, r1
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d100      	bne.n	8003770 <HAL_UART_IRQHandler+0x324>
 800376e:	e185      	b.n	8003a7c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	225c      	movs	r2, #92	; 0x5c
 8003774:	5a9b      	ldrh	r3, [r3, r2]
 8003776:	187a      	adds	r2, r7, r1
 8003778:	8812      	ldrh	r2, [r2, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d300      	bcc.n	8003780 <HAL_UART_IRQHandler+0x334>
 800377e:	e17d      	b.n	8003a7c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	187a      	adds	r2, r7, r1
 8003784:	215e      	movs	r1, #94	; 0x5e
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	589b      	ldr	r3, [r3, r2]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2220      	movs	r2, #32
 8003796:	4013      	ands	r3, r2
 8003798:	d170      	bne.n	800387c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80037a4:	2301      	movs	r3, #1
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	49b4      	ldr	r1, [pc, #720]	; (8003a8c <HAL_UART_IRQHandler+0x640>)
 80037bc:	400a      	ands	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037cc:	f3ef 8310 	mrs	r3, PRIMASK
 80037d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80037d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	677b      	str	r3, [r7, #116]	; 0x74
 80037d6:	2301      	movs	r3, #1
 80037d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037dc:	f383 8810 	msr	PRIMASK, r3
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	438a      	bics	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003804:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	673b      	str	r3, [r7, #112]	; 0x70
 8003808:	2301      	movs	r3, #1
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	438a      	bics	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003826:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382a:	f383 8810 	msr	PRIMASK, r3
}
 800382e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	228c      	movs	r2, #140	; 0x8c
 8003834:	2120      	movs	r1, #32
 8003836:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383e:	f3ef 8310 	mrs	r3, PRIMASK
 8003842:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003844:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003848:	2301      	movs	r3, #1
 800384a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800384e:	f383 8810 	msr	PRIMASK, r3
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2110      	movs	r1, #16
 8003860:	438a      	bics	r2, r1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003866:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	589b      	ldr	r3, [r3, r2]
 8003876:	0018      	movs	r0, r3
 8003878:	f7fd fc36 	bl	80010e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	225c      	movs	r2, #92	; 0x5c
 8003886:	5a9a      	ldrh	r2, [r3, r2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	215e      	movs	r1, #94	; 0x5e
 800388c:	5a5b      	ldrh	r3, [r3, r1]
 800388e:	b29b      	uxth	r3, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0011      	movs	r1, r2
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f90d 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800389e:	e0ed      	b.n	8003a7c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	225c      	movs	r2, #92	; 0x5c
 80038a4:	5a99      	ldrh	r1, [r3, r2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	225e      	movs	r2, #94	; 0x5e
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	208e      	movs	r0, #142	; 0x8e
 80038b0:	183b      	adds	r3, r7, r0
 80038b2:	1a8a      	subs	r2, r1, r2
 80038b4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	225e      	movs	r2, #94	; 0x5e
 80038ba:	5a9b      	ldrh	r3, [r3, r2]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d100      	bne.n	80038c4 <HAL_UART_IRQHandler+0x478>
 80038c2:	e0dd      	b.n	8003a80 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80038c4:	183b      	adds	r3, r7, r0
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d100      	bne.n	80038ce <HAL_UART_IRQHandler+0x482>
 80038cc:	e0d8      	b.n	8003a80 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ce:	f3ef 8310 	mrs	r3, PRIMASK
 80038d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80038d4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038d6:	2488      	movs	r4, #136	; 0x88
 80038d8:	193a      	adds	r2, r7, r4
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4967      	ldr	r1, [pc, #412]	; (8003a90 <HAL_UART_IRQHandler+0x644>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003906:	f3ef 8310 	mrs	r3, PRIMASK
 800390a:	61bb      	str	r3, [r7, #24]
  return(result);
 800390c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800390e:	2484      	movs	r4, #132	; 0x84
 8003910:	193a      	adds	r2, r7, r4
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	2301      	movs	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f383 8810 	msr	PRIMASK, r3
}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	495a      	ldr	r1, [pc, #360]	; (8003a94 <HAL_UART_IRQHandler+0x648>)
 800392c:	400a      	ands	r2, r1
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	193b      	adds	r3, r7, r4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	228c      	movs	r2, #140	; 0x8c
 8003942:	2120      	movs	r1, #32
 8003944:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003952:	f3ef 8310 	mrs	r3, PRIMASK
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395a:	2480      	movs	r4, #128	; 0x80
 800395c:	193a      	adds	r2, r7, r4
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	2301      	movs	r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2110      	movs	r1, #16
 8003978:	438a      	bics	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	193b      	adds	r3, r7, r4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003990:	183b      	adds	r3, r7, r0
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f88d 	bl	8003ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800399e:	e06f      	b.n	8003a80 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039a0:	23a4      	movs	r3, #164	; 0xa4
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	035b      	lsls	r3, r3, #13
 80039aa:	4013      	ands	r3, r2
 80039ac:	d010      	beq.n	80039d0 <HAL_UART_IRQHandler+0x584>
 80039ae:	239c      	movs	r3, #156	; 0x9c
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	03db      	lsls	r3, r3, #15
 80039b8:	4013      	ands	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	0352      	lsls	r2, r2, #13
 80039c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 fe4e 	bl	800466a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039ce:	e05a      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80039d0:	23a4      	movs	r3, #164	; 0xa4
 80039d2:	18fb      	adds	r3, r7, r3
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4013      	ands	r3, r2
 80039da:	d016      	beq.n	8003a0a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80039dc:	23a0      	movs	r3, #160	; 0xa0
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	4013      	ands	r3, r2
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80039e8:	239c      	movs	r3, #156	; 0x9c
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	4013      	ands	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d042      	beq.n	8003a84 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	0010      	movs	r0, r2
 8003a06:	4798      	blx	r3
    }
    return;
 8003a08:	e03c      	b.n	8003a84 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a0a:	23a4      	movs	r3, #164	; 0xa4
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	4013      	ands	r3, r2
 8003a14:	d00a      	beq.n	8003a2c <HAL_UART_IRQHandler+0x5e0>
 8003a16:	23a0      	movs	r3, #160	; 0xa0
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2240      	movs	r2, #64	; 0x40
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 fdf4 	bl	8004612 <UART_EndTransmit_IT>
    return;
 8003a2a:	e02c      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a2c:	23a4      	movs	r3, #164	; 0xa4
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <HAL_UART_IRQHandler+0x606>
 8003a3a:	23a0      	movs	r3, #160	; 0xa0
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	05db      	lsls	r3, r3, #23
 8003a44:	4013      	ands	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fe1d 	bl	800468a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a50:	e019      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a52:	23a4      	movs	r3, #164	; 0xa4
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	045b      	lsls	r3, r3, #17
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d012      	beq.n	8003a86 <HAL_UART_IRQHandler+0x63a>
 8003a60:	23a0      	movs	r3, #160	; 0xa0
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da0d      	bge.n	8003a86 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fe04 	bl	800467a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a72:	e008      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	e006      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
    return;
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	e004      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	e002      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
      return;
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	e000      	b.n	8003a86 <HAL_UART_IRQHandler+0x63a>
    return;
 8003a84:	46c0      	nop			; (mov r8, r8)
  }
}
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b02a      	add	sp, #168	; 0xa8
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	fffffeff 	.word	0xfffffeff
 8003a90:	fffffedf 	.word	0xfffffedf
 8003a94:	effffffe 	.word	0xeffffffe

08003a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	000a      	movs	r2, r1
 8003ac2:	1cbb      	adds	r3, r7, #2
 8003ac4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b5b0      	push	{r4, r5, r7, lr}
 8003ad2:	b090      	sub	sp, #64	; 0x40
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad8:	231a      	movs	r3, #26
 8003ada:	2220      	movs	r2, #32
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4ac1      	ldr	r2, [pc, #772]	; (8003e08 <UART_SetConfig+0x338>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4abc      	ldr	r2, [pc, #752]	; (8003e0c <UART_SetConfig+0x33c>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	68d9      	ldr	r1, [r3, #12]
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	0003      	movs	r3, r0
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4ab6      	ldr	r2, [pc, #728]	; (8003e10 <UART_SetConfig+0x340>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <UART_SetConfig+0x80>
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4ab4      	ldr	r2, [pc, #720]	; (8003e14 <UART_SetConfig+0x344>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4ab0      	ldr	r2, [pc, #704]	; (8003e18 <UART_SetConfig+0x348>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	220f      	movs	r2, #15
 8003b6e:	4393      	bics	r3, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4aa5      	ldr	r2, [pc, #660]	; (8003e1c <UART_SetConfig+0x34c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d131      	bne.n	8003bee <UART_SetConfig+0x11e>
 8003b8a:	4ba5      	ldr	r3, [pc, #660]	; (8003e20 <UART_SetConfig+0x350>)
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d01d      	beq.n	8003bd2 <UART_SetConfig+0x102>
 8003b96:	d823      	bhi.n	8003be0 <UART_SetConfig+0x110>
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d00c      	beq.n	8003bb6 <UART_SetConfig+0xe6>
 8003b9c:	d820      	bhi.n	8003be0 <UART_SetConfig+0x110>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <UART_SetConfig+0xd8>
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d00e      	beq.n	8003bc4 <UART_SetConfig+0xf4>
 8003ba6:	e01b      	b.n	8003be0 <UART_SetConfig+0x110>
 8003ba8:	231b      	movs	r3, #27
 8003baa:	2220      	movs	r2, #32
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e154      	b.n	8003e60 <UART_SetConfig+0x390>
 8003bb6:	231b      	movs	r3, #27
 8003bb8:	2220      	movs	r2, #32
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e14d      	b.n	8003e60 <UART_SetConfig+0x390>
 8003bc4:	231b      	movs	r3, #27
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e146      	b.n	8003e60 <UART_SetConfig+0x390>
 8003bd2:	231b      	movs	r3, #27
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2208      	movs	r2, #8
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e13f      	b.n	8003e60 <UART_SetConfig+0x390>
 8003be0:	231b      	movs	r3, #27
 8003be2:	2220      	movs	r2, #32
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	19db      	adds	r3, r3, r7
 8003be8:	2210      	movs	r2, #16
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e138      	b.n	8003e60 <UART_SetConfig+0x390>
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a8c      	ldr	r2, [pc, #560]	; (8003e24 <UART_SetConfig+0x354>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d131      	bne.n	8003c5c <UART_SetConfig+0x18c>
 8003bf8:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <UART_SetConfig+0x350>)
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	220c      	movs	r2, #12
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d01d      	beq.n	8003c40 <UART_SetConfig+0x170>
 8003c04:	d823      	bhi.n	8003c4e <UART_SetConfig+0x17e>
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d00c      	beq.n	8003c24 <UART_SetConfig+0x154>
 8003c0a:	d820      	bhi.n	8003c4e <UART_SetConfig+0x17e>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <UART_SetConfig+0x146>
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d00e      	beq.n	8003c32 <UART_SetConfig+0x162>
 8003c14:	e01b      	b.n	8003c4e <UART_SetConfig+0x17e>
 8003c16:	231b      	movs	r3, #27
 8003c18:	2220      	movs	r2, #32
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e11d      	b.n	8003e60 <UART_SetConfig+0x390>
 8003c24:	231b      	movs	r3, #27
 8003c26:	2220      	movs	r2, #32
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	19db      	adds	r3, r3, r7
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e116      	b.n	8003e60 <UART_SetConfig+0x390>
 8003c32:	231b      	movs	r3, #27
 8003c34:	2220      	movs	r2, #32
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	19db      	adds	r3, r3, r7
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	701a      	strb	r2, [r3, #0]
 8003c3e:	e10f      	b.n	8003e60 <UART_SetConfig+0x390>
 8003c40:	231b      	movs	r3, #27
 8003c42:	2220      	movs	r2, #32
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2208      	movs	r2, #8
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e108      	b.n	8003e60 <UART_SetConfig+0x390>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	2220      	movs	r2, #32
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	2210      	movs	r2, #16
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e101      	b.n	8003e60 <UART_SetConfig+0x390>
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a71      	ldr	r2, [pc, #452]	; (8003e28 <UART_SetConfig+0x358>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d131      	bne.n	8003cca <UART_SetConfig+0x1fa>
 8003c66:	4b6e      	ldr	r3, [pc, #440]	; (8003e20 <UART_SetConfig+0x350>)
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	2230      	movs	r2, #48	; 0x30
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b30      	cmp	r3, #48	; 0x30
 8003c70:	d01d      	beq.n	8003cae <UART_SetConfig+0x1de>
 8003c72:	d823      	bhi.n	8003cbc <UART_SetConfig+0x1ec>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d00c      	beq.n	8003c92 <UART_SetConfig+0x1c2>
 8003c78:	d820      	bhi.n	8003cbc <UART_SetConfig+0x1ec>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <UART_SetConfig+0x1b4>
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d00e      	beq.n	8003ca0 <UART_SetConfig+0x1d0>
 8003c82:	e01b      	b.n	8003cbc <UART_SetConfig+0x1ec>
 8003c84:	231b      	movs	r3, #27
 8003c86:	2220      	movs	r2, #32
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e0e6      	b.n	8003e60 <UART_SetConfig+0x390>
 8003c92:	231b      	movs	r3, #27
 8003c94:	2220      	movs	r2, #32
 8003c96:	189b      	adds	r3, r3, r2
 8003c98:	19db      	adds	r3, r3, r7
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e0df      	b.n	8003e60 <UART_SetConfig+0x390>
 8003ca0:	231b      	movs	r3, #27
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	2204      	movs	r2, #4
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e0d8      	b.n	8003e60 <UART_SetConfig+0x390>
 8003cae:	231b      	movs	r3, #27
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	189b      	adds	r3, r3, r2
 8003cb4:	19db      	adds	r3, r3, r7
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e0d1      	b.n	8003e60 <UART_SetConfig+0x390>
 8003cbc:	231b      	movs	r3, #27
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	2210      	movs	r2, #16
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e0ca      	b.n	8003e60 <UART_SetConfig+0x390>
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <UART_SetConfig+0x35c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d106      	bne.n	8003ce2 <UART_SetConfig+0x212>
 8003cd4:	231b      	movs	r3, #27
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	189b      	adds	r3, r3, r2
 8003cda:	19db      	adds	r3, r3, r7
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e0be      	b.n	8003e60 <UART_SetConfig+0x390>
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <UART_SetConfig+0x360>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d106      	bne.n	8003cfa <UART_SetConfig+0x22a>
 8003cec:	231b      	movs	r3, #27
 8003cee:	2220      	movs	r2, #32
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	19db      	adds	r3, r3, r7
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e0b2      	b.n	8003e60 <UART_SetConfig+0x390>
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4d      	ldr	r2, [pc, #308]	; (8003e34 <UART_SetConfig+0x364>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d106      	bne.n	8003d12 <UART_SetConfig+0x242>
 8003d04:	231b      	movs	r3, #27
 8003d06:	2220      	movs	r2, #32
 8003d08:	189b      	adds	r3, r3, r2
 8003d0a:	19db      	adds	r3, r3, r7
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e0a6      	b.n	8003e60 <UART_SetConfig+0x390>
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3e      	ldr	r2, [pc, #248]	; (8003e10 <UART_SetConfig+0x340>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d13e      	bne.n	8003d9a <UART_SetConfig+0x2ca>
 8003d1c:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <UART_SetConfig+0x350>)
 8003d1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	22c0      	movs	r2, #192	; 0xc0
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <UART_SetConfig+0x2ae>
 8003d2e:	22c0      	movs	r2, #192	; 0xc0
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d82a      	bhi.n	8003d8c <UART_SetConfig+0x2bc>
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d011      	beq.n	8003d62 <UART_SetConfig+0x292>
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	0112      	lsls	r2, r2, #4
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d822      	bhi.n	8003d8c <UART_SetConfig+0x2bc>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <UART_SetConfig+0x284>
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	00d2      	lsls	r2, r2, #3
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <UART_SetConfig+0x2a0>
 8003d52:	e01b      	b.n	8003d8c <UART_SetConfig+0x2bc>
 8003d54:	231b      	movs	r3, #27
 8003d56:	2220      	movs	r2, #32
 8003d58:	189b      	adds	r3, r3, r2
 8003d5a:	19db      	adds	r3, r3, r7
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e07e      	b.n	8003e60 <UART_SetConfig+0x390>
 8003d62:	231b      	movs	r3, #27
 8003d64:	2220      	movs	r2, #32
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	19db      	adds	r3, r3, r7
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e077      	b.n	8003e60 <UART_SetConfig+0x390>
 8003d70:	231b      	movs	r3, #27
 8003d72:	2220      	movs	r2, #32
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2204      	movs	r2, #4
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e070      	b.n	8003e60 <UART_SetConfig+0x390>
 8003d7e:	231b      	movs	r3, #27
 8003d80:	2220      	movs	r2, #32
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	19db      	adds	r3, r3, r7
 8003d86:	2208      	movs	r2, #8
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e069      	b.n	8003e60 <UART_SetConfig+0x390>
 8003d8c:	231b      	movs	r3, #27
 8003d8e:	2220      	movs	r2, #32
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	19db      	adds	r3, r3, r7
 8003d94:	2210      	movs	r2, #16
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	e062      	b.n	8003e60 <UART_SetConfig+0x390>
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <UART_SetConfig+0x344>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d157      	bne.n	8003e54 <UART_SetConfig+0x384>
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <UART_SetConfig+0x350>)
 8003da6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003da8:	23c0      	movs	r3, #192	; 0xc0
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	22c0      	movs	r2, #192	; 0xc0
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d040      	beq.n	8003e38 <UART_SetConfig+0x368>
 8003db6:	22c0      	movs	r2, #192	; 0xc0
 8003db8:	0092      	lsls	r2, r2, #2
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d843      	bhi.n	8003e46 <UART_SetConfig+0x376>
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d011      	beq.n	8003dea <UART_SetConfig+0x31a>
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	0092      	lsls	r2, r2, #2
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d83b      	bhi.n	8003e46 <UART_SetConfig+0x376>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <UART_SetConfig+0x30c>
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	0052      	lsls	r2, r2, #1
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <UART_SetConfig+0x328>
 8003dda:	e034      	b.n	8003e46 <UART_SetConfig+0x376>
 8003ddc:	231b      	movs	r3, #27
 8003dde:	2220      	movs	r2, #32
 8003de0:	189b      	adds	r3, r3, r2
 8003de2:	19db      	adds	r3, r3, r7
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
 8003de8:	e03a      	b.n	8003e60 <UART_SetConfig+0x390>
 8003dea:	231b      	movs	r3, #27
 8003dec:	2220      	movs	r2, #32
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	2202      	movs	r2, #2
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e033      	b.n	8003e60 <UART_SetConfig+0x390>
 8003df8:	231b      	movs	r3, #27
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	19db      	adds	r3, r3, r7
 8003e00:	2204      	movs	r2, #4
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	e02c      	b.n	8003e60 <UART_SetConfig+0x390>
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	cfff69f3 	.word	0xcfff69f3
 8003e0c:	ffffcfff 	.word	0xffffcfff
 8003e10:	40008000 	.word	0x40008000
 8003e14:	40008400 	.word	0x40008400
 8003e18:	11fff4ff 	.word	0x11fff4ff
 8003e1c:	40013800 	.word	0x40013800
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40004400 	.word	0x40004400
 8003e28:	40004800 	.word	0x40004800
 8003e2c:	40004c00 	.word	0x40004c00
 8003e30:	40005000 	.word	0x40005000
 8003e34:	40013c00 	.word	0x40013c00
 8003e38:	231b      	movs	r3, #27
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	19db      	adds	r3, r3, r7
 8003e40:	2208      	movs	r2, #8
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e00c      	b.n	8003e60 <UART_SetConfig+0x390>
 8003e46:	231b      	movs	r3, #27
 8003e48:	2220      	movs	r2, #32
 8003e4a:	189b      	adds	r3, r3, r2
 8003e4c:	19db      	adds	r3, r3, r7
 8003e4e:	2210      	movs	r2, #16
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e005      	b.n	8003e60 <UART_SetConfig+0x390>
 8003e54:	231b      	movs	r3, #27
 8003e56:	2220      	movs	r2, #32
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	19db      	adds	r3, r3, r7
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4ac1      	ldr	r2, [pc, #772]	; (800416c <UART_SetConfig+0x69c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d005      	beq.n	8003e76 <UART_SetConfig+0x3a6>
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4ac0      	ldr	r2, [pc, #768]	; (8004170 <UART_SetConfig+0x6a0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d000      	beq.n	8003e76 <UART_SetConfig+0x3a6>
 8003e74:	e093      	b.n	8003f9e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e76:	231b      	movs	r3, #27
 8003e78:	2220      	movs	r2, #32
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	19db      	adds	r3, r3, r7
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d015      	beq.n	8003eb0 <UART_SetConfig+0x3e0>
 8003e84:	dc18      	bgt.n	8003eb8 <UART_SetConfig+0x3e8>
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d00d      	beq.n	8003ea6 <UART_SetConfig+0x3d6>
 8003e8a:	dc15      	bgt.n	8003eb8 <UART_SetConfig+0x3e8>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <UART_SetConfig+0x3c6>
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d005      	beq.n	8003ea0 <UART_SetConfig+0x3d0>
 8003e94:	e010      	b.n	8003eb8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e96:	f7fe ff8d 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e9e:	e014      	b.n	8003eca <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4bb4      	ldr	r3, [pc, #720]	; (8004174 <UART_SetConfig+0x6a4>)
 8003ea2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ea4:	e011      	b.n	8003eca <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe fef9 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eae:	e00c      	b.n	8003eca <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eb6:	e008      	b.n	8003eca <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ebc:	231a      	movs	r3, #26
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
        break;
 8003ec8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d100      	bne.n	8003ed2 <UART_SetConfig+0x402>
 8003ed0:	e135      	b.n	800413e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed6:	4ba8      	ldr	r3, [pc, #672]	; (8004178 <UART_SetConfig+0x6a8>)
 8003ed8:	0052      	lsls	r2, r2, #1
 8003eda:	5ad3      	ldrh	r3, [r2, r3]
 8003edc:	0019      	movs	r1, r3
 8003ede:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ee0:	f7fc f91a 	bl	8000118 <__udivsi3>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	0013      	movs	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d305      	bcc.n	8003f04 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d906      	bls.n	8003f12 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003f04:	231a      	movs	r3, #26
 8003f06:	2220      	movs	r2, #32
 8003f08:	189b      	adds	r3, r3, r2
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e044      	b.n	8003f9c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1e:	4b96      	ldr	r3, [pc, #600]	; (8004178 <UART_SetConfig+0x6a8>)
 8003f20:	0052      	lsls	r2, r2, #1
 8003f22:	5ad3      	ldrh	r3, [r2, r3]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	69b8      	ldr	r0, [r7, #24]
 8003f30:	69f9      	ldr	r1, [r7, #28]
 8003f32:	f7fc fa67 	bl	8000404 <__aeabi_uldivmod>
 8003f36:	0002      	movs	r2, r0
 8003f38:	000b      	movs	r3, r1
 8003f3a:	0e11      	lsrs	r1, r2, #24
 8003f3c:	021d      	lsls	r5, r3, #8
 8003f3e:	430d      	orrs	r5, r1
 8003f40:	0214      	lsls	r4, r2, #8
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68b8      	ldr	r0, [r7, #8]
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	1900      	adds	r0, r0, r4
 8003f54:	4169      	adcs	r1, r5
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f7fc fa4e 	bl	8000404 <__aeabi_uldivmod>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	000b      	movs	r3, r1
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	23c0      	movs	r3, #192	; 0xc0
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d309      	bcc.n	8003f8e <UART_SetConfig+0x4be>
 8003f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	035b      	lsls	r3, r3, #13
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d204      	bcs.n	8003f8e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	e006      	b.n	8003f9c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003f8e:	231a      	movs	r3, #26
 8003f90:	2220      	movs	r2, #32
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003f9a:	e0d0      	b.n	800413e <UART_SetConfig+0x66e>
 8003f9c:	e0cf      	b.n	800413e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d000      	beq.n	8003fac <UART_SetConfig+0x4dc>
 8003faa:	e070      	b.n	800408e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003fac:	231b      	movs	r3, #27
 8003fae:	2220      	movs	r2, #32
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d015      	beq.n	8003fe6 <UART_SetConfig+0x516>
 8003fba:	dc18      	bgt.n	8003fee <UART_SetConfig+0x51e>
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d00d      	beq.n	8003fdc <UART_SetConfig+0x50c>
 8003fc0:	dc15      	bgt.n	8003fee <UART_SetConfig+0x51e>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <UART_SetConfig+0x4fc>
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d005      	beq.n	8003fd6 <UART_SetConfig+0x506>
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fef2 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fd4:	e014      	b.n	8004000 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd6:	4b67      	ldr	r3, [pc, #412]	; (8004174 <UART_SetConfig+0x6a4>)
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fda:	e011      	b.n	8004000 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fdc:	f7fe fe5e 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fe4:	e00c      	b.n	8004000 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fec:	e008      	b.n	8004000 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ff2:	231a      	movs	r3, #26
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	19db      	adds	r3, r3, r7
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
        break;
 8003ffe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	2b00      	cmp	r3, #0
 8004004:	d100      	bne.n	8004008 <UART_SetConfig+0x538>
 8004006:	e09a      	b.n	800413e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400c:	4b5a      	ldr	r3, [pc, #360]	; (8004178 <UART_SetConfig+0x6a8>)
 800400e:	0052      	lsls	r2, r2, #1
 8004010:	5ad3      	ldrh	r3, [r2, r3]
 8004012:	0019      	movs	r1, r3
 8004014:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004016:	f7fc f87f 	bl	8000118 <__udivsi3>
 800401a:	0003      	movs	r3, r0
 800401c:	005a      	lsls	r2, r3, #1
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	18d2      	adds	r2, r2, r3
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	0019      	movs	r1, r3
 800402c:	0010      	movs	r0, r2
 800402e:	f7fc f873 	bl	8000118 <__udivsi3>
 8004032:	0003      	movs	r3, r0
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2b0f      	cmp	r3, #15
 800403a:	d921      	bls.n	8004080 <UART_SetConfig+0x5b0>
 800403c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	025b      	lsls	r3, r3, #9
 8004042:	429a      	cmp	r2, r3
 8004044:	d21c      	bcs.n	8004080 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	b29a      	uxth	r2, r3
 800404a:	200e      	movs	r0, #14
 800404c:	2420      	movs	r4, #32
 800404e:	1903      	adds	r3, r0, r4
 8004050:	19db      	adds	r3, r3, r7
 8004052:	210f      	movs	r1, #15
 8004054:	438a      	bics	r2, r1
 8004056:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	b29b      	uxth	r3, r3
 800405e:	2207      	movs	r2, #7
 8004060:	4013      	ands	r3, r2
 8004062:	b299      	uxth	r1, r3
 8004064:	1903      	adds	r3, r0, r4
 8004066:	19db      	adds	r3, r3, r7
 8004068:	1902      	adds	r2, r0, r4
 800406a:	19d2      	adds	r2, r2, r7
 800406c:	8812      	ldrh	r2, [r2, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1902      	adds	r2, r0, r4
 8004078:	19d2      	adds	r2, r2, r7
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	e05e      	b.n	800413e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004080:	231a      	movs	r3, #26
 8004082:	2220      	movs	r2, #32
 8004084:	189b      	adds	r3, r3, r2
 8004086:	19db      	adds	r3, r3, r7
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e057      	b.n	800413e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408e:	231b      	movs	r3, #27
 8004090:	2220      	movs	r2, #32
 8004092:	189b      	adds	r3, r3, r2
 8004094:	19db      	adds	r3, r3, r7
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d015      	beq.n	80040c8 <UART_SetConfig+0x5f8>
 800409c:	dc18      	bgt.n	80040d0 <UART_SetConfig+0x600>
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d00d      	beq.n	80040be <UART_SetConfig+0x5ee>
 80040a2:	dc15      	bgt.n	80040d0 <UART_SetConfig+0x600>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <UART_SetConfig+0x5de>
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d005      	beq.n	80040b8 <UART_SetConfig+0x5e8>
 80040ac:	e010      	b.n	80040d0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ae:	f7fe fe81 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80040b2:	0003      	movs	r3, r0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040b6:	e014      	b.n	80040e2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b8:	4b2e      	ldr	r3, [pc, #184]	; (8004174 <UART_SetConfig+0x6a4>)
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040bc:	e011      	b.n	80040e2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040be:	f7fe fded 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 80040c2:	0003      	movs	r3, r0
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c6:	e00c      	b.n	80040e2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ce:	e008      	b.n	80040e2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040d4:	231a      	movs	r3, #26
 80040d6:	2220      	movs	r2, #32
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
        break;
 80040e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02a      	beq.n	800413e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ec:	4b22      	ldr	r3, [pc, #136]	; (8004178 <UART_SetConfig+0x6a8>)
 80040ee:	0052      	lsls	r2, r2, #1
 80040f0:	5ad3      	ldrh	r3, [r2, r3]
 80040f2:	0019      	movs	r1, r3
 80040f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040f6:	f7fc f80f 	bl	8000118 <__udivsi3>
 80040fa:	0003      	movs	r3, r0
 80040fc:	001a      	movs	r2, r3
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	18d2      	adds	r2, r2, r3
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0019      	movs	r1, r3
 800410c:	0010      	movs	r0, r2
 800410e:	f7fc f803 	bl	8000118 <__udivsi3>
 8004112:	0003      	movs	r3, r0
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d90a      	bls.n	8004132 <UART_SetConfig+0x662>
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	025b      	lsls	r3, r3, #9
 8004122:	429a      	cmp	r2, r3
 8004124:	d205      	bcs.n	8004132 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	b29a      	uxth	r2, r3
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60da      	str	r2, [r3, #12]
 8004130:	e005      	b.n	800413e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004132:	231a      	movs	r3, #26
 8004134:	2220      	movs	r2, #32
 8004136:	189b      	adds	r3, r3, r2
 8004138:	19db      	adds	r3, r3, r7
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	226a      	movs	r2, #106	; 0x6a
 8004142:	2101      	movs	r1, #1
 8004144:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2268      	movs	r2, #104	; 0x68
 800414a:	2101      	movs	r1, #1
 800414c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2200      	movs	r2, #0
 8004152:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	2200      	movs	r2, #0
 8004158:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800415a:	231a      	movs	r3, #26
 800415c:	2220      	movs	r2, #32
 800415e:	189b      	adds	r3, r3, r2
 8004160:	19db      	adds	r3, r3, r7
 8004162:	781b      	ldrb	r3, [r3, #0]
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b010      	add	sp, #64	; 0x40
 800416a:	bdb0      	pop	{r4, r5, r7, pc}
 800416c:	40008000 	.word	0x40008000
 8004170:	40008400 	.word	0x40008400
 8004174:	00f42400 	.word	0x00f42400
 8004178:	08006294 	.word	0x08006294

0800417c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	2208      	movs	r2, #8
 800418a:	4013      	ands	r3, r2
 800418c:	d00b      	beq.n	80041a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a4a      	ldr	r2, [pc, #296]	; (80042c0 <UART_AdvFeatureConfig+0x144>)
 8004196:	4013      	ands	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	2201      	movs	r2, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a43      	ldr	r2, [pc, #268]	; (80042c4 <UART_AdvFeatureConfig+0x148>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	2202      	movs	r2, #2
 80041ce:	4013      	ands	r3, r2
 80041d0:	d00b      	beq.n	80041ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <UART_AdvFeatureConfig+0x14c>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	2204      	movs	r2, #4
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00b      	beq.n	800420c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a34      	ldr	r2, [pc, #208]	; (80042cc <UART_AdvFeatureConfig+0x150>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	2210      	movs	r2, #16
 8004212:	4013      	ands	r3, r2
 8004214:	d00b      	beq.n	800422e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <UART_AdvFeatureConfig+0x154>)
 800421e:	4013      	ands	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	2220      	movs	r2, #32
 8004234:	4013      	ands	r3, r2
 8004236:	d00b      	beq.n	8004250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <UART_AdvFeatureConfig+0x158>)
 8004240:	4013      	ands	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	2240      	movs	r2, #64	; 0x40
 8004256:	4013      	ands	r3, r2
 8004258:	d01d      	beq.n	8004296 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <UART_AdvFeatureConfig+0x15c>)
 8004262:	4013      	ands	r3, r2
 8004264:	0019      	movs	r1, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	035b      	lsls	r3, r3, #13
 800427a:	429a      	cmp	r2, r3
 800427c:	d10b      	bne.n	8004296 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <UART_AdvFeatureConfig+0x160>)
 8004286:	4013      	ands	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	4013      	ands	r3, r2
 800429e:	d00b      	beq.n	80042b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <UART_AdvFeatureConfig+0x164>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	ffff7fff 	.word	0xffff7fff
 80042c4:	fffdffff 	.word	0xfffdffff
 80042c8:	fffeffff 	.word	0xfffeffff
 80042cc:	fffbffff 	.word	0xfffbffff
 80042d0:	ffffefff 	.word	0xffffefff
 80042d4:	ffffdfff 	.word	0xffffdfff
 80042d8:	ffefffff 	.word	0xffefffff
 80042dc:	ff9fffff 	.word	0xff9fffff
 80042e0:	fff7ffff 	.word	0xfff7ffff

080042e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b092      	sub	sp, #72	; 0x48
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2290      	movs	r2, #144	; 0x90
 80042f0:	2100      	movs	r1, #0
 80042f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f4:	f7fc fdd6 	bl	8000ea4 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2208      	movs	r2, #8
 8004304:	4013      	ands	r3, r2
 8004306:	2b08      	cmp	r3, #8
 8004308:	d12d      	bne.n	8004366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430c:	2280      	movs	r2, #128	; 0x80
 800430e:	0391      	lsls	r1, r2, #14
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4a47      	ldr	r2, [pc, #284]	; (8004430 <UART_CheckIdleState+0x14c>)
 8004314:	9200      	str	r2, [sp, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	f000 f88e 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d022      	beq.n	8004366 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004320:	f3ef 8310 	mrs	r3, PRIMASK
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
 800432a:	2301      	movs	r3, #1
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2180      	movs	r1, #128	; 0x80
 8004342:	438a      	bics	r2, r1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	f383 8810 	msr	PRIMASK, r3
}
 8004350:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2288      	movs	r2, #136	; 0x88
 8004356:	2120      	movs	r1, #32
 8004358:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2284      	movs	r2, #132	; 0x84
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e060      	b.n	8004428 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2204      	movs	r2, #4
 800436e:	4013      	ands	r3, r2
 8004370:	2b04      	cmp	r3, #4
 8004372:	d146      	bne.n	8004402 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	03d1      	lsls	r1, r2, #15
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4a2c      	ldr	r2, [pc, #176]	; (8004430 <UART_CheckIdleState+0x14c>)
 800437e:	9200      	str	r2, [sp, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	f000 f859 	bl	8004438 <UART_WaitOnFlagUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d03b      	beq.n	8004402 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438a:	f3ef 8310 	mrs	r3, PRIMASK
 800438e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004390:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
 8004394:	2301      	movs	r3, #1
 8004396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f383 8810 	msr	PRIMASK, r3
}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4922      	ldr	r1, [pc, #136]	; (8004434 <UART_CheckIdleState+0x150>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043bc:	f3ef 8310 	mrs	r3, PRIMASK
 80043c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80043c2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f383 8810 	msr	PRIMASK, r3
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2101      	movs	r1, #1
 80043de:	438a      	bics	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	228c      	movs	r2, #140	; 0x8c
 80043f2:	2120      	movs	r1, #32
 80043f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2284      	movs	r2, #132	; 0x84
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e012      	b.n	8004428 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2288      	movs	r2, #136	; 0x88
 8004406:	2120      	movs	r1, #32
 8004408:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	228c      	movs	r2, #140	; 0x8c
 800440e:	2120      	movs	r1, #32
 8004410:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2284      	movs	r2, #132	; 0x84
 8004422:	2100      	movs	r1, #0
 8004424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b010      	add	sp, #64	; 0x40
 800442e:	bd80      	pop	{r7, pc}
 8004430:	01ffffff 	.word	0x01ffffff
 8004434:	fffffedf 	.word	0xfffffedf

08004438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	1dfb      	adds	r3, r7, #7
 8004446:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004448:	e051      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	3301      	adds	r3, #1
 800444e:	d04e      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004450:	f7fc fd28 	bl	8000ea4 <HAL_GetTick>
 8004454:	0002      	movs	r2, r0
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e051      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2204      	movs	r2, #4
 8004472:	4013      	ands	r3, r2
 8004474:	d03b      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d038      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d035      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	2208      	movs	r2, #8
 800448a:	4013      	ands	r3, r2
 800448c:	2b08      	cmp	r3, #8
 800448e:	d111      	bne.n	80044b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2208      	movs	r2, #8
 8004496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	0018      	movs	r0, r3
 800449c:	f000 f83c 	bl	8004518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2290      	movs	r2, #144	; 0x90
 80044a4:	2108      	movs	r1, #8
 80044a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2284      	movs	r2, #132	; 0x84
 80044ac:	2100      	movs	r1, #0
 80044ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e02c      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	401a      	ands	r2, r3
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d112      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f000 f81f 	bl	8004518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2290      	movs	r2, #144	; 0x90
 80044de:	2120      	movs	r1, #32
 80044e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2284      	movs	r2, #132	; 0x84
 80044e6:	2100      	movs	r1, #0
 80044e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	425a      	negs	r2, r3
 80044fe:	4153      	adcs	r3, r2
 8004500:	b2db      	uxtb	r3, r3
 8004502:	001a      	movs	r2, r3
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d09e      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08e      	sub	sp, #56	; 0x38
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004520:	f3ef 8310 	mrs	r3, PRIMASK
 8004524:	617b      	str	r3, [r7, #20]
  return(result);
 8004526:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
 800452a:	2301      	movs	r3, #1
 800452c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4926      	ldr	r1, [pc, #152]	; (80045dc <UART_EndRxTransfer+0xc4>)
 8004542:	400a      	ands	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004548:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004552:	f3ef 8310 	mrs	r3, PRIMASK
 8004556:	623b      	str	r3, [r7, #32]
  return(result);
 8004558:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800455a:	633b      	str	r3, [r7, #48]	; 0x30
 800455c:	2301      	movs	r3, #1
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f383 8810 	msr	PRIMASK, r3
}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	491b      	ldr	r1, [pc, #108]	; (80045e0 <UART_EndRxTransfer+0xc8>)
 8004574:	400a      	ands	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d118      	bne.n	80045be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458c:	f3ef 8310 	mrs	r3, PRIMASK
 8004590:	60bb      	str	r3, [r7, #8]
  return(result);
 8004592:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004596:	2301      	movs	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f383 8810 	msr	PRIMASK, r3
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2110      	movs	r1, #16
 80045ae:	438a      	bics	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f383 8810 	msr	PRIMASK, r3
}
 80045bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	228c      	movs	r2, #140	; 0x8c
 80045c2:	2120      	movs	r1, #32
 80045c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b00e      	add	sp, #56	; 0x38
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	fffffedf 	.word	0xfffffedf
 80045e0:	effffffe 	.word	0xeffffffe

080045e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	225e      	movs	r2, #94	; 0x5e
 80045f6:	2100      	movs	r1, #0
 80045f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2256      	movs	r2, #86	; 0x56
 80045fe:	2100      	movs	r1, #0
 8004600:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff fa4f 	bl	8003aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461a:	f3ef 8310 	mrs	r3, PRIMASK
 800461e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004620:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	2301      	movs	r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f383 8810 	msr	PRIMASK, r3
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2140      	movs	r1, #64	; 0x40
 800463c:	438a      	bics	r2, r1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f383 8810 	msr	PRIMASK, r3
}
 800464a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2288      	movs	r2, #136	; 0x88
 8004650:	2120      	movs	r1, #32
 8004652:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f7ff fa1b 	bl	8003a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b006      	add	sp, #24
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b002      	add	sp, #8
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b002      	add	sp, #8
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	46bd      	mov	sp, r7
 8004696:	b002      	add	sp, #8
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2284      	movs	r2, #132	; 0x84
 80046a8:	5c9b      	ldrb	r3, [r3, r2]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e027      	b.n	8004702 <HAL_UARTEx_DisableFifoMode+0x66>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2284      	movs	r2, #132	; 0x84
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2288      	movs	r2, #136	; 0x88
 80046be:	2124      	movs	r1, #36	; 0x24
 80046c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	438a      	bics	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4a0b      	ldr	r2, [pc, #44]	; (800470c <HAL_UARTEx_DisableFifoMode+0x70>)
 80046de:	4013      	ands	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2288      	movs	r2, #136	; 0x88
 80046f4:	2120      	movs	r1, #32
 80046f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2284      	movs	r2, #132	; 0x84
 80046fc:	2100      	movs	r1, #0
 80046fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	0018      	movs	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	b004      	add	sp, #16
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	dfffffff 	.word	0xdfffffff

08004710 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2284      	movs	r2, #132	; 0x84
 800471e:	5c9b      	ldrb	r3, [r3, r2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004724:	2302      	movs	r3, #2
 8004726:	e02e      	b.n	8004786 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2284      	movs	r2, #132	; 0x84
 800472c:	2101      	movs	r1, #1
 800472e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2288      	movs	r2, #136	; 0x88
 8004734:	2124      	movs	r1, #36	; 0x24
 8004736:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	08d9      	lsrs	r1, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f854 	bl	8004814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2288      	movs	r2, #136	; 0x88
 8004778:	2120      	movs	r1, #32
 800477a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2284      	movs	r2, #132	; 0x84
 8004780:	2100      	movs	r1, #0
 8004782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b004      	add	sp, #16
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2284      	movs	r2, #132	; 0x84
 800479e:	5c9b      	ldrb	r3, [r3, r2]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e02f      	b.n	8004808 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2284      	movs	r2, #132	; 0x84
 80047ac:	2101      	movs	r1, #1
 80047ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2288      	movs	r2, #136	; 0x88
 80047b4:	2124      	movs	r1, #36	; 0x24
 80047b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2101      	movs	r1, #1
 80047cc:	438a      	bics	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047d8:	4013      	ands	r3, r2
 80047da:	0019      	movs	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 f813 	bl	8004814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2288      	movs	r2, #136	; 0x88
 80047fa:	2120      	movs	r1, #32
 80047fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2284      	movs	r2, #132	; 0x84
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b004      	add	sp, #16
 800480e:	bd80      	pop	{r7, pc}
 8004810:	f1ffffff 	.word	0xf1ffffff

08004814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004820:	2b00      	cmp	r3, #0
 8004822:	d108      	bne.n	8004836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	226a      	movs	r2, #106	; 0x6a
 8004828:	2101      	movs	r1, #1
 800482a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2268      	movs	r2, #104	; 0x68
 8004830:	2101      	movs	r1, #1
 8004832:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004834:	e043      	b.n	80048be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004836:	260f      	movs	r6, #15
 8004838:	19bb      	adds	r3, r7, r6
 800483a:	2208      	movs	r2, #8
 800483c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800483e:	200e      	movs	r0, #14
 8004840:	183b      	adds	r3, r7, r0
 8004842:	2208      	movs	r2, #8
 8004844:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	0e5b      	lsrs	r3, r3, #25
 800484e:	b2da      	uxtb	r2, r3
 8004850:	240d      	movs	r4, #13
 8004852:	193b      	adds	r3, r7, r4
 8004854:	2107      	movs	r1, #7
 8004856:	400a      	ands	r2, r1
 8004858:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	0f5b      	lsrs	r3, r3, #29
 8004862:	b2da      	uxtb	r2, r3
 8004864:	250c      	movs	r5, #12
 8004866:	197b      	adds	r3, r7, r5
 8004868:	2107      	movs	r1, #7
 800486a:	400a      	ands	r2, r1
 800486c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800486e:	183b      	adds	r3, r7, r0
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	197a      	adds	r2, r7, r5
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	4914      	ldr	r1, [pc, #80]	; (80048c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004878:	5c8a      	ldrb	r2, [r1, r2]
 800487a:	435a      	muls	r2, r3
 800487c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800487e:	197b      	adds	r3, r7, r5
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <UARTEx_SetNbDataToProcess+0xb8>)
 8004884:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004886:	0019      	movs	r1, r3
 8004888:	f7fb fcd0 	bl	800022c <__divsi3>
 800488c:	0003      	movs	r3, r0
 800488e:	b299      	uxth	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	226a      	movs	r2, #106	; 0x6a
 8004894:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004896:	19bb      	adds	r3, r7, r6
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	193a      	adds	r2, r7, r4
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	490a      	ldr	r1, [pc, #40]	; (80048c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80048a0:	5c8a      	ldrb	r2, [r1, r2]
 80048a2:	435a      	muls	r2, r3
 80048a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <UARTEx_SetNbDataToProcess+0xb8>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ae:	0019      	movs	r1, r3
 80048b0:	f7fb fcbc 	bl	800022c <__divsi3>
 80048b4:	0003      	movs	r3, r0
 80048b6:	b299      	uxth	r1, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2268      	movs	r2, #104	; 0x68
 80048bc:	5299      	strh	r1, [r3, r2]
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b005      	add	sp, #20
 80048c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	080062ac 	.word	0x080062ac
 80048cc:	080062b4 	.word	0x080062b4

080048d0 <enterNormalMode>:
{
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
}

void enterNormalMode(void)									//正常模式
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_SET);		//CAN1_STB
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <enterNormalMode+0x28>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	0018      	movs	r0, r3
 80048dc:	f7fd fd0c 	bl	80022f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FDCAN1_EN_GPIO_Port, FDCAN1_EN_Pin, GPIO_PIN_SET);		//CAN1_EN
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	0219      	lsls	r1, r3, #8
 80048e4:	23a0      	movs	r3, #160	; 0xa0
 80048e6:	05db      	lsls	r3, r3, #23
 80048e8:	2201      	movs	r2, #1
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7fd fd04 	bl	80022f8 <HAL_GPIO_WritePin>
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	50000800 	.word	0x50000800

080048fc <FDCAN_Config>:
int size = 400;
int validCount;
int head,tail;

void FDCAN_Config(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 8004900:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <FDCAN_Config+0x74>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
	hfdcan_filter.FilterIndex = 0;
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <FDCAN_Config+0x74>)
 8004908:	2200      	movs	r2, #0
 800490a:	605a      	str	r2, [r3, #4]
	hfdcan_filter.FilterType = FDCAN_FILTER_MASK;
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <FDCAN_Config+0x74>)
 800490e:	2202      	movs	r2, #2
 8004910:	609a      	str	r2, [r3, #8]
	hfdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004912:	4b17      	ldr	r3, [pc, #92]	; (8004970 <FDCAN_Config+0x74>)
 8004914:	2201      	movs	r2, #1
 8004916:	60da      	str	r2, [r3, #12]
	hfdcan_filter.FilterID1 = 0x111;
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <FDCAN_Config+0x74>)
 800491a:	2212      	movs	r2, #18
 800491c:	32ff      	adds	r2, #255	; 0xff
 800491e:	611a      	str	r2, [r3, #16]
	hfdcan_filter.FilterID2 = 0x7FF;
 8004920:	4b13      	ldr	r3, [pc, #76]	; (8004970 <FDCAN_Config+0x74>)
 8004922:	4a14      	ldr	r2, [pc, #80]	; (8004974 <FDCAN_Config+0x78>)
 8004924:	615a      	str	r2, [r3, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <FDCAN_Config+0x74>)
 8004928:	4b13      	ldr	r3, [pc, #76]	; (8004978 <FDCAN_Config+0x7c>)
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f7fc fe09 	bl	8001544 <HAL_FDCAN_ConfigFilter>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d001      	beq.n	800493a <FDCAN_Config+0x3e>
	{
		Error_Handler();
 8004936:	f7fc f857 	bl	80009e8 <Error_Handler>
	}

	/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, hfdcan1.Init.DataPrescaler * hfdcan1.Init.DataTimeSeg1, 0) != HAL_OK)
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <FDCAN_Config+0x7c>)
 800493c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <FDCAN_Config+0x7c>)
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	4353      	muls	r3, r2
 8004944:	0019      	movs	r1, r3
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <FDCAN_Config+0x7c>)
 8004948:	2200      	movs	r2, #0
 800494a:	0018      	movs	r0, r3
 800494c:	f7fc fe57 	bl	80015fe <HAL_FDCAN_ConfigTxDelayCompensation>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <FDCAN_Config+0x5c>
	{
		Error_Handler();
 8004954:	f7fc f848 	bl	80009e8 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <FDCAN_Config+0x7c>)
 800495a:	0018      	movs	r0, r3
 800495c:	f7fc fe6f 	bl	800163e <HAL_FDCAN_EnableTxDelayCompensation>
 8004960:	1e03      	subs	r3, r0, #0
 8004962:	d001      	beq.n	8004968 <FDCAN_Config+0x6c>
	{
		Error_Handler();
 8004964:	f7fc f840 	bl	80009e8 <Error_Handler>
	}
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	20000088 	.word	0x20000088
 8004974:	000007ff 	.word	0x000007ff
 8004978:	200000a0 	.word	0x200000a0

0800497c <FDCAN_Enable>:

void FDCAN_Enable(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
	FDCAN_Config();
 8004980:	f7ff ffbc 	bl	80048fc <FDCAN_Config>
	enterNormalMode();											//CAN收发器正常模�?????
 8004984:	f7ff ffa4 	bl	80048d0 <enterNormalMode>
	HAL_Delay(5);
 8004988:	2005      	movs	r0, #5
 800498a:	f7fc fa95 	bl	8000eb8 <HAL_Delay>

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)		//使能FIFO0新消息中�?????
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <FDCAN_Enable+0x8c>)
 8004990:	2200      	movs	r2, #0
 8004992:	2101      	movs	r1, #1
 8004994:	0018      	movs	r0, r3
 8004996:	f7fc fffb 	bl	8001990 <HAL_FDCAN_ActivateNotification>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d001      	beq.n	80049a2 <FDCAN_Enable+0x26>
	{
		Error_Handler();
 800499e:	f7fc f823 	bl	80009e8 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)														//使能FDCAN
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <FDCAN_Enable+0x8c>)
 80049a4:	0018      	movs	r0, r3
 80049a6:	f7fc fe6a 	bl	800167e <HAL_FDCAN_Start>
 80049aa:	1e03      	subs	r3, r0, #0
 80049ac:	d001      	beq.n	80049b2 <FDCAN_Enable+0x36>
	{
		Error_Handler();
 80049ae:	f7fc f81b 	bl	80009e8 <Error_Handler>
	}

	TxHeader.Identifier = 0x111;
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <FDCAN_Enable+0x90>)
 80049b4:	2212      	movs	r2, #18
 80049b6:	32ff      	adds	r2, #255	; 0xff
 80049b8:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <FDCAN_Enable+0x90>)
 80049bc:	2200      	movs	r2, #0
 80049be:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <FDCAN_Enable+0x90>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <FDCAN_Enable+0x90>)
 80049c8:	220f      	movs	r2, #15
 80049ca:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <FDCAN_Enable+0x90>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <FDCAN_Enable+0x90>)
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	0352      	lsls	r2, r2, #13
 80049d8:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <FDCAN_Enable+0x90>)
 80049dc:	2280      	movs	r2, #128	; 0x80
 80049de:	0392      	lsls	r2, r2, #14
 80049e0:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <FDCAN_Enable+0x90>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker       = 0;
 80049e8:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <FDCAN_Enable+0x90>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	621a      	str	r2, [r3, #32]

	head = tail = 0;
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <FDCAN_Enable+0x94>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <FDCAN_Enable+0x94>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <FDCAN_Enable+0x98>)
 80049fa:	601a      	str	r2, [r3, #0]
	validCount = 0;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <FDCAN_Enable+0x9c>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	200000a0 	.word	0x200000a0
 8004a0c:	200001a0 	.word	0x200001a0
 8004a10:	2000a44c 	.word	0x2000a44c
 8004a14:	2000a448 	.word	0x2000a448
 8004a18:	2000a444 	.word	0x2000a444

08004a1c <FDCAN_TxConfig>:

void FDCAN_TxConfig(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	TxHeader.Identifier = 0x111;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <FDCAN_TxConfig+0x14>)
 8004a22:	2212      	movs	r2, #18
 8004a24:	32ff      	adds	r2, #255	; 0xff
 8004a26:	601a      	str	r2, [r3, #0]
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	200001a0 	.word	0x200001a0

08004a34 <FDCAN_SendByte>:

void FDCAN_SendByte(uint8_t byte)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	1dfb      	adds	r3, r7, #7
 8004a3e:	701a      	strb	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <FDCAN_SendByte+0x64>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	60da      	str	r2, [r3, #12]
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <FDCAN_SendByte+0x68>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f7fc ff90 	bl	8001970 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d0f9      	beq.n	8004a48 <FDCAN_SendByte+0x14>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,&byte);
 8004a54:	1dfa      	adds	r2, r7, #7
 8004a56:	4910      	ldr	r1, [pc, #64]	; (8004a98 <FDCAN_SendByte+0x64>)
 8004a58:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <FDCAN_SendByte+0x68>)
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7fc fe35 	bl	80016ca <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE );
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <FDCAN_SendByte+0x68>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d1f5      	bne.n	8004a62 <FDCAN_SendByte+0x2e>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8004a76:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <FDCAN_SendByte+0x68>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <FDCAN_SendByte+0x68>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2280      	movs	r2, #128	; 0x80
 8004a82:	0092      	lsls	r2, r2, #2
 8004a84:	400a      	ands	r2, r1
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f7fc fa15 	bl	8000eb8 <HAL_Delay>
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	200001a0 	.word	0x200001a0
 8004a9c:	200000a0 	.word	0x200000a0

08004aa0 <FDCAN_SendBytes>:

void FDCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	TxHeader.DataLength = BufferSize;
 8004aaa:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <FDCAN_SendBytes+0x60>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	60da      	str	r2, [r3, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <FDCAN_SendBytes+0x64>)
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fc ff5b 	bl	8001970 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d0f9      	beq.n	8004ab2 <FDCAN_SendBytes+0x12>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Buffer);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	490f      	ldr	r1, [pc, #60]	; (8004b00 <FDCAN_SendBytes+0x60>)
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <FDCAN_SendBytes+0x64>)
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7fc fe00 	bl	80016ca <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE);
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <FDCAN_SendBytes+0x64>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1f5      	bne.n	8004acc <FDCAN_SendBytes+0x2c>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8004ae0:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <FDCAN_SendBytes+0x64>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <FDCAN_SendBytes+0x64>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2280      	movs	r2, #128	; 0x80
 8004aec:	0092      	lsls	r2, r2, #2
 8004aee:	400a      	ands	r2, r1
 8004af0:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8004af2:	2001      	movs	r0, #1
 8004af4:	f7fc f9e0 	bl	8000eb8 <HAL_Delay>
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b002      	add	sp, #8
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	200001a0 	.word	0x200001a0
 8004b04:	200000a0 	.word	0x200000a0

08004b08 <FDCAN_ReadByte>:

uint8_t FDCAN_ReadByte(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b09c      	sub	sp, #112	; 0x70
 8004b0c:	af00      	add	r7, sp, #0
	FDCanRxHeader header;
	int err;

	err = read(&header);
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	0018      	movs	r0, r3
 8004b12:	f000 f8a1 	bl	8004c58 <read>
 8004b16:	0003      	movs	r3, r0
 8004b18:	66fb      	str	r3, [r7, #108]	; 0x6c
	if(err){
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <FDCAN_ReadByte+0x26>
		HAL_Delay(1);
 8004b20:	2001      	movs	r0, #1
 8004b22:	f7fc f9c9 	bl	8000eb8 <HAL_Delay>
		return header.data[0];
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	2228      	movs	r2, #40	; 0x28
 8004b2a:	5c9b      	ldrb	r3, [r3, r2]
 8004b2c:	e003      	b.n	8004b36 <FDCAN_ReadByte+0x2e>
	}
	else
	{
		printf("Buffer is Empty\n");
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <FDCAN_ReadByte+0x38>)
 8004b30:	0018      	movs	r0, r3
 8004b32:	f000 fbfb 	bl	800532c <puts>
	}
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b01c      	add	sp, #112	; 0x70
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	08006108 	.word	0x08006108

08004b44 <FDCAN_ReadBytes>:

void FDCAN_ReadBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b09f      	sub	sp, #124	; 0x7c
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
	FDCanRxHeader header;
	int err;

	err = read(&header);
 8004b4e:	240c      	movs	r4, #12
 8004b50:	193b      	adds	r3, r7, r4
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 f880 	bl	8004c58 <read>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	677b      	str	r3, [r7, #116]	; 0x74
	if(err){
 8004b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <FDCAN_ReadBytes+0x36>
		memcpy(Buffer,header.data,sizeof(header.data));
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	193b      	adds	r3, r7, r4
 8004b66:	0010      	movs	r0, r2
 8004b68:	3328      	adds	r3, #40	; 0x28
 8004b6a:	2240      	movs	r2, #64	; 0x40
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	f000 fd5c 	bl	800562a <memcpy>
		HAL_Delay(1);
 8004b72:	2001      	movs	r0, #1
 8004b74:	f7fc f9a0 	bl	8000eb8 <HAL_Delay>
	}
	else
	{
		printf("Buffer is Empty\n");
	}
}
 8004b78:	e003      	b.n	8004b82 <FDCAN_ReadBytes+0x3e>
		printf("Buffer is Empty\n");
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <FDCAN_ReadBytes+0x48>)
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fbd5 	bl	800532c <puts>
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b01f      	add	sp, #124	; 0x7c
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	08006108 	.word	0x08006108

08004b90 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)			//接收中断回调函数重写
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b09d      	sub	sp, #116	; 0x74
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	FDCanRxHeader header;
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d00c      	beq.n	8004bbc <HAL_FDCAN_RxFifo0Callback+0x2c>
	{
//		rx_flag = 1;
		/* Retrieve Rx messages from RX FIFO0 */
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	18bb      	adds	r3, r7, r2
 8004ba6:	3328      	adds	r3, #40	; 0x28
 8004ba8:	0014      	movs	r4, r2
 8004baa:	18ba      	adds	r2, r7, r2
 8004bac:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8004bae:	2140      	movs	r1, #64	; 0x40
 8004bb0:	f7fc fdd0 	bl	8001754 <HAL_FDCAN_GetRxMessage>
		/* write buffer */
		write(&header);
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 f81a 	bl	8004bf0 <write>
	}
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b01d      	add	sp, #116	; 0x74
 8004bc2:	bd90      	pop	{r4, r7, pc}
 8004bc4:	200000a0 	.word	0x200000a0

08004bc8 <getNextPos>:

int getNextPos(int cur)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	return (cur+1) == size ? 0 : cur+1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <getNextPos+0x24>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d002      	beq.n	8004be2 <getNextPos+0x1a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	e000      	b.n	8004be4 <getNextPos+0x1c>
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <write>:

int write(FDCanRxHeader *content)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]
	if (validCount < size) {
 8004bfc:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <write+0x58>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <write+0x5c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	da18      	bge.n	8004c3a <write+0x4a>
		_Buffer[tail] = *content;
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <write+0x60>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <write+0x64>)
 8004c0e:	2168      	movs	r1, #104	; 0x68
 8004c10:	434b      	muls	r3, r1
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	2268      	movs	r2, #104	; 0x68
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fd06 	bl	800562a <memcpy>

		tail = getNextPos(tail);
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <write+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7ff ffd0 	bl	8004bc8 <getNextPos>
 8004c28:	0002      	movs	r2, r0
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <write+0x60>)
 8004c2c:	601a      	str	r2, [r3, #0]
		validCount++;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <write+0x58>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <write+0x58>)
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	e001      	b.n	8004c3e <write+0x4e>
	} else {
		/* Buffer is FULL */
		ret = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	0018      	movs	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b004      	add	sp, #16
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000a444 	.word	0x2000a444
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	2000a44c 	.word	0x2000a44c
 8004c54:	200001c4 	.word	0x200001c4

08004c58 <read>:

int read(FDCanRxHeader* buf)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8004c60:	2301      	movs	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
	if (validCount > 0) {
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <read+0x54>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dd18      	ble.n	8004c9e <read+0x46>
		*buf = _Buffer[head];
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <read+0x58>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <read+0x5c>)
 8004c74:	2168      	movs	r1, #104	; 0x68
 8004c76:	434b      	muls	r3, r1
 8004c78:	18d3      	adds	r3, r2, r3
 8004c7a:	2268      	movs	r2, #104	; 0x68
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	f000 fcd4 	bl	800562a <memcpy>

		head = getNextPos(head);
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <read+0x58>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0018      	movs	r0, r3
 8004c88:	f7ff ff9e 	bl	8004bc8 <getNextPos>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <read+0x58>)
 8004c90:	601a      	str	r2, [r3, #0]
		validCount--;
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <read+0x54>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <read+0x54>)
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e001      	b.n	8004ca2 <read+0x4a>
	} else {
		/* Buffer is Empty */
		ret = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b004      	add	sp, #16
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	2000a444 	.word	0x2000a444
 8004cb0:	2000a448 	.word	0x2000a448
 8004cb4:	200001c4 	.word	0x200001c4

08004cb8 <FDCAN_GetCommand>:

void FDCAN_GetCommand(void)
{
 8004cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
	uint8_t num,  version, commandlist[12];
	TxHeader.Identifier = GET;
 8004cbe:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <FDCAN_GetCommand+0xdc>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

	FDCAN_SendByte(0x00);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7ff feb5 	bl	8004a34 <FDCAN_SendByte>
	HAL_Delay(10);
 8004cca:	200a      	movs	r0, #10
 8004ccc:	f7fc f8f4 	bl	8000eb8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004cd0:	f7ff ff1a 	bl	8004b08 <FDCAN_ReadByte>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	2379      	movs	r3, #121	; 0x79
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b79      	cmp	r3, #121	; 0x79
 8004cde:	d143      	bne.n	8004d68 <FDCAN_GetCommand+0xb0>
	{
		num = FDCAN_ReadByte();
 8004ce0:	2513      	movs	r5, #19
 8004ce2:	197c      	adds	r4, r7, r5
 8004ce4:	f7ff ff10 	bl	8004b08 <FDCAN_ReadByte>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	7023      	strb	r3, [r4, #0]
		version = FDCAN_ReadByte();
 8004cec:	2612      	movs	r6, #18
 8004cee:	19bc      	adds	r4, r7, r6
 8004cf0:	f7ff ff0a 	bl	8004b08 <FDCAN_ReadByte>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	7023      	strb	r3, [r4, #0]
		printf("num:%d,version:%d\n",num,version);
 8004cf8:	197b      	adds	r3, r7, r5
 8004cfa:	7819      	ldrb	r1, [r3, #0]
 8004cfc:	19bb      	adds	r3, r7, r6
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <FDCAN_GetCommand+0xe0>)
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 faa2 	bl	800524c <iprintf>
		printf("GetCommand:\n");
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <FDCAN_GetCommand+0xe4>)
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 fb0e 	bl	800532c <puts>

		for(int i=0;i<num;i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e015      	b.n	8004d42 <FDCAN_GetCommand+0x8a>
		{
			commandlist[i] = FDCAN_ReadByte();
 8004d16:	f7ff fef7 	bl	8004b08 <FDCAN_ReadByte>
 8004d1a:	0003      	movs	r3, r0
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	1d3a      	adds	r2, r7, #4
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	18d3      	adds	r3, r2, r3
 8004d24:	1c0a      	adds	r2, r1, #0
 8004d26:	701a      	strb	r2, [r3, #0]
			printf("0x%x\n",commandlist[i]);
 8004d28:	1d3a      	adds	r2, r7, #4
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	18d3      	adds	r3, r2, r3
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	001a      	movs	r2, r3
 8004d32:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <FDCAN_GetCommand+0xe8>)
 8004d34:	0011      	movs	r1, r2
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 fa88 	bl	800524c <iprintf>
		for(int i=0;i<num;i++)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	2313      	movs	r3, #19
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	dbe3      	blt.n	8004d16 <FDCAN_GetCommand+0x5e>
		}

		if((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004d4e:	f7ff fedb 	bl	8004b08 <FDCAN_ReadByte>
 8004d52:	0003      	movs	r3, r0
 8004d54:	001a      	movs	r2, r3
 8004d56:	2379      	movs	r3, #121	; 0x79
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b79      	cmp	r3, #121	; 0x79
 8004d5c:	d115      	bne.n	8004d8a <FDCAN_GetCommand+0xd2>
		{
			printf("GetCommand Success!\n");
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <FDCAN_GetCommand+0xec>)
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 fae3 	bl	800532c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004d66:	e010      	b.n	8004d8a <FDCAN_GetCommand+0xd2>
	else if((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004d68:	f7ff fece 	bl	8004b08 <FDCAN_ReadByte>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	001a      	movs	r2, r3
 8004d70:	231f      	movs	r3, #31
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b1f      	cmp	r3, #31
 8004d76:	d104      	bne.n	8004d82 <FDCAN_GetCommand+0xca>
		printf("GetCommand fail!\n");
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <FDCAN_GetCommand+0xf0>)
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 fad6 	bl	800532c <puts>
}
 8004d80:	e003      	b.n	8004d8a <FDCAN_GetCommand+0xd2>
		printf("error\n");
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <FDCAN_GetCommand+0xf4>)
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 fad1 	bl	800532c <puts>
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b007      	add	sp, #28
 8004d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	200001a0 	.word	0x200001a0
 8004d98:	08006118 	.word	0x08006118
 8004d9c:	0800612c 	.word	0x0800612c
 8004da0:	08006138 	.word	0x08006138
 8004da4:	08006140 	.word	0x08006140
 8004da8:	08006154 	.word	0x08006154
 8004dac:	08006168 	.word	0x08006168

08004db0 <FDCAN_GetID>:

void FDCAN_GetID(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b090      	sub	sp, #64	; 0x40
 8004db4:	af00      	add	r7, sp, #0
	uint8_t data[64];
	TxHeader.Identifier = GETID;
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <FDCAN_GetID+0x8c>)
 8004db8:	2202      	movs	r2, #2
 8004dba:	601a      	str	r2, [r3, #0]

	FDCAN_SendByte(0x00);
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f7ff fe39 	bl	8004a34 <FDCAN_SendByte>
	HAL_Delay(10);
 8004dc2:	200a      	movs	r0, #10
 8004dc4:	f7fc f878 	bl	8000eb8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004dc8:	f7ff fe9e 	bl	8004b08 <FDCAN_ReadByte>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	001a      	movs	r2, r3
 8004dd0:	2379      	movs	r3, #121	; 0x79
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b79      	cmp	r3, #121	; 0x79
 8004dd6:	d11b      	bne.n	8004e10 <FDCAN_GetID+0x60>
	{
		FDCAN_ReadBytes(data,FDCAN_DLC_BYTES_2);
 8004dd8:	003b      	movs	r3, r7
 8004dda:	2102      	movs	r1, #2
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f7ff feb1 	bl	8004b44 <FDCAN_ReadBytes>
		printf("GetID:0x%x%x\n",*data,*(data+1));
 8004de2:	003b      	movs	r3, r7
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	0019      	movs	r1, r3
 8004de8:	003b      	movs	r3, r7
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	001a      	movs	r2, r3
 8004dee:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <FDCAN_GetID+0x90>)
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 fa2b 	bl	800524c <iprintf>
		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004df6:	f7ff fe87 	bl	8004b08 <FDCAN_ReadByte>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	2379      	movs	r3, #121	; 0x79
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b79      	cmp	r3, #121	; 0x79
 8004e04:	d115      	bne.n	8004e32 <FDCAN_GetID+0x82>
		{
			printf("GetID Success!\n");
 8004e06:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <FDCAN_GetID+0x94>)
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 fa8f 	bl	800532c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004e0e:	e010      	b.n	8004e32 <FDCAN_GetID+0x82>
	else if((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004e10:	f7ff fe7a 	bl	8004b08 <FDCAN_ReadByte>
 8004e14:	0003      	movs	r3, r0
 8004e16:	001a      	movs	r2, r3
 8004e18:	231f      	movs	r3, #31
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b1f      	cmp	r3, #31
 8004e1e:	d104      	bne.n	8004e2a <FDCAN_GetID+0x7a>
		printf("GetID fail!\n");
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <FDCAN_GetID+0x98>)
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fa82 	bl	800532c <puts>
}
 8004e28:	e003      	b.n	8004e32 <FDCAN_GetID+0x82>
		printf("error\n");
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <FDCAN_GetID+0x9c>)
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 fa7d 	bl	800532c <puts>
}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b010      	add	sp, #64	; 0x40
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	200001a0 	.word	0x200001a0
 8004e40:	08006170 	.word	0x08006170
 8004e44:	08006180 	.word	0x08006180
 8004e48:	08006190 	.word	0x08006190
 8004e4c:	08006168 	.word	0x08006168

08004e50 <FDCAN_ReadMemory>:

void FDCAN_ReadMemory(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b094      	sub	sp, #80	; 0x50
 8004e54:	af00      	add	r7, sp, #0
	uint8_t data[64];
	uint8_t txdata[5] = {0x08,0x01,0x00,0x00,0xFF};
 8004e56:	003b      	movs	r3, r7
 8004e58:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <FDCAN_ReadMemory+0xd0>)
 8004e5a:	6811      	ldr	r1, [r2, #0]
 8004e5c:	6019      	str	r1, [r3, #0]
 8004e5e:	7912      	ldrb	r2, [r2, #4]
 8004e60:	711a      	strb	r2, [r3, #4]
	TxHeader.Identifier = READ;
 8004e62:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <FDCAN_ReadMemory+0xd4>)
 8004e64:	2211      	movs	r2, #17
 8004e66:	601a      	str	r2, [r3, #0]

	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_5);
 8004e68:	003b      	movs	r3, r7
 8004e6a:	2105      	movs	r1, #5
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7ff fe17 	bl	8004aa0 <FDCAN_SendBytes>
	HAL_Delay(10);
 8004e72:	200a      	movs	r0, #10
 8004e74:	f7fc f820 	bl	8000eb8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004e78:	f7ff fe46 	bl	8004b08 <FDCAN_ReadByte>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	001a      	movs	r2, r3
 8004e80:	2379      	movs	r3, #121	; 0x79
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b79      	cmp	r3, #121	; 0x79
 8004e86:	d136      	bne.n	8004ef6 <FDCAN_ReadMemory+0xa6>
	{
		printf("ReadMemoryData:\n");
 8004e88:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <FDCAN_ReadMemory+0xd8>)
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f000 fa4e 	bl	800532c <puts>
		for(int i=0;i<4;i++)
 8004e90:	2300      	movs	r3, #0
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e94:	e01f      	b.n	8004ed6 <FDCAN_ReadMemory+0x86>
		{
			FDCAN_ReadBytes(data,FDCAN_DLC_BYTES_64);
 8004e96:	2308      	movs	r3, #8
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	210f      	movs	r1, #15
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f7ff fe51 	bl	8004b44 <FDCAN_ReadBytes>
			for (int j=0;j<64;j++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea6:	e00d      	b.n	8004ec4 <FDCAN_ReadMemory+0x74>
			{
				printf("%x ",data[j]);
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	18fa      	adds	r2, r7, r3
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <FDCAN_ReadMemory+0xdc>)
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f9c7 	bl	800524c <iprintf>
			for (int j=0;j<64;j++)
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8004ec8:	ddee      	ble.n	8004ea8 <FDCAN_ReadMemory+0x58>
			}
			printf("\n");
 8004eca:	200a      	movs	r0, #10
 8004ecc:	f000 f9ce 	bl	800526c <putchar>
		for(int i=0;i<4;i++)
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	dddc      	ble.n	8004e96 <FDCAN_ReadMemory+0x46>
		}

		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004edc:	f7ff fe14 	bl	8004b08 <FDCAN_ReadByte>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	2379      	movs	r3, #121	; 0x79
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b79      	cmp	r3, #121	; 0x79
 8004eea:	d115      	bne.n	8004f18 <FDCAN_ReadMemory+0xc8>
		{
			printf("ReadMemory Success!\n");
 8004eec:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <FDCAN_ReadMemory+0xe0>)
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f000 fa1c 	bl	800532c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004ef4:	e010      	b.n	8004f18 <FDCAN_ReadMemory+0xc8>
	else if((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004ef6:	f7ff fe07 	bl	8004b08 <FDCAN_ReadByte>
 8004efa:	0003      	movs	r3, r0
 8004efc:	001a      	movs	r2, r3
 8004efe:	231f      	movs	r3, #31
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b1f      	cmp	r3, #31
 8004f04:	d104      	bne.n	8004f10 <FDCAN_ReadMemory+0xc0>
		printf("ReadMemory fail!\n");
 8004f06:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <FDCAN_ReadMemory+0xe4>)
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f000 fa0f 	bl	800532c <puts>
}
 8004f0e:	e003      	b.n	8004f18 <FDCAN_ReadMemory+0xc8>
		printf("error\n");
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <FDCAN_ReadMemory+0xe8>)
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 fa0a 	bl	800532c <puts>
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b014      	add	sp, #80	; 0x50
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	080061d8 	.word	0x080061d8
 8004f24:	200001a0 	.word	0x200001a0
 8004f28:	0800619c 	.word	0x0800619c
 8004f2c:	080061ac 	.word	0x080061ac
 8004f30:	080061b0 	.word	0x080061b0
 8004f34:	080061c4 	.word	0x080061c4
 8004f38:	08006168 	.word	0x08006168

08004f3c <FDCAN_WriteMemory>:

void FDCAN_WriteMemory(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b094      	sub	sp, #80	; 0x50
 8004f40:	af00      	add	r7, sp, #0
	uint32_t address;
	uint8_t data[64]={0};
 8004f42:	230c      	movs	r3, #12
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	223c      	movs	r2, #60	; 0x3c
 8004f4e:	2100      	movs	r1, #0
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 fae7 	bl	8005524 <memset>
	uint8_t txdata[5] = {0x08,0x01,0x00,0x00,0xFF};
 8004f56:	1d3b      	adds	r3, r7, #4
 8004f58:	4a26      	ldr	r2, [pc, #152]	; (8004ff4 <FDCAN_WriteMemory+0xb8>)
 8004f5a:	6811      	ldr	r1, [r2, #0]
 8004f5c:	6019      	str	r1, [r3, #0]
 8004f5e:	7912      	ldrb	r2, [r2, #4]
 8004f60:	711a      	strb	r2, [r3, #4]
	TxHeader.Identifier = WRITE;
 8004f62:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <FDCAN_WriteMemory+0xbc>)
 8004f64:	2231      	movs	r2, #49	; 0x31
 8004f66:	601a      	str	r2, [r3, #0]

//	address = 0x08000000;

	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_5);
 8004f68:	1d3b      	adds	r3, r7, #4
 8004f6a:	2105      	movs	r1, #5
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7ff fd97 	bl	8004aa0 <FDCAN_SendBytes>
	FDCAN_TxConfig();
 8004f72:	f7ff fd53 	bl	8004a1c <FDCAN_TxConfig>
	HAL_Delay(10);
 8004f76:	200a      	movs	r0, #10
 8004f78:	f7fb ff9e 	bl	8000eb8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004f7c:	f7ff fdc4 	bl	8004b08 <FDCAN_ReadByte>
 8004f80:	0003      	movs	r3, r0
 8004f82:	001a      	movs	r2, r3
 8004f84:	2379      	movs	r3, #121	; 0x79
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b79      	cmp	r3, #121	; 0x79
 8004f8a:	d11e      	bne.n	8004fca <FDCAN_WriteMemory+0x8e>
	{
		for (int i=0;i<4;i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f90:	e008      	b.n	8004fa4 <FDCAN_WriteMemory+0x68>
//			{
//				data[count] = FLASH_Read(address++);
//				printf("%x ",data[count]);
//			}
//			printf("\n");
			FDCAN_SendBytes(data,FDCAN_DLC_BYTES_64);
 8004f92:	230c      	movs	r3, #12
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	210f      	movs	r1, #15
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff fd81 	bl	8004aa0 <FDCAN_SendBytes>
		for (int i=0;i<4;i++)
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	ddf3      	ble.n	8004f92 <FDCAN_WriteMemory+0x56>
		}

		HAL_Delay(10);
 8004faa:	200a      	movs	r0, #10
 8004fac:	f7fb ff84 	bl	8000eb8 <HAL_Delay>
		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004fb0:	f7ff fdaa 	bl	8004b08 <FDCAN_ReadByte>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	001a      	movs	r2, r3
 8004fb8:	2379      	movs	r3, #121	; 0x79
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b79      	cmp	r3, #121	; 0x79
 8004fbe:	d115      	bne.n	8004fec <FDCAN_WriteMemory+0xb0>
		{
			printf("WriteMemory Success!\n");
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <FDCAN_WriteMemory+0xc0>)
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 f9b2 	bl	800532c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004fc8:	e010      	b.n	8004fec <FDCAN_WriteMemory+0xb0>
	else if ((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004fca:	f7ff fd9d 	bl	8004b08 <FDCAN_ReadByte>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	001a      	movs	r2, r3
 8004fd2:	231f      	movs	r3, #31
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b1f      	cmp	r3, #31
 8004fd8:	d104      	bne.n	8004fe4 <FDCAN_WriteMemory+0xa8>
		printf("WriteMemory fail!\n");
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <FDCAN_WriteMemory+0xc4>)
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f000 f9a5 	bl	800532c <puts>
}
 8004fe2:	e003      	b.n	8004fec <FDCAN_WriteMemory+0xb0>
		printf("error\n");
 8004fe4:	4b07      	ldr	r3, [pc, #28]	; (8005004 <FDCAN_WriteMemory+0xc8>)
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f000 f9a0 	bl	800532c <puts>
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b014      	add	sp, #80	; 0x50
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	080061d8 	.word	0x080061d8
 8004ff8:	200001a0 	.word	0x200001a0
 8004ffc:	080061e0 	.word	0x080061e0
 8005000:	080061f8 	.word	0x080061f8
 8005004:	08006168 	.word	0x08006168

08005008 <FDCAN_EraseMemory>:

void FDCAN_EraseMemory(void)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b093      	sub	sp, #76	; 0x4c
 800500c:	af00      	add	r7, sp, #0
	uint8_t data[64]={0};
 800500e:	2408      	movs	r4, #8
 8005010:	193b      	adds	r3, r7, r4
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	3304      	adds	r3, #4
 8005018:	223c      	movs	r2, #60	; 0x3c
 800501a:	2100      	movs	r1, #0
 800501c:	0018      	movs	r0, r3
 800501e:	f000 fa81 	bl	8005524 <memset>
	uint8_t txdata[2] = {0x00,0x01};
 8005022:	1d3b      	adds	r3, r7, #4
 8005024:	2280      	movs	r2, #128	; 0x80
 8005026:	0052      	lsls	r2, r2, #1
 8005028:	801a      	strh	r2, [r3, #0]
	data[0] = 0x00;
 800502a:	193b      	adds	r3, r7, r4
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x20;
 8005030:	193b      	adds	r3, r7, r4
 8005032:	2220      	movs	r2, #32
 8005034:	705a      	strb	r2, [r3, #1]
	TxHeader.Identifier = ERASE;
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <FDCAN_EraseMemory+0xac>)
 8005038:	2244      	movs	r2, #68	; 0x44
 800503a:	601a      	str	r2, [r3, #0]

	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_2);
 800503c:	1d3b      	adds	r3, r7, #4
 800503e:	2102      	movs	r1, #2
 8005040:	0018      	movs	r0, r3
 8005042:	f7ff fd2d 	bl	8004aa0 <FDCAN_SendBytes>
	FDCAN_TxConfig();
 8005046:	f7ff fce9 	bl	8004a1c <FDCAN_TxConfig>
	HAL_Delay(10);
 800504a:	200a      	movs	r0, #10
 800504c:	f7fb ff34 	bl	8000eb8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8005050:	f7ff fd5a 	bl	8004b08 <FDCAN_ReadByte>
 8005054:	0003      	movs	r3, r0
 8005056:	001a      	movs	r2, r3
 8005058:	2379      	movs	r3, #121	; 0x79
 800505a:	4013      	ands	r3, r2
 800505c:	2b79      	cmp	r3, #121	; 0x79
 800505e:	d114      	bne.n	800508a <FDCAN_EraseMemory+0x82>
	{
		FDCAN_SendBytes(data,FDCAN_DLC_BYTES_64);
 8005060:	193b      	adds	r3, r7, r4
 8005062:	210f      	movs	r1, #15
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff fd1b 	bl	8004aa0 <FDCAN_SendBytes>

		HAL_Delay(100);
 800506a:	2064      	movs	r0, #100	; 0x64
 800506c:	f7fb ff24 	bl	8000eb8 <HAL_Delay>
		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8005070:	f7ff fd4a 	bl	8004b08 <FDCAN_ReadByte>
 8005074:	0003      	movs	r3, r0
 8005076:	001a      	movs	r2, r3
 8005078:	2379      	movs	r3, #121	; 0x79
 800507a:	4013      	ands	r3, r2
 800507c:	2b79      	cmp	r3, #121	; 0x79
 800507e:	d115      	bne.n	80050ac <FDCAN_EraseMemory+0xa4>
		{
			printf("EraseMemory Success!\n");
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <FDCAN_EraseMemory+0xb0>)
 8005082:	0018      	movs	r0, r3
 8005084:	f000 f952 	bl	800532c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8005088:	e010      	b.n	80050ac <FDCAN_EraseMemory+0xa4>
	else if ((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 800508a:	f7ff fd3d 	bl	8004b08 <FDCAN_ReadByte>
 800508e:	0003      	movs	r3, r0
 8005090:	001a      	movs	r2, r3
 8005092:	231f      	movs	r3, #31
 8005094:	4013      	ands	r3, r2
 8005096:	2b1f      	cmp	r3, #31
 8005098:	d104      	bne.n	80050a4 <FDCAN_EraseMemory+0x9c>
		printf("WriteMemory fail!\n");
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <FDCAN_EraseMemory+0xb4>)
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f945 	bl	800532c <puts>
}
 80050a2:	e003      	b.n	80050ac <FDCAN_EraseMemory+0xa4>
		printf("error\n");
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <FDCAN_EraseMemory+0xb8>)
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 f940 	bl	800532c <puts>
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b013      	add	sp, #76	; 0x4c
 80050b2:	bd90      	pop	{r4, r7, pc}
 80050b4:	200001a0 	.word	0x200001a0
 80050b8:	0800620c 	.word	0x0800620c
 80050bc:	080061f8 	.word	0x080061f8
 80050c0:	08006168 	.word	0x08006168

080050c4 <std>:
 80050c4:	2300      	movs	r3, #0
 80050c6:	b510      	push	{r4, lr}
 80050c8:	0004      	movs	r4, r0
 80050ca:	6003      	str	r3, [r0, #0]
 80050cc:	6043      	str	r3, [r0, #4]
 80050ce:	6083      	str	r3, [r0, #8]
 80050d0:	8181      	strh	r1, [r0, #12]
 80050d2:	6643      	str	r3, [r0, #100]	; 0x64
 80050d4:	81c2      	strh	r2, [r0, #14]
 80050d6:	6103      	str	r3, [r0, #16]
 80050d8:	6143      	str	r3, [r0, #20]
 80050da:	6183      	str	r3, [r0, #24]
 80050dc:	0019      	movs	r1, r3
 80050de:	2208      	movs	r2, #8
 80050e0:	305c      	adds	r0, #92	; 0x5c
 80050e2:	f000 fa1f 	bl	8005524 <memset>
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <std+0x50>)
 80050e8:	6224      	str	r4, [r4, #32]
 80050ea:	6263      	str	r3, [r4, #36]	; 0x24
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <std+0x54>)
 80050ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <std+0x58>)
 80050f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <std+0x5c>)
 80050f6:	6323      	str	r3, [r4, #48]	; 0x30
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <std+0x60>)
 80050fa:	429c      	cmp	r4, r3
 80050fc:	d005      	beq.n	800510a <std+0x46>
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <std+0x64>)
 8005100:	429c      	cmp	r4, r3
 8005102:	d002      	beq.n	800510a <std+0x46>
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <std+0x68>)
 8005106:	429c      	cmp	r4, r3
 8005108:	d103      	bne.n	8005112 <std+0x4e>
 800510a:	0020      	movs	r0, r4
 800510c:	3058      	adds	r0, #88	; 0x58
 800510e:	f000 fa89 	bl	8005624 <__retarget_lock_init_recursive>
 8005112:	bd10      	pop	{r4, pc}
 8005114:	08005341 	.word	0x08005341
 8005118:	08005369 	.word	0x08005369
 800511c:	080053a1 	.word	0x080053a1
 8005120:	080053cd 	.word	0x080053cd
 8005124:	2000a450 	.word	0x2000a450
 8005128:	2000a4b8 	.word	0x2000a4b8
 800512c:	2000a520 	.word	0x2000a520

08005130 <stdio_exit_handler>:
 8005130:	b510      	push	{r4, lr}
 8005132:	4a03      	ldr	r2, [pc, #12]	; (8005140 <stdio_exit_handler+0x10>)
 8005134:	4903      	ldr	r1, [pc, #12]	; (8005144 <stdio_exit_handler+0x14>)
 8005136:	4804      	ldr	r0, [pc, #16]	; (8005148 <stdio_exit_handler+0x18>)
 8005138:	f000 f86c 	bl	8005214 <_fwalk_sglue>
 800513c:	bd10      	pop	{r4, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	20000010 	.word	0x20000010
 8005144:	08005ed5 	.word	0x08005ed5
 8005148:	2000001c 	.word	0x2000001c

0800514c <cleanup_stdio>:
 800514c:	6841      	ldr	r1, [r0, #4]
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <cleanup_stdio+0x30>)
 8005150:	b510      	push	{r4, lr}
 8005152:	0004      	movs	r4, r0
 8005154:	4299      	cmp	r1, r3
 8005156:	d001      	beq.n	800515c <cleanup_stdio+0x10>
 8005158:	f000 febc 	bl	8005ed4 <_fflush_r>
 800515c:	68a1      	ldr	r1, [r4, #8]
 800515e:	4b08      	ldr	r3, [pc, #32]	; (8005180 <cleanup_stdio+0x34>)
 8005160:	4299      	cmp	r1, r3
 8005162:	d002      	beq.n	800516a <cleanup_stdio+0x1e>
 8005164:	0020      	movs	r0, r4
 8005166:	f000 feb5 	bl	8005ed4 <_fflush_r>
 800516a:	68e1      	ldr	r1, [r4, #12]
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <cleanup_stdio+0x38>)
 800516e:	4299      	cmp	r1, r3
 8005170:	d002      	beq.n	8005178 <cleanup_stdio+0x2c>
 8005172:	0020      	movs	r0, r4
 8005174:	f000 feae 	bl	8005ed4 <_fflush_r>
 8005178:	bd10      	pop	{r4, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	2000a450 	.word	0x2000a450
 8005180:	2000a4b8 	.word	0x2000a4b8
 8005184:	2000a520 	.word	0x2000a520

08005188 <global_stdio_init.part.0>:
 8005188:	b510      	push	{r4, lr}
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <global_stdio_init.part.0+0x28>)
 800518c:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <global_stdio_init.part.0+0x2c>)
 800518e:	2104      	movs	r1, #4
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	4809      	ldr	r0, [pc, #36]	; (80051b8 <global_stdio_init.part.0+0x30>)
 8005194:	2200      	movs	r2, #0
 8005196:	f7ff ff95 	bl	80050c4 <std>
 800519a:	2201      	movs	r2, #1
 800519c:	2109      	movs	r1, #9
 800519e:	4807      	ldr	r0, [pc, #28]	; (80051bc <global_stdio_init.part.0+0x34>)
 80051a0:	f7ff ff90 	bl	80050c4 <std>
 80051a4:	2202      	movs	r2, #2
 80051a6:	2112      	movs	r1, #18
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <global_stdio_init.part.0+0x38>)
 80051aa:	f7ff ff8b 	bl	80050c4 <std>
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	2000a588 	.word	0x2000a588
 80051b4:	08005131 	.word	0x08005131
 80051b8:	2000a450 	.word	0x2000a450
 80051bc:	2000a4b8 	.word	0x2000a4b8
 80051c0:	2000a520 	.word	0x2000a520

080051c4 <__sfp_lock_acquire>:
 80051c4:	b510      	push	{r4, lr}
 80051c6:	4802      	ldr	r0, [pc, #8]	; (80051d0 <__sfp_lock_acquire+0xc>)
 80051c8:	f000 fa2d 	bl	8005626 <__retarget_lock_acquire_recursive>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	2000a591 	.word	0x2000a591

080051d4 <__sfp_lock_release>:
 80051d4:	b510      	push	{r4, lr}
 80051d6:	4802      	ldr	r0, [pc, #8]	; (80051e0 <__sfp_lock_release+0xc>)
 80051d8:	f000 fa26 	bl	8005628 <__retarget_lock_release_recursive>
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	2000a591 	.word	0x2000a591

080051e4 <__sinit>:
 80051e4:	b510      	push	{r4, lr}
 80051e6:	0004      	movs	r4, r0
 80051e8:	f7ff ffec 	bl	80051c4 <__sfp_lock_acquire>
 80051ec:	6a23      	ldr	r3, [r4, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <__sinit+0x14>
 80051f2:	f7ff ffef 	bl	80051d4 <__sfp_lock_release>
 80051f6:	bd10      	pop	{r4, pc}
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__sinit+0x28>)
 80051fa:	6223      	str	r3, [r4, #32]
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <__sinit+0x2c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f6      	bne.n	80051f2 <__sinit+0xe>
 8005204:	f7ff ffc0 	bl	8005188 <global_stdio_init.part.0>
 8005208:	e7f3      	b.n	80051f2 <__sinit+0xe>
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	0800514d 	.word	0x0800514d
 8005210:	2000a588 	.word	0x2000a588

08005214 <_fwalk_sglue>:
 8005214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005216:	0014      	movs	r4, r2
 8005218:	2600      	movs	r6, #0
 800521a:	9000      	str	r0, [sp, #0]
 800521c:	9101      	str	r1, [sp, #4]
 800521e:	68a5      	ldr	r5, [r4, #8]
 8005220:	6867      	ldr	r7, [r4, #4]
 8005222:	3f01      	subs	r7, #1
 8005224:	d504      	bpl.n	8005230 <_fwalk_sglue+0x1c>
 8005226:	6824      	ldr	r4, [r4, #0]
 8005228:	2c00      	cmp	r4, #0
 800522a:	d1f8      	bne.n	800521e <_fwalk_sglue+0xa>
 800522c:	0030      	movs	r0, r6
 800522e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005230:	89ab      	ldrh	r3, [r5, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d908      	bls.n	8005248 <_fwalk_sglue+0x34>
 8005236:	220e      	movs	r2, #14
 8005238:	5eab      	ldrsh	r3, [r5, r2]
 800523a:	3301      	adds	r3, #1
 800523c:	d004      	beq.n	8005248 <_fwalk_sglue+0x34>
 800523e:	0029      	movs	r1, r5
 8005240:	9800      	ldr	r0, [sp, #0]
 8005242:	9b01      	ldr	r3, [sp, #4]
 8005244:	4798      	blx	r3
 8005246:	4306      	orrs	r6, r0
 8005248:	3568      	adds	r5, #104	; 0x68
 800524a:	e7ea      	b.n	8005222 <_fwalk_sglue+0xe>

0800524c <iprintf>:
 800524c:	b40f      	push	{r0, r1, r2, r3}
 800524e:	b507      	push	{r0, r1, r2, lr}
 8005250:	4905      	ldr	r1, [pc, #20]	; (8005268 <iprintf+0x1c>)
 8005252:	ab04      	add	r3, sp, #16
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	cb04      	ldmia	r3!, {r2}
 8005258:	6881      	ldr	r1, [r0, #8]
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	f000 fb14 	bl	8005888 <_vfiprintf_r>
 8005260:	b003      	add	sp, #12
 8005262:	bc08      	pop	{r3}
 8005264:	b004      	add	sp, #16
 8005266:	4718      	bx	r3
 8005268:	20000068 	.word	0x20000068

0800526c <putchar>:
 800526c:	b510      	push	{r4, lr}
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <putchar+0x10>)
 8005270:	0001      	movs	r1, r0
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	6882      	ldr	r2, [r0, #8]
 8005276:	f000 febf 	bl	8005ff8 <_putc_r>
 800527a:	bd10      	pop	{r4, pc}
 800527c:	20000068 	.word	0x20000068

08005280 <_puts_r>:
 8005280:	6a03      	ldr	r3, [r0, #32]
 8005282:	b570      	push	{r4, r5, r6, lr}
 8005284:	0005      	movs	r5, r0
 8005286:	000e      	movs	r6, r1
 8005288:	6884      	ldr	r4, [r0, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <_puts_r+0x12>
 800528e:	f7ff ffa9 	bl	80051e4 <__sinit>
 8005292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005294:	07db      	lsls	r3, r3, #31
 8005296:	d405      	bmi.n	80052a4 <_puts_r+0x24>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	059b      	lsls	r3, r3, #22
 800529c:	d402      	bmi.n	80052a4 <_puts_r+0x24>
 800529e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a0:	f000 f9c1 	bl	8005626 <__retarget_lock_acquire_recursive>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	071b      	lsls	r3, r3, #28
 80052a8:	d502      	bpl.n	80052b0 <_puts_r+0x30>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11f      	bne.n	80052f0 <_puts_r+0x70>
 80052b0:	0021      	movs	r1, r4
 80052b2:	0028      	movs	r0, r5
 80052b4:	f000 f8d2 	bl	800545c <__swsetup_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d019      	beq.n	80052f0 <_puts_r+0x70>
 80052bc:	2501      	movs	r5, #1
 80052be:	426d      	negs	r5, r5
 80052c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c2:	07db      	lsls	r3, r3, #31
 80052c4:	d405      	bmi.n	80052d2 <_puts_r+0x52>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	059b      	lsls	r3, r3, #22
 80052ca:	d402      	bmi.n	80052d2 <_puts_r+0x52>
 80052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ce:	f000 f9ab 	bl	8005628 <__retarget_lock_release_recursive>
 80052d2:	0028      	movs	r0, r5
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	3601      	adds	r6, #1
 80052d8:	60a3      	str	r3, [r4, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da04      	bge.n	80052e8 <_puts_r+0x68>
 80052de:	69a2      	ldr	r2, [r4, #24]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	dc16      	bgt.n	8005312 <_puts_r+0x92>
 80052e4:	290a      	cmp	r1, #10
 80052e6:	d014      	beq.n	8005312 <_puts_r+0x92>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	6022      	str	r2, [r4, #0]
 80052ee:	7019      	strb	r1, [r3, #0]
 80052f0:	68a3      	ldr	r3, [r4, #8]
 80052f2:	7831      	ldrb	r1, [r6, #0]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	2900      	cmp	r1, #0
 80052f8:	d1ed      	bne.n	80052d6 <_puts_r+0x56>
 80052fa:	60a3      	str	r3, [r4, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	da0f      	bge.n	8005320 <_puts_r+0xa0>
 8005300:	0028      	movs	r0, r5
 8005302:	0022      	movs	r2, r4
 8005304:	310a      	adds	r1, #10
 8005306:	f000 f867 	bl	80053d8 <__swbuf_r>
 800530a:	250a      	movs	r5, #10
 800530c:	3001      	adds	r0, #1
 800530e:	d1d7      	bne.n	80052c0 <_puts_r+0x40>
 8005310:	e7d4      	b.n	80052bc <_puts_r+0x3c>
 8005312:	0022      	movs	r2, r4
 8005314:	0028      	movs	r0, r5
 8005316:	f000 f85f 	bl	80053d8 <__swbuf_r>
 800531a:	3001      	adds	r0, #1
 800531c:	d1e8      	bne.n	80052f0 <_puts_r+0x70>
 800531e:	e7cd      	b.n	80052bc <_puts_r+0x3c>
 8005320:	250a      	movs	r5, #10
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701d      	strb	r5, [r3, #0]
 800532a:	e7c9      	b.n	80052c0 <_puts_r+0x40>

0800532c <puts>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4b03      	ldr	r3, [pc, #12]	; (800533c <puts+0x10>)
 8005330:	0001      	movs	r1, r0
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	f7ff ffa4 	bl	8005280 <_puts_r>
 8005338:	bd10      	pop	{r4, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	20000068 	.word	0x20000068

08005340 <__sread>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	000c      	movs	r4, r1
 8005344:	250e      	movs	r5, #14
 8005346:	5f49      	ldrsh	r1, [r1, r5]
 8005348:	f000 f91a 	bl	8005580 <_read_r>
 800534c:	2800      	cmp	r0, #0
 800534e:	db03      	blt.n	8005358 <__sread+0x18>
 8005350:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005352:	181b      	adds	r3, r3, r0
 8005354:	6563      	str	r3, [r4, #84]	; 0x54
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	4a02      	ldr	r2, [pc, #8]	; (8005364 <__sread+0x24>)
 800535c:	4013      	ands	r3, r2
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	e7f9      	b.n	8005356 <__sread+0x16>
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	ffffefff 	.word	0xffffefff

08005368 <__swrite>:
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536a:	001f      	movs	r7, r3
 800536c:	898b      	ldrh	r3, [r1, #12]
 800536e:	0005      	movs	r5, r0
 8005370:	000c      	movs	r4, r1
 8005372:	0016      	movs	r6, r2
 8005374:	05db      	lsls	r3, r3, #23
 8005376:	d505      	bpl.n	8005384 <__swrite+0x1c>
 8005378:	230e      	movs	r3, #14
 800537a:	5ec9      	ldrsh	r1, [r1, r3]
 800537c:	2200      	movs	r2, #0
 800537e:	2302      	movs	r3, #2
 8005380:	f000 f8ea 	bl	8005558 <_lseek_r>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <__swrite+0x34>)
 8005388:	0028      	movs	r0, r5
 800538a:	4013      	ands	r3, r2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	0032      	movs	r2, r6
 8005390:	230e      	movs	r3, #14
 8005392:	5ee1      	ldrsh	r1, [r4, r3]
 8005394:	003b      	movs	r3, r7
 8005396:	f000 f907 	bl	80055a8 <_write_r>
 800539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539c:	ffffefff 	.word	0xffffefff

080053a0 <__sseek>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	000c      	movs	r4, r1
 80053a4:	250e      	movs	r5, #14
 80053a6:	5f49      	ldrsh	r1, [r1, r5]
 80053a8:	f000 f8d6 	bl	8005558 <_lseek_r>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	1c42      	adds	r2, r0, #1
 80053b0:	d103      	bne.n	80053ba <__sseek+0x1a>
 80053b2:	4a05      	ldr	r2, [pc, #20]	; (80053c8 <__sseek+0x28>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	0152      	lsls	r2, r2, #5
 80053be:	4313      	orrs	r3, r2
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	6560      	str	r0, [r4, #84]	; 0x54
 80053c4:	e7f8      	b.n	80053b8 <__sseek+0x18>
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	ffffefff 	.word	0xffffefff

080053cc <__sclose>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	230e      	movs	r3, #14
 80053d0:	5ec9      	ldrsh	r1, [r1, r3]
 80053d2:	f000 f8af 	bl	8005534 <_close_r>
 80053d6:	bd10      	pop	{r4, pc}

080053d8 <__swbuf_r>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	0006      	movs	r6, r0
 80053dc:	000d      	movs	r5, r1
 80053de:	0014      	movs	r4, r2
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d004      	beq.n	80053ee <__swbuf_r+0x16>
 80053e4:	6a03      	ldr	r3, [r0, #32]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <__swbuf_r+0x16>
 80053ea:	f7ff fefb 	bl	80051e4 <__sinit>
 80053ee:	69a3      	ldr	r3, [r4, #24]
 80053f0:	60a3      	str	r3, [r4, #8]
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	071b      	lsls	r3, r3, #28
 80053f6:	d528      	bpl.n	800544a <__swbuf_r+0x72>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d025      	beq.n	800544a <__swbuf_r+0x72>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	b2ef      	uxtb	r7, r5
 8005404:	1ac0      	subs	r0, r0, r3
 8005406:	6963      	ldr	r3, [r4, #20]
 8005408:	b2ed      	uxtb	r5, r5
 800540a:	4283      	cmp	r3, r0
 800540c:	dc05      	bgt.n	800541a <__swbuf_r+0x42>
 800540e:	0021      	movs	r1, r4
 8005410:	0030      	movs	r0, r6
 8005412:	f000 fd5f 	bl	8005ed4 <_fflush_r>
 8005416:	2800      	cmp	r0, #0
 8005418:	d11d      	bne.n	8005456 <__swbuf_r+0x7e>
 800541a:	68a3      	ldr	r3, [r4, #8]
 800541c:	3001      	adds	r0, #1
 800541e:	3b01      	subs	r3, #1
 8005420:	60a3      	str	r3, [r4, #8]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	6022      	str	r2, [r4, #0]
 8005428:	701f      	strb	r7, [r3, #0]
 800542a:	6963      	ldr	r3, [r4, #20]
 800542c:	4283      	cmp	r3, r0
 800542e:	d004      	beq.n	800543a <__swbuf_r+0x62>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	07db      	lsls	r3, r3, #31
 8005434:	d507      	bpl.n	8005446 <__swbuf_r+0x6e>
 8005436:	2d0a      	cmp	r5, #10
 8005438:	d105      	bne.n	8005446 <__swbuf_r+0x6e>
 800543a:	0021      	movs	r1, r4
 800543c:	0030      	movs	r0, r6
 800543e:	f000 fd49 	bl	8005ed4 <_fflush_r>
 8005442:	2800      	cmp	r0, #0
 8005444:	d107      	bne.n	8005456 <__swbuf_r+0x7e>
 8005446:	0028      	movs	r0, r5
 8005448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800544a:	0021      	movs	r1, r4
 800544c:	0030      	movs	r0, r6
 800544e:	f000 f805 	bl	800545c <__swsetup_r>
 8005452:	2800      	cmp	r0, #0
 8005454:	d0d3      	beq.n	80053fe <__swbuf_r+0x26>
 8005456:	2501      	movs	r5, #1
 8005458:	426d      	negs	r5, r5
 800545a:	e7f4      	b.n	8005446 <__swbuf_r+0x6e>

0800545c <__swsetup_r>:
 800545c:	4b30      	ldr	r3, [pc, #192]	; (8005520 <__swsetup_r+0xc4>)
 800545e:	b570      	push	{r4, r5, r6, lr}
 8005460:	0005      	movs	r5, r0
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	000c      	movs	r4, r1
 8005466:	2800      	cmp	r0, #0
 8005468:	d004      	beq.n	8005474 <__swsetup_r+0x18>
 800546a:	6a03      	ldr	r3, [r0, #32]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <__swsetup_r+0x18>
 8005470:	f7ff feb8 	bl	80051e4 <__sinit>
 8005474:	230c      	movs	r3, #12
 8005476:	5ee2      	ldrsh	r2, [r4, r3]
 8005478:	b293      	uxth	r3, r2
 800547a:	0711      	lsls	r1, r2, #28
 800547c:	d423      	bmi.n	80054c6 <__swsetup_r+0x6a>
 800547e:	06d9      	lsls	r1, r3, #27
 8005480:	d407      	bmi.n	8005492 <__swsetup_r+0x36>
 8005482:	2309      	movs	r3, #9
 8005484:	2001      	movs	r0, #1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	3337      	adds	r3, #55	; 0x37
 800548a:	4313      	orrs	r3, r2
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	4240      	negs	r0, r0
 8005490:	bd70      	pop	{r4, r5, r6, pc}
 8005492:	075b      	lsls	r3, r3, #29
 8005494:	d513      	bpl.n	80054be <__swsetup_r+0x62>
 8005496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005498:	2900      	cmp	r1, #0
 800549a:	d008      	beq.n	80054ae <__swsetup_r+0x52>
 800549c:	0023      	movs	r3, r4
 800549e:	3344      	adds	r3, #68	; 0x44
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d002      	beq.n	80054aa <__swsetup_r+0x4e>
 80054a4:	0028      	movs	r0, r5
 80054a6:	f000 f8c9 	bl	800563c <_free_r>
 80054aa:	2300      	movs	r3, #0
 80054ac:	6363      	str	r3, [r4, #52]	; 0x34
 80054ae:	2224      	movs	r2, #36	; 0x24
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	4393      	bics	r3, r2
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	2300      	movs	r3, #0
 80054b8:	6063      	str	r3, [r4, #4]
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	2308      	movs	r3, #8
 80054c0:	89a2      	ldrh	r2, [r4, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <__swsetup_r+0x88>
 80054cc:	21a0      	movs	r1, #160	; 0xa0
 80054ce:	2280      	movs	r2, #128	; 0x80
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	0089      	lsls	r1, r1, #2
 80054d4:	0092      	lsls	r2, r2, #2
 80054d6:	400b      	ands	r3, r1
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <__swsetup_r+0x88>
 80054dc:	0021      	movs	r1, r4
 80054de:	0028      	movs	r0, r5
 80054e0:	f000 fd4c 	bl	8005f7c <__smakebuf_r>
 80054e4:	220c      	movs	r2, #12
 80054e6:	5ea3      	ldrsh	r3, [r4, r2]
 80054e8:	2001      	movs	r0, #1
 80054ea:	001a      	movs	r2, r3
 80054ec:	b299      	uxth	r1, r3
 80054ee:	4002      	ands	r2, r0
 80054f0:	4203      	tst	r3, r0
 80054f2:	d00f      	beq.n	8005514 <__swsetup_r+0xb8>
 80054f4:	2200      	movs	r2, #0
 80054f6:	60a2      	str	r2, [r4, #8]
 80054f8:	6962      	ldr	r2, [r4, #20]
 80054fa:	4252      	negs	r2, r2
 80054fc:	61a2      	str	r2, [r4, #24]
 80054fe:	2000      	movs	r0, #0
 8005500:	6922      	ldr	r2, [r4, #16]
 8005502:	4282      	cmp	r2, r0
 8005504:	d1c4      	bne.n	8005490 <__swsetup_r+0x34>
 8005506:	0609      	lsls	r1, r1, #24
 8005508:	d5c2      	bpl.n	8005490 <__swsetup_r+0x34>
 800550a:	2240      	movs	r2, #64	; 0x40
 800550c:	4313      	orrs	r3, r2
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	3801      	subs	r0, #1
 8005512:	e7bd      	b.n	8005490 <__swsetup_r+0x34>
 8005514:	0788      	lsls	r0, r1, #30
 8005516:	d400      	bmi.n	800551a <__swsetup_r+0xbe>
 8005518:	6962      	ldr	r2, [r4, #20]
 800551a:	60a2      	str	r2, [r4, #8]
 800551c:	e7ef      	b.n	80054fe <__swsetup_r+0xa2>
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	20000068 	.word	0x20000068

08005524 <memset>:
 8005524:	0003      	movs	r3, r0
 8005526:	1882      	adds	r2, r0, r2
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <_close_r>:
 8005534:	2300      	movs	r3, #0
 8005536:	b570      	push	{r4, r5, r6, lr}
 8005538:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_close_r+0x20>)
 800553a:	0004      	movs	r4, r0
 800553c:	0008      	movs	r0, r1
 800553e:	602b      	str	r3, [r5, #0]
 8005540:	f7fb fae9 	bl	8000b16 <_close>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d103      	bne.n	8005550 <_close_r+0x1c>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d000      	beq.n	8005550 <_close_r+0x1c>
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	2000a58c 	.word	0x2000a58c

08005558 <_lseek_r>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	0004      	movs	r4, r0
 800555c:	0008      	movs	r0, r1
 800555e:	0011      	movs	r1, r2
 8005560:	001a      	movs	r2, r3
 8005562:	2300      	movs	r3, #0
 8005564:	4d05      	ldr	r5, [pc, #20]	; (800557c <_lseek_r+0x24>)
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	f7fb faf6 	bl	8000b58 <_lseek>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d103      	bne.n	8005578 <_lseek_r+0x20>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d000      	beq.n	8005578 <_lseek_r+0x20>
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	bd70      	pop	{r4, r5, r6, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	2000a58c 	.word	0x2000a58c

08005580 <_read_r>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	0004      	movs	r4, r0
 8005584:	0008      	movs	r0, r1
 8005586:	0011      	movs	r1, r2
 8005588:	001a      	movs	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	4d05      	ldr	r5, [pc, #20]	; (80055a4 <_read_r+0x24>)
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fb fa88 	bl	8000aa4 <_read>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d103      	bne.n	80055a0 <_read_r+0x20>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d000      	beq.n	80055a0 <_read_r+0x20>
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	2000a58c 	.word	0x2000a58c

080055a8 <_write_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	0004      	movs	r4, r0
 80055ac:	0008      	movs	r0, r1
 80055ae:	0011      	movs	r1, r2
 80055b0:	001a      	movs	r2, r3
 80055b2:	2300      	movs	r3, #0
 80055b4:	4d05      	ldr	r5, [pc, #20]	; (80055cc <_write_r+0x24>)
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fb fa91 	bl	8000ade <_write>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d103      	bne.n	80055c8 <_write_r+0x20>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d000      	beq.n	80055c8 <_write_r+0x20>
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	2000a58c 	.word	0x2000a58c

080055d0 <__errno>:
 80055d0:	4b01      	ldr	r3, [pc, #4]	; (80055d8 <__errno+0x8>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	4770      	bx	lr
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	20000068 	.word	0x20000068

080055dc <__libc_init_array>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	2600      	movs	r6, #0
 80055e0:	4c0c      	ldr	r4, [pc, #48]	; (8005614 <__libc_init_array+0x38>)
 80055e2:	4d0d      	ldr	r5, [pc, #52]	; (8005618 <__libc_init_array+0x3c>)
 80055e4:	1b64      	subs	r4, r4, r5
 80055e6:	10a4      	asrs	r4, r4, #2
 80055e8:	42a6      	cmp	r6, r4
 80055ea:	d109      	bne.n	8005600 <__libc_init_array+0x24>
 80055ec:	2600      	movs	r6, #0
 80055ee:	f000 fd7b 	bl	80060e8 <_init>
 80055f2:	4c0a      	ldr	r4, [pc, #40]	; (800561c <__libc_init_array+0x40>)
 80055f4:	4d0a      	ldr	r5, [pc, #40]	; (8005620 <__libc_init_array+0x44>)
 80055f6:	1b64      	subs	r4, r4, r5
 80055f8:	10a4      	asrs	r4, r4, #2
 80055fa:	42a6      	cmp	r6, r4
 80055fc:	d105      	bne.n	800560a <__libc_init_array+0x2e>
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	00b3      	lsls	r3, r6, #2
 8005602:	58eb      	ldr	r3, [r5, r3]
 8005604:	4798      	blx	r3
 8005606:	3601      	adds	r6, #1
 8005608:	e7ee      	b.n	80055e8 <__libc_init_array+0xc>
 800560a:	00b3      	lsls	r3, r6, #2
 800560c:	58eb      	ldr	r3, [r5, r3]
 800560e:	4798      	blx	r3
 8005610:	3601      	adds	r6, #1
 8005612:	e7f2      	b.n	80055fa <__libc_init_array+0x1e>
 8005614:	080062f8 	.word	0x080062f8
 8005618:	080062f8 	.word	0x080062f8
 800561c:	080062fc 	.word	0x080062fc
 8005620:	080062f8 	.word	0x080062f8

08005624 <__retarget_lock_init_recursive>:
 8005624:	4770      	bx	lr

08005626 <__retarget_lock_acquire_recursive>:
 8005626:	4770      	bx	lr

08005628 <__retarget_lock_release_recursive>:
 8005628:	4770      	bx	lr

0800562a <memcpy>:
 800562a:	2300      	movs	r3, #0
 800562c:	b510      	push	{r4, lr}
 800562e:	429a      	cmp	r2, r3
 8005630:	d100      	bne.n	8005634 <memcpy+0xa>
 8005632:	bd10      	pop	{r4, pc}
 8005634:	5ccc      	ldrb	r4, [r1, r3]
 8005636:	54c4      	strb	r4, [r0, r3]
 8005638:	3301      	adds	r3, #1
 800563a:	e7f8      	b.n	800562e <memcpy+0x4>

0800563c <_free_r>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	0005      	movs	r5, r0
 8005640:	2900      	cmp	r1, #0
 8005642:	d010      	beq.n	8005666 <_free_r+0x2a>
 8005644:	1f0c      	subs	r4, r1, #4
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	da00      	bge.n	800564e <_free_r+0x12>
 800564c:	18e4      	adds	r4, r4, r3
 800564e:	0028      	movs	r0, r5
 8005650:	f000 f8e2 	bl	8005818 <__malloc_lock>
 8005654:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <_free_r+0x90>)
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d105      	bne.n	8005668 <_free_r+0x2c>
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	6014      	str	r4, [r2, #0]
 8005660:	0028      	movs	r0, r5
 8005662:	f000 f8e1 	bl	8005828 <__malloc_unlock>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	42a3      	cmp	r3, r4
 800566a:	d908      	bls.n	800567e <_free_r+0x42>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	d1f3      	bne.n	800565c <_free_r+0x20>
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	1809      	adds	r1, r1, r0
 800567a:	6021      	str	r1, [r4, #0]
 800567c:	e7ee      	b.n	800565c <_free_r+0x20>
 800567e:	001a      	movs	r2, r3
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <_free_r+0x4e>
 8005686:	42a3      	cmp	r3, r4
 8005688:	d9f9      	bls.n	800567e <_free_r+0x42>
 800568a:	6811      	ldr	r1, [r2, #0]
 800568c:	1850      	adds	r0, r2, r1
 800568e:	42a0      	cmp	r0, r4
 8005690:	d10b      	bne.n	80056aa <_free_r+0x6e>
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	1809      	adds	r1, r1, r0
 8005696:	1850      	adds	r0, r2, r1
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	4283      	cmp	r3, r0
 800569c:	d1e0      	bne.n	8005660 <_free_r+0x24>
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	1841      	adds	r1, r0, r1
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	e7da      	b.n	8005660 <_free_r+0x24>
 80056aa:	42a0      	cmp	r0, r4
 80056ac:	d902      	bls.n	80056b4 <_free_r+0x78>
 80056ae:	230c      	movs	r3, #12
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	e7d5      	b.n	8005660 <_free_r+0x24>
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	1821      	adds	r1, r4, r0
 80056b8:	428b      	cmp	r3, r1
 80056ba:	d103      	bne.n	80056c4 <_free_r+0x88>
 80056bc:	6819      	ldr	r1, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	1809      	adds	r1, r1, r0
 80056c2:	6021      	str	r1, [r4, #0]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6054      	str	r4, [r2, #4]
 80056c8:	e7ca      	b.n	8005660 <_free_r+0x24>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	2000a594 	.word	0x2000a594

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	; (8005710 <sbrk_aligned+0x40>)
 80056d4:	000d      	movs	r5, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	0004      	movs	r4, r0
 80056da:	2900      	cmp	r1, #0
 80056dc:	d102      	bne.n	80056e4 <sbrk_aligned+0x14>
 80056de:	f000 fce5 	bl	80060ac <_sbrk_r>
 80056e2:	6030      	str	r0, [r6, #0]
 80056e4:	0029      	movs	r1, r5
 80056e6:	0020      	movs	r0, r4
 80056e8:	f000 fce0 	bl	80060ac <_sbrk_r>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d00a      	beq.n	8005706 <sbrk_aligned+0x36>
 80056f0:	2303      	movs	r3, #3
 80056f2:	1cc5      	adds	r5, r0, #3
 80056f4:	439d      	bics	r5, r3
 80056f6:	42a8      	cmp	r0, r5
 80056f8:	d007      	beq.n	800570a <sbrk_aligned+0x3a>
 80056fa:	1a29      	subs	r1, r5, r0
 80056fc:	0020      	movs	r0, r4
 80056fe:	f000 fcd5 	bl	80060ac <_sbrk_r>
 8005702:	3001      	adds	r0, #1
 8005704:	d101      	bne.n	800570a <sbrk_aligned+0x3a>
 8005706:	2501      	movs	r5, #1
 8005708:	426d      	negs	r5, r5
 800570a:	0028      	movs	r0, r5
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	2000a598 	.word	0x2000a598

08005714 <_malloc_r>:
 8005714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005716:	2203      	movs	r2, #3
 8005718:	1ccb      	adds	r3, r1, #3
 800571a:	4393      	bics	r3, r2
 800571c:	3308      	adds	r3, #8
 800571e:	0006      	movs	r6, r0
 8005720:	001f      	movs	r7, r3
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d238      	bcs.n	8005798 <_malloc_r+0x84>
 8005726:	270c      	movs	r7, #12
 8005728:	42b9      	cmp	r1, r7
 800572a:	d837      	bhi.n	800579c <_malloc_r+0x88>
 800572c:	0030      	movs	r0, r6
 800572e:	f000 f873 	bl	8005818 <__malloc_lock>
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <_malloc_r+0x100>)
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	001c      	movs	r4, r3
 800573a:	2c00      	cmp	r4, #0
 800573c:	d133      	bne.n	80057a6 <_malloc_r+0x92>
 800573e:	0039      	movs	r1, r7
 8005740:	0030      	movs	r0, r6
 8005742:	f7ff ffc5 	bl	80056d0 <sbrk_aligned>
 8005746:	0004      	movs	r4, r0
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d15e      	bne.n	800580a <_malloc_r+0xf6>
 800574c:	9b00      	ldr	r3, [sp, #0]
 800574e:	681c      	ldr	r4, [r3, #0]
 8005750:	0025      	movs	r5, r4
 8005752:	2d00      	cmp	r5, #0
 8005754:	d14e      	bne.n	80057f4 <_malloc_r+0xe0>
 8005756:	2c00      	cmp	r4, #0
 8005758:	d051      	beq.n	80057fe <_malloc_r+0xea>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	0029      	movs	r1, r5
 800575e:	18e3      	adds	r3, r4, r3
 8005760:	0030      	movs	r0, r6
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	f000 fca2 	bl	80060ac <_sbrk_r>
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	4283      	cmp	r3, r0
 800576c:	d147      	bne.n	80057fe <_malloc_r+0xea>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0030      	movs	r0, r6
 8005772:	1aff      	subs	r7, r7, r3
 8005774:	0039      	movs	r1, r7
 8005776:	f7ff ffab 	bl	80056d0 <sbrk_aligned>
 800577a:	3001      	adds	r0, #1
 800577c:	d03f      	beq.n	80057fe <_malloc_r+0xea>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	19db      	adds	r3, r3, r7
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	9b00      	ldr	r3, [sp, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d040      	beq.n	800580e <_malloc_r+0xfa>
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	42a2      	cmp	r2, r4
 8005790:	d133      	bne.n	80057fa <_malloc_r+0xe6>
 8005792:	2200      	movs	r2, #0
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	e014      	b.n	80057c2 <_malloc_r+0xae>
 8005798:	2b00      	cmp	r3, #0
 800579a:	dac5      	bge.n	8005728 <_malloc_r+0x14>
 800579c:	230c      	movs	r3, #12
 800579e:	2500      	movs	r5, #0
 80057a0:	6033      	str	r3, [r6, #0]
 80057a2:	0028      	movs	r0, r5
 80057a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	1bc9      	subs	r1, r1, r7
 80057aa:	d420      	bmi.n	80057ee <_malloc_r+0xda>
 80057ac:	290b      	cmp	r1, #11
 80057ae:	d918      	bls.n	80057e2 <_malloc_r+0xce>
 80057b0:	19e2      	adds	r2, r4, r7
 80057b2:	6027      	str	r7, [r4, #0]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d112      	bne.n	80057de <_malloc_r+0xca>
 80057b8:	9b00      	ldr	r3, [sp, #0]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	6011      	str	r1, [r2, #0]
 80057c0:	6053      	str	r3, [r2, #4]
 80057c2:	0030      	movs	r0, r6
 80057c4:	0025      	movs	r5, r4
 80057c6:	f000 f82f 	bl	8005828 <__malloc_unlock>
 80057ca:	2207      	movs	r2, #7
 80057cc:	350b      	adds	r5, #11
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	4395      	bics	r5, r2
 80057d2:	1aea      	subs	r2, r5, r3
 80057d4:	429d      	cmp	r5, r3
 80057d6:	d0e4      	beq.n	80057a2 <_malloc_r+0x8e>
 80057d8:	1b5b      	subs	r3, r3, r5
 80057da:	50a3      	str	r3, [r4, r2]
 80057dc:	e7e1      	b.n	80057a2 <_malloc_r+0x8e>
 80057de:	605a      	str	r2, [r3, #4]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xa8>
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	42a3      	cmp	r3, r4
 80057e6:	d1d5      	bne.n	8005794 <_malloc_r+0x80>
 80057e8:	9b00      	ldr	r3, [sp, #0]
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e7e9      	b.n	80057c2 <_malloc_r+0xae>
 80057ee:	0023      	movs	r3, r4
 80057f0:	6864      	ldr	r4, [r4, #4]
 80057f2:	e7a2      	b.n	800573a <_malloc_r+0x26>
 80057f4:	002c      	movs	r4, r5
 80057f6:	686d      	ldr	r5, [r5, #4]
 80057f8:	e7ab      	b.n	8005752 <_malloc_r+0x3e>
 80057fa:	0013      	movs	r3, r2
 80057fc:	e7c4      	b.n	8005788 <_malloc_r+0x74>
 80057fe:	230c      	movs	r3, #12
 8005800:	0030      	movs	r0, r6
 8005802:	6033      	str	r3, [r6, #0]
 8005804:	f000 f810 	bl	8005828 <__malloc_unlock>
 8005808:	e7cb      	b.n	80057a2 <_malloc_r+0x8e>
 800580a:	6027      	str	r7, [r4, #0]
 800580c:	e7d9      	b.n	80057c2 <_malloc_r+0xae>
 800580e:	605b      	str	r3, [r3, #4]
 8005810:	deff      	udf	#255	; 0xff
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	2000a594 	.word	0x2000a594

08005818 <__malloc_lock>:
 8005818:	b510      	push	{r4, lr}
 800581a:	4802      	ldr	r0, [pc, #8]	; (8005824 <__malloc_lock+0xc>)
 800581c:	f7ff ff03 	bl	8005626 <__retarget_lock_acquire_recursive>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	2000a590 	.word	0x2000a590

08005828 <__malloc_unlock>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4802      	ldr	r0, [pc, #8]	; (8005834 <__malloc_unlock+0xc>)
 800582c:	f7ff fefc 	bl	8005628 <__retarget_lock_release_recursive>
 8005830:	bd10      	pop	{r4, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	2000a590 	.word	0x2000a590

08005838 <__sfputc_r>:
 8005838:	6893      	ldr	r3, [r2, #8]
 800583a:	b510      	push	{r4, lr}
 800583c:	3b01      	subs	r3, #1
 800583e:	6093      	str	r3, [r2, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	da04      	bge.n	800584e <__sfputc_r+0x16>
 8005844:	6994      	ldr	r4, [r2, #24]
 8005846:	42a3      	cmp	r3, r4
 8005848:	db07      	blt.n	800585a <__sfputc_r+0x22>
 800584a:	290a      	cmp	r1, #10
 800584c:	d005      	beq.n	800585a <__sfputc_r+0x22>
 800584e:	6813      	ldr	r3, [r2, #0]
 8005850:	1c58      	adds	r0, r3, #1
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	7019      	strb	r1, [r3, #0]
 8005856:	0008      	movs	r0, r1
 8005858:	bd10      	pop	{r4, pc}
 800585a:	f7ff fdbd 	bl	80053d8 <__swbuf_r>
 800585e:	0001      	movs	r1, r0
 8005860:	e7f9      	b.n	8005856 <__sfputc_r+0x1e>

08005862 <__sfputs_r>:
 8005862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005864:	0006      	movs	r6, r0
 8005866:	000f      	movs	r7, r1
 8005868:	0014      	movs	r4, r2
 800586a:	18d5      	adds	r5, r2, r3
 800586c:	42ac      	cmp	r4, r5
 800586e:	d101      	bne.n	8005874 <__sfputs_r+0x12>
 8005870:	2000      	movs	r0, #0
 8005872:	e007      	b.n	8005884 <__sfputs_r+0x22>
 8005874:	7821      	ldrb	r1, [r4, #0]
 8005876:	003a      	movs	r2, r7
 8005878:	0030      	movs	r0, r6
 800587a:	f7ff ffdd 	bl	8005838 <__sfputc_r>
 800587e:	3401      	adds	r4, #1
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d1f3      	bne.n	800586c <__sfputs_r+0xa>
 8005884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005888 <_vfiprintf_r>:
 8005888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588a:	b0a1      	sub	sp, #132	; 0x84
 800588c:	000f      	movs	r7, r1
 800588e:	0015      	movs	r5, r2
 8005890:	001e      	movs	r6, r3
 8005892:	9003      	str	r0, [sp, #12]
 8005894:	2800      	cmp	r0, #0
 8005896:	d004      	beq.n	80058a2 <_vfiprintf_r+0x1a>
 8005898:	6a03      	ldr	r3, [r0, #32]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <_vfiprintf_r+0x1a>
 800589e:	f7ff fca1 	bl	80051e4 <__sinit>
 80058a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a4:	07db      	lsls	r3, r3, #31
 80058a6:	d405      	bmi.n	80058b4 <_vfiprintf_r+0x2c>
 80058a8:	89bb      	ldrh	r3, [r7, #12]
 80058aa:	059b      	lsls	r3, r3, #22
 80058ac:	d402      	bmi.n	80058b4 <_vfiprintf_r+0x2c>
 80058ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80058b0:	f7ff feb9 	bl	8005626 <__retarget_lock_acquire_recursive>
 80058b4:	89bb      	ldrh	r3, [r7, #12]
 80058b6:	071b      	lsls	r3, r3, #28
 80058b8:	d502      	bpl.n	80058c0 <_vfiprintf_r+0x38>
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d113      	bne.n	80058e8 <_vfiprintf_r+0x60>
 80058c0:	0039      	movs	r1, r7
 80058c2:	9803      	ldr	r0, [sp, #12]
 80058c4:	f7ff fdca 	bl	800545c <__swsetup_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d00d      	beq.n	80058e8 <_vfiprintf_r+0x60>
 80058cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ce:	07db      	lsls	r3, r3, #31
 80058d0:	d503      	bpl.n	80058da <_vfiprintf_r+0x52>
 80058d2:	2001      	movs	r0, #1
 80058d4:	4240      	negs	r0, r0
 80058d6:	b021      	add	sp, #132	; 0x84
 80058d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058da:	89bb      	ldrh	r3, [r7, #12]
 80058dc:	059b      	lsls	r3, r3, #22
 80058de:	d4f8      	bmi.n	80058d2 <_vfiprintf_r+0x4a>
 80058e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80058e2:	f7ff fea1 	bl	8005628 <__retarget_lock_release_recursive>
 80058e6:	e7f4      	b.n	80058d2 <_vfiprintf_r+0x4a>
 80058e8:	2300      	movs	r3, #0
 80058ea:	ac08      	add	r4, sp, #32
 80058ec:	6163      	str	r3, [r4, #20]
 80058ee:	3320      	adds	r3, #32
 80058f0:	7663      	strb	r3, [r4, #25]
 80058f2:	3310      	adds	r3, #16
 80058f4:	76a3      	strb	r3, [r4, #26]
 80058f6:	9607      	str	r6, [sp, #28]
 80058f8:	002e      	movs	r6, r5
 80058fa:	7833      	ldrb	r3, [r6, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <_vfiprintf_r+0x7c>
 8005900:	2b25      	cmp	r3, #37	; 0x25
 8005902:	d148      	bne.n	8005996 <_vfiprintf_r+0x10e>
 8005904:	1b73      	subs	r3, r6, r5
 8005906:	9305      	str	r3, [sp, #20]
 8005908:	42ae      	cmp	r6, r5
 800590a:	d00b      	beq.n	8005924 <_vfiprintf_r+0x9c>
 800590c:	002a      	movs	r2, r5
 800590e:	0039      	movs	r1, r7
 8005910:	9803      	ldr	r0, [sp, #12]
 8005912:	f7ff ffa6 	bl	8005862 <__sfputs_r>
 8005916:	3001      	adds	r0, #1
 8005918:	d100      	bne.n	800591c <_vfiprintf_r+0x94>
 800591a:	e0af      	b.n	8005a7c <_vfiprintf_r+0x1f4>
 800591c:	6963      	ldr	r3, [r4, #20]
 800591e:	9a05      	ldr	r2, [sp, #20]
 8005920:	189b      	adds	r3, r3, r2
 8005922:	6163      	str	r3, [r4, #20]
 8005924:	7833      	ldrb	r3, [r6, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d100      	bne.n	800592c <_vfiprintf_r+0xa4>
 800592a:	e0a7      	b.n	8005a7c <_vfiprintf_r+0x1f4>
 800592c:	2201      	movs	r2, #1
 800592e:	2300      	movs	r3, #0
 8005930:	4252      	negs	r2, r2
 8005932:	6062      	str	r2, [r4, #4]
 8005934:	a904      	add	r1, sp, #16
 8005936:	3254      	adds	r2, #84	; 0x54
 8005938:	1852      	adds	r2, r2, r1
 800593a:	1c75      	adds	r5, r6, #1
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	60e3      	str	r3, [r4, #12]
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	7013      	strb	r3, [r2, #0]
 8005944:	65a3      	str	r3, [r4, #88]	; 0x58
 8005946:	4b59      	ldr	r3, [pc, #356]	; (8005aac <_vfiprintf_r+0x224>)
 8005948:	2205      	movs	r2, #5
 800594a:	0018      	movs	r0, r3
 800594c:	7829      	ldrb	r1, [r5, #0]
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	f000 fbbe 	bl	80060d0 <memchr>
 8005954:	1c6e      	adds	r6, r5, #1
 8005956:	2800      	cmp	r0, #0
 8005958:	d11f      	bne.n	800599a <_vfiprintf_r+0x112>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	06d3      	lsls	r3, r2, #27
 800595e:	d504      	bpl.n	800596a <_vfiprintf_r+0xe2>
 8005960:	2353      	movs	r3, #83	; 0x53
 8005962:	a904      	add	r1, sp, #16
 8005964:	185b      	adds	r3, r3, r1
 8005966:	2120      	movs	r1, #32
 8005968:	7019      	strb	r1, [r3, #0]
 800596a:	0713      	lsls	r3, r2, #28
 800596c:	d504      	bpl.n	8005978 <_vfiprintf_r+0xf0>
 800596e:	2353      	movs	r3, #83	; 0x53
 8005970:	a904      	add	r1, sp, #16
 8005972:	185b      	adds	r3, r3, r1
 8005974:	212b      	movs	r1, #43	; 0x2b
 8005976:	7019      	strb	r1, [r3, #0]
 8005978:	782b      	ldrb	r3, [r5, #0]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d016      	beq.n	80059ac <_vfiprintf_r+0x124>
 800597e:	002e      	movs	r6, r5
 8005980:	2100      	movs	r1, #0
 8005982:	200a      	movs	r0, #10
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	7832      	ldrb	r2, [r6, #0]
 8005988:	1c75      	adds	r5, r6, #1
 800598a:	3a30      	subs	r2, #48	; 0x30
 800598c:	2a09      	cmp	r2, #9
 800598e:	d94e      	bls.n	8005a2e <_vfiprintf_r+0x1a6>
 8005990:	2900      	cmp	r1, #0
 8005992:	d111      	bne.n	80059b8 <_vfiprintf_r+0x130>
 8005994:	e017      	b.n	80059c6 <_vfiprintf_r+0x13e>
 8005996:	3601      	adds	r6, #1
 8005998:	e7af      	b.n	80058fa <_vfiprintf_r+0x72>
 800599a:	9b05      	ldr	r3, [sp, #20]
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	1ac0      	subs	r0, r0, r3
 80059a0:	2301      	movs	r3, #1
 80059a2:	4083      	lsls	r3, r0
 80059a4:	4313      	orrs	r3, r2
 80059a6:	0035      	movs	r5, r6
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	e7cc      	b.n	8005946 <_vfiprintf_r+0xbe>
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	1d19      	adds	r1, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9107      	str	r1, [sp, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	db01      	blt.n	80059bc <_vfiprintf_r+0x134>
 80059b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ba:	e004      	b.n	80059c6 <_vfiprintf_r+0x13e>
 80059bc:	425b      	negs	r3, r3
 80059be:	60e3      	str	r3, [r4, #12]
 80059c0:	2302      	movs	r3, #2
 80059c2:	4313      	orrs	r3, r2
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	7833      	ldrb	r3, [r6, #0]
 80059c8:	2b2e      	cmp	r3, #46	; 0x2e
 80059ca:	d10a      	bne.n	80059e2 <_vfiprintf_r+0x15a>
 80059cc:	7873      	ldrb	r3, [r6, #1]
 80059ce:	2b2a      	cmp	r3, #42	; 0x2a
 80059d0:	d135      	bne.n	8005a3e <_vfiprintf_r+0x1b6>
 80059d2:	9b07      	ldr	r3, [sp, #28]
 80059d4:	3602      	adds	r6, #2
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	9207      	str	r2, [sp, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	db2b      	blt.n	8005a38 <_vfiprintf_r+0x1b0>
 80059e0:	9309      	str	r3, [sp, #36]	; 0x24
 80059e2:	4d33      	ldr	r5, [pc, #204]	; (8005ab0 <_vfiprintf_r+0x228>)
 80059e4:	2203      	movs	r2, #3
 80059e6:	0028      	movs	r0, r5
 80059e8:	7831      	ldrb	r1, [r6, #0]
 80059ea:	f000 fb71 	bl	80060d0 <memchr>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d006      	beq.n	8005a00 <_vfiprintf_r+0x178>
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	1b40      	subs	r0, r0, r5
 80059f6:	4083      	lsls	r3, r0
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	3601      	adds	r6, #1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	7831      	ldrb	r1, [r6, #0]
 8005a02:	2206      	movs	r2, #6
 8005a04:	482b      	ldr	r0, [pc, #172]	; (8005ab4 <_vfiprintf_r+0x22c>)
 8005a06:	1c75      	adds	r5, r6, #1
 8005a08:	7621      	strb	r1, [r4, #24]
 8005a0a:	f000 fb61 	bl	80060d0 <memchr>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d043      	beq.n	8005a9a <_vfiprintf_r+0x212>
 8005a12:	4b29      	ldr	r3, [pc, #164]	; (8005ab8 <_vfiprintf_r+0x230>)
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d125      	bne.n	8005a64 <_vfiprintf_r+0x1dc>
 8005a18:	2207      	movs	r2, #7
 8005a1a:	9b07      	ldr	r3, [sp, #28]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	4393      	bics	r3, r2
 8005a20:	3308      	adds	r3, #8
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	6963      	ldr	r3, [r4, #20]
 8005a26:	9a04      	ldr	r2, [sp, #16]
 8005a28:	189b      	adds	r3, r3, r2
 8005a2a:	6163      	str	r3, [r4, #20]
 8005a2c:	e764      	b.n	80058f8 <_vfiprintf_r+0x70>
 8005a2e:	4343      	muls	r3, r0
 8005a30:	002e      	movs	r6, r5
 8005a32:	2101      	movs	r1, #1
 8005a34:	189b      	adds	r3, r3, r2
 8005a36:	e7a6      	b.n	8005986 <_vfiprintf_r+0xfe>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	e7d0      	b.n	80059e0 <_vfiprintf_r+0x158>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	200a      	movs	r0, #10
 8005a42:	001a      	movs	r2, r3
 8005a44:	3601      	adds	r6, #1
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	7831      	ldrb	r1, [r6, #0]
 8005a4a:	1c75      	adds	r5, r6, #1
 8005a4c:	3930      	subs	r1, #48	; 0x30
 8005a4e:	2909      	cmp	r1, #9
 8005a50:	d903      	bls.n	8005a5a <_vfiprintf_r+0x1d2>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c5      	beq.n	80059e2 <_vfiprintf_r+0x15a>
 8005a56:	9209      	str	r2, [sp, #36]	; 0x24
 8005a58:	e7c3      	b.n	80059e2 <_vfiprintf_r+0x15a>
 8005a5a:	4342      	muls	r2, r0
 8005a5c:	002e      	movs	r6, r5
 8005a5e:	2301      	movs	r3, #1
 8005a60:	1852      	adds	r2, r2, r1
 8005a62:	e7f1      	b.n	8005a48 <_vfiprintf_r+0x1c0>
 8005a64:	aa07      	add	r2, sp, #28
 8005a66:	9200      	str	r2, [sp, #0]
 8005a68:	0021      	movs	r1, r4
 8005a6a:	003a      	movs	r2, r7
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <_vfiprintf_r+0x234>)
 8005a6e:	9803      	ldr	r0, [sp, #12]
 8005a70:	e000      	b.n	8005a74 <_vfiprintf_r+0x1ec>
 8005a72:	bf00      	nop
 8005a74:	9004      	str	r0, [sp, #16]
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d1d3      	bne.n	8005a24 <_vfiprintf_r+0x19c>
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	07db      	lsls	r3, r3, #31
 8005a80:	d405      	bmi.n	8005a8e <_vfiprintf_r+0x206>
 8005a82:	89bb      	ldrh	r3, [r7, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d402      	bmi.n	8005a8e <_vfiprintf_r+0x206>
 8005a88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005a8a:	f7ff fdcd 	bl	8005628 <__retarget_lock_release_recursive>
 8005a8e:	89bb      	ldrh	r3, [r7, #12]
 8005a90:	065b      	lsls	r3, r3, #25
 8005a92:	d500      	bpl.n	8005a96 <_vfiprintf_r+0x20e>
 8005a94:	e71d      	b.n	80058d2 <_vfiprintf_r+0x4a>
 8005a96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a98:	e71d      	b.n	80058d6 <_vfiprintf_r+0x4e>
 8005a9a:	aa07      	add	r2, sp, #28
 8005a9c:	9200      	str	r2, [sp, #0]
 8005a9e:	0021      	movs	r1, r4
 8005aa0:	003a      	movs	r2, r7
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <_vfiprintf_r+0x234>)
 8005aa4:	9803      	ldr	r0, [sp, #12]
 8005aa6:	f000 f87b 	bl	8005ba0 <_printf_i>
 8005aaa:	e7e3      	b.n	8005a74 <_vfiprintf_r+0x1ec>
 8005aac:	080062bc 	.word	0x080062bc
 8005ab0:	080062c2 	.word	0x080062c2
 8005ab4:	080062c6 	.word	0x080062c6
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	08005863 	.word	0x08005863

08005ac0 <_printf_common>:
 8005ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac2:	0016      	movs	r6, r2
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	688a      	ldr	r2, [r1, #8]
 8005ac8:	690b      	ldr	r3, [r1, #16]
 8005aca:	000c      	movs	r4, r1
 8005acc:	9000      	str	r0, [sp, #0]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	da00      	bge.n	8005ad4 <_printf_common+0x14>
 8005ad2:	0013      	movs	r3, r2
 8005ad4:	0022      	movs	r2, r4
 8005ad6:	6033      	str	r3, [r6, #0]
 8005ad8:	3243      	adds	r2, #67	; 0x43
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d001      	beq.n	8005ae4 <_printf_common+0x24>
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	069b      	lsls	r3, r3, #26
 8005ae8:	d502      	bpl.n	8005af0 <_printf_common+0x30>
 8005aea:	6833      	ldr	r3, [r6, #0]
 8005aec:	3302      	adds	r3, #2
 8005aee:	6033      	str	r3, [r6, #0]
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	2306      	movs	r3, #6
 8005af4:	0015      	movs	r5, r2
 8005af6:	401d      	ands	r5, r3
 8005af8:	421a      	tst	r2, r3
 8005afa:	d027      	beq.n	8005b4c <_printf_common+0x8c>
 8005afc:	0023      	movs	r3, r4
 8005afe:	3343      	adds	r3, #67	; 0x43
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	4193      	sbcs	r3, r2
 8005b06:	6822      	ldr	r2, [r4, #0]
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d430      	bmi.n	8005b6e <_printf_common+0xae>
 8005b0c:	0022      	movs	r2, r4
 8005b0e:	9901      	ldr	r1, [sp, #4]
 8005b10:	9800      	ldr	r0, [sp, #0]
 8005b12:	9d08      	ldr	r5, [sp, #32]
 8005b14:	3243      	adds	r2, #67	; 0x43
 8005b16:	47a8      	blx	r5
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d025      	beq.n	8005b68 <_printf_common+0xa8>
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	2500      	movs	r5, #0
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d105      	bne.n	8005b34 <_printf_common+0x74>
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	68e5      	ldr	r5, [r4, #12]
 8005b2c:	1aed      	subs	r5, r5, r3
 8005b2e:	43eb      	mvns	r3, r5
 8005b30:	17db      	asrs	r3, r3, #31
 8005b32:	401d      	ands	r5, r3
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	6922      	ldr	r2, [r4, #16]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	dd01      	ble.n	8005b40 <_printf_common+0x80>
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	18ed      	adds	r5, r5, r3
 8005b40:	2600      	movs	r6, #0
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d120      	bne.n	8005b88 <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e010      	b.n	8005b6c <_printf_common+0xac>
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	68e3      	ldr	r3, [r4, #12]
 8005b4e:	6832      	ldr	r2, [r6, #0]
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	42ab      	cmp	r3, r5
 8005b54:	ddd2      	ble.n	8005afc <_printf_common+0x3c>
 8005b56:	0022      	movs	r2, r4
 8005b58:	2301      	movs	r3, #1
 8005b5a:	9901      	ldr	r1, [sp, #4]
 8005b5c:	9800      	ldr	r0, [sp, #0]
 8005b5e:	9f08      	ldr	r7, [sp, #32]
 8005b60:	3219      	adds	r2, #25
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	d1f0      	bne.n	8005b4a <_printf_common+0x8a>
 8005b68:	2001      	movs	r0, #1
 8005b6a:	4240      	negs	r0, r0
 8005b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b6e:	2030      	movs	r0, #48	; 0x30
 8005b70:	18e1      	adds	r1, r4, r3
 8005b72:	3143      	adds	r1, #67	; 0x43
 8005b74:	7008      	strb	r0, [r1, #0]
 8005b76:	0021      	movs	r1, r4
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	3145      	adds	r1, #69	; 0x45
 8005b7c:	7809      	ldrb	r1, [r1, #0]
 8005b7e:	18a2      	adds	r2, r4, r2
 8005b80:	3243      	adds	r2, #67	; 0x43
 8005b82:	3302      	adds	r3, #2
 8005b84:	7011      	strb	r1, [r2, #0]
 8005b86:	e7c1      	b.n	8005b0c <_printf_common+0x4c>
 8005b88:	0022      	movs	r2, r4
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	9901      	ldr	r1, [sp, #4]
 8005b8e:	9800      	ldr	r0, [sp, #0]
 8005b90:	9f08      	ldr	r7, [sp, #32]
 8005b92:	321a      	adds	r2, #26
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d0e6      	beq.n	8005b68 <_printf_common+0xa8>
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7d1      	b.n	8005b42 <_printf_common+0x82>
	...

08005ba0 <_printf_i>:
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	9206      	str	r2, [sp, #24]
 8005ba6:	000a      	movs	r2, r1
 8005ba8:	3243      	adds	r2, #67	; 0x43
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	9005      	str	r0, [sp, #20]
 8005bae:	9204      	str	r2, [sp, #16]
 8005bb0:	7e0a      	ldrb	r2, [r1, #24]
 8005bb2:	000c      	movs	r4, r1
 8005bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bb6:	2a78      	cmp	r2, #120	; 0x78
 8005bb8:	d809      	bhi.n	8005bce <_printf_i+0x2e>
 8005bba:	2a62      	cmp	r2, #98	; 0x62
 8005bbc:	d80b      	bhi.n	8005bd6 <_printf_i+0x36>
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	d100      	bne.n	8005bc4 <_printf_i+0x24>
 8005bc2:	e0be      	b.n	8005d42 <_printf_i+0x1a2>
 8005bc4:	497c      	ldr	r1, [pc, #496]	; (8005db8 <_printf_i+0x218>)
 8005bc6:	9103      	str	r1, [sp, #12]
 8005bc8:	2a58      	cmp	r2, #88	; 0x58
 8005bca:	d100      	bne.n	8005bce <_printf_i+0x2e>
 8005bcc:	e093      	b.n	8005cf6 <_printf_i+0x156>
 8005bce:	0026      	movs	r6, r4
 8005bd0:	3642      	adds	r6, #66	; 0x42
 8005bd2:	7032      	strb	r2, [r6, #0]
 8005bd4:	e022      	b.n	8005c1c <_printf_i+0x7c>
 8005bd6:	0010      	movs	r0, r2
 8005bd8:	3863      	subs	r0, #99	; 0x63
 8005bda:	2815      	cmp	r0, #21
 8005bdc:	d8f7      	bhi.n	8005bce <_printf_i+0x2e>
 8005bde:	f7fa fa91 	bl	8000104 <__gnu_thumb1_case_shi>
 8005be2:	0016      	.short	0x0016
 8005be4:	fff6001f 	.word	0xfff6001f
 8005be8:	fff6fff6 	.word	0xfff6fff6
 8005bec:	001ffff6 	.word	0x001ffff6
 8005bf0:	fff6fff6 	.word	0xfff6fff6
 8005bf4:	fff6fff6 	.word	0xfff6fff6
 8005bf8:	003600a3 	.word	0x003600a3
 8005bfc:	fff60083 	.word	0xfff60083
 8005c00:	00b4fff6 	.word	0x00b4fff6
 8005c04:	0036fff6 	.word	0x0036fff6
 8005c08:	fff6fff6 	.word	0xfff6fff6
 8005c0c:	0087      	.short	0x0087
 8005c0e:	0026      	movs	r6, r4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	3642      	adds	r6, #66	; 0x42
 8005c14:	1d11      	adds	r1, r2, #4
 8005c16:	6019      	str	r1, [r3, #0]
 8005c18:	6813      	ldr	r3, [r2, #0]
 8005c1a:	7033      	strb	r3, [r6, #0]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0a2      	b.n	8005d66 <_printf_i+0x1c6>
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	6809      	ldr	r1, [r1, #0]
 8005c24:	1d02      	adds	r2, r0, #4
 8005c26:	060d      	lsls	r5, r1, #24
 8005c28:	d50b      	bpl.n	8005c42 <_printf_i+0xa2>
 8005c2a:	6805      	ldr	r5, [r0, #0]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	da03      	bge.n	8005c3a <_printf_i+0x9a>
 8005c32:	232d      	movs	r3, #45	; 0x2d
 8005c34:	9a04      	ldr	r2, [sp, #16]
 8005c36:	426d      	negs	r5, r5
 8005c38:	7013      	strb	r3, [r2, #0]
 8005c3a:	4b5f      	ldr	r3, [pc, #380]	; (8005db8 <_printf_i+0x218>)
 8005c3c:	270a      	movs	r7, #10
 8005c3e:	9303      	str	r3, [sp, #12]
 8005c40:	e01b      	b.n	8005c7a <_printf_i+0xda>
 8005c42:	6805      	ldr	r5, [r0, #0]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	0649      	lsls	r1, r1, #25
 8005c48:	d5f1      	bpl.n	8005c2e <_printf_i+0x8e>
 8005c4a:	b22d      	sxth	r5, r5
 8005c4c:	e7ef      	b.n	8005c2e <_printf_i+0x8e>
 8005c4e:	680d      	ldr	r5, [r1, #0]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	1d08      	adds	r0, r1, #4
 8005c54:	6018      	str	r0, [r3, #0]
 8005c56:	062e      	lsls	r6, r5, #24
 8005c58:	d501      	bpl.n	8005c5e <_printf_i+0xbe>
 8005c5a:	680d      	ldr	r5, [r1, #0]
 8005c5c:	e003      	b.n	8005c66 <_printf_i+0xc6>
 8005c5e:	066d      	lsls	r5, r5, #25
 8005c60:	d5fb      	bpl.n	8005c5a <_printf_i+0xba>
 8005c62:	680d      	ldr	r5, [r1, #0]
 8005c64:	b2ad      	uxth	r5, r5
 8005c66:	4b54      	ldr	r3, [pc, #336]	; (8005db8 <_printf_i+0x218>)
 8005c68:	2708      	movs	r7, #8
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	2a6f      	cmp	r2, #111	; 0x6f
 8005c6e:	d000      	beq.n	8005c72 <_printf_i+0xd2>
 8005c70:	3702      	adds	r7, #2
 8005c72:	0023      	movs	r3, r4
 8005c74:	2200      	movs	r2, #0
 8005c76:	3343      	adds	r3, #67	; 0x43
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	60a3      	str	r3, [r4, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	db03      	blt.n	8005c8a <_printf_i+0xea>
 8005c82:	2104      	movs	r1, #4
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	438a      	bics	r2, r1
 8005c88:	6022      	str	r2, [r4, #0]
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	d102      	bne.n	8005c94 <_printf_i+0xf4>
 8005c8e:	9e04      	ldr	r6, [sp, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <_printf_i+0x10e>
 8005c94:	9e04      	ldr	r6, [sp, #16]
 8005c96:	0028      	movs	r0, r5
 8005c98:	0039      	movs	r1, r7
 8005c9a:	f7fa fac3 	bl	8000224 <__aeabi_uidivmod>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	3e01      	subs	r6, #1
 8005ca2:	5c5b      	ldrb	r3, [r3, r1]
 8005ca4:	7033      	strb	r3, [r6, #0]
 8005ca6:	002b      	movs	r3, r5
 8005ca8:	0005      	movs	r5, r0
 8005caa:	429f      	cmp	r7, r3
 8005cac:	d9f3      	bls.n	8005c96 <_printf_i+0xf6>
 8005cae:	2f08      	cmp	r7, #8
 8005cb0:	d109      	bne.n	8005cc6 <_printf_i+0x126>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	07db      	lsls	r3, r3, #31
 8005cb6:	d506      	bpl.n	8005cc6 <_printf_i+0x126>
 8005cb8:	6862      	ldr	r2, [r4, #4]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	dc02      	bgt.n	8005cc6 <_printf_i+0x126>
 8005cc0:	2330      	movs	r3, #48	; 0x30
 8005cc2:	3e01      	subs	r6, #1
 8005cc4:	7033      	strb	r3, [r6, #0]
 8005cc6:	9b04      	ldr	r3, [sp, #16]
 8005cc8:	1b9b      	subs	r3, r3, r6
 8005cca:	6123      	str	r3, [r4, #16]
 8005ccc:	9b07      	ldr	r3, [sp, #28]
 8005cce:	0021      	movs	r1, r4
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	9805      	ldr	r0, [sp, #20]
 8005cd4:	9b06      	ldr	r3, [sp, #24]
 8005cd6:	aa09      	add	r2, sp, #36	; 0x24
 8005cd8:	f7ff fef2 	bl	8005ac0 <_printf_common>
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d147      	bne.n	8005d70 <_printf_i+0x1d0>
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	4240      	negs	r0, r0
 8005ce4:	b00b      	add	sp, #44	; 0x2c
 8005ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce8:	2220      	movs	r2, #32
 8005cea:	6809      	ldr	r1, [r1, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	2278      	movs	r2, #120	; 0x78
 8005cf2:	4932      	ldr	r1, [pc, #200]	; (8005dbc <_printf_i+0x21c>)
 8005cf4:	9103      	str	r1, [sp, #12]
 8005cf6:	0021      	movs	r1, r4
 8005cf8:	3145      	adds	r1, #69	; 0x45
 8005cfa:	700a      	strb	r2, [r1, #0]
 8005cfc:	6819      	ldr	r1, [r3, #0]
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	c920      	ldmia	r1!, {r5}
 8005d02:	0610      	lsls	r0, r2, #24
 8005d04:	d402      	bmi.n	8005d0c <_printf_i+0x16c>
 8005d06:	0650      	lsls	r0, r2, #25
 8005d08:	d500      	bpl.n	8005d0c <_printf_i+0x16c>
 8005d0a:	b2ad      	uxth	r5, r5
 8005d0c:	6019      	str	r1, [r3, #0]
 8005d0e:	07d3      	lsls	r3, r2, #31
 8005d10:	d502      	bpl.n	8005d18 <_printf_i+0x178>
 8005d12:	2320      	movs	r3, #32
 8005d14:	4313      	orrs	r3, r2
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	2710      	movs	r7, #16
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	d1a9      	bne.n	8005c72 <_printf_i+0xd2>
 8005d1e:	2220      	movs	r2, #32
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	4393      	bics	r3, r2
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	e7a4      	b.n	8005c72 <_printf_i+0xd2>
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	680d      	ldr	r5, [r1, #0]
 8005d2c:	1d10      	adds	r0, r2, #4
 8005d2e:	6949      	ldr	r1, [r1, #20]
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	062e      	lsls	r6, r5, #24
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0x19c>
 8005d38:	6019      	str	r1, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0x1a2>
 8005d3c:	066d      	lsls	r5, r5, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0x198>
 8005d40:	8019      	strh	r1, [r3, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9e04      	ldr	r6, [sp, #16]
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	e7c0      	b.n	8005ccc <_printf_i+0x12c>
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	1d11      	adds	r1, r2, #4
 8005d4e:	6019      	str	r1, [r3, #0]
 8005d50:	6816      	ldr	r6, [r2, #0]
 8005d52:	2100      	movs	r1, #0
 8005d54:	0030      	movs	r0, r6
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	f000 f9ba 	bl	80060d0 <memchr>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d001      	beq.n	8005d64 <_printf_i+0x1c4>
 8005d60:	1b80      	subs	r0, r0, r6
 8005d62:	6060      	str	r0, [r4, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9a04      	ldr	r2, [sp, #16]
 8005d6c:	7013      	strb	r3, [r2, #0]
 8005d6e:	e7ad      	b.n	8005ccc <_printf_i+0x12c>
 8005d70:	0032      	movs	r2, r6
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	9906      	ldr	r1, [sp, #24]
 8005d76:	9805      	ldr	r0, [sp, #20]
 8005d78:	9d07      	ldr	r5, [sp, #28]
 8005d7a:	47a8      	blx	r5
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d0af      	beq.n	8005ce0 <_printf_i+0x140>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	079b      	lsls	r3, r3, #30
 8005d84:	d415      	bmi.n	8005db2 <_printf_i+0x212>
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	68e0      	ldr	r0, [r4, #12]
 8005d8a:	4298      	cmp	r0, r3
 8005d8c:	daaa      	bge.n	8005ce4 <_printf_i+0x144>
 8005d8e:	0018      	movs	r0, r3
 8005d90:	e7a8      	b.n	8005ce4 <_printf_i+0x144>
 8005d92:	0022      	movs	r2, r4
 8005d94:	2301      	movs	r3, #1
 8005d96:	9906      	ldr	r1, [sp, #24]
 8005d98:	9805      	ldr	r0, [sp, #20]
 8005d9a:	9e07      	ldr	r6, [sp, #28]
 8005d9c:	3219      	adds	r2, #25
 8005d9e:	47b0      	blx	r6
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09d      	beq.n	8005ce0 <_printf_i+0x140>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf0      	bgt.n	8005d92 <_printf_i+0x1f2>
 8005db0:	e7e9      	b.n	8005d86 <_printf_i+0x1e6>
 8005db2:	2500      	movs	r5, #0
 8005db4:	e7f7      	b.n	8005da6 <_printf_i+0x206>
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	080062cd 	.word	0x080062cd
 8005dbc:	080062de 	.word	0x080062de

08005dc0 <__sflush_r>:
 8005dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dc2:	898b      	ldrh	r3, [r1, #12]
 8005dc4:	0005      	movs	r5, r0
 8005dc6:	000c      	movs	r4, r1
 8005dc8:	071a      	lsls	r2, r3, #28
 8005dca:	d45c      	bmi.n	8005e86 <__sflush_r+0xc6>
 8005dcc:	684a      	ldr	r2, [r1, #4]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	dc04      	bgt.n	8005ddc <__sflush_r+0x1c>
 8005dd2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	dc01      	bgt.n	8005ddc <__sflush_r+0x1c>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ddc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d0fa      	beq.n	8005dd8 <__sflush_r+0x18>
 8005de2:	2200      	movs	r2, #0
 8005de4:	2080      	movs	r0, #128	; 0x80
 8005de6:	682e      	ldr	r6, [r5, #0]
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	001a      	movs	r2, r3
 8005dec:	0140      	lsls	r0, r0, #5
 8005dee:	6a21      	ldr	r1, [r4, #32]
 8005df0:	4002      	ands	r2, r0
 8005df2:	4203      	tst	r3, r0
 8005df4:	d034      	beq.n	8005e60 <__sflush_r+0xa0>
 8005df6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	075b      	lsls	r3, r3, #29
 8005dfc:	d506      	bpl.n	8005e0c <__sflush_r+0x4c>
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	1ac0      	subs	r0, r0, r3
 8005e02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <__sflush_r+0x4c>
 8005e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e0a:	1ac0      	subs	r0, r0, r3
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	0028      	movs	r0, r5
 8005e12:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	47b8      	blx	r7
 8005e18:	89a2      	ldrh	r2, [r4, #12]
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d106      	bne.n	8005e2c <__sflush_r+0x6c>
 8005e1e:	6829      	ldr	r1, [r5, #0]
 8005e20:	291d      	cmp	r1, #29
 8005e22:	d82c      	bhi.n	8005e7e <__sflush_r+0xbe>
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <__sflush_r+0x110>)
 8005e26:	410b      	asrs	r3, r1
 8005e28:	07db      	lsls	r3, r3, #31
 8005e2a:	d428      	bmi.n	8005e7e <__sflush_r+0xbe>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	04d2      	lsls	r2, r2, #19
 8005e36:	d505      	bpl.n	8005e44 <__sflush_r+0x84>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <__sflush_r+0x82>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d100      	bne.n	8005e44 <__sflush_r+0x84>
 8005e42:	6560      	str	r0, [r4, #84]	; 0x54
 8005e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e46:	602e      	str	r6, [r5, #0]
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d0c5      	beq.n	8005dd8 <__sflush_r+0x18>
 8005e4c:	0023      	movs	r3, r4
 8005e4e:	3344      	adds	r3, #68	; 0x44
 8005e50:	4299      	cmp	r1, r3
 8005e52:	d002      	beq.n	8005e5a <__sflush_r+0x9a>
 8005e54:	0028      	movs	r0, r5
 8005e56:	f7ff fbf1 	bl	800563c <_free_r>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e5e:	e7bc      	b.n	8005dda <__sflush_r+0x1a>
 8005e60:	2301      	movs	r3, #1
 8005e62:	0028      	movs	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	d1c6      	bne.n	8005df8 <__sflush_r+0x38>
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0c3      	beq.n	8005df8 <__sflush_r+0x38>
 8005e70:	2b1d      	cmp	r3, #29
 8005e72:	d001      	beq.n	8005e78 <__sflush_r+0xb8>
 8005e74:	2b16      	cmp	r3, #22
 8005e76:	d101      	bne.n	8005e7c <__sflush_r+0xbc>
 8005e78:	602e      	str	r6, [r5, #0]
 8005e7a:	e7ad      	b.n	8005dd8 <__sflush_r+0x18>
 8005e7c:	89a2      	ldrh	r2, [r4, #12]
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	4313      	orrs	r3, r2
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	e7a9      	b.n	8005dda <__sflush_r+0x1a>
 8005e86:	690e      	ldr	r6, [r1, #16]
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	d0a5      	beq.n	8005dd8 <__sflush_r+0x18>
 8005e8c:	680f      	ldr	r7, [r1, #0]
 8005e8e:	600e      	str	r6, [r1, #0]
 8005e90:	1bba      	subs	r2, r7, r6
 8005e92:	9201      	str	r2, [sp, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	079b      	lsls	r3, r3, #30
 8005e98:	d100      	bne.n	8005e9c <__sflush_r+0xdc>
 8005e9a:	694a      	ldr	r2, [r1, #20]
 8005e9c:	60a2      	str	r2, [r4, #8]
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	dd99      	ble.n	8005dd8 <__sflush_r+0x18>
 8005ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ea6:	0032      	movs	r2, r6
 8005ea8:	001f      	movs	r7, r3
 8005eaa:	0028      	movs	r0, r5
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	6a21      	ldr	r1, [r4, #32]
 8005eb0:	47b8      	blx	r7
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dc06      	bgt.n	8005ec4 <__sflush_r+0x104>
 8005eb6:	2340      	movs	r3, #64	; 0x40
 8005eb8:	2001      	movs	r0, #1
 8005eba:	89a2      	ldrh	r2, [r4, #12]
 8005ebc:	4240      	negs	r0, r0
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	81a3      	strh	r3, [r4, #12]
 8005ec2:	e78a      	b.n	8005dda <__sflush_r+0x1a>
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	1836      	adds	r6, r6, r0
 8005ec8:	1a1b      	subs	r3, r3, r0
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	e7e7      	b.n	8005e9e <__sflush_r+0xde>
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	dfbffffe 	.word	0xdfbffffe

08005ed4 <_fflush_r>:
 8005ed4:	690b      	ldr	r3, [r1, #16]
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	0005      	movs	r5, r0
 8005eda:	000c      	movs	r4, r1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <_fflush_r+0x12>
 8005ee0:	2500      	movs	r5, #0
 8005ee2:	0028      	movs	r0, r5
 8005ee4:	bd70      	pop	{r4, r5, r6, pc}
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d004      	beq.n	8005ef4 <_fflush_r+0x20>
 8005eea:	6a03      	ldr	r3, [r0, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <_fflush_r+0x20>
 8005ef0:	f7ff f978 	bl	80051e4 <__sinit>
 8005ef4:	220c      	movs	r2, #12
 8005ef6:	5ea3      	ldrsh	r3, [r4, r2]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f1      	beq.n	8005ee0 <_fflush_r+0xc>
 8005efc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005efe:	07d2      	lsls	r2, r2, #31
 8005f00:	d404      	bmi.n	8005f0c <_fflush_r+0x38>
 8005f02:	059b      	lsls	r3, r3, #22
 8005f04:	d402      	bmi.n	8005f0c <_fflush_r+0x38>
 8005f06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f08:	f7ff fb8d 	bl	8005626 <__retarget_lock_acquire_recursive>
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	0021      	movs	r1, r4
 8005f10:	f7ff ff56 	bl	8005dc0 <__sflush_r>
 8005f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f16:	0005      	movs	r5, r0
 8005f18:	07db      	lsls	r3, r3, #31
 8005f1a:	d4e2      	bmi.n	8005ee2 <_fflush_r+0xe>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	059b      	lsls	r3, r3, #22
 8005f20:	d4df      	bmi.n	8005ee2 <_fflush_r+0xe>
 8005f22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f24:	f7ff fb80 	bl	8005628 <__retarget_lock_release_recursive>
 8005f28:	e7db      	b.n	8005ee2 <_fflush_r+0xe>
	...

08005f2c <__swhatbuf_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	000e      	movs	r6, r1
 8005f30:	001d      	movs	r5, r3
 8005f32:	230e      	movs	r3, #14
 8005f34:	5ec9      	ldrsh	r1, [r1, r3]
 8005f36:	0014      	movs	r4, r2
 8005f38:	b096      	sub	sp, #88	; 0x58
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	da0c      	bge.n	8005f58 <__swhatbuf_r+0x2c>
 8005f3e:	89b2      	ldrh	r2, [r6, #12]
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	0011      	movs	r1, r2
 8005f44:	4019      	ands	r1, r3
 8005f46:	421a      	tst	r2, r3
 8005f48:	d013      	beq.n	8005f72 <__swhatbuf_r+0x46>
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	3b40      	subs	r3, #64	; 0x40
 8005f4e:	2000      	movs	r0, #0
 8005f50:	6029      	str	r1, [r5, #0]
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	b016      	add	sp, #88	; 0x58
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	466a      	mov	r2, sp
 8005f5a:	f000 f883 	bl	8006064 <_fstat_r>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	dbed      	blt.n	8005f3e <__swhatbuf_r+0x12>
 8005f62:	23f0      	movs	r3, #240	; 0xf0
 8005f64:	9901      	ldr	r1, [sp, #4]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	4019      	ands	r1, r3
 8005f6a:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <__swhatbuf_r+0x4c>)
 8005f6c:	18c9      	adds	r1, r1, r3
 8005f6e:	424b      	negs	r3, r1
 8005f70:	4159      	adcs	r1, r3
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	e7ea      	b.n	8005f4e <__swhatbuf_r+0x22>
 8005f78:	ffffe000 	.word	0xffffe000

08005f7c <__smakebuf_r>:
 8005f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f7e:	2602      	movs	r6, #2
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	0005      	movs	r5, r0
 8005f84:	000c      	movs	r4, r1
 8005f86:	4233      	tst	r3, r6
 8005f88:	d006      	beq.n	8005f98 <__smakebuf_r+0x1c>
 8005f8a:	0023      	movs	r3, r4
 8005f8c:	3347      	adds	r3, #71	; 0x47
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	6123      	str	r3, [r4, #16]
 8005f92:	2301      	movs	r3, #1
 8005f94:	6163      	str	r3, [r4, #20]
 8005f96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005f98:	466a      	mov	r2, sp
 8005f9a:	ab01      	add	r3, sp, #4
 8005f9c:	f7ff ffc6 	bl	8005f2c <__swhatbuf_r>
 8005fa0:	9900      	ldr	r1, [sp, #0]
 8005fa2:	0007      	movs	r7, r0
 8005fa4:	0028      	movs	r0, r5
 8005fa6:	f7ff fbb5 	bl	8005714 <_malloc_r>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d108      	bne.n	8005fc0 <__smakebuf_r+0x44>
 8005fae:	220c      	movs	r2, #12
 8005fb0:	5ea3      	ldrsh	r3, [r4, r2]
 8005fb2:	059a      	lsls	r2, r3, #22
 8005fb4:	d4ef      	bmi.n	8005f96 <__smakebuf_r+0x1a>
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	4393      	bics	r3, r2
 8005fba:	431e      	orrs	r6, r3
 8005fbc:	81a6      	strh	r6, [r4, #12]
 8005fbe:	e7e4      	b.n	8005f8a <__smakebuf_r+0xe>
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	89a2      	ldrh	r2, [r4, #12]
 8005fc4:	6020      	str	r0, [r4, #0]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	9b00      	ldr	r3, [sp, #0]
 8005fcc:	6120      	str	r0, [r4, #16]
 8005fce:	6163      	str	r3, [r4, #20]
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00c      	beq.n	8005ff0 <__smakebuf_r+0x74>
 8005fd6:	0028      	movs	r0, r5
 8005fd8:	230e      	movs	r3, #14
 8005fda:	5ee1      	ldrsh	r1, [r4, r3]
 8005fdc:	f000 f854 	bl	8006088 <_isatty_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d005      	beq.n	8005ff0 <__smakebuf_r+0x74>
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	89a2      	ldrh	r2, [r4, #12]
 8005fe8:	439a      	bics	r2, r3
 8005fea:	3b02      	subs	r3, #2
 8005fec:	4313      	orrs	r3, r2
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	433b      	orrs	r3, r7
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	e7ce      	b.n	8005f96 <__smakebuf_r+0x1a>

08005ff8 <_putc_r>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	0006      	movs	r6, r0
 8005ffc:	000d      	movs	r5, r1
 8005ffe:	0014      	movs	r4, r2
 8006000:	2800      	cmp	r0, #0
 8006002:	d004      	beq.n	800600e <_putc_r+0x16>
 8006004:	6a03      	ldr	r3, [r0, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <_putc_r+0x16>
 800600a:	f7ff f8eb 	bl	80051e4 <__sinit>
 800600e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006010:	07db      	lsls	r3, r3, #31
 8006012:	d405      	bmi.n	8006020 <_putc_r+0x28>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	059b      	lsls	r3, r3, #22
 8006018:	d402      	bmi.n	8006020 <_putc_r+0x28>
 800601a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800601c:	f7ff fb03 	bl	8005626 <__retarget_lock_acquire_recursive>
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	3b01      	subs	r3, #1
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da05      	bge.n	8006036 <_putc_r+0x3e>
 800602a:	69a2      	ldr	r2, [r4, #24]
 800602c:	4293      	cmp	r3, r2
 800602e:	db12      	blt.n	8006056 <_putc_r+0x5e>
 8006030:	b2eb      	uxtb	r3, r5
 8006032:	2b0a      	cmp	r3, #10
 8006034:	d00f      	beq.n	8006056 <_putc_r+0x5e>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	6022      	str	r2, [r4, #0]
 800603c:	701d      	strb	r5, [r3, #0]
 800603e:	b2ed      	uxtb	r5, r5
 8006040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d405      	bmi.n	8006052 <_putc_r+0x5a>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	059b      	lsls	r3, r3, #22
 800604a:	d402      	bmi.n	8006052 <_putc_r+0x5a>
 800604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800604e:	f7ff faeb 	bl	8005628 <__retarget_lock_release_recursive>
 8006052:	0028      	movs	r0, r5
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	0029      	movs	r1, r5
 8006058:	0022      	movs	r2, r4
 800605a:	0030      	movs	r0, r6
 800605c:	f7ff f9bc 	bl	80053d8 <__swbuf_r>
 8006060:	0005      	movs	r5, r0
 8006062:	e7ed      	b.n	8006040 <_putc_r+0x48>

08006064 <_fstat_r>:
 8006064:	2300      	movs	r3, #0
 8006066:	b570      	push	{r4, r5, r6, lr}
 8006068:	4d06      	ldr	r5, [pc, #24]	; (8006084 <_fstat_r+0x20>)
 800606a:	0004      	movs	r4, r0
 800606c:	0008      	movs	r0, r1
 800606e:	0011      	movs	r1, r2
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	f7fa fd5a 	bl	8000b2a <_fstat>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	d103      	bne.n	8006082 <_fstat_r+0x1e>
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d000      	beq.n	8006082 <_fstat_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	2000a58c 	.word	0x2000a58c

08006088 <_isatty_r>:
 8006088:	2300      	movs	r3, #0
 800608a:	b570      	push	{r4, r5, r6, lr}
 800608c:	4d06      	ldr	r5, [pc, #24]	; (80060a8 <_isatty_r+0x20>)
 800608e:	0004      	movs	r4, r0
 8006090:	0008      	movs	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fa fd57 	bl	8000b46 <_isatty>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d103      	bne.n	80060a4 <_isatty_r+0x1c>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d000      	beq.n	80060a4 <_isatty_r+0x1c>
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	2000a58c 	.word	0x2000a58c

080060ac <_sbrk_r>:
 80060ac:	2300      	movs	r3, #0
 80060ae:	b570      	push	{r4, r5, r6, lr}
 80060b0:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_sbrk_r+0x20>)
 80060b2:	0004      	movs	r4, r0
 80060b4:	0008      	movs	r0, r1
 80060b6:	602b      	str	r3, [r5, #0]
 80060b8:	f7fa fd5a 	bl	8000b70 <_sbrk>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d103      	bne.n	80060c8 <_sbrk_r+0x1c>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d000      	beq.n	80060c8 <_sbrk_r+0x1c>
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	bd70      	pop	{r4, r5, r6, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	2000a58c 	.word	0x2000a58c

080060d0 <memchr>:
 80060d0:	b2c9      	uxtb	r1, r1
 80060d2:	1882      	adds	r2, r0, r2
 80060d4:	4290      	cmp	r0, r2
 80060d6:	d101      	bne.n	80060dc <memchr+0xc>
 80060d8:	2000      	movs	r0, #0
 80060da:	4770      	bx	lr
 80060dc:	7803      	ldrb	r3, [r0, #0]
 80060de:	428b      	cmp	r3, r1
 80060e0:	d0fb      	beq.n	80060da <memchr+0xa>
 80060e2:	3001      	adds	r0, #1
 80060e4:	e7f6      	b.n	80060d4 <memchr+0x4>
	...

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
