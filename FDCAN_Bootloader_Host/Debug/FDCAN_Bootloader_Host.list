
FDCAN_Bootloader_Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002824  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a00  08002a00  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002a00  08002a00  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a00  08002a00  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000068  08002a70  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08002a70  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000126f7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ac  00000000  00000000  000327ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000052f2  00000000  00000000  00035876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b80  00000000  00000000  0003ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b82  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d741  00000000  00000000  0003c26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013d93  00000000  00000000  000599ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b8278  00000000  00000000  0006d73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000024d8  00000000  00000000  001259b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00127e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080028c8 	.word	0x080028c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	080028c8 	.word	0x080028c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <MX_FDCAN1_Init>:
  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003f0:	22c0      	movs	r2, #192	; 0xc0
  hfdcan1.Instance = FDCAN1;
 80003f2:	4811      	ldr	r0, [pc, #68]	; (8000438 <MX_FDCAN1_Init+0x48>)
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <MX_FDCAN1_Init+0x4c>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003f6:	0092      	lsls	r2, r2, #2
{
 80003f8:	b570      	push	{r4, r5, r6, lr}
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80003fa:	2101      	movs	r1, #1
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003fc:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 8;
 80003fe:	2208      	movs	r2, #8
  hfdcan1.Init.NominalSyncJumpWidth = 3;
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000400:	240c      	movs	r4, #12
  hfdcan1.Init.NominalTimeSeg2 = 3;
  hfdcan1.Init.DataPrescaler = 2;
 8000402:	2502      	movs	r5, #2
  hfdcan1.Instance = FDCAN1;
 8000404:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000406:	2300      	movs	r3, #0
  hfdcan1.Init.NominalPrescaler = 8;
 8000408:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800040a:	8201      	strh	r1, [r0, #16]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800040c:	3a05      	subs	r2, #5
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800040e:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000410:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000412:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000414:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000416:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000418:	6202      	str	r2, [r0, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800041a:	6245      	str	r5, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800041c:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 800041e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000420:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000422:	6341      	str	r1, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000424:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000426:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000428:	f000 fb5e 	bl	8000ae8 <HAL_FDCAN_Init>
 800042c:	2800      	cmp	r0, #0
 800042e:	d001      	beq.n	8000434 <MX_FDCAN1_Init+0x44>
  {
    Error_Handler();
 8000430:	f000 f988 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000084 	.word	0x20000084
 800043c:	40006400 	.word	0x40006400

08000440 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000440:	b510      	push	{r4, lr}
 8000442:	0004      	movs	r4, r0
 8000444:	b09a      	sub	sp, #104	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	2214      	movs	r2, #20
 8000448:	2100      	movs	r1, #0
 800044a:	a802      	add	r0, sp, #8
 800044c:	f001 ff60 	bl	8002310 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	224c      	movs	r2, #76	; 0x4c
 8000452:	2100      	movs	r1, #0
 8000454:	a807      	add	r0, sp, #28
 8000456:	f001 ff5b 	bl	8002310 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <HAL_FDCAN_MspInit+0x88>)
 800045c:	6822      	ldr	r2, [r4, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d12f      	bne.n	80004c2 <HAL_FDCAN_MspInit+0x82>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000462:	2380      	movs	r3, #128	; 0x80
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000464:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000466:	049b      	lsls	r3, r3, #18
 8000468:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	f001 f8f9 	bl	8001660 <HAL_RCCEx_PeriphCLKConfig>
 800046e:	2800      	cmp	r0, #0
 8000470:	d001      	beq.n	8000476 <HAL_FDCAN_MspInit+0x36>
    {
      Error_Handler();
 8000472:	f000 f967 	bl	8000744 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_FDCAN_MspInit+0x8c>)
 800047a:	0149      	lsls	r1, r1, #5
 800047c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2400      	movs	r4, #0
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000480:	430a      	orrs	r2, r1
 8000482:	63da      	str	r2, [r3, #60]	; 0x3c
 8000484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <HAL_FDCAN_MspInit+0x90>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000488:	400a      	ands	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800048a:	2108      	movs	r1, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800048c:	9200      	str	r2, [sp, #0]
 800048e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
 8000496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800049a:	400b      	ands	r3, r1
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80004a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ae:	f000 fe8f 	bl	80011d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80004b2:	2015      	movs	r0, #21
 80004b4:	0022      	movs	r2, r4
 80004b6:	0021      	movs	r1, r4
 80004b8:	f000 fac6 	bl	8000a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80004bc:	2015      	movs	r0, #21
 80004be:	f000 faed 	bl	8000a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80004c2:	b01a      	add	sp, #104	; 0x68
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40006400 	.word	0x40006400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	50000c00 	.word	0x50000c00

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	2214      	movs	r2, #20
 80004da:	2100      	movs	r1, #0
 80004dc:	a805      	add	r0, sp, #20
 80004de:	f001 ff17 	bl	8002310 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e2:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 80004e8:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 80004ec:	4c27      	ldr	r4, [pc, #156]	; (800058c <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ee:	430a      	orrs	r2, r1
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
 80004f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 80004f4:	4e26      	ldr	r6, [pc, #152]	; (8000590 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f6:	400a      	ands	r2, r1
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	391e      	subs	r1, #30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	432a      	orrs	r2, r5
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
 8000504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000506:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	402a      	ands	r2, r5
 800050a:	9201      	str	r2, [sp, #4]
 800050c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000510:	0038      	movs	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	430a      	orrs	r2, r1
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
 8000516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000518:	400a      	ands	r2, r1
 800051a:	9202      	str	r2, [sp, #8]
 800051c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000520:	3102      	adds	r1, #2
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
 8000526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000528:	400a      	ands	r2, r1
 800052a:	9203      	str	r2, [sp, #12]
 800052c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000530:	3104      	adds	r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
 8000536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053a:	400b      	ands	r3, r1
 800053c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 800053e:	0021      	movs	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000540:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000542:	f000 fe8b 	bl	800125c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	0030      	movs	r0, r6
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	f000 fe86 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin;
 8000550:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	0038      	movs	r0, r7
 8000556:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f000 fe37 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 8000562:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000564:	0030      	movs	r0, r6
 8000566:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 8000568:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 800056e:	f000 fe2f 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000572:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000574:	0030      	movs	r0, r6
 8000576:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000578:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000580:	f000 fe26 	bl	80011d0 <HAL_GPIO_Init>

}
 8000584:	b00b      	add	sp, #44	; 0x2c
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	00008203 	.word	0x00008203
 8000590:	50000800 	.word	0x50000800

08000594 <__io_putchar>:
#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000594:	2301      	movs	r3, #1
{
 8000596:	b507      	push	{r0, r1, r2, lr}
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000598:	425b      	negs	r3, r3
{
 800059a:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800059c:	2201      	movs	r2, #1
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <__io_putchar+0x18>)
 80005a0:	a901      	add	r1, sp, #4
 80005a2:	f001 f9bf 	bl	8001924 <HAL_UART_Transmit>
    return ch;
 80005a6:	9801      	ldr	r0, [sp, #4]
}
 80005a8:	bd0e      	pop	{r1, r2, r3, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000104 	.word	0x20000104

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b510      	push	{r4, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b4:	223c      	movs	r2, #60	; 0x3c
 80005b6:	2100      	movs	r1, #0
 80005b8:	a805      	add	r0, sp, #20
 80005ba:	f001 fea9 	bl	8002310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005be:	2210      	movs	r2, #16
 80005c0:	2100      	movs	r1, #0
 80005c2:	a801      	add	r0, sp, #4
 80005c4:	f001 fea4 	bl	8002310 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2080      	movs	r0, #128	; 0x80
 80005ca:	0080      	lsls	r0, r0, #2
 80005cc:	f000 fe4c 	bl	8001268 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005da:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005dc:	3308      	adds	r3, #8
 80005de:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	029b      	lsls	r3, r3, #10
 80005e4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	049b      	lsls	r3, r3, #18
 80005ea:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ec:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f000 fe5e 	bl	80012c0 <HAL_RCC_OscConfig>
 8000604:	2800      	cmp	r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060a:	e7fe      	b.n	800060a <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	0021      	movs	r1, r4
 8000614:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f000 ff5f 	bl	80014dc <HAL_RCC_ClockConfig>
 800061e:	2800      	cmp	r0, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x76>
 8000622:	b672      	cpsid	i
  while (1)
 8000624:	e7fe      	b.n	8000624 <SystemClock_Config+0x74>
}
 8000626:	b014      	add	sp, #80	; 0x50
 8000628:	bd10      	pop	{r4, pc}
	...

0800062c <main>:
{
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t data[256]={0};
 800062e:	2400      	movs	r4, #0
{
 8000630:	b0d5      	sub	sp, #340	; 0x154
  HAL_Init();
 8000632:	f000 f9c5 	bl	80009c0 <HAL_Init>
  SystemClock_Config();
 8000636:	f7ff ffbb 	bl	80005b0 <SystemClock_Config>
  uint8_t data[256]={0};
 800063a:	0021      	movs	r1, r4
 800063c:	22fc      	movs	r2, #252	; 0xfc
 800063e:	a815      	add	r0, sp, #84	; 0x54
 8000640:	9414      	str	r4, [sp, #80]	; 0x50
 8000642:	f001 fe65 	bl	8002310 <memset>
  uint8_t data_e[64]={0};
 8000646:	0021      	movs	r1, r4
 8000648:	223c      	movs	r2, #60	; 0x3c
 800064a:	a805      	add	r0, sp, #20
 800064c:	9404      	str	r4, [sp, #16]
  uint8_t txdata_e[2] = {0x00};
 800064e:	ae01      	add	r6, sp, #4
  uint8_t data_e[64]={0};
 8000650:	f001 fe5e 	bl	8002310 <memset>
  uint8_t txdata_w[5] = {0x08,0x00,0x30,0x00,0xFF};
 8000654:	2205      	movs	r2, #5
 8000656:	4937      	ldr	r1, [pc, #220]	; (8000734 <main+0x108>)
 8000658:	a802      	add	r0, sp, #8
 800065a:	f001 fedc 	bl	8002416 <memcpy>
  uint8_t txdata_e[2] = {0x00};
 800065e:	8034      	strh	r4, [r6, #0]
  MX_GPIO_Init();
 8000660:	f7ff ff38 	bl	80004d4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000664:	f7ff fec4 	bl	80003f0 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000668:	f000 f8e0 	bl	800082c <MX_USART3_UART_Init>
  printf("host\n");
 800066c:	4832      	ldr	r0, [pc, #200]	; (8000738 <main+0x10c>)
 800066e:	f001 fd53 	bl	8002118 <puts>
  FDCAN_Enable();
 8000672:	f001 fb23 	bl	8001cbc <FDCAN_Enable>
  HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f000 f9c8 	bl	8000a0c <HAL_Delay>
    txdata_e[1] = 20;
 800067c:	2314      	movs	r3, #20
 800067e:	ad04      	add	r5, sp, #16
 8000680:	7073      	strb	r3, [r6, #1]
    for(i=0;i<txdata_e[1];i++)
 8000682:	002f      	movs	r7, r5
    txdata_e[1] = 20;
 8000684:	002b      	movs	r3, r5
 8000686:	3406      	adds	r4, #6
    	data_e[i*2+1] = 6+count++;
 8000688:	705c      	strb	r4, [r3, #1]
    for(i=0;i<txdata_e[1];i++)
 800068a:	3401      	adds	r4, #1
 800068c:	b2e4      	uxtb	r4, r4
 800068e:	3302      	adds	r3, #2
 8000690:	2c1a      	cmp	r4, #26
 8000692:	d1f9      	bne.n	8000688 <main+0x5c>
    FDCAN_EraseMemory(txdata_e,data_e);
 8000694:	0029      	movs	r1, r5
 8000696:	0030      	movs	r0, r6
 8000698:	f001 fbc4 	bl	8001e24 <FDCAN_EraseMemory>
    txdata_e[1] = 20;
 800069c:	2314      	movs	r3, #20
 800069e:	7073      	strb	r3, [r6, #1]
 80006a0:	002b      	movs	r3, r5
		data_e[i*2+1] = 6+count++;
 80006a2:	705c      	strb	r4, [r3, #1]
    for(i=0;i<txdata_e[1];i++)
 80006a4:	3401      	adds	r4, #1
 80006a6:	b2e4      	uxtb	r4, r4
 80006a8:	3302      	adds	r3, #2
 80006aa:	2c2e      	cmp	r4, #46	; 0x2e
 80006ac:	d1f9      	bne.n	80006a2 <main+0x76>
	FDCAN_EraseMemory(txdata_e,data_e);
 80006ae:	0029      	movs	r1, r5
 80006b0:	0030      	movs	r0, r6
 80006b2:	f001 fbb7 	bl	8001e24 <FDCAN_EraseMemory>
	txdata_e[1] = 18;
 80006b6:	2312      	movs	r3, #18
 80006b8:	7073      	strb	r3, [r6, #1]
		data_e[i*2+1] = 6+count++;
 80006ba:	706c      	strb	r4, [r5, #1]
	for(i=0;i<txdata_e[1];i++)
 80006bc:	3401      	adds	r4, #1
 80006be:	b2e4      	uxtb	r4, r4
 80006c0:	3502      	adds	r5, #2
 80006c2:	2c40      	cmp	r4, #64	; 0x40
 80006c4:	d1f9      	bne.n	80006ba <main+0x8e>
	FDCAN_EraseMemory(txdata_e,data_e);
 80006c6:	0039      	movs	r1, r7
 80006c8:	0030      	movs	r0, r6
    	memset(data, 0, sizeof(data));
 80006ca:	2580      	movs	r5, #128	; 0x80
	FDCAN_EraseMemory(txdata_e,data_e);
 80006cc:	f001 fbaa 	bl	8001e24 <FDCAN_EraseMemory>
    address = 0x08003000;
 80006d0:	4c1a      	ldr	r4, [pc, #104]	; (800073c <main+0x110>)
    	memset(data, 0, sizeof(data));
 80006d2:	006d      	lsls	r5, r5, #1
 80006d4:	002a      	movs	r2, r5
 80006d6:	2100      	movs	r1, #0
 80006d8:	a814      	add	r0, sp, #80	; 0x50
 80006da:	f001 fe19 	bl	8002310 <memset>
 80006de:	0023      	movs	r3, r4
 80006e0:	3401      	adds	r4, #1
 80006e2:	aa14      	add	r2, sp, #80	; 0x50
 80006e4:	34ff      	adds	r4, #255	; 0xff
			data[count++] = (uint8_t)(*(__IO uint32_t *)(address));
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	7011      	strb	r1, [r2, #0]
			data[count++] = (uint8_t)(*(__IO uint32_t *)(address)>>8);
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	0a09      	lsrs	r1, r1, #8
 80006ee:	7051      	strb	r1, [r2, #1]
			data[count++] = (uint8_t)(*(__IO uint32_t *)(address)>>16);
 80006f0:	6819      	ldr	r1, [r3, #0]
 80006f2:	0c09      	lsrs	r1, r1, #16
 80006f4:	7091      	strb	r1, [r2, #2]
			data[count++] = (uint8_t)(*(__IO uint32_t *)(address)>>24);
 80006f6:	cb02      	ldmia	r3!, {r1}
 80006f8:	0e09      	lsrs	r1, r1, #24
 80006fa:	70d1      	strb	r1, [r2, #3]
    	for(i=0;i<64;i++)
 80006fc:	3204      	adds	r2, #4
 80006fe:	429c      	cmp	r4, r3
 8000700:	d1f1      	bne.n	80006e6 <main+0xba>
    	FDCAN_WriteMemory(txdata_w,data);
 8000702:	a914      	add	r1, sp, #80	; 0x50
 8000704:	a802      	add	r0, sp, #8
 8000706:	f001 fb51 	bl	8001dac <FDCAN_WriteMemory>
    	if(txdata_w[2] == 0xFF)
 800070a:	466b      	mov	r3, sp
 800070c:	7a9b      	ldrb	r3, [r3, #10]
 800070e:	a902      	add	r1, sp, #8
 8000710:	2bff      	cmp	r3, #255	; 0xff
 8000712:	d102      	bne.n	800071a <main+0xee>
			txdata_w[1]++;
 8000714:	784a      	ldrb	r2, [r1, #1]
 8000716:	3201      	adds	r2, #1
 8000718:	704a      	strb	r2, [r1, #1]
    	txdata_w[2]++;
 800071a:	466a      	mov	r2, sp
 800071c:	3301      	adds	r3, #1
 800071e:	7293      	strb	r3, [r2, #10]
    for(int j=0;j<236;j++)	//
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <main+0x114>)
 8000722:	429c      	cmp	r4, r3
 8000724:	d1d6      	bne.n	80006d4 <main+0xa8>
    HAL_Delay(1000);
 8000726:	20fa      	movs	r0, #250	; 0xfa
 8000728:	0080      	lsls	r0, r0, #2
 800072a:	f000 f96f 	bl	8000a0c <HAL_Delay>
    FDCAN_Go();
 800072e:	f001 fbab 	bl	8001e88 <FDCAN_Go>
	while (1)
 8000732:	e7fe      	b.n	8000732 <main+0x106>
 8000734:	080028e0 	.word	0x080028e0
 8000738:	080028e5 	.word	0x080028e5
 800073c:	08003000 	.word	0x08003000
 8000740:	08011c00 	.word	0x08011c00

08000744 <Error_Handler>:
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <Error_Handler+0x2>

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2101      	movs	r1, #1
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_MspInit+0x30>)

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800074e:	20c0      	movs	r0, #192	; 0xc0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000752:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000754:	430a      	orrs	r2, r1
 8000756:	641a      	str	r2, [r3, #64]	; 0x40
 8000758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800075a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	9200      	str	r2, [sp, #0]
 8000760:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000764:	0549      	lsls	r1, r1, #21
 8000766:	430a      	orrs	r2, r1
 8000768:	63da      	str	r2, [r3, #60]	; 0x3c
 800076a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800076c:	400b      	ands	r3, r1
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000772:	f000 f95d 	bl	8000a30 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bd07      	pop	{r0, r1, r2, pc}
 8000778:	40021000 	.word	0x40021000

0800077c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler>

0800077e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler>

08000780 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f92f 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bd10      	pop	{r4, pc}

0800078c <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 800078c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800078e:	4802      	ldr	r0, [pc, #8]	; (8000798 <TIM16_FDCAN_IT0_IRQHandler+0xc>)
 8000790:	f000 fc6b 	bl	800106a <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000794:	bd10      	pop	{r4, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000084 	.word	0x20000084

0800079c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	000e      	movs	r6, r1
 80007a0:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	2500      	movs	r5, #0
 80007a4:	42a5      	cmp	r5, r4
 80007a6:	db01      	blt.n	80007ac <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80007a8:	0020      	movs	r0, r4
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80007ac:	e000      	b.n	80007b0 <_read+0x14>
 80007ae:	bf00      	nop
 80007b0:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	3501      	adds	r5, #1
 80007b4:	e7f6      	b.n	80007a4 <_read+0x8>

080007b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b6:	b570      	push	{r4, r5, r6, lr}
 80007b8:	000e      	movs	r6, r1
 80007ba:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2500      	movs	r5, #0
 80007be:	42a5      	cmp	r5, r4
 80007c0:	db01      	blt.n	80007c6 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80007c2:	0020      	movs	r0, r4
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80007c6:	5d70      	ldrb	r0, [r6, r5]
 80007c8:	f7ff fee4 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	3501      	adds	r5, #1
 80007ce:	e7f6      	b.n	80007be <_write+0x8>

080007d0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80007d0:	2001      	movs	r0, #1
}
 80007d2:	4240      	negs	r0, r0
 80007d4:	4770      	bx	lr

080007d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	019b      	lsls	r3, r3, #6
  return 0;
}
 80007da:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80007dc:	604b      	str	r3, [r1, #4]
}
 80007de:	4770      	bx	lr

080007e0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80007e0:	2001      	movs	r0, #1
 80007e2:	4770      	bx	lr

080007e4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80007e4:	2000      	movs	r0, #0
 80007e6:	4770      	bx	lr

080007e8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e8:	490b      	ldr	r1, [pc, #44]	; (8000818 <_sbrk+0x30>)
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <_sbrk+0x34>)
{
 80007ec:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ee:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f0:	490b      	ldr	r1, [pc, #44]	; (8000820 <_sbrk+0x38>)
{
 80007f2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80007f4:	6808      	ldr	r0, [r1, #0]
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d101      	bne.n	80007fe <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <_sbrk+0x3c>)
 80007fc:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fe:	6808      	ldr	r0, [r1, #0]
 8000800:	18c3      	adds	r3, r0, r3
 8000802:	4293      	cmp	r3, r2
 8000804:	d906      	bls.n	8000814 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8000806:	f001 fdd9 	bl	80023bc <__errno>
 800080a:	230c      	movs	r3, #12
 800080c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800080e:	2001      	movs	r0, #1
 8000810:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000812:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000814:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8000816:	e7fc      	b.n	8000812 <_sbrk+0x2a>
 8000818:	00000400 	.word	0x00000400
 800081c:	20024000 	.word	0x20024000
 8000820:	20000100 	.word	0x20000100
 8000824:	20000380 	.word	0x20000380

08000828 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	4770      	bx	lr
	...

0800082c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800082c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_USART3_UART_Init+0x64>)
 8000830:	4c18      	ldr	r4, [pc, #96]	; (8000894 <MX_USART3_UART_Init+0x68>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000832:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 8000834:	6023      	str	r3, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	23e1      	movs	r3, #225	; 0xe1
 8000838:	025b      	lsls	r3, r3, #9
 800083a:	6063      	str	r3, [r4, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083c:	2300      	movs	r3, #0
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800083e:	0020      	movs	r0, r4
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000840:	60a3      	str	r3, [r4, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000842:	60e3      	str	r3, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000844:	6123      	str	r3, [r4, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000846:	6162      	str	r2, [r4, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000848:	61a3      	str	r3, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084a:	61e3      	str	r3, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084c:	6223      	str	r3, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800084e:	6263      	str	r3, [r4, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000850:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	f001 f937 	bl	8001ac4 <HAL_UART_Init>
 8000856:	2800      	cmp	r0, #0
 8000858:	d001      	beq.n	800085e <MX_USART3_UART_Init+0x32>
  {
    Error_Handler();
 800085a:	f7ff ff73 	bl	8000744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	0020      	movs	r0, r4
 8000862:	f001 f9a9 	bl	8001bb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	2800      	cmp	r0, #0
 8000868:	d001      	beq.n	800086e <MX_USART3_UART_Init+0x42>
  {
    Error_Handler();
 800086a:	f7ff ff6b 	bl	8000744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	0020      	movs	r0, r4
 8000872:	f001 f9c1 	bl	8001bf8 <HAL_UARTEx_SetRxFifoThreshold>
 8000876:	2800      	cmp	r0, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f7ff ff63 	bl	8000744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800087e:	0020      	movs	r0, r4
 8000880:	f001 f97c 	bl	8001b7c <HAL_UARTEx_DisableFifoMode>
 8000884:	2800      	cmp	r0, #0
 8000886:	d001      	beq.n	800088c <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 8000888:	f7ff ff5c 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800088c:	bd10      	pop	{r4, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40004800 	.word	0x40004800
 8000894:	20000104 	.word	0x20000104

08000898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000898:	b510      	push	{r4, lr}
 800089a:	0004      	movs	r4, r0
 800089c:	b09a      	sub	sp, #104	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	2214      	movs	r2, #20
 80008a0:	2100      	movs	r1, #0
 80008a2:	a802      	add	r0, sp, #8
 80008a4:	f001 fd34 	bl	8002310 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	224c      	movs	r2, #76	; 0x4c
 80008aa:	2100      	movs	r1, #0
 80008ac:	a807      	add	r0, sp, #28
 80008ae:	f001 fd2f 	bl	8002310 <memset>
  if(uartHandle->Instance==USART3)
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x78>)
 80008b4:	6822      	ldr	r2, [r4, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d127      	bne.n	800090a <HAL_UART_MspInit+0x72>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008ba:	2304      	movs	r3, #4
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008be:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c0:	f000 fece 	bl	8001660 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d001      	beq.n	80008cc <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80008c8:	f7ff ff3c 	bl	8000744 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x7c>)
 80008d0:	02c9      	lsls	r1, r1, #11
 80008d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d6:	430a      	orrs	r2, r1
 80008d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80008da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008dc:	400a      	ands	r2, r1
 80008de:	9200      	str	r2, [sp, #0]
 80008e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2202      	movs	r2, #2
 80008e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008e6:	4311      	orrs	r1, r2
 80008e8:	6359      	str	r1, [r3, #52]	; 0x34
 80008ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4013      	ands	r3, r2
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008f4:	23c0      	movs	r3, #192	; 0xc0
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000900:	3304      	adds	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000904:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f000 fc63 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800090a:	b01a      	add	sp, #104	; 0x68
 800090c:	bd10      	pop	{r4, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40004800 	.word	0x40004800
 8000914:	40021000 	.word	0x40021000
 8000918:	50000400 	.word	0x50000400

0800091c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000920:	f7ff ff82 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094a:	f001 fd3d 	bl	80023c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800094e:	f7ff fe6d 	bl	800062c <main>

08000952 <LoopForever>:

LoopForever:
  b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000960:	08002a08 	.word	0x08002a08
  ldr r2, =_sbss
 8000964:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000968:	20000380 	.word	0x20000380

0800096c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_COMP_IRQHandler>
	...

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_InitTick+0x44>)
{
 8000974:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000976:	7819      	ldrb	r1, [r3, #0]
 8000978:	2900      	cmp	r1, #0
 800097a:	d101      	bne.n	8000980 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800097c:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800097e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000980:	20fa      	movs	r0, #250	; 0xfa
 8000982:	0080      	lsls	r0, r0, #2
 8000984:	f7ff fbbe 	bl	8000104 <__udivsi3>
 8000988:	4c0b      	ldr	r4, [pc, #44]	; (80009b8 <HAL_InitTick+0x48>)
 800098a:	0001      	movs	r1, r0
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	f7ff fbb9 	bl	8000104 <__udivsi3>
 8000992:	f000 f88f 	bl	8000ab4 <HAL_SYSTICK_Config>
 8000996:	1e04      	subs	r4, r0, #0
 8000998:	d1f0      	bne.n	800097c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	2d03      	cmp	r5, #3
 800099c:	d8ee      	bhi.n	800097c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	0002      	movs	r2, r0
 80009a0:	2001      	movs	r0, #1
 80009a2:	0029      	movs	r1, r5
 80009a4:	4240      	negs	r0, r0
 80009a6:	f000 f84f 	bl	8000a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <HAL_InitTick+0x4c>)
 80009ac:	0020      	movs	r0, r4
 80009ae:	601d      	str	r5, [r3, #0]
  return status;
 80009b0:	e7e5      	b.n	800097e <HAL_InitTick+0xe>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	20000004 	.word	0x20000004
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008

080009c0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_Init+0x24>)
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	6811      	ldr	r1, [r2, #0]
{
 80009c8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ca:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009cc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ce:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d0:	f7ff ffce 	bl	8000970 <HAL_InitTick>
 80009d4:	1e04      	subs	r4, r0, #0
 80009d6:	d103      	bne.n	80009e0 <HAL_Init+0x20>
  HAL_MspInit();
 80009d8:	f7ff feb6 	bl	8000748 <HAL_MspInit>
}
 80009dc:	0020      	movs	r0, r4
 80009de:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80009e0:	2401      	movs	r4, #1
 80009e2:	e7fb      	b.n	80009dc <HAL_Init+0x1c>
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x10>)
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_IncTick+0x14>)
 80009ec:	6811      	ldr	r1, [r2, #0]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	185b      	adds	r3, r3, r1
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	4770      	bx	lr
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000198 	.word	0x20000198
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <HAL_GetTick+0x8>)
 8000a02:	6818      	ldr	r0, [r3, #0]
}
 8000a04:	4770      	bx	lr
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000198 	.word	0x20000198

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff fff6 	bl	8000a00 <HAL_GetTick>
 8000a14:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	1c63      	adds	r3, r4, #1
 8000a18:	d002      	beq.n	8000a20 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <HAL_Delay+0x20>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a20:	f7ff ffee 	bl	8000a00 <HAL_GetTick>
 8000a24:	1b40      	subs	r0, r0, r5
 8000a26:	42a0      	cmp	r0, r4
 8000a28:	d3fa      	bcc.n	8000a20 <HAL_Delay+0x14>
  {
  }
}
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8000a32:	4904      	ldr	r1, [pc, #16]	; (8000a44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8000a34:	6813      	ldr	r3, [r2, #0]
 8000a36:	400b      	ands	r3, r1
 8000a38:	4303      	orrs	r3, r0
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	4770      	bx	lr
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40010000 	.word	0x40010000
 8000a44:	fffff9ff 	.word	0xfffff9ff

08000a48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4a:	25ff      	movs	r5, #255	; 0xff
 8000a4c:	2403      	movs	r4, #3
 8000a4e:	002a      	movs	r2, r5
 8000a50:	4004      	ands	r4, r0
 8000a52:	00e4      	lsls	r4, r4, #3
 8000a54:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a56:	0189      	lsls	r1, r1, #6
 8000a58:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a5c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000a60:	2800      	cmp	r0, #0
 8000a62:	db0a      	blt.n	8000a7a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	24c0      	movs	r4, #192	; 0xc0
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_NVIC_SetPriority+0x4c>)
 8000a68:	0880      	lsrs	r0, r0, #2
 8000a6a:	0080      	lsls	r0, r0, #2
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	00a4      	lsls	r4, r4, #2
 8000a70:	5903      	ldr	r3, [r0, r4]
 8000a72:	4013      	ands	r3, r2
 8000a74:	430b      	orrs	r3, r1
 8000a76:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000a78:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	4003      	ands	r3, r0
 8000a7e:	3b08      	subs	r3, #8
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_NVIC_SetPriority+0x50>)
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	181b      	adds	r3, r3, r0
 8000a88:	69d8      	ldr	r0, [r3, #28]
 8000a8a:	4002      	ands	r2, r0
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	61da      	str	r2, [r3, #28]
 8000a90:	e7f2      	b.n	8000a78 <HAL_NVIC_SetPriority+0x30>
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	db05      	blt.n	8000aac <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa0:	231f      	movs	r3, #31
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3b1e      	subs	r3, #30
 8000aa6:	4083      	lsls	r3, r0
 8000aa8:	4a01      	ldr	r2, [pc, #4]	; (8000ab0 <HAL_NVIC_EnableIRQ+0x14>)
 8000aaa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aac:	4770      	bx	lr
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	e000e100 	.word	0xe000e100

08000ab4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	1e43      	subs	r3, r0, #1
 8000ab8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d20d      	bcs.n	8000adc <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	6a03      	ldr	r3, [r0, #32]
 8000aca:	0609      	lsls	r1, r1, #24
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000adc:	4770      	bx	lr
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	e000e010 	.word	0xe000e010
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ae8:	b570      	push	{r4, r5, r6, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000aea:	0005      	movs	r5, r0
 8000aec:	355c      	adds	r5, #92	; 0x5c
 8000aee:	782b      	ldrb	r3, [r5, #0]
{
 8000af0:	0004      	movs	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <HAL_FDCAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000af8:	0003      	movs	r3, r0
 8000afa:	335d      	adds	r3, #93	; 0x5d
 8000afc:	701a      	strb	r2, [r3, #0]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000afe:	f7ff fc9f 	bl	8000440 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000b02:	2110      	movs	r1, #16
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	438a      	bics	r2, r1
 8000b0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
//  tickstart = HAL_GetTick();

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	6999      	ldr	r1, [r3, #24]
 8000b10:	4211      	tst	r1, r2
 8000b12:	d1fc      	bne.n	8000b0e <HAL_FDCAN_Init+0x26>
//      return HAL_ERROR;
//    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000b14:	2101      	movs	r1, #1
 8000b16:	699a      	ldr	r2, [r3, #24]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
//  tickstart = HAL_GetTick();

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b1c:	699a      	ldr	r2, [r3, #24]
 8000b1e:	420a      	tst	r2, r1
 8000b20:	d0fc      	beq.n	8000b1c <HAL_FDCAN_Init+0x34>
//      return HAL_ERROR;
//    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b22:	2202      	movs	r2, #2
 8000b24:	6999      	ldr	r1, [r3, #24]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000b2a:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <HAL_FDCAN_Init+0x180>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d102      	bne.n	8000b36 <HAL_FDCAN_Init+0x4e>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000b30:	6861      	ldr	r1, [r4, #4]
 8000b32:	4a4e      	ldr	r2, [pc, #312]	; (8000c6c <HAL_FDCAN_Init+0x184>)
 8000b34:	6011      	str	r1, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000b36:	7c21      	ldrb	r1, [r4, #16]
 8000b38:	2240      	movs	r2, #64	; 0x40
 8000b3a:	2901      	cmp	r1, #1
 8000b3c:	d000      	beq.n	8000b40 <HAL_FDCAN_Init+0x58>
 8000b3e:	e086      	b.n	8000c4e <HAL_FDCAN_Init+0x166>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b40:	6999      	ldr	r1, [r3, #24]
 8000b42:	4391      	bics	r1, r2
 8000b44:	6199      	str	r1, [r3, #24]
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000b46:	7c62      	ldrb	r2, [r4, #17]
 8000b48:	2a01      	cmp	r2, #1
 8000b4a:	d000      	beq.n	8000b4e <HAL_FDCAN_Init+0x66>
 8000b4c:	e083      	b.n	8000c56 <HAL_FDCAN_Init+0x16e>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	6999      	ldr	r1, [r3, #24]
 8000b52:	01d2      	lsls	r2, r2, #7
 8000b54:	430a      	orrs	r2, r1
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b56:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000b58:	7ca2      	ldrb	r2, [r4, #18]
 8000b5a:	2a01      	cmp	r2, #1
 8000b5c:	d000      	beq.n	8000b60 <HAL_FDCAN_Init+0x78>
 8000b5e:	e07e      	b.n	8000c5e <HAL_FDCAN_Init+0x176>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	4943      	ldr	r1, [pc, #268]	; (8000c70 <HAL_FDCAN_Init+0x188>)
 8000b64:	400a      	ands	r2, r1
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b66:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	4842      	ldr	r0, [pc, #264]	; (8000c74 <HAL_FDCAN_Init+0x18c>)
 8000b6c:	68a1      	ldr	r1, [r4, #8]
 8000b6e:	4002      	ands	r2, r0

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b70:	20a4      	movs	r0, #164	; 0xa4
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b72:	430a      	orrs	r2, r1
 8000b74:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b76:	699a      	ldr	r2, [r3, #24]
 8000b78:	4382      	bics	r2, r0
 8000b7a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b7c:	691a      	ldr	r2, [r3, #16]
 8000b7e:	3894      	subs	r0, #148	; 0x94
 8000b80:	4382      	bics	r2, r0
 8000b82:	611a      	str	r2, [r3, #16]
//    /* Nothing to do: normal mode */
//  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b84:	69e0      	ldr	r0, [r4, #28]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b86:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b88:	3801      	subs	r0, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b8a:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b8c:	0200      	lsls	r0, r0, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b8e:	0652      	lsls	r2, r2, #25
 8000b90:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b92:	6a20      	ldr	r0, [r4, #32]
 8000b94:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b96:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b98:	6960      	ldr	r0, [r4, #20]
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	0400      	lsls	r0, r0, #16
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b9e:	4302      	orrs	r2, r0
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ba0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ba2:	22c0      	movs	r2, #192	; 0xc0
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	d10e      	bne.n	8000bc8 <HAL_FDCAN_Init+0xe0>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bac:	6b21      	ldr	r1, [r4, #48]	; 0x30
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bae:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bb0:	3901      	subs	r1, #1
 8000bb2:	0109      	lsls	r1, r1, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bb4:	0212      	lsls	r2, r2, #8
 8000bb6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000bba:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bbc:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000bbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bc0:	3901      	subs	r1, #1
 8000bc2:	0409      	lsls	r1, r1, #16
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bc4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bc6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000bc8:	0019      	movs	r1, r3
 8000bca:	31c0      	adds	r1, #192	; 0xc0
 8000bcc:	680a      	ldr	r2, [r1, #0]
 8000bce:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000bd0:	4e29      	ldr	r6, [pc, #164]	; (8000c78 <HAL_FDCAN_Init+0x190>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	600a      	str	r2, [r1, #0]
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000bd6:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <HAL_FDCAN_Init+0x194>)
 8000bd8:	189a      	adds	r2, r3, r2
 8000bda:	1e51      	subs	r1, r2, #1
 8000bdc:	418a      	sbcs	r2, r1
 8000bde:	4928      	ldr	r1, [pc, #160]	; (8000c80 <HAL_FDCAN_Init+0x198>)
 8000be0:	4252      	negs	r2, r2
 8000be2:	400a      	ands	r2, r1
 8000be4:	4927      	ldr	r1, [pc, #156]	; (8000c84 <HAL_FDCAN_Init+0x19c>)
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000be6:	3304      	adds	r3, #4
 8000be8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000bea:	1852      	adds	r2, r2, r1
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bee:	4030      	ands	r0, r6
 8000bf0:	0409      	lsls	r1, r1, #16
 8000bf2:	4301      	orrs	r1, r0
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000bf4:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000bf6:	67d9      	str	r1, [r3, #124]	; 0x7c

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	3170      	adds	r1, #112	; 0x70

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000bfc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000bfe:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000c00:	4e21      	ldr	r6, [pc, #132]	; (8000c88 <HAL_FDCAN_Init+0x1a0>)
 8000c02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000c04:	4030      	ands	r0, r6
 8000c06:	0609      	lsls	r1, r1, #24
 8000c08:	4301      	orrs	r1, r0
 8000c0a:	67d9      	str	r1, [r3, #124]	; 0x7c

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	33b0      	adds	r3, #176	; 0xb0
 8000c10:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000c12:	33d8      	adds	r3, #216	; 0xd8
 8000c14:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000c16:	2398      	movs	r3, #152	; 0x98
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	6523      	str	r3, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000c1e:	239e      	movs	r3, #158	; 0x9e
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18d3      	adds	r3, r2, r3
 8000c24:	6563      	str	r3, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c26:	23d4      	movs	r3, #212	; 0xd4
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	18d0      	adds	r0, r2, r3
 8000c2c:	1d11      	adds	r1, r2, #4
 8000c2e:	23d4      	movs	r3, #212	; 0xd4
 8000c30:	4288      	cmp	r0, r1
 8000c32:	d200      	bcs.n	8000c36 <HAL_FDCAN_Init+0x14e>
 8000c34:	3bd3      	subs	r3, #211	; 0xd3
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000c36:	2100      	movs	r1, #0
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	c202      	stmia	r2!, {r1}
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d1fc      	bne.n	8000c3c <HAL_FDCAN_Init+0x154>
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	2000      	movs	r0, #0
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c46:	65a1      	str	r1, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c48:	6621      	str	r1, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c4a:	702b      	strb	r3, [r5, #0]
}
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c4e:	6999      	ldr	r1, [r3, #24]
 8000c50:	430a      	orrs	r2, r1
 8000c52:	619a      	str	r2, [r3, #24]
 8000c54:	e777      	b.n	8000b46 <HAL_FDCAN_Init+0x5e>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c56:	699a      	ldr	r2, [r3, #24]
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <HAL_FDCAN_Init+0x1a4>)
 8000c5a:	400a      	ands	r2, r1
 8000c5c:	e77b      	b.n	8000b56 <HAL_FDCAN_Init+0x6e>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	6999      	ldr	r1, [r3, #24]
 8000c62:	0152      	lsls	r2, r2, #5
 8000c64:	430a      	orrs	r2, r1
 8000c66:	e77e      	b.n	8000b66 <HAL_FDCAN_Init+0x7e>
 8000c68:	40006400 	.word	0x40006400
 8000c6c:	40006500 	.word	0x40006500
 8000c70:	ffffefff 	.word	0xffffefff
 8000c74:	fffffcff 	.word	0xfffffcff
 8000c78:	ffe0ffff 	.word	0xffe0ffff
 8000c7c:	bfff9800 	.word	0xbfff9800
 8000c80:	fffffcb0 	.word	0xfffffcb0
 8000c84:	4000b750 	.word	0x4000b750
 8000c88:	f0ffffff 	.word	0xf0ffffff
 8000c8c:	ffffbfff 	.word	0xffffbfff

08000c90 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c90:	0003      	movs	r3, r0
{
 8000c92:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c94:	335c      	adds	r3, #92	; 0x5c
 8000c96:	781b      	ldrb	r3, [r3, #0]
{
 8000c98:	0007      	movs	r7, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d81a      	bhi.n	8000cd6 <HAL_FDCAN_ConfigFilter+0x46>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ca0:	688c      	ldr	r4, [r1, #8]
                         (sFilterConfig->FilterConfig << 27U) |
 8000ca2:	68cb      	ldr	r3, [r1, #12]
                         (sFilterConfig->FilterID1 << 16U)    |
 8000ca4:	690d      	ldr	r5, [r1, #16]
                         sFilterConfig->FilterID2);
 8000ca6:	694e      	ldr	r6, [r1, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ca8:	07a4      	lsls	r4, r4, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000caa:	c905      	ldmia	r1!, {r0, r2}
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d108      	bne.n	8000cc2 <HAL_FDCAN_ConfigFilter+0x32>
                         (sFilterConfig->FilterConfig << 27U) |
 8000cb0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cb2:	4323      	orrs	r3, r4
      *FilterAddress = FilterElementW1;
 8000cb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cb6:	4333      	orrs	r3, r6
                         (sFilterConfig->FilterID1 << 16U)    |
 8000cb8:	042d      	lsls	r5, r5, #16
      *FilterAddress = FilterElementW1;
 8000cba:	0092      	lsls	r2, r2, #2
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cbc:	432b      	orrs	r3, r5
      *FilterAddress = FilterElementW1;
 8000cbe:	5053      	str	r3, [r2, r1]
}
 8000cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000cc4:	00d2      	lsls	r2, r2, #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000cc6:	075b      	lsls	r3, r3, #29
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000cc8:	1852      	adds	r2, r2, r1
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000cca:	432b      	orrs	r3, r5
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000ccc:	4334      	orrs	r4, r6
    return HAL_OK;
 8000cce:	2000      	movs	r0, #0
      *FilterAddress = FilterElementW1;
 8000cd0:	6013      	str	r3, [r2, #0]
      *FilterAddress = FilterElementW2;
 8000cd2:	6054      	str	r4, [r2, #4]
 8000cd4:	e7f4      	b.n	8000cc0 <HAL_FDCAN_ConfigFilter+0x30>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
 8000ce0:	e7ee      	b.n	8000cc0 <HAL_FDCAN_ConfigFilter+0x30>

08000ce2 <HAL_FDCAN_ConfigTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	335c      	adds	r3, #92	; 0x5c
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d105      	bne.n	8000cf8 <HAL_FDCAN_ConfigTxDelayCompensation+0x16>
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8000cec:	6803      	ldr	r3, [r0, #0]
    return HAL_OK;
 8000cee:	2000      	movs	r0, #0
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8000cf0:	0209      	lsls	r1, r1, #8
 8000cf2:	4311      	orrs	r1, r2
 8000cf4:	6499      	str	r1, [r3, #72]	; 0x48
}
 8000cf6:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
 8000d02:	e7f8      	b.n	8000cf6 <HAL_FDCAN_ConfigTxDelayCompensation+0x14>

08000d04 <HAL_FDCAN_EnableTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000d04:	0003      	movs	r3, r0
 8000d06:	335c      	adds	r3, #92	; 0x5c
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d107      	bne.n	8000d1e <HAL_FDCAN_EnableTxDelayCompensation+0x1a>
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	6802      	ldr	r2, [r0, #0]
    return HAL_OK;
 8000d12:	2000      	movs	r0, #0
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8000d14:	68d1      	ldr	r1, [r2, #12]
 8000d16:	041b      	lsls	r3, r3, #16
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000d22:	4313      	orrs	r3, r2
 8000d24:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
 8000d28:	e7f8      	b.n	8000d1c <HAL_FDCAN_EnableTxDelayCompensation+0x18>

08000d2a <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	325c      	adds	r2, #92	; 0x5c
 8000d2e:	7811      	ldrb	r1, [r2, #0]
{
 8000d30:	0003      	movs	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000d32:	b2c8      	uxtb	r0, r1
 8000d34:	2901      	cmp	r1, #1
 8000d36:	d108      	bne.n	8000d4a <HAL_FDCAN_Start+0x20>
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000d38:	3101      	adds	r1, #1
 8000d3a:	7011      	strb	r1, [r2, #0]
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	698a      	ldr	r2, [r1, #24]
 8000d40:	4382      	bics	r2, r0
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000d42:	2000      	movs	r0, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d44:	618a      	str	r2, [r1, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000d46:	6618      	str	r0, [r3, #96]	; 0x60
}
 8000d48:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	6e19      	ldr	r1, [r3, #96]	; 0x60
    return HAL_ERROR;
 8000d4e:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d50:	430a      	orrs	r2, r1
 8000d52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 8000d54:	e7f8      	b.n	8000d48 <HAL_FDCAN_Start+0x1e>
	...

08000d58 <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000d58:	0003      	movs	r3, r0
{
 8000d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000d5c:	335c      	adds	r3, #92	; 0x5c
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d158      	bne.n	8000e16 <HAL_FDCAN_AddMessageToTxFifoQ+0xbe>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000d64:	6805      	ldr	r5, [r0, #0]
 8000d66:	002b      	movs	r3, r5
 8000d68:	33c4      	adds	r3, #196	; 0xc4
 8000d6a:	681c      	ldr	r4, [r3, #0]
 8000d6c:	02a4      	lsls	r4, r4, #10
 8000d6e:	d506      	bpl.n	8000d7e <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000d74:	009b      	lsls	r3, r3, #2
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000d76:	4313      	orrs	r3, r2
 8000d78:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	e036      	b.n	8000dec <HAL_FDCAN_AddMessageToTxFifoQ+0x94>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d7e:	681c      	ldr	r4, [r3, #0]
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d80:	690f      	ldr	r7, [r1, #16]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d82:	03a4      	lsls	r4, r4, #14
 8000d84:	0fa3      	lsrs	r3, r4, #30
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000d86:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d88:	9300      	str	r3, [sp, #0]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8000d8a:	688e      	ldr	r6, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8000d8c:	680b      	ldr	r3, [r1, #0]
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000d8e:	2c00      	cmp	r4, #0
 8000d90:	d12d      	bne.n	8000dee <HAL_FDCAN_AddMessageToTxFifoQ+0x96>
                   FDCAN_STANDARD_ID |
 8000d92:	4337      	orrs	r7, r6
                   (pTxHeader->Identifier << 18U));
 8000d94:	049b      	lsls	r3, r3, #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 8000d96:	698e      	ldr	r6, [r1, #24]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d98:	431f      	orrs	r7, r3
                 pTxHeader->FDFormat |
 8000d9a:	69cb      	ldr	r3, [r1, #28]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000d9c:	9c00      	ldr	r4, [sp, #0]
                 pTxHeader->FDFormat |
 8000d9e:	4333      	orrs	r3, r6
 8000da0:	694e      	ldr	r6, [r1, #20]
 8000da2:	4333      	orrs	r3, r6
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000da4:	6a0e      	ldr	r6, [r1, #32]
 8000da6:	0636      	lsls	r6, r6, #24
                 pTxHeader->FDFormat |
 8000da8:	4333      	orrs	r3, r6
                 (pTxHeader->DataLength << 16U));
 8000daa:	68ce      	ldr	r6, [r1, #12]
 8000dac:	0436      	lsls	r6, r6, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000dae:	4333      	orrs	r3, r6
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000db0:	2648      	movs	r6, #72	; 0x48
 8000db2:	4366      	muls	r6, r4
 8000db4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000db6:	46a4      	mov	ip, r4
 8000db8:	4466      	add	r6, ip

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
  TxAddress++;
  *TxAddress = TxElementW2;
 8000dba:	6073      	str	r3, [r6, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000dbc:	2308      	movs	r3, #8
  *TxAddress = TxElementW1;
 8000dbe:	6037      	str	r7, [r6, #0]
  TxAddress++;
 8000dc0:	0037      	movs	r7, r6
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000dc2:	425b      	negs	r3, r3
 8000dc4:	1b9e      	subs	r6, r3, r6
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_FDCAN_AddMessageToTxFifoQ+0xc4>)
  TxAddress++;
 8000dc8:	3708      	adds	r7, #8
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	68cc      	ldr	r4, [r1, #12]
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	9c01      	ldr	r4, [sp, #4]
 8000dd4:	5ce3      	ldrb	r3, [r4, r3]
 8000dd6:	469c      	mov	ip, r3
 8000dd8:	19bb      	adds	r3, r7, r6
 8000dda:	4563      	cmp	r3, ip
 8000ddc:	d30c      	bcc.n	8000df8 <HAL_FDCAN_AddMessageToTxFifoQ+0xa0>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000dde:	2301      	movs	r3, #1
 8000de0:	9a00      	ldr	r2, [sp, #0]
 8000de2:	35cc      	adds	r5, #204	; 0xcc
 8000de4:	4093      	lsls	r3, r2
 8000de6:	602b      	str	r3, [r5, #0]
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000de8:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8000dea:	2000      	movs	r0, #0
}
 8000dec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8000dee:	433b      	orrs	r3, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000df0:	2780      	movs	r7, #128	; 0x80
                   pTxHeader->TxFrameType |
 8000df2:	4333      	orrs	r3, r6
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000df4:	05ff      	lsls	r7, r7, #23
 8000df6:	e7ce      	b.n	8000d96 <HAL_FDCAN_AddMessageToTxFifoQ+0x3e>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000df8:	78d3      	ldrb	r3, [r2, #3]
 8000dfa:	061b      	lsls	r3, r3, #24
 8000dfc:	469c      	mov	ip, r3
 8000dfe:	4664      	mov	r4, ip
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000e00:	7893      	ldrb	r3, [r2, #2]
 8000e02:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000e04:	4323      	orrs	r3, r4
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8000e06:	7814      	ldrb	r4, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000e08:	4323      	orrs	r3, r4
 8000e0a:	7854      	ldrb	r4, [r2, #1]
 8000e0c:	3204      	adds	r2, #4
 8000e0e:	0224      	lsls	r4, r4, #8
 8000e10:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000e12:	c708      	stmia	r7!, {r3}
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000e14:	e7da      	b.n	8000dcc <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000e16:	2308      	movs	r3, #8
 8000e18:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000e1a:	e7ac      	b.n	8000d76 <HAL_FDCAN_AddMessageToTxFifoQ+0x1e>
 8000e1c:	0800294c 	.word	0x0800294c

08000e20 <HAL_FDCAN_GetRxMessage>:
{
 8000e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e22:	0004      	movs	r4, r0
{
 8000e24:	9301      	str	r3, [sp, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e26:	345c      	adds	r4, #92	; 0x5c
 8000e28:	7824      	ldrb	r4, [r4, #0]
  if (state == HAL_FDCAN_STATE_BUSY)
 8000e2a:	2c02      	cmp	r4, #2
 8000e2c:	d000      	beq.n	8000e30 <HAL_FDCAN_GetRxMessage+0x10>
 8000e2e:	e080      	b.n	8000f32 <HAL_FDCAN_GetRxMessage+0x112>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000e30:	260f      	movs	r6, #15
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000e32:	6804      	ldr	r4, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000e34:	2940      	cmp	r1, #64	; 0x40
 8000e36:	d15b      	bne.n	8000ef0 <HAL_FDCAN_GetRxMessage+0xd0>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000e38:	0027      	movs	r7, r4
 8000e3a:	3790      	adds	r7, #144	; 0x90
 8000e3c:	683d      	ldr	r5, [r7, #0]
 8000e3e:	4235      	tst	r5, r6
 8000e40:	d106      	bne.n	8000e50 <HAL_FDCAN_GetRxMessage+0x30>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000e46:	005b      	lsls	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	e04e      	b.n	8000eee <HAL_FDCAN_GetRxMessage+0xce>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000e50:	2601      	movs	r6, #1
 8000e52:	46b4      	mov	ip, r6
 8000e54:	4663      	mov	r3, ip
 8000e56:	683d      	ldr	r5, [r7, #0]
 8000e58:	0e2d      	lsrs	r5, r5, #24
 8000e5a:	402e      	ands	r6, r5
 8000e5c:	421d      	tst	r5, r3
 8000e5e:	d003      	beq.n	8000e68 <HAL_FDCAN_GetRxMessage+0x48>
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000e60:	3404      	adds	r4, #4
 8000e62:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8000e64:	0a76      	lsrs	r6, r6, #9
 8000e66:	401e      	ands	r6, r3
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000e68:	2448      	movs	r4, #72	; 0x48
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000e6a:	683d      	ldr	r5, [r7, #0]
 8000e6c:	05ad      	lsls	r5, r5, #22
 8000e6e:	0fad      	lsrs	r5, r5, #30
 8000e70:	19ad      	adds	r5, r5, r6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000e72:	436c      	muls	r4, r5
 8000e74:	6c86      	ldr	r6, [r0, #72]	; 0x48
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000e76:	19a4      	adds	r4, r4, r6
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000e78:	2680      	movs	r6, #128	; 0x80
 8000e7a:	6827      	ldr	r7, [r4, #0]
 8000e7c:	05f6      	lsls	r6, r6, #23
 8000e7e:	4037      	ands	r7, r6
 8000e80:	6057      	str	r7, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000e82:	6826      	ldr	r6, [r4, #0]
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000e84:	00f6      	lsls	r6, r6, #3
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000e86:	2f00      	cmp	r7, #0
 8000e88:	d14a      	bne.n	8000f20 <HAL_FDCAN_GetRxMessage+0x100>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000e8a:	0d76      	lsrs	r6, r6, #21
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000e8c:	2780      	movs	r7, #128	; 0x80
 8000e8e:	6016      	str	r6, [r2, #0]
 8000e90:	6826      	ldr	r6, [r4, #0]
 8000e92:	05bf      	lsls	r7, r7, #22
 8000e94:	403e      	ands	r6, r7
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e96:	2780      	movs	r7, #128	; 0x80
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000e98:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000e9a:	6826      	ldr	r6, [r4, #0]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e9c:	037f      	lsls	r7, r7, #13
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000e9e:	0ff6      	lsrs	r6, r6, #31
 8000ea0:	07f6      	lsls	r6, r6, #31
 8000ea2:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000ea4:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_FDCAN_GetRxMessage+0x118>)
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000ea8:	b2b6      	uxth	r6, r6
 8000eaa:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000eac:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000eae:	469c      	mov	ip, r3
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000eb0:	0336      	lsls	r6, r6, #12
 8000eb2:	0f36      	lsrs	r6, r6, #28
 8000eb4:	60d6      	str	r6, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000eb6:	6866      	ldr	r6, [r4, #4]
 8000eb8:	403e      	ands	r6, r7
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000eba:	2780      	movs	r7, #128	; 0x80
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000ebc:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000ebe:	6866      	ldr	r6, [r4, #4]
 8000ec0:	03bf      	lsls	r7, r7, #14
 8000ec2:	403e      	ands	r6, r7
 8000ec4:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000ec6:	6866      	ldr	r6, [r4, #4]
 8000ec8:	0076      	lsls	r6, r6, #1
 8000eca:	0e76      	lsrs	r6, r6, #25
 8000ecc:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000ece:	6866      	ldr	r6, [r4, #4]
      pRxData[ByteCounter] = pData[ByteCounter];
 8000ed0:	3408      	adds	r4, #8
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000ed2:	0ff6      	lsrs	r6, r6, #31
 8000ed4:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4663      	mov	r3, ip
 8000eda:	68d7      	ldr	r7, [r2, #12]
 8000edc:	5ddf      	ldrb	r7, [r3, r7]
 8000ede:	42b7      	cmp	r7, r6
 8000ee0:	d820      	bhi.n	8000f24 <HAL_FDCAN_GetRxMessage+0x104>
      hfdcan->Instance->RXF0A = GetIndex;
 8000ee2:	6803      	ldr	r3, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000ee4:	2940      	cmp	r1, #64	; 0x40
 8000ee6:	d122      	bne.n	8000f2e <HAL_FDCAN_GetRxMessage+0x10e>
      hfdcan->Instance->RXF0A = GetIndex;
 8000ee8:	3394      	adds	r3, #148	; 0x94
    return HAL_OK;
 8000eea:	2000      	movs	r0, #0
      hfdcan->Instance->RXF1A = GetIndex;
 8000eec:	601d      	str	r5, [r3, #0]
}
 8000eee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000ef0:	0025      	movs	r5, r4
 8000ef2:	3598      	adds	r5, #152	; 0x98
 8000ef4:	682f      	ldr	r7, [r5, #0]
 8000ef6:	4237      	tst	r7, r6
 8000ef8:	d0a3      	beq.n	8000e42 <HAL_FDCAN_GetRxMessage+0x22>
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000efa:	682e      	ldr	r6, [r5, #0]
 8000efc:	2701      	movs	r7, #1
 8000efe:	0e33      	lsrs	r3, r6, #24
 8000f00:	001e      	movs	r6, r3
 8000f02:	403e      	ands	r6, r7
 8000f04:	423b      	tst	r3, r7
 8000f06:	d003      	beq.n	8000f10 <HAL_FDCAN_GetRxMessage+0xf0>
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000f08:	3404      	adds	r4, #4
 8000f0a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8000f0c:	0a36      	lsrs	r6, r6, #8
 8000f0e:	403e      	ands	r6, r7
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000f10:	2448      	movs	r4, #72	; 0x48
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000f12:	682d      	ldr	r5, [r5, #0]
 8000f14:	05ad      	lsls	r5, r5, #22
 8000f16:	0fad      	lsrs	r5, r5, #30
 8000f18:	19ad      	adds	r5, r5, r6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000f1a:	436c      	muls	r4, r5
 8000f1c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8000f1e:	e7aa      	b.n	8000e76 <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000f20:	08f6      	lsrs	r6, r6, #3
 8000f22:	e7b3      	b.n	8000e8c <HAL_FDCAN_GetRxMessage+0x6c>
      pRxData[ByteCounter] = pData[ByteCounter];
 8000f24:	5da7      	ldrb	r7, [r4, r6]
 8000f26:	9b01      	ldr	r3, [sp, #4]
 8000f28:	559f      	strb	r7, [r3, r6]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000f2a:	3601      	adds	r6, #1
 8000f2c:	e7d4      	b.n	8000ed8 <HAL_FDCAN_GetRxMessage+0xb8>
      hfdcan->Instance->RXF1A = GetIndex;
 8000f2e:	339c      	adds	r3, #156	; 0x9c
 8000f30:	e7db      	b.n	8000eea <HAL_FDCAN_GetRxMessage+0xca>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f32:	2308      	movs	r3, #8
 8000f34:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000f36:	e787      	b.n	8000e48 <HAL_FDCAN_GetRxMessage+0x28>
 8000f38:	0800294c 	.word	0x0800294c

08000f3c <HAL_FDCAN_GetRxFifoFillLevel>:
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8000f3c:	6803      	ldr	r3, [r0, #0]
 8000f3e:	200f      	movs	r0, #15
  if (RxFifo == FDCAN_RX_FIFO0)
 8000f40:	2940      	cmp	r1, #64	; 0x40
 8000f42:	d103      	bne.n	8000f4c <HAL_FDCAN_GetRxFifoFillLevel+0x10>
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8000f44:	3390      	adds	r3, #144	; 0x90
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4018      	ands	r0, r3
}
 8000f4a:	4770      	bx	lr
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8000f4c:	3398      	adds	r3, #152	; 0x98
 8000f4e:	e7fa      	b.n	8000f46 <HAL_FDCAN_GetRxFifoFillLevel+0xa>

08000f50 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8000f50:	6803      	ldr	r3, [r0, #0]
 8000f52:	33c4      	adds	r3, #196	; 0xc4
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	2307      	movs	r3, #7
 8000f58:	4018      	ands	r0, r3
}
 8000f5a:	4770      	bx	lr

08000f5c <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f5c:	0003      	movs	r3, r0
{
 8000f5e:	b570      	push	{r4, r5, r6, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f60:	335c      	adds	r3, #92	; 0x5c
 8000f62:	781b      	ldrb	r3, [r3, #0]
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f64:	3b01      	subs	r3, #1
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d900      	bls.n	8000f6c <HAL_FDCAN_ActivateNotification+0x10>
 8000f6a:	e06d      	b.n	8001048 <HAL_FDCAN_ActivateNotification+0xec>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f6c:	2407      	movs	r4, #7
 8000f6e:	000d      	movs	r5, r1
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000f70:	6800      	ldr	r0, [r0, #0]
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f72:	4025      	ands	r5, r4
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000f74:	6d83      	ldr	r3, [r0, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f76:	4221      	tst	r1, r4
 8000f78:	d001      	beq.n	8000f7e <HAL_FDCAN_ActivateNotification+0x22>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000f7a:	07dc      	lsls	r4, r3, #31
 8000f7c:	d522      	bpl.n	8000fc4 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000f7e:	2438      	movs	r4, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000f80:	4221      	tst	r1, r4
 8000f82:	d001      	beq.n	8000f88 <HAL_FDCAN_ActivateNotification+0x2c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000f84:	079c      	lsls	r4, r3, #30
 8000f86:	d51d      	bpl.n	8000fc4 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000f88:	24e0      	movs	r4, #224	; 0xe0
 8000f8a:	0064      	lsls	r4, r4, #1
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000f8c:	4221      	tst	r1, r4
 8000f8e:	d001      	beq.n	8000f94 <HAL_FDCAN_ActivateNotification+0x38>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000f90:	075c      	lsls	r4, r3, #29
 8000f92:	d517      	bpl.n	8000fc4 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000f94:	24f0      	movs	r4, #240	; 0xf0
 8000f96:	0164      	lsls	r4, r4, #5
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000f98:	4221      	tst	r1, r4
 8000f9a:	d001      	beq.n	8000fa0 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000f9c:	071c      	lsls	r4, r3, #28
 8000f9e:	d511      	bpl.n	8000fc4 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000fa0:	24e0      	movs	r4, #224	; 0xe0
 8000fa2:	0224      	lsls	r4, r4, #8
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000fa4:	4221      	tst	r1, r4
 8000fa6:	d001      	beq.n	8000fac <HAL_FDCAN_ActivateNotification+0x50>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000fa8:	06dc      	lsls	r4, r3, #27
 8000faa:	d50b      	bpl.n	8000fc4 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8000fac:	24c0      	movs	r4, #192	; 0xc0
 8000fae:	02a4      	lsls	r4, r4, #10
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000fb0:	4221      	tst	r1, r4
 8000fb2:	d001      	beq.n	8000fb8 <HAL_FDCAN_ActivateNotification+0x5c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000fb4:	069c      	lsls	r4, r3, #26
 8000fb6:	d505      	bpl.n	8000fc4 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8000fb8:	24fc      	movs	r4, #252	; 0xfc
 8000fba:	0424      	lsls	r4, r4, #16
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000fbc:	4221      	tst	r1, r4
 8000fbe:	d005      	beq.n	8000fcc <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000fc0:	065c      	lsls	r4, r3, #25
 8000fc2:	d403      	bmi.n	8000fcc <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000fc4:	2401      	movs	r4, #1
 8000fc6:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8000fc8:	4334      	orrs	r4, r6
 8000fca:	65c4      	str	r4, [r0, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8000fcc:	2d00      	cmp	r5, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8000fd0:	07dc      	lsls	r4, r3, #31
 8000fd2:	d422      	bmi.n	800101a <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000fd4:	2438      	movs	r4, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8000fd6:	4221      	tst	r1, r4
 8000fd8:	d001      	beq.n	8000fde <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000fda:	079c      	lsls	r4, r3, #30
 8000fdc:	d41d      	bmi.n	800101a <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000fde:	24e0      	movs	r4, #224	; 0xe0
 8000fe0:	0064      	lsls	r4, r4, #1
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000fe2:	4221      	tst	r1, r4
 8000fe4:	d001      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000fe6:	075c      	lsls	r4, r3, #29
 8000fe8:	d417      	bmi.n	800101a <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000fea:	24f0      	movs	r4, #240	; 0xf0
 8000fec:	0164      	lsls	r4, r4, #5
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000fee:	4221      	tst	r1, r4
 8000ff0:	d001      	beq.n	8000ff6 <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000ff2:	071c      	lsls	r4, r3, #28
 8000ff4:	d411      	bmi.n	800101a <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000ff6:	24e0      	movs	r4, #224	; 0xe0
 8000ff8:	0224      	lsls	r4, r4, #8
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000ffa:	4221      	tst	r1, r4
 8000ffc:	d001      	beq.n	8001002 <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000ffe:	06dc      	lsls	r4, r3, #27
 8001000:	d40b      	bmi.n	800101a <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001002:	24c0      	movs	r4, #192	; 0xc0
 8001004:	02a4      	lsls	r4, r4, #10
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001006:	4221      	tst	r1, r4
 8001008:	d001      	beq.n	800100e <HAL_FDCAN_ActivateNotification+0xb2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800100a:	069c      	lsls	r4, r3, #26
 800100c:	d405      	bmi.n	800101a <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800100e:	24fc      	movs	r4, #252	; 0xfc
 8001010:	0424      	lsls	r4, r4, #16
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001012:	4221      	tst	r1, r4
 8001014:	d005      	beq.n	8001022 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001016:	065b      	lsls	r3, r3, #25
 8001018:	d503      	bpl.n	8001022 <HAL_FDCAN_ActivateNotification+0xc6>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800101a:	2302      	movs	r3, #2
 800101c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800101e:	4323      	orrs	r3, r4
 8001020:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001022:	060b      	lsls	r3, r1, #24
 8001024:	d504      	bpl.n	8001030 <HAL_FDCAN_ActivateNotification+0xd4>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001026:	0004      	movs	r4, r0
 8001028:	34dc      	adds	r4, #220	; 0xdc
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	4313      	orrs	r3, r2
 800102e:	6023      	str	r3, [r4, #0]
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001030:	05cb      	lsls	r3, r1, #23
 8001032:	d504      	bpl.n	800103e <HAL_FDCAN_ActivateNotification+0xe2>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001034:	0004      	movs	r4, r0
 8001036:	34e0      	adds	r4, #224	; 0xe0
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	4313      	orrs	r3, r2
 800103c:	6023      	str	r3, [r4, #0]
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800103e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001040:	430b      	orrs	r3, r1
 8001042:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_OK;
 8001044:	2000      	movs	r0, #0
}
 8001046:	bd70      	pop	{r4, r5, r6, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001048:	2302      	movs	r3, #2
 800104a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800104c:	4313      	orrs	r3, r2
 800104e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
 8001052:	e7f8      	b.n	8001046 <HAL_FDCAN_ActivateNotification+0xea>

08001054 <HAL_FDCAN_TxEventFifoCallback>:
}
 8001054:	4770      	bx	lr

08001056 <HAL_FDCAN_RxFifo0Callback>:
 8001056:	4770      	bx	lr

08001058 <HAL_FDCAN_RxFifo1Callback>:
 8001058:	4770      	bx	lr

0800105a <HAL_FDCAN_TxFifoEmptyCallback>:
 800105a:	4770      	bx	lr

0800105c <HAL_FDCAN_TxBufferCompleteCallback>:
 800105c:	4770      	bx	lr

0800105e <HAL_FDCAN_TxBufferAbortCallback>:
 800105e:	4770      	bx	lr

08001060 <HAL_FDCAN_TimestampWraparoundCallback>:
 8001060:	4770      	bx	lr

08001062 <HAL_FDCAN_TimeoutOccurredCallback>:
 8001062:	4770      	bx	lr

08001064 <HAL_FDCAN_HighPriorityMessageCallback>:
 8001064:	4770      	bx	lr

08001066 <HAL_FDCAN_ErrorCallback>:
 8001066:	4770      	bx	lr

08001068 <HAL_FDCAN_ErrorStatusCallback>:
 8001068:	4770      	bx	lr

0800106a <HAL_FDCAN_IRQHandler>:
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800106a:	6803      	ldr	r3, [r0, #0]
{
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800106e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001070:	6d5f      	ldr	r7, [r3, #84]	; 0x54
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001072:	6d19      	ldr	r1, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001074:	4017      	ands	r7, r2
 8001076:	22e0      	movs	r2, #224	; 0xe0
 8001078:	0152      	lsls	r2, r2, #5
 800107a:	4017      	ands	r7, r2
  RxFifo0ITs &= hfdcan->Instance->IE;
 800107c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 800107e:	b085      	sub	sp, #20
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001080:	400a      	ands	r2, r1
 8001082:	2107      	movs	r1, #7
 8001084:	400a      	ands	r2, r1
 8001086:	9200      	str	r2, [sp, #0]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001088:	6d19      	ldr	r1, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800108a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 800108c:	0004      	movs	r4, r0
  RxFifo1ITs &= hfdcan->Instance->IE;
 800108e:	400a      	ands	r2, r1
 8001090:	2138      	movs	r1, #56	; 0x38
 8001092:	400a      	ands	r2, r1
 8001094:	9201      	str	r2, [sp, #4]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001096:	6d19      	ldr	r1, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8001098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800109a:	400a      	ands	r2, r1
 800109c:	21f1      	movs	r1, #241	; 0xf1
 800109e:	0409      	lsls	r1, r1, #16
 80010a0:	400a      	ands	r2, r1
 80010a2:	9202      	str	r2, [sp, #8]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80010a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 80010a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  itsource = hfdcan->Instance->IE;
 80010a8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  ErrorStatusITs &= hfdcan->Instance->IE;
 80010aa:	400a      	ands	r2, r1
 80010ac:	21e0      	movs	r1, #224	; 0xe0
 80010ae:	0309      	lsls	r1, r1, #12
 80010b0:	400a      	ands	r2, r1
 80010b2:	9203      	str	r2, [sp, #12]
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80010b4:	2240      	movs	r2, #64	; 0x40
  itflag = hfdcan->Instance->IR;
 80010b6:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80010b8:	4216      	tst	r6, r2
 80010ba:	d004      	beq.n	80010c6 <HAL_FDCAN_IRQHandler+0x5c>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80010bc:	4215      	tst	r5, r2
 80010be:	d002      	beq.n	80010c6 <HAL_FDCAN_IRQHandler+0x5c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80010c0:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80010c2:	f7ff ffcf 	bl	8001064 <HAL_FDCAN_HighPriorityMessageCallback>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	4216      	tst	r6, r2
 80010cc:	d00c      	beq.n	80010e8 <HAL_FDCAN_IRQHandler+0x7e>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80010ce:	4215      	tst	r5, r2
 80010d0:	d00a      	beq.n	80010e8 <HAL_FDCAN_IRQHandler+0x7e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	31d8      	adds	r1, #216	; 0xd8
 80010d8:	6808      	ldr	r0, [r1, #0]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80010da:	3108      	adds	r1, #8
 80010dc:	6809      	ldr	r1, [r1, #0]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80010de:	651a      	str	r2, [r3, #80]	; 0x50
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80010e0:	4001      	ands	r1, r0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80010e2:	0020      	movs	r0, r4
 80010e4:	f7ff ffbb 	bl	800105e <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 80010e8:	2f00      	cmp	r7, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_FDCAN_IRQHandler+0x8e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80010ec:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80010ee:	0039      	movs	r1, r7
 80010f0:	0020      	movs	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80010f2:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80010f4:	f7ff ffae 	bl	8001054 <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 80010f8:	9b00      	ldr	r3, [sp, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d006      	beq.n	800110c <HAL_FDCAN_IRQHandler+0xa2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80010fe:	9a00      	ldr	r2, [sp, #0]
 8001100:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001102:	0011      	movs	r1, r2
 8001104:	0020      	movs	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001106:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001108:	f7ff ffa5 	bl	8001056 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 800110c:	9b01      	ldr	r3, [sp, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <HAL_FDCAN_IRQHandler+0xb6>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001112:	9a01      	ldr	r2, [sp, #4]
 8001114:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001116:	0011      	movs	r1, r2
 8001118:	0020      	movs	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800111a:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800111c:	f7ff ff9c 	bl	8001058 <HAL_FDCAN_RxFifo1Callback>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	421e      	tst	r6, r3
 8001126:	d006      	beq.n	8001136 <HAL_FDCAN_IRQHandler+0xcc>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001128:	421d      	tst	r5, r3
 800112a:	d004      	beq.n	8001136 <HAL_FDCAN_IRQHandler+0xcc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800112c:	6822      	ldr	r2, [r4, #0]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800112e:	0020      	movs	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001130:	6513      	str	r3, [r2, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001132:	f7ff ff92 	bl	800105a <HAL_FDCAN_TxFifoEmptyCallback>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	4216      	tst	r6, r2
 800113a:	d00c      	beq.n	8001156 <HAL_FDCAN_IRQHandler+0xec>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800113c:	4215      	tst	r5, r2
 800113e:	d00a      	beq.n	8001156 <HAL_FDCAN_IRQHandler+0xec>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	0019      	movs	r1, r3
 8001144:	31d4      	adds	r1, #212	; 0xd4
 8001146:	6808      	ldr	r0, [r1, #0]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001148:	3108      	adds	r1, #8
 800114a:	6809      	ldr	r1, [r1, #0]
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800114c:	651a      	str	r2, [r3, #80]	; 0x50
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800114e:	4001      	ands	r1, r0
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001150:	0020      	movs	r0, r4
 8001152:	f7ff ff83 	bl	800105c <HAL_FDCAN_TxBufferCompleteCallback>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	019b      	lsls	r3, r3, #6
 800115a:	421e      	tst	r6, r3
 800115c:	d006      	beq.n	800116c <HAL_FDCAN_IRQHandler+0x102>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800115e:	421d      	tst	r5, r3
 8001160:	d004      	beq.n	800116c <HAL_FDCAN_IRQHandler+0x102>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001162:	6822      	ldr	r2, [r4, #0]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001164:	0020      	movs	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001166:	6513      	str	r3, [r2, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001168:	f7ff ff7a 	bl	8001060 <HAL_FDCAN_TimestampWraparoundCallback>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	421e      	tst	r6, r3
 8001172:	d006      	beq.n	8001182 <HAL_FDCAN_IRQHandler+0x118>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001174:	421d      	tst	r5, r3
 8001176:	d004      	beq.n	8001182 <HAL_FDCAN_IRQHandler+0x118>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001178:	6822      	ldr	r2, [r4, #0]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800117a:	0020      	movs	r0, r4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800117c:	6513      	str	r3, [r2, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800117e:	f7ff ff70 	bl	8001062 <HAL_FDCAN_TimeoutOccurredCallback>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	421e      	tst	r6, r3
 8001188:	d007      	beq.n	800119a <HAL_FDCAN_IRQHandler+0x130>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800118a:	421d      	tst	r5, r3
 800118c:	d005      	beq.n	800119a <HAL_FDCAN_IRQHandler+0x130>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800118e:	6822      	ldr	r2, [r4, #0]
 8001190:	6513      	str	r3, [r2, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001196:	4313      	orrs	r3, r2
 8001198:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 800119a:	9b03      	ldr	r3, [sp, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_FDCAN_IRQHandler+0x144>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80011a0:	9a03      	ldr	r2, [sp, #12]
 80011a2:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80011a4:	0011      	movs	r1, r2
 80011a6:	0020      	movs	r0, r4
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80011a8:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80011aa:	f7ff ff5d 	bl	8001068 <HAL_FDCAN_ErrorStatusCallback>
  if (Errors != 0U)
 80011ae:	9b02      	ldr	r3, [sp, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_FDCAN_IRQHandler+0x156>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	9a02      	ldr	r2, [sp, #8]
 80011b8:	651a      	str	r2, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80011ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011bc:	4313      	orrs	r3, r2
 80011be:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80011c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_FDCAN_IRQHandler+0x162>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80011c6:	0020      	movs	r0, r4
 80011c8:	f7ff ff4d 	bl	8001066 <HAL_FDCAN_ErrorCallback>
}
 80011cc:	b005      	add	sp, #20
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80011d2:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	680b      	ldr	r3, [r1, #0]
 80011d6:	001c      	movs	r4, r3
 80011d8:	40d4      	lsrs	r4, r2
 80011da:	d100      	bne.n	80011de <HAL_GPIO_Init+0xe>
//      }
    }

    position++;
  }
}
 80011dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011de:	2401      	movs	r4, #1
 80011e0:	4094      	lsls	r4, r2
 80011e2:	46a4      	mov	ip, r4
    if (iocurrent != 0x00u)
 80011e4:	4223      	tst	r3, r4
 80011e6:	d037      	beq.n	8001258 <HAL_GPIO_Init+0x88>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e8:	2503      	movs	r5, #3
 80011ea:	0056      	lsls	r6, r2, #1
 80011ec:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ee:	2403      	movs	r4, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f0:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f2:	684b      	ldr	r3, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f4:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f6:	401c      	ands	r4, r3
 80011f8:	1e65      	subs	r5, r4, #1
 80011fa:	2d01      	cmp	r5, #1
 80011fc:	d80f      	bhi.n	800121e <HAL_GPIO_Init+0x4e>
        temp = GPIOx->OSPEEDR;
 80011fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001200:	9d01      	ldr	r5, [sp, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001202:	091b      	lsrs	r3, r3, #4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001204:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001206:	68cd      	ldr	r5, [r1, #12]
 8001208:	40b5      	lsls	r5, r6
 800120a:	433d      	orrs	r5, r7
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800120c:	4667      	mov	r7, ip
        GPIOx->OSPEEDR = temp;
 800120e:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001210:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	43bd      	bics	r5, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	2701      	movs	r7, #1
 8001216:	403b      	ands	r3, r7
 8001218:	4093      	lsls	r3, r2
 800121a:	432b      	orrs	r3, r5
        GPIOx->OTYPER = temp;
 800121c:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	2c02      	cmp	r4, #2
 8001220:	d114      	bne.n	800124c <HAL_GPIO_Init+0x7c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001222:	2707      	movs	r7, #7
 8001224:	250f      	movs	r5, #15
 8001226:	4017      	ands	r7, r2
 8001228:	00bf      	lsls	r7, r7, #2
 800122a:	40bd      	lsls	r5, r7
 800122c:	46ac      	mov	ip, r5
        temp = GPIOx->AFR[position >> 3u];
 800122e:	08d3      	lsrs	r3, r2, #3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	18c3      	adds	r3, r0, r3
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	6a1b      	ldr	r3, [r3, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001238:	001d      	movs	r5, r3
 800123a:	4663      	mov	r3, ip
 800123c:	439d      	bics	r5, r3
 800123e:	46ac      	mov	ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001240:	690d      	ldr	r5, [r1, #16]
 8001242:	4663      	mov	r3, ip
 8001244:	40bd      	lsls	r5, r7
 8001246:	431d      	orrs	r5, r3
        GPIOx->AFR[position >> 3u] = temp;
 8001248:	9b00      	ldr	r3, [sp, #0]
 800124a:	621d      	str	r5, [r3, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124c:	40b4      	lsls	r4, r6
      temp = GPIOx->MODER;
 800124e:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001250:	9d01      	ldr	r5, [sp, #4]
 8001252:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001254:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001256:	6004      	str	r4, [r0, #0]
    position++;
 8001258:	3201      	adds	r2, #1
 800125a:	e7bb      	b.n	80011d4 <HAL_GPIO_Init+0x4>

0800125c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	2a00      	cmp	r2, #0
 800125e:	d001      	beq.n	8001264 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001260:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001262:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001264:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001266:	e7fc      	b.n	8001262 <HAL_GPIO_WritePin+0x6>

08001268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001268:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800126a:	4c11      	ldr	r4, [pc, #68]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x48>)
 800126c:	4911      	ldr	r1, [pc, #68]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800126e:	6823      	ldr	r3, [r4, #0]
{
 8001270:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001272:	400b      	ands	r3, r1
 8001274:	4303      	orrs	r3, r0
 8001276:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001278:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800127a:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	429a      	cmp	r2, r3
 8001280:	d10e      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8001284:	490d      	ldr	r1, [pc, #52]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0x54>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	2306      	movs	r3, #6
 800128a:	4358      	muls	r0, r3
 800128c:	f7fe ff3a 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001290:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001292:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001294:	00d2      	lsls	r2, r2, #3
 8001296:	6961      	ldr	r1, [r4, #20]
 8001298:	0008      	movs	r0, r1
 800129a:	4010      	ands	r0, r2
 800129c:	4211      	tst	r1, r2
 800129e:	d100      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80012a0:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80012a6:	3b01      	subs	r3, #1
 80012a8:	e7f5      	b.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80012aa:	2003      	movs	r0, #3
 80012ac:	e7f8      	b.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0x38>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	40007000 	.word	0x40007000
 80012b4:	fffff9ff 	.word	0xfffff9ff
 80012b8:	20000000 	.word	0x20000000
 80012bc:	000f4240 	.word	0x000f4240

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//        }
//      }
//    }
//  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	6803      	ldr	r3, [r0, #0]
{
 80012c4:	0005      	movs	r5, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	079b      	lsls	r3, r3, #30
 80012c8:	d54e      	bpl.n	8001368 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	2238      	movs	r2, #56	; 0x38
 80012cc:	4c57      	ldr	r4, [pc, #348]	; (800142c <HAL_RCC_OscConfig+0x16c>)
 80012ce:	68a3      	ldr	r3, [r4, #8]
 80012d0:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d2:	68e2      	ldr	r2, [r4, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d10b      	bne.n	80012f0 <HAL_RCC_OscConfig+0x30>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d8:	2103      	movs	r1, #3
 80012da:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012dc:	2a02      	cmp	r2, #2
 80012de:	d109      	bne.n	80012f4 <HAL_RCC_OscConfig+0x34>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	0552      	lsls	r2, r2, #21
 80012e4:	d524      	bpl.n	8001330 <HAL_RCC_OscConfig+0x70>
 80012e6:	68ea      	ldr	r2, [r5, #12]
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	d121      	bne.n	8001330 <HAL_RCC_OscConfig+0x70>
      {
        return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
//        }
      }
    }
  }
  return HAL_OK;
}
 80012ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f5      	beq.n	80012e0 <HAL_RCC_OscConfig+0x20>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f4:	68eb      	ldr	r3, [r5, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d042      	beq.n	8001380 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_RCC_OscConfig+0x170>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fe:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001300:	4013      	ands	r3, r2
 8001302:	692a      	ldr	r2, [r5, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001304:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001306:	4313      	orrs	r3, r2
 8001308:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	6822      	ldr	r2, [r4, #0]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4313      	orrs	r3, r2
 8001312:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001314:	f7ff fb74 	bl	8000a00 <HAL_GetTick>
 8001318:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	423b      	tst	r3, r7
 800131e:	d028      	beq.n	8001372 <HAL_RCC_OscConfig+0xb2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	6862      	ldr	r2, [r4, #4]
 8001322:	696b      	ldr	r3, [r5, #20]
 8001324:	4943      	ldr	r1, [pc, #268]	; (8001434 <HAL_RCC_OscConfig+0x174>)
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	400a      	ands	r2, r1
 800132a:	4313      	orrs	r3, r2
 800132c:	6063      	str	r3, [r4, #4]
 800132e:	e01b      	b.n	8001368 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	6861      	ldr	r1, [r4, #4]
 8001332:	696a      	ldr	r2, [r5, #20]
 8001334:	483f      	ldr	r0, [pc, #252]	; (8001434 <HAL_RCC_OscConfig+0x174>)
 8001336:	0212      	lsls	r2, r2, #8
 8001338:	4001      	ands	r1, r0
 800133a:	430a      	orrs	r2, r1
 800133c:	6062      	str	r2, [r4, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x9c>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <HAL_RCC_OscConfig+0x170>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001346:	493c      	ldr	r1, [pc, #240]	; (8001438 <HAL_RCC_OscConfig+0x178>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001348:	4013      	ands	r3, r2
 800134a:	692a      	ldr	r2, [r5, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	6023      	str	r3, [r4, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	4a3a      	ldr	r2, [pc, #232]	; (800143c <HAL_RCC_OscConfig+0x17c>)
 8001354:	049b      	lsls	r3, r3, #18
 8001356:	0f5b      	lsrs	r3, r3, #29
 8001358:	40da      	lsrs	r2, r3
 800135a:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800135c:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_RCC_OscConfig+0x180>)
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	f7ff fb06 	bl	8000970 <HAL_InitTick>
 8001364:	2800      	cmp	r0, #0
 8001366:	d1c1      	bne.n	80012ec <HAL_RCC_OscConfig+0x2c>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001368:	6a2a      	ldr	r2, [r5, #32]
 800136a:	2a00      	cmp	r2, #0
 800136c:	d11a      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe4>
  return HAL_OK;
 800136e:	2000      	movs	r0, #0
 8001370:	e7bd      	b.n	80012ee <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fb45 	bl	8000a00 <HAL_GetTick>
 8001376:	1b80      	subs	r0, r0, r6
 8001378:	2802      	cmp	r0, #2
 800137a:	d9ce      	bls.n	800131a <HAL_RCC_OscConfig+0x5a>
            return HAL_TIMEOUT;
 800137c:	2003      	movs	r0, #3
 800137e:	e7b6      	b.n	80012ee <HAL_RCC_OscConfig+0x2e>
        __HAL_RCC_HSI_DISABLE();
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_RCC_OscConfig+0x184>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001384:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8001386:	4013      	ands	r3, r2
 8001388:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800138a:	f7ff fb39 	bl	8000a00 <HAL_GetTick>
 800138e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001390:	00ff      	lsls	r7, r7, #3
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	423b      	tst	r3, r7
 8001396:	d0e7      	beq.n	8001368 <HAL_RCC_OscConfig+0xa8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fb32 	bl	8000a00 <HAL_GetTick>
 800139c:	1b80      	subs	r0, r0, r6
 800139e:	2802      	cmp	r0, #2
 80013a0:	d9f7      	bls.n	8001392 <HAL_RCC_OscConfig+0xd2>
 80013a2:	e7eb      	b.n	800137c <HAL_RCC_OscConfig+0xbc>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a4:	2038      	movs	r0, #56	; 0x38
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_RCC_OscConfig+0x16c>)
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	4001      	ands	r1, r0
 80013ac:	2910      	cmp	r1, #16
 80013ae:	d038      	beq.n	8001422 <HAL_RCC_OscConfig+0x162>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	4825      	ldr	r0, [pc, #148]	; (8001448 <HAL_RCC_OscConfig+0x188>)
 80013b4:	0489      	lsls	r1, r1, #18
 80013b6:	2a02      	cmp	r2, #2
 80013b8:	d126      	bne.n	8001408 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_PLL_DISABLE();
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4002      	ands	r2, r0
 80013be:	601a      	str	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	420a      	tst	r2, r1
 80013c4:	d1fc      	bne.n	80013c0 <HAL_RCC_OscConfig+0x100>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80013c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80013ca:	68d9      	ldr	r1, [r3, #12]
 80013cc:	4302      	orrs	r2, r0
 80013ce:	481f      	ldr	r0, [pc, #124]	; (800144c <HAL_RCC_OscConfig+0x18c>)
 80013d0:	4001      	ands	r1, r0
 80013d2:	430a      	orrs	r2, r1
 80013d4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80013d6:	430a      	orrs	r2, r1
 80013d8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80013da:	430a      	orrs	r2, r1
 80013dc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80013de:	430a      	orrs	r2, r1
 80013e0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80013e2:	0209      	lsls	r1, r1, #8
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLL_ENABLE();
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	6819      	ldr	r1, [r3, #0]
 80013ec:	0452      	lsls	r2, r2, #17
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	0552      	lsls	r2, r2, #21
 80013f8:	430a      	orrs	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0492      	lsls	r2, r2, #18
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	4211      	tst	r1, r2
 8001404:	d0fc      	beq.n	8001400 <HAL_RCC_OscConfig+0x140>
 8001406:	e7b2      	b.n	800136e <HAL_RCC_OscConfig+0xae>
        __HAL_RCC_PLL_DISABLE();
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4002      	ands	r2, r0
 800140c:	601a      	str	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	0010      	movs	r0, r2
 8001412:	4008      	ands	r0, r1
 8001414:	420a      	tst	r2, r1
 8001416:	d1fa      	bne.n	800140e <HAL_RCC_OscConfig+0x14e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	490d      	ldr	r1, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x190>)
 800141c:	400a      	ands	r2, r1
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	e765      	b.n	80012ee <HAL_RCC_OscConfig+0x2e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001422:	2a01      	cmp	r2, #1
 8001424:	d100      	bne.n	8001428 <HAL_RCC_OscConfig+0x168>
 8001426:	e761      	b.n	80012ec <HAL_RCC_OscConfig+0x2c>
        temp_pllckcfg = RCC->PLLCFGR;
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	e7a0      	b.n	800136e <HAL_RCC_OscConfig+0xae>
 800142c:	40021000 	.word	0x40021000
 8001430:	ffffc7ff 	.word	0xffffc7ff
 8001434:	ffff80ff 	.word	0xffff80ff
 8001438:	20000000 	.word	0x20000000
 800143c:	00f42400 	.word	0x00f42400
 8001440:	20000008 	.word	0x20000008
 8001444:	fffffeff 	.word	0xfffffeff
 8001448:	feffffff 	.word	0xfeffffff
 800144c:	11c1808c 	.word	0x11c1808c
 8001450:	eefefffc 	.word	0xeefefffc

08001454 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001454:	2338      	movs	r3, #56	; 0x38
{
 8001456:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001458:	4c1d      	ldr	r4, [pc, #116]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800145a:	68a2      	ldr	r2, [r4, #8]
 800145c:	421a      	tst	r2, r3
 800145e:	d105      	bne.n	800146c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001460:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001462:	481c      	ldr	r0, [pc, #112]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001464:	049b      	lsls	r3, r3, #18
 8001466:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001468:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800146a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146c:	68a2      	ldr	r2, [r4, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	2a08      	cmp	r2, #8
 8001472:	d027      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001474:	68a2      	ldr	r2, [r4, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	2a10      	cmp	r2, #16
 800147a:	d117      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800147c:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800147e:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001480:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001482:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001484:	0649      	lsls	r1, r1, #25
 8001486:	0f49      	lsrs	r1, r1, #29
 8001488:	326f      	adds	r2, #111	; 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800148a:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800148c:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800148e:	4015      	ands	r5, r2
    switch (pllsource)
 8001490:	079b      	lsls	r3, r3, #30
 8001492:	d109      	bne.n	80014a8 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001494:	4810      	ldr	r0, [pc, #64]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001496:	f7fe fe35 	bl	8000104 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800149a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800149c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800149e:	0f49      	lsrs	r1, r1, #29
 80014a0:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80014a2:	f7fe fe2f 	bl	8000104 <__udivsi3>
 80014a6:	e7e0      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x80>)
 80014aa:	e7f4      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014ac:	68a2      	ldr	r2, [r4, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	2a20      	cmp	r2, #32
 80014b2:	d009      	beq.n	80014c8 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b4:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 80014b6:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b18      	cmp	r3, #24
 80014bc:	d1d5      	bne.n	800146a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 80014be:	20fa      	movs	r0, #250	; 0xfa
 80014c0:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80014c2:	e7d2      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x84>)
 80014c6:	e7d0      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80014c8:	2080      	movs	r0, #128	; 0x80
 80014ca:	0200      	lsls	r0, r0, #8
 80014cc:	e7cd      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x16>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	40021000 	.word	0x40021000
 80014d4:	00f42400 	.word	0x00f42400
 80014d8:	007a1200 	.word	0x007a1200

080014dc <HAL_RCC_ClockConfig>:
{
 80014dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014de:	0004      	movs	r4, r0
 80014e0:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
}
 80014e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014ea:	2707      	movs	r7, #7
 80014ec:	4e4a      	ldr	r6, [pc, #296]	; (8001618 <HAL_RCC_ClockConfig+0x13c>)
 80014ee:	6833      	ldr	r3, [r6, #0]
 80014f0:	403b      	ands	r3, r7
 80014f2:	428b      	cmp	r3, r1
 80014f4:	d32a      	bcc.n	800154c <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f6:	6822      	ldr	r2, [r4, #0]
 80014f8:	0793      	lsls	r3, r2, #30
 80014fa:	d43b      	bmi.n	8001574 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fc:	07d2      	lsls	r2, r2, #31
 80014fe:	d448      	bmi.n	8001592 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001500:	2707      	movs	r7, #7
 8001502:	6833      	ldr	r3, [r6, #0]
 8001504:	403b      	ands	r3, r7
 8001506:	42ab      	cmp	r3, r5
 8001508:	d90a      	bls.n	8001520 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	6833      	ldr	r3, [r6, #0]
 800150c:	43bb      	bics	r3, r7
 800150e:	432b      	orrs	r3, r5
 8001510:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001512:	f7ff fa75 	bl	8000a00 <HAL_GetTick>
 8001516:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001518:	6833      	ldr	r3, [r6, #0]
 800151a:	403b      	ands	r3, r7
 800151c:	42ab      	cmp	r3, r5
 800151e:	d16b      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	4d3e      	ldr	r5, [pc, #248]	; (800161c <HAL_RCC_ClockConfig+0x140>)
 8001524:	075b      	lsls	r3, r3, #29
 8001526:	d46f      	bmi.n	8001608 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001528:	f7ff ff94 	bl	8001454 <HAL_RCC_GetSysClockFreq>
 800152c:	68ab      	ldr	r3, [r5, #8]
 800152e:	493c      	ldr	r1, [pc, #240]	; (8001620 <HAL_RCC_ClockConfig+0x144>)
 8001530:	051b      	lsls	r3, r3, #20
 8001532:	0f1b      	lsrs	r3, r3, #28
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	585b      	ldr	r3, [r3, r1]
 8001538:	211f      	movs	r1, #31
 800153a:	400b      	ands	r3, r1
 800153c:	40d8      	lsrs	r0, r3
 800153e:	4a39      	ldr	r2, [pc, #228]	; (8001624 <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001542:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	f7ff fa13 	bl	8000970 <HAL_InitTick>
 800154a:	e7cd      	b.n	80014e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154c:	6833      	ldr	r3, [r6, #0]
 800154e:	43bb      	bics	r3, r7
 8001550:	430b      	orrs	r3, r1
 8001552:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001554:	f7ff fa54 	bl	8000a00 <HAL_GetTick>
 8001558:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800155a:	6833      	ldr	r3, [r6, #0]
 800155c:	403b      	ands	r3, r7
 800155e:	42ab      	cmp	r3, r5
 8001560:	d0c9      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001562:	f7ff fa4d 	bl	8000a00 <HAL_GetTick>
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	1ac0      	subs	r0, r0, r3
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_ClockConfig+0x150>)
 800156c:	4298      	cmp	r0, r3
 800156e:	d9f4      	bls.n	800155a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001570:	2003      	movs	r0, #3
 8001572:	e7b9      	b.n	80014e8 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	4929      	ldr	r1, [pc, #164]	; (800161c <HAL_RCC_ClockConfig+0x140>)
 8001576:	0753      	lsls	r3, r2, #29
 8001578:	d504      	bpl.n	8001584 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800157a:	23e0      	movs	r3, #224	; 0xe0
 800157c:	6888      	ldr	r0, [r1, #8]
 800157e:	01db      	lsls	r3, r3, #7
 8001580:	4303      	orrs	r3, r0
 8001582:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	688b      	ldr	r3, [r1, #8]
 8001586:	482a      	ldr	r0, [pc, #168]	; (8001630 <HAL_RCC_ClockConfig+0x154>)
 8001588:	4003      	ands	r3, r0
 800158a:	68a0      	ldr	r0, [r4, #8]
 800158c:	4303      	orrs	r3, r0
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e7b4      	b.n	80014fc <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	6862      	ldr	r2, [r4, #4]
 8001594:	4f21      	ldr	r7, [pc, #132]	; (800161c <HAL_RCC_ClockConfig+0x140>)
 8001596:	2a01      	cmp	r2, #1
 8001598:	d119      	bne.n	80015ce <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	039b      	lsls	r3, r3, #14
 800159e:	d5a2      	bpl.n	80014e6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015a0:	2107      	movs	r1, #7
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	438b      	bics	r3, r1
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 80015aa:	f7ff fa29 	bl	8000a00 <HAL_GetTick>
 80015ae:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b0:	2338      	movs	r3, #56	; 0x38
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	401a      	ands	r2, r3
 80015b6:	6863      	ldr	r3, [r4, #4]
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d0a0      	beq.n	8001500 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015be:	f7ff fa1f 	bl	8000a00 <HAL_GetTick>
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	1ac0      	subs	r0, r0, r3
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_ClockConfig+0x150>)
 80015c8:	4298      	cmp	r0, r3
 80015ca:	d9f1      	bls.n	80015b0 <HAL_RCC_ClockConfig+0xd4>
 80015cc:	e7d0      	b.n	8001570 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ce:	2a02      	cmp	r2, #2
 80015d0:	d103      	bne.n	80015da <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	d4e3      	bmi.n	80015a0 <HAL_RCC_ClockConfig+0xc4>
 80015d8:	e785      	b.n	80014e6 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d103      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	055b      	lsls	r3, r3, #21
 80015e2:	d4dd      	bmi.n	80015a0 <HAL_RCC_ClockConfig+0xc4>
 80015e4:	e77f      	b.n	80014e6 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80015e6:	2302      	movs	r3, #2
 80015e8:	2a03      	cmp	r2, #3
 80015ea:	d103      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ee:	4219      	tst	r1, r3
 80015f0:	d1d6      	bne.n	80015a0 <HAL_RCC_ClockConfig+0xc4>
 80015f2:	e778      	b.n	80014e6 <HAL_RCC_ClockConfig+0xa>
 80015f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80015f6:	e7fa      	b.n	80015ee <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fa02 	bl	8000a00 <HAL_GetTick>
 80015fc:	9b01      	ldr	r3, [sp, #4]
 80015fe:	1ac0      	subs	r0, r0, r3
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x150>)
 8001602:	4298      	cmp	r0, r3
 8001604:	d988      	bls.n	8001518 <HAL_RCC_ClockConfig+0x3c>
 8001606:	e7b3      	b.n	8001570 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001608:	68ab      	ldr	r3, [r5, #8]
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x158>)
 800160c:	4013      	ands	r3, r2
 800160e:	68e2      	ldr	r2, [r4, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	60ab      	str	r3, [r5, #8]
 8001614:	e788      	b.n	8001528 <HAL_RCC_ClockConfig+0x4c>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40022000 	.word	0x40022000
 800161c:	40021000 	.word	0x40021000
 8001620:	080028ec 	.word	0x080028ec
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	00001388 	.word	0x00001388
 8001630:	fffff0ff 	.word	0xfffff0ff
 8001634:	ffff8fff 	.word	0xffff8fff

08001638 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800163a:	4907      	ldr	r1, [pc, #28]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001640:	045b      	lsls	r3, r3, #17
 8001642:	0f5b      	lsrs	r3, r3, #29
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	585b      	ldr	r3, [r3, r1]
 8001648:	211f      	movs	r1, #31
 800164a:	6810      	ldr	r0, [r2, #0]
 800164c:	400b      	ands	r3, r1
 800164e:	40d8      	lsrs	r0, r3
}
 8001650:	4770      	bx	lr
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40021000 	.word	0x40021000
 8001658:	0800292c 	.word	0x0800292c
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_RCCEx_PeriphCLKConfig>:
//  }
//#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001660:	6802      	ldr	r2, [r0, #0]
{
 8001662:	b510      	push	{r4, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001664:	0753      	lsls	r3, r2, #29
 8001666:	d506      	bpl.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001668:	2430      	movs	r4, #48	; 0x30
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x40>)
 800166c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800166e:	43a3      	bics	r3, r4
 8001670:	68c4      	ldr	r4, [r0, #12]
 8001672:	4323      	orrs	r3, r4
 8001674:	654b      	str	r3, [r1, #84]	; 0x54
//  }
//#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001676:	0192      	lsls	r2, r2, #6
 8001678:	d50f      	bpl.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCCEx_PeriphCLKConfig+0x40>)
 800167c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800167e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001680:	4808      	ldr	r0, [pc, #32]	; (80016a4 <HAL_RCCEx_PeriphCLKConfig+0x44>)
 8001682:	4003      	ands	r3, r0
 8001684:	430b      	orrs	r3, r1
 8001686:	6593      	str	r3, [r2, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4299      	cmp	r1, r3
 800168e:	d104      	bne.n	800169a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	68d1      	ldr	r1, [r2, #12]
 8001694:	045b      	lsls	r3, r3, #17
 8001696:	430b      	orrs	r3, r1
 8001698:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800169a:	2000      	movs	r0, #0
 800169c:	bd10      	pop	{r4, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	40021000 	.word	0x40021000
 80016a4:	fffffcff 	.word	0xfffffcff

080016a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80016a8:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016aa:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ae:	2201      	movs	r2, #1
 80016b0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80016b4:	6801      	ldr	r1, [r0, #0]
 80016b6:	4d13      	ldr	r5, [pc, #76]	; (8001704 <UART_EndRxTransfer+0x5c>)
 80016b8:	680b      	ldr	r3, [r1, #0]
 80016ba:	402b      	ands	r3, r5
 80016bc:	600b      	str	r3, [r1, #0]
 80016be:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016c2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016c6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80016ca:	6802      	ldr	r2, [r0, #0]
 80016cc:	4c0e      	ldr	r4, [pc, #56]	; (8001708 <UART_EndRxTransfer+0x60>)
 80016ce:	6893      	ldr	r3, [r2, #8]
 80016d0:	4023      	ands	r3, r4
 80016d2:	6093      	str	r3, [r2, #8]
 80016d4:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016d8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10a      	bne.n	80016f4 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016e2:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016e6:	2410      	movs	r4, #16
 80016e8:	6802      	ldr	r2, [r0, #0]
 80016ea:	6813      	ldr	r3, [r2, #0]
 80016ec:	43a3      	bics	r3, r4
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80016f4:	0003      	movs	r3, r0
 80016f6:	2220      	movs	r2, #32
 80016f8:	338c      	adds	r3, #140	; 0x8c
 80016fa:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016fc:	2300      	movs	r3, #0
 80016fe:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001700:	6743      	str	r3, [r0, #116]	; 0x74
}
 8001702:	bd30      	pop	{r4, r5, pc}
 8001704:	fffffedf 	.word	0xfffffedf
 8001708:	effffffe 	.word	0xeffffffe

0800170c <UART_SetConfig>:
{
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8001710:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001712:	6882      	ldr	r2, [r0, #8]
 8001714:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001716:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001718:	4302      	orrs	r2, r0
 800171a:	6960      	ldr	r0, [r4, #20]
 800171c:	4302      	orrs	r2, r0
 800171e:	69e0      	ldr	r0, [r4, #28]
 8001720:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001722:	481f      	ldr	r0, [pc, #124]	; (80017a0 <UART_SetConfig+0x94>)
 8001724:	4001      	ands	r1, r0
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	491d      	ldr	r1, [pc, #116]	; (80017a4 <UART_SetConfig+0x98>)
 800172e:	400a      	ands	r2, r1
 8001730:	68e1      	ldr	r1, [r4, #12]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001736:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <UART_SetConfig+0x9c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001738:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800173a:	4293      	cmp	r3, r2
 800173c:	d004      	beq.n	8001748 <UART_SetConfig+0x3c>
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <UART_SetConfig+0xa0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d001      	beq.n	8001748 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8001744:	6a22      	ldr	r2, [r4, #32]
 8001746:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	4819      	ldr	r0, [pc, #100]	; (80017b0 <UART_SetConfig+0xa4>)
 800174c:	4002      	ands	r2, r0
 800174e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001750:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001752:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	438a      	bics	r2, r1
 8001758:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800175a:	430a      	orrs	r2, r1
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
        pclk = HAL_RCC_GetPCLK1Freq();
 800175e:	f7ff ff6b 	bl	8001638 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001762:	2200      	movs	r2, #0
    if (pclk != 0U)
 8001764:	4290      	cmp	r0, r2
 8001766:	d014      	beq.n	8001792 <UART_SetConfig+0x86>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001768:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <UART_SetConfig+0xa8>)
 800176c:	0052      	lsls	r2, r2, #1
 800176e:	5ad1      	ldrh	r1, [r2, r3]
 8001770:	f7fe fcc8 	bl	8000104 <__udivsi3>
 8001774:	6865      	ldr	r5, [r4, #4]
 8001776:	086b      	lsrs	r3, r5, #1
 8001778:	0029      	movs	r1, r5
 800177a:	18c0      	adds	r0, r0, r3
 800177c:	f7fe fcc2 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001780:	490d      	ldr	r1, [pc, #52]	; (80017b8 <UART_SetConfig+0xac>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001782:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001784:	3810      	subs	r0, #16
        ret = HAL_ERROR;
 8001786:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001788:	4288      	cmp	r0, r1
 800178a:	d802      	bhi.n	8001792 <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800178c:	6822      	ldr	r2, [r4, #0]
 800178e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001790:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <UART_SetConfig+0xb0>)
}
 8001794:	0010      	movs	r0, r2
  huart->NbRxDataToProcess = 1;
 8001796:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8001798:	2300      	movs	r3, #0
 800179a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800179c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800179e:	bd70      	pop	{r4, r5, r6, pc}
 80017a0:	cfff69f3 	.word	0xcfff69f3
 80017a4:	ffffcfff 	.word	0xffffcfff
 80017a8:	40008000 	.word	0x40008000
 80017ac:	40008400 	.word	0x40008400
 80017b0:	11fff4ff 	.word	0x11fff4ff
 80017b4:	0800295c 	.word	0x0800295c
 80017b8:	0000ffef 	.word	0x0000ffef
 80017bc:	00010001 	.word	0x00010001

080017c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80017c2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017c4:	071a      	lsls	r2, r3, #28
 80017c6:	d506      	bpl.n	80017d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017c8:	6801      	ldr	r1, [r0, #0]
 80017ca:	4c28      	ldr	r4, [pc, #160]	; (800186c <UART_AdvFeatureConfig+0xac>)
 80017cc:	684a      	ldr	r2, [r1, #4]
 80017ce:	4022      	ands	r2, r4
 80017d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80017d2:	4322      	orrs	r2, r4
 80017d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017d6:	07da      	lsls	r2, r3, #31
 80017d8:	d506      	bpl.n	80017e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017da:	6801      	ldr	r1, [r0, #0]
 80017dc:	4c24      	ldr	r4, [pc, #144]	; (8001870 <UART_AdvFeatureConfig+0xb0>)
 80017de:	684a      	ldr	r2, [r1, #4]
 80017e0:	4022      	ands	r2, r4
 80017e2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80017e4:	4322      	orrs	r2, r4
 80017e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017e8:	079a      	lsls	r2, r3, #30
 80017ea:	d506      	bpl.n	80017fa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017ec:	6801      	ldr	r1, [r0, #0]
 80017ee:	4c21      	ldr	r4, [pc, #132]	; (8001874 <UART_AdvFeatureConfig+0xb4>)
 80017f0:	684a      	ldr	r2, [r1, #4]
 80017f2:	4022      	ands	r2, r4
 80017f4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80017f6:	4322      	orrs	r2, r4
 80017f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017fa:	075a      	lsls	r2, r3, #29
 80017fc:	d506      	bpl.n	800180c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017fe:	6801      	ldr	r1, [r0, #0]
 8001800:	4c1d      	ldr	r4, [pc, #116]	; (8001878 <UART_AdvFeatureConfig+0xb8>)
 8001802:	684a      	ldr	r2, [r1, #4]
 8001804:	4022      	ands	r2, r4
 8001806:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001808:	4322      	orrs	r2, r4
 800180a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800180c:	06da      	lsls	r2, r3, #27
 800180e:	d506      	bpl.n	800181e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001810:	6801      	ldr	r1, [r0, #0]
 8001812:	4c1a      	ldr	r4, [pc, #104]	; (800187c <UART_AdvFeatureConfig+0xbc>)
 8001814:	688a      	ldr	r2, [r1, #8]
 8001816:	4022      	ands	r2, r4
 8001818:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800181a:	4322      	orrs	r2, r4
 800181c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800181e:	069a      	lsls	r2, r3, #26
 8001820:	d506      	bpl.n	8001830 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001822:	6801      	ldr	r1, [r0, #0]
 8001824:	4c16      	ldr	r4, [pc, #88]	; (8001880 <UART_AdvFeatureConfig+0xc0>)
 8001826:	688a      	ldr	r2, [r1, #8]
 8001828:	4022      	ands	r2, r4
 800182a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800182c:	4322      	orrs	r2, r4
 800182e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001830:	065a      	lsls	r2, r3, #25
 8001832:	d510      	bpl.n	8001856 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001834:	6801      	ldr	r1, [r0, #0]
 8001836:	4d13      	ldr	r5, [pc, #76]	; (8001884 <UART_AdvFeatureConfig+0xc4>)
 8001838:	684a      	ldr	r2, [r1, #4]
 800183a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800183c:	402a      	ands	r2, r5
 800183e:	4322      	orrs	r2, r4
 8001840:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0352      	lsls	r2, r2, #13
 8001846:	4294      	cmp	r4, r2
 8001848:	d105      	bne.n	8001856 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800184a:	684a      	ldr	r2, [r1, #4]
 800184c:	4c0e      	ldr	r4, [pc, #56]	; (8001888 <UART_AdvFeatureConfig+0xc8>)
 800184e:	4022      	ands	r2, r4
 8001850:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001852:	4322      	orrs	r2, r4
 8001854:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001856:	061b      	lsls	r3, r3, #24
 8001858:	d506      	bpl.n	8001868 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800185a:	6802      	ldr	r2, [r0, #0]
 800185c:	490b      	ldr	r1, [pc, #44]	; (800188c <UART_AdvFeatureConfig+0xcc>)
 800185e:	6853      	ldr	r3, [r2, #4]
 8001860:	400b      	ands	r3, r1
 8001862:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001864:	430b      	orrs	r3, r1
 8001866:	6053      	str	r3, [r2, #4]
}
 8001868:	bd30      	pop	{r4, r5, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	ffff7fff 	.word	0xffff7fff
 8001870:	fffdffff 	.word	0xfffdffff
 8001874:	fffeffff 	.word	0xfffeffff
 8001878:	fffbffff 	.word	0xfffbffff
 800187c:	ffffefff 	.word	0xffffefff
 8001880:	ffffdfff 	.word	0xffffdfff
 8001884:	ffefffff 	.word	0xffefffff
 8001888:	ff9fffff 	.word	0xff9fffff
 800188c:	fff7ffff 	.word	0xfff7ffff

08001890 <UART_WaitOnFlagUntilTimeout>:
{
 8001890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001892:	0004      	movs	r4, r0
 8001894:	000d      	movs	r5, r1
 8001896:	0017      	movs	r7, r2
 8001898:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	69d3      	ldr	r3, [r2, #28]
 800189e:	402b      	ands	r3, r5
 80018a0:	1b5b      	subs	r3, r3, r5
 80018a2:	4259      	negs	r1, r3
 80018a4:	414b      	adcs	r3, r1
 80018a6:	42bb      	cmp	r3, r7
 80018a8:	d001      	beq.n	80018ae <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80018aa:	2000      	movs	r0, #0
 80018ac:	e027      	b.n	80018fe <UART_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80018ae:	9b08      	ldr	r3, [sp, #32]
 80018b0:	3301      	adds	r3, #1
 80018b2:	d0f3      	beq.n	800189c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b4:	f7ff f8a4 	bl	8000a00 <HAL_GetTick>
 80018b8:	9b00      	ldr	r3, [sp, #0]
 80018ba:	1ac0      	subs	r0, r0, r3
 80018bc:	9b08      	ldr	r3, [sp, #32]
 80018be:	4298      	cmp	r0, r3
 80018c0:	d82e      	bhi.n	8001920 <UART_WaitOnFlagUntilTimeout+0x90>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d02c      	beq.n	8001920 <UART_WaitOnFlagUntilTimeout+0x90>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80018c6:	2104      	movs	r1, #4
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	420a      	tst	r2, r1
 80018ce:	d0e4      	beq.n	800189a <UART_WaitOnFlagUntilTimeout+0xa>
 80018d0:	002a      	movs	r2, r5
 80018d2:	313c      	adds	r1, #60	; 0x3c
 80018d4:	3a40      	subs	r2, #64	; 0x40
 80018d6:	438a      	bics	r2, r1
 80018d8:	d0df      	beq.n	800189a <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	2608      	movs	r6, #8
 80018de:	0011      	movs	r1, r2
 80018e0:	4031      	ands	r1, r6
 80018e2:	9101      	str	r1, [sp, #4]
 80018e4:	4232      	tst	r2, r6
 80018e6:	d00b      	beq.n	8001900 <UART_WaitOnFlagUntilTimeout+0x70>
          UART_EndRxTransfer(huart);
 80018e8:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80018ea:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80018ec:	f7ff fedc 	bl	80016a8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80018f0:	0023      	movs	r3, r4
 80018f2:	3390      	adds	r3, #144	; 0x90
 80018f4:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 80018f6:	2300      	movs	r3, #0
          return HAL_ERROR;
 80018f8:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 80018fa:	3484      	adds	r4, #132	; 0x84
 80018fc:	7023      	strb	r3, [r4, #0]
}
 80018fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	69d9      	ldr	r1, [r3, #28]
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	4211      	tst	r1, r2
 8001908:	d0c7      	beq.n	800189a <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800190a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800190c:	0020      	movs	r0, r4
 800190e:	f7ff fecb 	bl	80016a8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001912:	0023      	movs	r3, r4
 8001914:	2220      	movs	r2, #32
 8001916:	3390      	adds	r3, #144	; 0x90
 8001918:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 800191a:	9b01      	ldr	r3, [sp, #4]
 800191c:	3484      	adds	r4, #132	; 0x84
 800191e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001920:	2003      	movs	r0, #3
 8001922:	e7ec      	b.n	80018fe <UART_WaitOnFlagUntilTimeout+0x6e>

08001924 <HAL_UART_Transmit>:
{
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	0016      	movs	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001928:	0002      	movs	r2, r0
{
 800192a:	b085      	sub	sp, #20
  if (huart->gState == HAL_UART_STATE_READY)
 800192c:	3288      	adds	r2, #136	; 0x88
{
 800192e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8001930:	6813      	ldr	r3, [r2, #0]
{
 8001932:	0004      	movs	r4, r0
 8001934:	000d      	movs	r5, r1
    return HAL_BUSY;
 8001936:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001938:	2b20      	cmp	r3, #32
 800193a:	d13a      	bne.n	80019b2 <HAL_UART_Transmit+0x8e>
      return  HAL_ERROR;
 800193c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800193e:	2900      	cmp	r1, #0
 8001940:	d037      	beq.n	80019b2 <HAL_UART_Transmit+0x8e>
 8001942:	2e00      	cmp	r6, #0
 8001944:	d035      	beq.n	80019b2 <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	68a1      	ldr	r1, [r4, #8]
 800194a:	015b      	lsls	r3, r3, #5
 800194c:	4299      	cmp	r1, r3
 800194e:	d104      	bne.n	800195a <HAL_UART_Transmit+0x36>
 8001950:	6923      	ldr	r3, [r4, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001956:	4205      	tst	r5, r0
 8001958:	d12b      	bne.n	80019b2 <HAL_UART_Transmit+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195a:	0023      	movs	r3, r4
 800195c:	2100      	movs	r1, #0
 800195e:	3390      	adds	r3, #144	; 0x90
 8001960:	6019      	str	r1, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001962:	2321      	movs	r3, #33	; 0x21
 8001964:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001966:	f7ff f84b 	bl	8000a00 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800196a:	0023      	movs	r3, r4
 800196c:	3354      	adds	r3, #84	; 0x54
 800196e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001970:	3302      	adds	r3, #2
 8001972:	801e      	strh	r6, [r3, #0]
 8001974:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800197a:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800197c:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800197e:	015b      	lsls	r3, r3, #5
 8001980:	429a      	cmp	r2, r3
 8001982:	d104      	bne.n	800198e <HAL_UART_Transmit+0x6a>
 8001984:	6923      	ldr	r3, [r4, #16]
 8001986:	42b3      	cmp	r3, r6
 8001988:	d101      	bne.n	800198e <HAL_UART_Transmit+0x6a>
 800198a:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800198c:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800198e:	0023      	movs	r3, r4
 8001990:	3356      	adds	r3, #86	; 0x56
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800199a:	9b03      	ldr	r3, [sp, #12]
 800199c:	0020      	movs	r0, r4
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	003b      	movs	r3, r7
 80019a4:	f7ff ff74 	bl	8001890 <UART_WaitOnFlagUntilTimeout>
 80019a8:	2320      	movs	r3, #32
 80019aa:	3488      	adds	r4, #136	; 0x88
      huart->gState = HAL_UART_STATE_READY;
 80019ac:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d10e      	bne.n	80019d0 <HAL_UART_Transmit+0xac>
}
 80019b2:	b005      	add	sp, #20
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019b6:	9b03      	ldr	r3, [sp, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	003b      	movs	r3, r7
 80019c0:	0020      	movs	r0, r4
 80019c2:	f7ff ff65 	bl	8001890 <UART_WaitOnFlagUntilTimeout>
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_UART_Transmit+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 80019ca:	2320      	movs	r3, #32
 80019cc:	3488      	adds	r4, #136	; 0x88
 80019ce:	6023      	str	r3, [r4, #0]
      return HAL_TIMEOUT;
 80019d0:	2003      	movs	r0, #3
 80019d2:	e7ee      	b.n	80019b2 <HAL_UART_Transmit+0x8e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019d4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80019d6:	2d00      	cmp	r5, #0
 80019d8:	d10b      	bne.n	80019f2 <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019da:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80019dc:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	0ddb      	lsrs	r3, r3, #23
 80019e2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80019e4:	9b02      	ldr	r3, [sp, #8]
 80019e6:	9a02      	ldr	r2, [sp, #8]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	8013      	strh	r3, [r2, #0]
 80019f0:	e7cd      	b.n	800198e <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80019f2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80019f4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80019f6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80019f8:	e7f4      	b.n	80019e4 <HAL_UART_Transmit+0xc0>
	...

080019fc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019fc:	0003      	movs	r3, r0
{
 80019fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a00:	2600      	movs	r6, #0
{
 8001a02:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a04:	3390      	adds	r3, #144	; 0x90
 8001a06:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8001a08:	f7fe fffa 	bl	8000a00 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a0c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001a0e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	071b      	lsls	r3, r3, #28
 8001a14:	d51f      	bpl.n	8001a56 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <UART_CheckIdleState+0xc0>)
 8001a1a:	0032      	movs	r2, r6
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	0389      	lsls	r1, r1, #14
 8001a20:	0003      	movs	r3, r0
 8001a22:	0020      	movs	r0, r4
 8001a24:	f7ff ff34 	bl	8001890 <UART_WaitOnFlagUntilTimeout>
 8001a28:	42b0      	cmp	r0, r6
 8001a2a:	d014      	beq.n	8001a56 <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a30:	2301      	movs	r3, #1
 8001a32:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001a36:	2080      	movs	r0, #128	; 0x80
 8001a38:	6822      	ldr	r2, [r4, #0]
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	4383      	bics	r3, r0
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001a44:	0023      	movs	r3, r4
 8001a46:	2220      	movs	r2, #32
 8001a48:	3388      	adds	r3, #136	; 0x88
 8001a4a:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8001a4c:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	3484      	adds	r4, #132	; 0x84
 8001a52:	7023      	strb	r3, [r4, #0]
}
 8001a54:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a56:	0026      	movs	r6, r4
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	368c      	adds	r6, #140	; 0x8c
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	075b      	lsls	r3, r3, #29
 8001a60:	d523      	bpl.n	8001aaa <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <UART_CheckIdleState+0xc0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	002b      	movs	r3, r5
 8001a6e:	03c9      	lsls	r1, r1, #15
 8001a70:	f7ff ff0e 	bl	8001890 <UART_WaitOnFlagUntilTimeout>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d018      	beq.n	8001aaa <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a78:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001a82:	6821      	ldr	r1, [r4, #0]
 8001a84:	4d0e      	ldr	r5, [pc, #56]	; (8001ac0 <UART_CheckIdleState+0xc4>)
 8001a86:	680b      	ldr	r3, [r1, #0]
 8001a88:	402b      	ands	r3, r5
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a90:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a94:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a98:	6821      	ldr	r1, [r4, #0]
 8001a9a:	688b      	ldr	r3, [r1, #8]
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
 8001aa0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	6033      	str	r3, [r6, #0]
 8001aa8:	e7d0      	b.n	8001a4c <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001aaa:	0023      	movs	r3, r4
 8001aac:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001aae:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ab0:	3388      	adds	r3, #136	; 0x88
 8001ab2:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001ab4:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ab6:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ab8:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8001aba:	e7c8      	b.n	8001a4e <UART_CheckIdleState+0x52>
 8001abc:	01ffffff 	.word	0x01ffffff
 8001ac0:	fffffedf 	.word	0xfffffedf

08001ac4 <HAL_UART_Init>:
{
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
}
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ace:	0005      	movs	r5, r0
 8001ad0:	3588      	adds	r5, #136	; 0x88
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d104      	bne.n	8001ae2 <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8001ad8:	0002      	movs	r2, r0
 8001ada:	3284      	adds	r2, #132	; 0x84
 8001adc:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001ade:	f7fe fedb 	bl	8000898 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ae2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ae8:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001aea:	6813      	ldr	r3, [r2, #0]
 8001aec:	438b      	bics	r3, r1
 8001aee:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001af0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8001af6:	0020      	movs	r0, r4
 8001af8:	f7ff fe62 	bl	80017c0 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001afc:	0020      	movs	r0, r4
 8001afe:	f7ff fe05 	bl	800170c <UART_SetConfig>
 8001b02:	2801      	cmp	r0, #1
 8001b04:	d0e1      	beq.n	8001aca <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <HAL_UART_Init+0x64>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001b0c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b0e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b10:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	438a      	bics	r2, r1
 8001b18:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001b22:	f7ff ff6b 	bl	80019fc <UART_CheckIdleState>
 8001b26:	e7d1      	b.n	8001acc <HAL_UART_Init+0x8>
 8001b28:	ffffb7ff 	.word	0xffffb7ff

08001b2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8001b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b2e:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8001b30:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8001b32:	0004      	movs	r4, r0
 8001b34:	376a      	adds	r7, #106	; 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d104      	bne.n	8001b44 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8001b3e:	3468      	adds	r4, #104	; 0x68
 8001b40:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8001b42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001b44:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001b46:	4e0b      	ldr	r6, [pc, #44]	; (8001b74 <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001b48:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8001b4a:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8001b4c:	4d0a      	ldr	r5, [pc, #40]	; (8001b78 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8001b4e:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001b50:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8001b52:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001b54:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001b56:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001b58:	f7fe fb5e 	bl	8000218 <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001b5c:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001b5e:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001b60:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001b62:	0f5b      	lsrs	r3, r3, #29
 8001b64:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8001b66:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001b68:	00c0      	lsls	r0, r0, #3
 8001b6a:	f7fe fb55 	bl	8000218 <__divsi3>
 8001b6e:	b280      	uxth	r0, r0
}
 8001b70:	e7e5      	b.n	8001b3e <UARTEx_SetNbDataToProcess+0x12>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	0800297c 	.word	0x0800297c
 8001b78:	08002974 	.word	0x08002974

08001b7c <HAL_UARTEx_DisableFifoMode>:
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8001b7e:	0004      	movs	r4, r0
 8001b80:	3484      	adds	r4, #132	; 0x84
 8001b82:	7822      	ldrb	r2, [r4, #0]
{
 8001b84:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8001b86:	2002      	movs	r0, #2
 8001b88:	2a01      	cmp	r2, #1
 8001b8a:	d011      	beq.n	8001bb0 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b8c:	001d      	movs	r5, r3
 8001b8e:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b90:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	3588      	adds	r5, #136	; 0x88
 8001b94:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8001b9a:	6810      	ldr	r0, [r2, #0]
 8001b9c:	43b0      	bics	r0, r6
 8001b9e:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <HAL_UARTEx_DisableFifoMode+0x38>)
 8001ba2:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8001ba8:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001baa:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001bac:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8001bae:	7020      	strb	r0, [r4, #0]
}
 8001bb0:	bd70      	pop	{r4, r5, r6, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	dfffffff 	.word	0xdfffffff

08001bb8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8001bba:	0005      	movs	r5, r0
 8001bbc:	3584      	adds	r5, #132	; 0x84
{
 8001bbe:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8001bc0:	7829      	ldrb	r1, [r5, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	2901      	cmp	r1, #1
 8001bc6:	d015      	beq.n	8001bf4 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bc8:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8001bca:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001bcc:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001bce:	3688      	adds	r6, #136	; 0x88
 8001bd0:	3222      	adds	r2, #34	; 0x22
 8001bd2:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001bd4:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8001bd6:	6822      	ldr	r2, [r4, #0]
 8001bd8:	438a      	bics	r2, r1
 8001bda:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8001bdc:	68a1      	ldr	r1, [r4, #8]
 8001bde:	00c9      	lsls	r1, r1, #3
 8001be0:	08c9      	lsrs	r1, r1, #3
 8001be2:	4319      	orrs	r1, r3
 8001be4:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8001be6:	f7ff ffa1 	bl	8001b2c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8001bea:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001bec:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001bee:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001bf0:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8001bf2:	702a      	strb	r2, [r5, #0]
}
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001bf8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8001bfa:	0005      	movs	r5, r0
 8001bfc:	3584      	adds	r5, #132	; 0x84
{
 8001bfe:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8001c00:	7829      	ldrb	r1, [r5, #0]
 8001c02:	2302      	movs	r3, #2
 8001c04:	2901      	cmp	r1, #1
 8001c06:	d015      	beq.n	8001c34 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c08:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8001c0a:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001c0c:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c0e:	3688      	adds	r6, #136	; 0x88
 8001c10:	3322      	adds	r3, #34	; 0x22
 8001c12:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001c14:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	438b      	bics	r3, r1
 8001c1a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8001c1c:	68a1      	ldr	r1, [r4, #8]
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8001c20:	4019      	ands	r1, r3
 8001c22:	4311      	orrs	r1, r2
 8001c24:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8001c26:	f7ff ff81 	bl	8001b2c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8001c2a:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001c2c:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001c2e:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8001c30:	2300      	movs	r3, #0
 8001c32:	702b      	strb	r3, [r5, #0]
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c38:	f1ffffff 	.word	0xf1ffffff

08001c3c <enterNormalMode>:
{
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
}

void enterNormalMode(void)									//正常模式
{
 8001c3c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_SET);		//CAN1_STB
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <enterNormalMode+0x1c>)
 8001c44:	f7ff fb0a 	bl	800125c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FDCAN1_EN_GPIO_Port, FDCAN1_EN_Pin, GPIO_PIN_SET);		//CAN1_EN
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	20a0      	movs	r0, #160	; 0xa0
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	0209      	lsls	r1, r1, #8
 8001c50:	05c0      	lsls	r0, r0, #23
 8001c52:	f7ff fb03 	bl	800125c <HAL_GPIO_WritePin>
}
 8001c56:	bd10      	pop	{r4, pc}
 8001c58:	50000800 	.word	0x50000800

08001c5c <FDCAN_Config>:
int validCount;
int head,tail;

void FDCAN_Config(void)
{
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4914      	ldr	r1, [pc, #80]	; (8001cb0 <FDCAN_Config+0x54>)
{
 8001c60:	b510      	push	{r4, lr}
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 8001c62:	600b      	str	r3, [r1, #0]
	hfdcan_filter.FilterIndex = 0;
 8001c64:	604b      	str	r3, [r1, #4]
	hfdcan_filter.FilterType = FDCAN_FILTER_MASK;
 8001c66:	3302      	adds	r3, #2
 8001c68:	608b      	str	r3, [r1, #8]
	hfdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	60cb      	str	r3, [r1, #12]
	hfdcan_filter.FilterID1 = 0x111;
 8001c6e:	2312      	movs	r3, #18
	hfdcan_filter.FilterID2 = 0x7FF;

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8001c70:	4c10      	ldr	r4, [pc, #64]	; (8001cb4 <FDCAN_Config+0x58>)
	hfdcan_filter.FilterID1 = 0x111;
 8001c72:	33ff      	adds	r3, #255	; 0xff
 8001c74:	610b      	str	r3, [r1, #16]
	hfdcan_filter.FilterID2 = 0x7FF;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <FDCAN_Config+0x5c>)
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8001c78:	0020      	movs	r0, r4
	hfdcan_filter.FilterID2 = 0x7FF;
 8001c7a:	614b      	str	r3, [r1, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8001c7c:	f7ff f808 	bl	8000c90 <HAL_FDCAN_ConfigFilter>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d001      	beq.n	8001c88 <FDCAN_Config+0x2c>
	{
		Error_Handler();
 8001c84:	f7fe fd5e 	bl	8000744 <Error_Handler>
	}

	/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, hfdcan1.Init.DataPrescaler * hfdcan1.Init.DataTimeSeg1, 0) != HAL_OK)
 8001c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	0020      	movs	r0, r4
 8001c90:	4359      	muls	r1, r3
 8001c92:	f7ff f826 	bl	8000ce2 <HAL_FDCAN_ConfigTxDelayCompensation>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d001      	beq.n	8001c9e <FDCAN_Config+0x42>
	{
		Error_Handler();
 8001c9a:	f7fe fd53 	bl	8000744 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 8001c9e:	0020      	movs	r0, r4
 8001ca0:	f7ff f830 	bl	8000d04 <HAL_FDCAN_EnableTxDelayCompensation>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d001      	beq.n	8001cac <FDCAN_Config+0x50>
	{
		Error_Handler();
 8001ca8:	f7fe fd4c 	bl	8000744 <Error_Handler>
	}
}
 8001cac:	bd10      	pop	{r4, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	200000e8 	.word	0x200000e8
 8001cb4:	20000084 	.word	0x20000084
 8001cb8:	000007ff 	.word	0x000007ff

08001cbc <FDCAN_Enable>:

void FDCAN_Enable(void)
{
 8001cbc:	b510      	push	{r4, lr}
	FDCAN_Config();
 8001cbe:	f7ff ffcd 	bl	8001c5c <FDCAN_Config>
	enterNormalMode();											//CAN收发器正常模�?????
 8001cc2:	f7ff ffbb 	bl	8001c3c <enterNormalMode>
	HAL_Delay(5);
 8001cc6:	2005      	movs	r0, #5
 8001cc8:	f7fe fea0 	bl	8000a0c <HAL_Delay>

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)		//使能FIFO0新消息中�?????
 8001ccc:	4c15      	ldr	r4, [pc, #84]	; (8001d24 <FDCAN_Enable+0x68>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	0020      	movs	r0, r4
 8001cd4:	f7ff f942 	bl	8000f5c <HAL_FDCAN_ActivateNotification>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d001      	beq.n	8001ce0 <FDCAN_Enable+0x24>
	{
		Error_Handler();
 8001cdc:	f7fe fd32 	bl	8000744 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)														//使能FDCAN
 8001ce0:	0020      	movs	r0, r4
 8001ce2:	f7ff f822 	bl	8000d2a <HAL_FDCAN_Start>
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d001      	beq.n	8001cee <FDCAN_Enable+0x32>
	{
		Error_Handler();
 8001cea:	f7fe fd2b 	bl	8000744 <Error_Handler>
	}

	TxHeader.Identifier = 0xFFF111;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8001cee:	210f      	movs	r1, #15
	TxHeader.Identifier = 0xFFF111;
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <FDCAN_Enable+0x6c>)
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <FDCAN_Enable+0x70>)
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8001cf4:	60d9      	str	r1, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001cf6:	2180      	movs	r1, #128	; 0x80
	TxHeader.Identifier = 0xFFF111;
 8001cf8:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001cfa:	2280      	movs	r2, #128	; 0x80
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001cfc:	0349      	lsls	r1, r1, #13
 8001cfe:	6159      	str	r1, [r3, #20]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001d00:	05d2      	lsls	r2, r2, #23
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001d02:	2180      	movs	r1, #128	; 0x80
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001d04:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001d06:	2200      	movs	r2, #0
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001d08:	0389      	lsls	r1, r1, #14
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001d0a:	609a      	str	r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001d0c:	611a      	str	r2, [r3, #16]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001d0e:	6199      	str	r1, [r3, #24]
	TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 8001d10:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker       = 0;
 8001d12:	621a      	str	r2, [r3, #32]

	head = tail = 0;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <FDCAN_Enable+0x74>)
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <FDCAN_Enable+0x78>)
 8001d1a:	601a      	str	r2, [r3, #0]
	validCount = 0;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <FDCAN_Enable+0x7c>)
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	20000084 	.word	0x20000084
 8001d28:	2000019c 	.word	0x2000019c
 8001d2c:	00fff111 	.word	0x00fff111
 8001d30:	2000022c 	.word	0x2000022c
 8001d34:	200001c0 	.word	0x200001c0
 8001d38:	20000230 	.word	0x20000230

08001d3c <FDCAN_SendBytes>:
	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
}

void FDCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8001d3c:	b570      	push	{r4, r5, r6, lr}
 8001d3e:	0005      	movs	r5, r0
	TxHeader.DataLength = BufferSize;
 8001d40:	4e0b      	ldr	r6, [pc, #44]	; (8001d70 <FDCAN_SendBytes+0x34>)
 8001d42:	60f1      	str	r1, [r6, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <FDCAN_SendBytes+0x38>)
 8001d46:	0020      	movs	r0, r4
 8001d48:	f7ff f902 	bl	8000f50 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d0f9      	beq.n	8001d44 <FDCAN_SendBytes+0x8>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Buffer);
 8001d50:	0031      	movs	r1, r6
 8001d52:	002a      	movs	r2, r5
 8001d54:	0020      	movs	r0, r4
 8001d56:	f7fe ffff 	bl	8000d58 <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE);
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	0089      	lsls	r1, r1, #2
 8001d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d62:	420a      	tst	r2, r1
 8001d64:	d0fc      	beq.n	8001d60 <FDCAN_SendBytes+0x24>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8001d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d68:	400a      	ands	r2, r1
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	2000019c 	.word	0x2000019c
 8001d74:	20000084 	.word	0x20000084

08001d78 <FDCAN_ReadByte>:
//		return 0;
//	}
//}

uint8_t FDCAN_ReadByte(void)
{
 8001d78:	b513      	push	{r0, r1, r4, lr}
  uint8_t byte = 0x0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	466a      	mov	r2, sp
 8001d7e:	71d3      	strb	r3, [r2, #7]

  /* check if FIFO 0 receive at least one message */
  while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) < 1);
 8001d80:	4c08      	ldr	r4, [pc, #32]	; (8001da4 <FDCAN_ReadByte+0x2c>)
 8001d82:	2140      	movs	r1, #64	; 0x40
 8001d84:	0020      	movs	r0, r4
 8001d86:	f7ff f8d9 	bl	8000f3c <HAL_FDCAN_GetRxFifoFillLevel>
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d0f8      	beq.n	8001d80 <FDCAN_ReadByte+0x8>

  /* Retrieve Rx messages from RX FIFO0 */
  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), &byte);
 8001d8e:	466b      	mov	r3, sp
 8001d90:	2140      	movs	r1, #64	; 0x40
 8001d92:	0020      	movs	r0, r4
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <FDCAN_ReadByte+0x30>)
 8001d96:	3307      	adds	r3, #7
 8001d98:	f7ff f842 	bl	8000e20 <HAL_FDCAN_GetRxMessage>

  return byte;
 8001d9c:	466b      	mov	r3, sp
 8001d9e:	79d8      	ldrb	r0, [r3, #7]
}
 8001da0:	bd16      	pop	{r1, r2, r4, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	20000084 	.word	0x20000084
 8001da8:	200001c4 	.word	0x200001c4

08001dac <FDCAN_WriteMemory>:
		printf("error\n");
	}
}

void FDCAN_WriteMemory(uint8_t *address, uint8_t *data)
{
 8001dac:	b570      	push	{r4, r5, r6, lr}
//	uint32_t address;
//	uint8_t txdata[5] = {0x08,0x01,0x00,0x00,0xFF};
	TxHeader.Identifier = WRITE;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <FDCAN_WriteMemory+0x60>)
 8001db0:	4d17      	ldr	r5, [pc, #92]	; (8001e10 <FDCAN_WriteMemory+0x64>)
{
 8001db2:	000c      	movs	r4, r1

//	address = 0x08000000;

	FDCAN_SendBytes(address,FDCAN_DLC_BYTES_5);
 8001db4:	2105      	movs	r1, #5
	TxHeader.Identifier = WRITE;
 8001db6:	602b      	str	r3, [r5, #0]
	FDCAN_SendBytes(address,FDCAN_DLC_BYTES_5);
 8001db8:	f7ff ffc0 	bl	8001d3c <FDCAN_SendBytes>
	TxHeader.Identifier = 0xFFF111;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <FDCAN_WriteMemory+0x68>)
 8001dbe:	602b      	str	r3, [r5, #0]
	FDCAN_TxConfig();
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001dc0:	f7ff ffda 	bl	8001d78 <FDCAN_ReadByte>
 8001dc4:	2379      	movs	r3, #121	; 0x79
 8001dc6:	4018      	ands	r0, r3
 8001dc8:	4298      	cmp	r0, r3
 8001dca:	d115      	bne.n	8001df8 <FDCAN_WriteMemory+0x4c>
 8001dcc:	1c65      	adds	r5, r4, #1
 8001dce:	35ff      	adds	r5, #255	; 0xff
//			{
//				data[count] = FLASH_Read(address++);
//				printf("%x ",data[count]);
//			}
//			printf("\n");
			FDCAN_SendBytes((data+i*64),FDCAN_DLC_BYTES_64);
 8001dd0:	0020      	movs	r0, r4
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f7ff ffb2 	bl	8001d3c <FDCAN_SendBytes>
		for (int i=0;i<4;i++)
 8001dd8:	3440      	adds	r4, #64	; 0x40
			HAL_Delay(1);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7fe fe16 	bl	8000a0c <HAL_Delay>
		for (int i=0;i<4;i++)
 8001de0:	42ac      	cmp	r4, r5
 8001de2:	d1f5      	bne.n	8001dd0 <FDCAN_WriteMemory+0x24>
		}

		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001de4:	f7ff ffc8 	bl	8001d78 <FDCAN_ReadByte>
 8001de8:	2379      	movs	r3, #121	; 0x79
 8001dea:	4018      	ands	r0, r3
 8001dec:	4298      	cmp	r0, r3
 8001dee:	d102      	bne.n	8001df6 <FDCAN_WriteMemory+0x4a>
		{
			printf("WriteMemory Success!\n");
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <FDCAN_WriteMemory+0x6c>)
	{
		printf("WriteMemory fail!\n");
	}
	else
	{
		printf("error\n");
 8001df2:	f000 f991 	bl	8002118 <puts>
	}
}
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
	else if ((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8001df8:	f7ff ffbe 	bl	8001d78 <FDCAN_ReadByte>
 8001dfc:	43c0      	mvns	r0, r0
 8001dfe:	06c0      	lsls	r0, r0, #27
 8001e00:	d101      	bne.n	8001e06 <FDCAN_WriteMemory+0x5a>
		printf("WriteMemory fail!\n");
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <FDCAN_WriteMemory+0x70>)
 8001e04:	e7f5      	b.n	8001df2 <FDCAN_WriteMemory+0x46>
		printf("error\n");
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <FDCAN_WriteMemory+0x74>)
 8001e08:	e7f3      	b.n	8001df2 <FDCAN_WriteMemory+0x46>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	00ffff31 	.word	0x00ffff31
 8001e10:	2000019c 	.word	0x2000019c
 8001e14:	00fff111 	.word	0x00fff111
 8001e18:	080029af 	.word	0x080029af
 8001e1c:	080029c4 	.word	0x080029c4
 8001e20:	080029a9 	.word	0x080029a9

08001e24 <FDCAN_EraseMemory>:

void FDCAN_EraseMemory(uint8_t *txdata, uint8_t *data)
{
 8001e24:	b570      	push	{r4, r5, r6, lr}
	TxHeader.Identifier = ERASE;
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <FDCAN_EraseMemory+0x4c>)
 8001e28:	4c12      	ldr	r4, [pc, #72]	; (8001e74 <FDCAN_EraseMemory+0x50>)
{
 8001e2a:	000d      	movs	r5, r1

	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_2);
 8001e2c:	2102      	movs	r1, #2
	TxHeader.Identifier = ERASE;
 8001e2e:	6023      	str	r3, [r4, #0]
	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_2);
 8001e30:	f7ff ff84 	bl	8001d3c <FDCAN_SendBytes>
	TxHeader.Identifier = 0xFFF111;
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <FDCAN_EraseMemory+0x54>)
 8001e36:	6023      	str	r3, [r4, #0]
	FDCAN_TxConfig();
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001e38:	f7ff ff9e 	bl	8001d78 <FDCAN_ReadByte>
 8001e3c:	2479      	movs	r4, #121	; 0x79
 8001e3e:	4004      	ands	r4, r0
 8001e40:	2c79      	cmp	r4, #121	; 0x79
 8001e42:	d10c      	bne.n	8001e5e <FDCAN_EraseMemory+0x3a>
	{
		FDCAN_SendBytes(data,FDCAN_DLC_BYTES_64);
 8001e44:	210f      	movs	r1, #15
 8001e46:	0028      	movs	r0, r5
 8001e48:	f7ff ff78 	bl	8001d3c <FDCAN_SendBytes>
		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001e4c:	f7ff ff94 	bl	8001d78 <FDCAN_ReadByte>
 8001e50:	4020      	ands	r0, r4
 8001e52:	2879      	cmp	r0, #121	; 0x79
 8001e54:	d102      	bne.n	8001e5c <FDCAN_EraseMemory+0x38>
		{
			printf("EraseMemory Success!\n");
 8001e56:	4809      	ldr	r0, [pc, #36]	; (8001e7c <FDCAN_EraseMemory+0x58>)
	{
		printf("WriteMemory fail!\n");
	}
	else
	{
		printf("error\n");
 8001e58:	f000 f95e 	bl	8002118 <puts>
	}
}
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
	else if ((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8001e5e:	f7ff ff8b 	bl	8001d78 <FDCAN_ReadByte>
 8001e62:	43c0      	mvns	r0, r0
 8001e64:	06c0      	lsls	r0, r0, #27
 8001e66:	d101      	bne.n	8001e6c <FDCAN_EraseMemory+0x48>
		printf("WriteMemory fail!\n");
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <FDCAN_EraseMemory+0x5c>)
 8001e6a:	e7f5      	b.n	8001e58 <FDCAN_EraseMemory+0x34>
		printf("error\n");
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <FDCAN_EraseMemory+0x60>)
 8001e6e:	e7f3      	b.n	8001e58 <FDCAN_EraseMemory+0x34>
 8001e70:	00ffff44 	.word	0x00ffff44
 8001e74:	2000019c 	.word	0x2000019c
 8001e78:	00fff111 	.word	0x00fff111
 8001e7c:	080029d6 	.word	0x080029d6
 8001e80:	080029c4 	.word	0x080029c4
 8001e84:	080029a9 	.word	0x080029a9

08001e88 <FDCAN_Go>:

void FDCAN_Go(void)
{
 8001e88:	b513      	push	{r0, r1, r4, lr}
	uint8_t txdata[4] = {0x08,0x00,0x30,0x00};
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <FDCAN_Go+0x44>)
	TxHeader.Identifier = GO;
 8001e8c:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <FDCAN_Go+0x48>)
	uint8_t txdata[4] = {0x08,0x00,0x30,0x00};
 8001e8e:	9301      	str	r3, [sp, #4]
	TxHeader.Identifier = GO;
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <FDCAN_Go+0x4c>)

	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_4);
 8001e92:	2104      	movs	r1, #4
 8001e94:	a801      	add	r0, sp, #4
	TxHeader.Identifier = GO;
 8001e96:	601a      	str	r2, [r3, #0]
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001e98:	2479      	movs	r4, #121	; 0x79
	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_4);
 8001e9a:	f7ff ff4f 	bl	8001d3c <FDCAN_SendBytes>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001e9e:	f7ff ff6b 	bl	8001d78 <FDCAN_ReadByte>
 8001ea2:	4004      	ands	r4, r0
 8001ea4:	2c79      	cmp	r4, #121	; 0x79
 8001ea6:	d108      	bne.n	8001eba <FDCAN_Go+0x32>
	{
		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8001ea8:	f7ff ff66 	bl	8001d78 <FDCAN_ReadByte>
 8001eac:	4020      	ands	r0, r4
 8001eae:	2879      	cmp	r0, #121	; 0x79
 8001eb0:	d102      	bne.n	8001eb8 <FDCAN_Go+0x30>
		{
			printf("Go Success!\n");
 8001eb2:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <FDCAN_Go+0x50>)
	{
		printf("Go fail!\n");
	}
	else
	{
		printf("error\n");
 8001eb4:	f000 f930 	bl	8002118 <puts>
	}
}
 8001eb8:	bd13      	pop	{r0, r1, r4, pc}
	else if ((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8001eba:	f7ff ff5d 	bl	8001d78 <FDCAN_ReadByte>
 8001ebe:	43c0      	mvns	r0, r0
 8001ec0:	06c0      	lsls	r0, r0, #27
 8001ec2:	d101      	bne.n	8001ec8 <FDCAN_Go+0x40>
		printf("Go fail!\n");
 8001ec4:	4805      	ldr	r0, [pc, #20]	; (8001edc <FDCAN_Go+0x54>)
 8001ec6:	e7f5      	b.n	8001eb4 <FDCAN_Go+0x2c>
		printf("error\n");
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <FDCAN_Go+0x58>)
 8001eca:	e7f3      	b.n	8001eb4 <FDCAN_Go+0x2c>
 8001ecc:	00300008 	.word	0x00300008
 8001ed0:	00ffff21 	.word	0x00ffff21
 8001ed4:	2000019c 	.word	0x2000019c
 8001ed8:	080029eb 	.word	0x080029eb
 8001edc:	080029f7 	.word	0x080029f7
 8001ee0:	080029a9 	.word	0x080029a9

08001ee4 <std>:
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	b510      	push	{r4, lr}
 8001ee8:	0004      	movs	r4, r0
 8001eea:	6003      	str	r3, [r0, #0]
 8001eec:	6043      	str	r3, [r0, #4]
 8001eee:	6083      	str	r3, [r0, #8]
 8001ef0:	8181      	strh	r1, [r0, #12]
 8001ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ef4:	81c2      	strh	r2, [r0, #14]
 8001ef6:	6103      	str	r3, [r0, #16]
 8001ef8:	6143      	str	r3, [r0, #20]
 8001efa:	6183      	str	r3, [r0, #24]
 8001efc:	0019      	movs	r1, r3
 8001efe:	2208      	movs	r2, #8
 8001f00:	305c      	adds	r0, #92	; 0x5c
 8001f02:	f000 fa05 	bl	8002310 <memset>
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <std+0x50>)
 8001f08:	6224      	str	r4, [r4, #32]
 8001f0a:	6263      	str	r3, [r4, #36]	; 0x24
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <std+0x54>)
 8001f0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <std+0x58>)
 8001f12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <std+0x5c>)
 8001f16:	6323      	str	r3, [r4, #48]	; 0x30
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <std+0x60>)
 8001f1a:	429c      	cmp	r4, r3
 8001f1c:	d005      	beq.n	8001f2a <std+0x46>
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <std+0x64>)
 8001f20:	429c      	cmp	r4, r3
 8001f22:	d002      	beq.n	8001f2a <std+0x46>
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <std+0x68>)
 8001f26:	429c      	cmp	r4, r3
 8001f28:	d103      	bne.n	8001f32 <std+0x4e>
 8001f2a:	0020      	movs	r0, r4
 8001f2c:	3058      	adds	r0, #88	; 0x58
 8001f2e:	f000 fa6f 	bl	8002410 <__retarget_lock_init_recursive>
 8001f32:	bd10      	pop	{r4, pc}
 8001f34:	0800212d 	.word	0x0800212d
 8001f38:	08002155 	.word	0x08002155
 8001f3c:	0800218d 	.word	0x0800218d
 8001f40:	080021b9 	.word	0x080021b9
 8001f44:	20000234 	.word	0x20000234
 8001f48:	2000029c 	.word	0x2000029c
 8001f4c:	20000304 	.word	0x20000304

08001f50 <stdio_exit_handler>:
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <stdio_exit_handler+0x10>)
 8001f54:	4903      	ldr	r1, [pc, #12]	; (8001f64 <stdio_exit_handler+0x14>)
 8001f56:	4804      	ldr	r0, [pc, #16]	; (8001f68 <stdio_exit_handler+0x18>)
 8001f58:	f000 f86c 	bl	8002034 <_fwalk_sglue>
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	08002739 	.word	0x08002739
 8001f68:	20000018 	.word	0x20000018

08001f6c <cleanup_stdio>:
 8001f6c:	6841      	ldr	r1, [r0, #4]
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <cleanup_stdio+0x30>)
 8001f70:	b510      	push	{r4, lr}
 8001f72:	0004      	movs	r4, r0
 8001f74:	4299      	cmp	r1, r3
 8001f76:	d001      	beq.n	8001f7c <cleanup_stdio+0x10>
 8001f78:	f000 fbde 	bl	8002738 <_fflush_r>
 8001f7c:	68a1      	ldr	r1, [r4, #8]
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <cleanup_stdio+0x34>)
 8001f80:	4299      	cmp	r1, r3
 8001f82:	d002      	beq.n	8001f8a <cleanup_stdio+0x1e>
 8001f84:	0020      	movs	r0, r4
 8001f86:	f000 fbd7 	bl	8002738 <_fflush_r>
 8001f8a:	68e1      	ldr	r1, [r4, #12]
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <cleanup_stdio+0x38>)
 8001f8e:	4299      	cmp	r1, r3
 8001f90:	d002      	beq.n	8001f98 <cleanup_stdio+0x2c>
 8001f92:	0020      	movs	r0, r4
 8001f94:	f000 fbd0 	bl	8002738 <_fflush_r>
 8001f98:	bd10      	pop	{r4, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	20000234 	.word	0x20000234
 8001fa0:	2000029c 	.word	0x2000029c
 8001fa4:	20000304 	.word	0x20000304

08001fa8 <global_stdio_init.part.0>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <global_stdio_init.part.0+0x28>)
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <global_stdio_init.part.0+0x2c>)
 8001fae:	2104      	movs	r1, #4
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <global_stdio_init.part.0+0x30>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f7ff ff95 	bl	8001ee4 <std>
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2109      	movs	r1, #9
 8001fbe:	4807      	ldr	r0, [pc, #28]	; (8001fdc <global_stdio_init.part.0+0x34>)
 8001fc0:	f7ff ff90 	bl	8001ee4 <std>
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	2112      	movs	r1, #18
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <global_stdio_init.part.0+0x38>)
 8001fca:	f7ff ff8b 	bl	8001ee4 <std>
 8001fce:	bd10      	pop	{r4, pc}
 8001fd0:	2000036c 	.word	0x2000036c
 8001fd4:	08001f51 	.word	0x08001f51
 8001fd8:	20000234 	.word	0x20000234
 8001fdc:	2000029c 	.word	0x2000029c
 8001fe0:	20000304 	.word	0x20000304

08001fe4 <__sfp_lock_acquire>:
 8001fe4:	b510      	push	{r4, lr}
 8001fe6:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <__sfp_lock_acquire+0xc>)
 8001fe8:	f000 fa13 	bl	8002412 <__retarget_lock_acquire_recursive>
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	20000375 	.word	0x20000375

08001ff4 <__sfp_lock_release>:
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	4802      	ldr	r0, [pc, #8]	; (8002000 <__sfp_lock_release+0xc>)
 8001ff8:	f000 fa0c 	bl	8002414 <__retarget_lock_release_recursive>
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	20000375 	.word	0x20000375

08002004 <__sinit>:
 8002004:	b510      	push	{r4, lr}
 8002006:	0004      	movs	r4, r0
 8002008:	f7ff ffec 	bl	8001fe4 <__sfp_lock_acquire>
 800200c:	6a23      	ldr	r3, [r4, #32]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <__sinit+0x14>
 8002012:	f7ff ffef 	bl	8001ff4 <__sfp_lock_release>
 8002016:	bd10      	pop	{r4, pc}
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__sinit+0x28>)
 800201a:	6223      	str	r3, [r4, #32]
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <__sinit+0x2c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f6      	bne.n	8002012 <__sinit+0xe>
 8002024:	f7ff ffc0 	bl	8001fa8 <global_stdio_init.part.0>
 8002028:	e7f3      	b.n	8002012 <__sinit+0xe>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	08001f6d 	.word	0x08001f6d
 8002030:	2000036c 	.word	0x2000036c

08002034 <_fwalk_sglue>:
 8002034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002036:	0014      	movs	r4, r2
 8002038:	2600      	movs	r6, #0
 800203a:	9000      	str	r0, [sp, #0]
 800203c:	9101      	str	r1, [sp, #4]
 800203e:	68a5      	ldr	r5, [r4, #8]
 8002040:	6867      	ldr	r7, [r4, #4]
 8002042:	3f01      	subs	r7, #1
 8002044:	d504      	bpl.n	8002050 <_fwalk_sglue+0x1c>
 8002046:	6824      	ldr	r4, [r4, #0]
 8002048:	2c00      	cmp	r4, #0
 800204a:	d1f8      	bne.n	800203e <_fwalk_sglue+0xa>
 800204c:	0030      	movs	r0, r6
 800204e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002050:	89ab      	ldrh	r3, [r5, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d908      	bls.n	8002068 <_fwalk_sglue+0x34>
 8002056:	220e      	movs	r2, #14
 8002058:	5eab      	ldrsh	r3, [r5, r2]
 800205a:	3301      	adds	r3, #1
 800205c:	d004      	beq.n	8002068 <_fwalk_sglue+0x34>
 800205e:	0029      	movs	r1, r5
 8002060:	9800      	ldr	r0, [sp, #0]
 8002062:	9b01      	ldr	r3, [sp, #4]
 8002064:	4798      	blx	r3
 8002066:	4306      	orrs	r6, r0
 8002068:	3568      	adds	r5, #104	; 0x68
 800206a:	e7ea      	b.n	8002042 <_fwalk_sglue+0xe>

0800206c <_puts_r>:
 800206c:	6a03      	ldr	r3, [r0, #32]
 800206e:	b570      	push	{r4, r5, r6, lr}
 8002070:	0005      	movs	r5, r0
 8002072:	000e      	movs	r6, r1
 8002074:	6884      	ldr	r4, [r0, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <_puts_r+0x12>
 800207a:	f7ff ffc3 	bl	8002004 <__sinit>
 800207e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002080:	07db      	lsls	r3, r3, #31
 8002082:	d405      	bmi.n	8002090 <_puts_r+0x24>
 8002084:	89a3      	ldrh	r3, [r4, #12]
 8002086:	059b      	lsls	r3, r3, #22
 8002088:	d402      	bmi.n	8002090 <_puts_r+0x24>
 800208a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800208c:	f000 f9c1 	bl	8002412 <__retarget_lock_acquire_recursive>
 8002090:	89a3      	ldrh	r3, [r4, #12]
 8002092:	071b      	lsls	r3, r3, #28
 8002094:	d502      	bpl.n	800209c <_puts_r+0x30>
 8002096:	6923      	ldr	r3, [r4, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11f      	bne.n	80020dc <_puts_r+0x70>
 800209c:	0021      	movs	r1, r4
 800209e:	0028      	movs	r0, r5
 80020a0:	f000 f8d2 	bl	8002248 <__swsetup_r>
 80020a4:	2800      	cmp	r0, #0
 80020a6:	d019      	beq.n	80020dc <_puts_r+0x70>
 80020a8:	2501      	movs	r5, #1
 80020aa:	426d      	negs	r5, r5
 80020ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020ae:	07db      	lsls	r3, r3, #31
 80020b0:	d405      	bmi.n	80020be <_puts_r+0x52>
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	059b      	lsls	r3, r3, #22
 80020b6:	d402      	bmi.n	80020be <_puts_r+0x52>
 80020b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020ba:	f000 f9ab 	bl	8002414 <__retarget_lock_release_recursive>
 80020be:	0028      	movs	r0, r5
 80020c0:	bd70      	pop	{r4, r5, r6, pc}
 80020c2:	3601      	adds	r6, #1
 80020c4:	60a3      	str	r3, [r4, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da04      	bge.n	80020d4 <_puts_r+0x68>
 80020ca:	69a2      	ldr	r2, [r4, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dc16      	bgt.n	80020fe <_puts_r+0x92>
 80020d0:	290a      	cmp	r1, #10
 80020d2:	d014      	beq.n	80020fe <_puts_r+0x92>
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	7019      	strb	r1, [r3, #0]
 80020dc:	68a3      	ldr	r3, [r4, #8]
 80020de:	7831      	ldrb	r1, [r6, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d1ed      	bne.n	80020c2 <_puts_r+0x56>
 80020e6:	60a3      	str	r3, [r4, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da0f      	bge.n	800210c <_puts_r+0xa0>
 80020ec:	0028      	movs	r0, r5
 80020ee:	0022      	movs	r2, r4
 80020f0:	310a      	adds	r1, #10
 80020f2:	f000 f867 	bl	80021c4 <__swbuf_r>
 80020f6:	250a      	movs	r5, #10
 80020f8:	3001      	adds	r0, #1
 80020fa:	d1d7      	bne.n	80020ac <_puts_r+0x40>
 80020fc:	e7d4      	b.n	80020a8 <_puts_r+0x3c>
 80020fe:	0022      	movs	r2, r4
 8002100:	0028      	movs	r0, r5
 8002102:	f000 f85f 	bl	80021c4 <__swbuf_r>
 8002106:	3001      	adds	r0, #1
 8002108:	d1e8      	bne.n	80020dc <_puts_r+0x70>
 800210a:	e7cd      	b.n	80020a8 <_puts_r+0x3c>
 800210c:	250a      	movs	r5, #10
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	6022      	str	r2, [r4, #0]
 8002114:	701d      	strb	r5, [r3, #0]
 8002116:	e7c9      	b.n	80020ac <_puts_r+0x40>

08002118 <puts>:
 8002118:	b510      	push	{r4, lr}
 800211a:	4b03      	ldr	r3, [pc, #12]	; (8002128 <puts+0x10>)
 800211c:	0001      	movs	r1, r0
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	f7ff ffa4 	bl	800206c <_puts_r>
 8002124:	bd10      	pop	{r4, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	20000064 	.word	0x20000064

0800212c <__sread>:
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	000c      	movs	r4, r1
 8002130:	250e      	movs	r5, #14
 8002132:	5f49      	ldrsh	r1, [r1, r5]
 8002134:	f000 f91a 	bl	800236c <_read_r>
 8002138:	2800      	cmp	r0, #0
 800213a:	db03      	blt.n	8002144 <__sread+0x18>
 800213c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800213e:	181b      	adds	r3, r3, r0
 8002140:	6563      	str	r3, [r4, #84]	; 0x54
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	89a3      	ldrh	r3, [r4, #12]
 8002146:	4a02      	ldr	r2, [pc, #8]	; (8002150 <__sread+0x24>)
 8002148:	4013      	ands	r3, r2
 800214a:	81a3      	strh	r3, [r4, #12]
 800214c:	e7f9      	b.n	8002142 <__sread+0x16>
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	ffffefff 	.word	0xffffefff

08002154 <__swrite>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	001f      	movs	r7, r3
 8002158:	898b      	ldrh	r3, [r1, #12]
 800215a:	0005      	movs	r5, r0
 800215c:	000c      	movs	r4, r1
 800215e:	0016      	movs	r6, r2
 8002160:	05db      	lsls	r3, r3, #23
 8002162:	d505      	bpl.n	8002170 <__swrite+0x1c>
 8002164:	230e      	movs	r3, #14
 8002166:	5ec9      	ldrsh	r1, [r1, r3]
 8002168:	2200      	movs	r2, #0
 800216a:	2302      	movs	r3, #2
 800216c:	f000 f8ea 	bl	8002344 <_lseek_r>
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	4a05      	ldr	r2, [pc, #20]	; (8002188 <__swrite+0x34>)
 8002174:	0028      	movs	r0, r5
 8002176:	4013      	ands	r3, r2
 8002178:	81a3      	strh	r3, [r4, #12]
 800217a:	0032      	movs	r2, r6
 800217c:	230e      	movs	r3, #14
 800217e:	5ee1      	ldrsh	r1, [r4, r3]
 8002180:	003b      	movs	r3, r7
 8002182:	f000 f907 	bl	8002394 <_write_r>
 8002186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002188:	ffffefff 	.word	0xffffefff

0800218c <__sseek>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	000c      	movs	r4, r1
 8002190:	250e      	movs	r5, #14
 8002192:	5f49      	ldrsh	r1, [r1, r5]
 8002194:	f000 f8d6 	bl	8002344 <_lseek_r>
 8002198:	89a3      	ldrh	r3, [r4, #12]
 800219a:	1c42      	adds	r2, r0, #1
 800219c:	d103      	bne.n	80021a6 <__sseek+0x1a>
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <__sseek+0x28>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	81a3      	strh	r3, [r4, #12]
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	0152      	lsls	r2, r2, #5
 80021aa:	4313      	orrs	r3, r2
 80021ac:	81a3      	strh	r3, [r4, #12]
 80021ae:	6560      	str	r0, [r4, #84]	; 0x54
 80021b0:	e7f8      	b.n	80021a4 <__sseek+0x18>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	ffffefff 	.word	0xffffefff

080021b8 <__sclose>:
 80021b8:	b510      	push	{r4, lr}
 80021ba:	230e      	movs	r3, #14
 80021bc:	5ec9      	ldrsh	r1, [r1, r3]
 80021be:	f000 f8af 	bl	8002320 <_close_r>
 80021c2:	bd10      	pop	{r4, pc}

080021c4 <__swbuf_r>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	0006      	movs	r6, r0
 80021c8:	000d      	movs	r5, r1
 80021ca:	0014      	movs	r4, r2
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d004      	beq.n	80021da <__swbuf_r+0x16>
 80021d0:	6a03      	ldr	r3, [r0, #32]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <__swbuf_r+0x16>
 80021d6:	f7ff ff15 	bl	8002004 <__sinit>
 80021da:	69a3      	ldr	r3, [r4, #24]
 80021dc:	60a3      	str	r3, [r4, #8]
 80021de:	89a3      	ldrh	r3, [r4, #12]
 80021e0:	071b      	lsls	r3, r3, #28
 80021e2:	d528      	bpl.n	8002236 <__swbuf_r+0x72>
 80021e4:	6923      	ldr	r3, [r4, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d025      	beq.n	8002236 <__swbuf_r+0x72>
 80021ea:	6923      	ldr	r3, [r4, #16]
 80021ec:	6820      	ldr	r0, [r4, #0]
 80021ee:	b2ef      	uxtb	r7, r5
 80021f0:	1ac0      	subs	r0, r0, r3
 80021f2:	6963      	ldr	r3, [r4, #20]
 80021f4:	b2ed      	uxtb	r5, r5
 80021f6:	4283      	cmp	r3, r0
 80021f8:	dc05      	bgt.n	8002206 <__swbuf_r+0x42>
 80021fa:	0021      	movs	r1, r4
 80021fc:	0030      	movs	r0, r6
 80021fe:	f000 fa9b 	bl	8002738 <_fflush_r>
 8002202:	2800      	cmp	r0, #0
 8002204:	d11d      	bne.n	8002242 <__swbuf_r+0x7e>
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	3001      	adds	r0, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	60a3      	str	r3, [r4, #8]
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	6022      	str	r2, [r4, #0]
 8002214:	701f      	strb	r7, [r3, #0]
 8002216:	6963      	ldr	r3, [r4, #20]
 8002218:	4283      	cmp	r3, r0
 800221a:	d004      	beq.n	8002226 <__swbuf_r+0x62>
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	07db      	lsls	r3, r3, #31
 8002220:	d507      	bpl.n	8002232 <__swbuf_r+0x6e>
 8002222:	2d0a      	cmp	r5, #10
 8002224:	d105      	bne.n	8002232 <__swbuf_r+0x6e>
 8002226:	0021      	movs	r1, r4
 8002228:	0030      	movs	r0, r6
 800222a:	f000 fa85 	bl	8002738 <_fflush_r>
 800222e:	2800      	cmp	r0, #0
 8002230:	d107      	bne.n	8002242 <__swbuf_r+0x7e>
 8002232:	0028      	movs	r0, r5
 8002234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002236:	0021      	movs	r1, r4
 8002238:	0030      	movs	r0, r6
 800223a:	f000 f805 	bl	8002248 <__swsetup_r>
 800223e:	2800      	cmp	r0, #0
 8002240:	d0d3      	beq.n	80021ea <__swbuf_r+0x26>
 8002242:	2501      	movs	r5, #1
 8002244:	426d      	negs	r5, r5
 8002246:	e7f4      	b.n	8002232 <__swbuf_r+0x6e>

08002248 <__swsetup_r>:
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <__swsetup_r+0xc4>)
 800224a:	b570      	push	{r4, r5, r6, lr}
 800224c:	0005      	movs	r5, r0
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	000c      	movs	r4, r1
 8002252:	2800      	cmp	r0, #0
 8002254:	d004      	beq.n	8002260 <__swsetup_r+0x18>
 8002256:	6a03      	ldr	r3, [r0, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <__swsetup_r+0x18>
 800225c:	f7ff fed2 	bl	8002004 <__sinit>
 8002260:	230c      	movs	r3, #12
 8002262:	5ee2      	ldrsh	r2, [r4, r3]
 8002264:	b293      	uxth	r3, r2
 8002266:	0711      	lsls	r1, r2, #28
 8002268:	d423      	bmi.n	80022b2 <__swsetup_r+0x6a>
 800226a:	06d9      	lsls	r1, r3, #27
 800226c:	d407      	bmi.n	800227e <__swsetup_r+0x36>
 800226e:	2309      	movs	r3, #9
 8002270:	2001      	movs	r0, #1
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	3337      	adds	r3, #55	; 0x37
 8002276:	4313      	orrs	r3, r2
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	4240      	negs	r0, r0
 800227c:	bd70      	pop	{r4, r5, r6, pc}
 800227e:	075b      	lsls	r3, r3, #29
 8002280:	d513      	bpl.n	80022aa <__swsetup_r+0x62>
 8002282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002284:	2900      	cmp	r1, #0
 8002286:	d008      	beq.n	800229a <__swsetup_r+0x52>
 8002288:	0023      	movs	r3, r4
 800228a:	3344      	adds	r3, #68	; 0x44
 800228c:	4299      	cmp	r1, r3
 800228e:	d002      	beq.n	8002296 <__swsetup_r+0x4e>
 8002290:	0028      	movs	r0, r5
 8002292:	f000 f8c9 	bl	8002428 <_free_r>
 8002296:	2300      	movs	r3, #0
 8002298:	6363      	str	r3, [r4, #52]	; 0x34
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	89a3      	ldrh	r3, [r4, #12]
 800229e:	4393      	bics	r3, r2
 80022a0:	81a3      	strh	r3, [r4, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	6063      	str	r3, [r4, #4]
 80022a6:	6923      	ldr	r3, [r4, #16]
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	2308      	movs	r3, #8
 80022ac:	89a2      	ldrh	r2, [r4, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	81a3      	strh	r3, [r4, #12]
 80022b2:	6923      	ldr	r3, [r4, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <__swsetup_r+0x88>
 80022b8:	21a0      	movs	r1, #160	; 0xa0
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	89a3      	ldrh	r3, [r4, #12]
 80022be:	0089      	lsls	r1, r1, #2
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	400b      	ands	r3, r1
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <__swsetup_r+0x88>
 80022c8:	0021      	movs	r1, r4
 80022ca:	0028      	movs	r0, r5
 80022cc:	f000 fa88 	bl	80027e0 <__smakebuf_r>
 80022d0:	220c      	movs	r2, #12
 80022d2:	5ea3      	ldrsh	r3, [r4, r2]
 80022d4:	2001      	movs	r0, #1
 80022d6:	001a      	movs	r2, r3
 80022d8:	b299      	uxth	r1, r3
 80022da:	4002      	ands	r2, r0
 80022dc:	4203      	tst	r3, r0
 80022de:	d00f      	beq.n	8002300 <__swsetup_r+0xb8>
 80022e0:	2200      	movs	r2, #0
 80022e2:	60a2      	str	r2, [r4, #8]
 80022e4:	6962      	ldr	r2, [r4, #20]
 80022e6:	4252      	negs	r2, r2
 80022e8:	61a2      	str	r2, [r4, #24]
 80022ea:	2000      	movs	r0, #0
 80022ec:	6922      	ldr	r2, [r4, #16]
 80022ee:	4282      	cmp	r2, r0
 80022f0:	d1c4      	bne.n	800227c <__swsetup_r+0x34>
 80022f2:	0609      	lsls	r1, r1, #24
 80022f4:	d5c2      	bpl.n	800227c <__swsetup_r+0x34>
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	4313      	orrs	r3, r2
 80022fa:	81a3      	strh	r3, [r4, #12]
 80022fc:	3801      	subs	r0, #1
 80022fe:	e7bd      	b.n	800227c <__swsetup_r+0x34>
 8002300:	0788      	lsls	r0, r1, #30
 8002302:	d400      	bmi.n	8002306 <__swsetup_r+0xbe>
 8002304:	6962      	ldr	r2, [r4, #20]
 8002306:	60a2      	str	r2, [r4, #8]
 8002308:	e7ef      	b.n	80022ea <__swsetup_r+0xa2>
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	20000064 	.word	0x20000064

08002310 <memset>:
 8002310:	0003      	movs	r3, r0
 8002312:	1882      	adds	r2, r0, r2
 8002314:	4293      	cmp	r3, r2
 8002316:	d100      	bne.n	800231a <memset+0xa>
 8002318:	4770      	bx	lr
 800231a:	7019      	strb	r1, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	e7f9      	b.n	8002314 <memset+0x4>

08002320 <_close_r>:
 8002320:	2300      	movs	r3, #0
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	4d06      	ldr	r5, [pc, #24]	; (8002340 <_close_r+0x20>)
 8002326:	0004      	movs	r4, r0
 8002328:	0008      	movs	r0, r1
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	f7fe fa50 	bl	80007d0 <_close>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d103      	bne.n	800233c <_close_r+0x1c>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <_close_r+0x1c>
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	bd70      	pop	{r4, r5, r6, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000370 	.word	0x20000370

08002344 <_lseek_r>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	0004      	movs	r4, r0
 8002348:	0008      	movs	r0, r1
 800234a:	0011      	movs	r1, r2
 800234c:	001a      	movs	r2, r3
 800234e:	2300      	movs	r3, #0
 8002350:	4d05      	ldr	r5, [pc, #20]	; (8002368 <_lseek_r+0x24>)
 8002352:	602b      	str	r3, [r5, #0]
 8002354:	f7fe fa46 	bl	80007e4 <_lseek>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d103      	bne.n	8002364 <_lseek_r+0x20>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d000      	beq.n	8002364 <_lseek_r+0x20>
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	20000370 	.word	0x20000370

0800236c <_read_r>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	0004      	movs	r4, r0
 8002370:	0008      	movs	r0, r1
 8002372:	0011      	movs	r1, r2
 8002374:	001a      	movs	r2, r3
 8002376:	2300      	movs	r3, #0
 8002378:	4d05      	ldr	r5, [pc, #20]	; (8002390 <_read_r+0x24>)
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	f7fe fa0e 	bl	800079c <_read>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d103      	bne.n	800238c <_read_r+0x20>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d000      	beq.n	800238c <_read_r+0x20>
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	20000370 	.word	0x20000370

08002394 <_write_r>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	0004      	movs	r4, r0
 8002398:	0008      	movs	r0, r1
 800239a:	0011      	movs	r1, r2
 800239c:	001a      	movs	r2, r3
 800239e:	2300      	movs	r3, #0
 80023a0:	4d05      	ldr	r5, [pc, #20]	; (80023b8 <_write_r+0x24>)
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	f7fe fa07 	bl	80007b6 <_write>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d103      	bne.n	80023b4 <_write_r+0x20>
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d000      	beq.n	80023b4 <_write_r+0x20>
 80023b2:	6023      	str	r3, [r4, #0]
 80023b4:	bd70      	pop	{r4, r5, r6, pc}
 80023b6:	46c0      	nop			; (mov r8, r8)
 80023b8:	20000370 	.word	0x20000370

080023bc <__errno>:
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <__errno+0x8>)
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	4770      	bx	lr
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000064 	.word	0x20000064

080023c8 <__libc_init_array>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	2600      	movs	r6, #0
 80023cc:	4c0c      	ldr	r4, [pc, #48]	; (8002400 <__libc_init_array+0x38>)
 80023ce:	4d0d      	ldr	r5, [pc, #52]	; (8002404 <__libc_init_array+0x3c>)
 80023d0:	1b64      	subs	r4, r4, r5
 80023d2:	10a4      	asrs	r4, r4, #2
 80023d4:	42a6      	cmp	r6, r4
 80023d6:	d109      	bne.n	80023ec <__libc_init_array+0x24>
 80023d8:	2600      	movs	r6, #0
 80023da:	f000 fa75 	bl	80028c8 <_init>
 80023de:	4c0a      	ldr	r4, [pc, #40]	; (8002408 <__libc_init_array+0x40>)
 80023e0:	4d0a      	ldr	r5, [pc, #40]	; (800240c <__libc_init_array+0x44>)
 80023e2:	1b64      	subs	r4, r4, r5
 80023e4:	10a4      	asrs	r4, r4, #2
 80023e6:	42a6      	cmp	r6, r4
 80023e8:	d105      	bne.n	80023f6 <__libc_init_array+0x2e>
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
 80023ec:	00b3      	lsls	r3, r6, #2
 80023ee:	58eb      	ldr	r3, [r5, r3]
 80023f0:	4798      	blx	r3
 80023f2:	3601      	adds	r6, #1
 80023f4:	e7ee      	b.n	80023d4 <__libc_init_array+0xc>
 80023f6:	00b3      	lsls	r3, r6, #2
 80023f8:	58eb      	ldr	r3, [r5, r3]
 80023fa:	4798      	blx	r3
 80023fc:	3601      	adds	r6, #1
 80023fe:	e7f2      	b.n	80023e6 <__libc_init_array+0x1e>
 8002400:	08002a00 	.word	0x08002a00
 8002404:	08002a00 	.word	0x08002a00
 8002408:	08002a04 	.word	0x08002a04
 800240c:	08002a00 	.word	0x08002a00

08002410 <__retarget_lock_init_recursive>:
 8002410:	4770      	bx	lr

08002412 <__retarget_lock_acquire_recursive>:
 8002412:	4770      	bx	lr

08002414 <__retarget_lock_release_recursive>:
 8002414:	4770      	bx	lr

08002416 <memcpy>:
 8002416:	2300      	movs	r3, #0
 8002418:	b510      	push	{r4, lr}
 800241a:	429a      	cmp	r2, r3
 800241c:	d100      	bne.n	8002420 <memcpy+0xa>
 800241e:	bd10      	pop	{r4, pc}
 8002420:	5ccc      	ldrb	r4, [r1, r3]
 8002422:	54c4      	strb	r4, [r0, r3]
 8002424:	3301      	adds	r3, #1
 8002426:	e7f8      	b.n	800241a <memcpy+0x4>

08002428 <_free_r>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	0005      	movs	r5, r0
 800242c:	2900      	cmp	r1, #0
 800242e:	d010      	beq.n	8002452 <_free_r+0x2a>
 8002430:	1f0c      	subs	r4, r1, #4
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	da00      	bge.n	800243a <_free_r+0x12>
 8002438:	18e4      	adds	r4, r4, r3
 800243a:	0028      	movs	r0, r5
 800243c:	f000 f8e2 	bl	8002604 <__malloc_lock>
 8002440:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <_free_r+0x90>)
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <_free_r+0x2c>
 8002448:	6063      	str	r3, [r4, #4]
 800244a:	6014      	str	r4, [r2, #0]
 800244c:	0028      	movs	r0, r5
 800244e:	f000 f8e1 	bl	8002614 <__malloc_unlock>
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	42a3      	cmp	r3, r4
 8002456:	d908      	bls.n	800246a <_free_r+0x42>
 8002458:	6820      	ldr	r0, [r4, #0]
 800245a:	1821      	adds	r1, r4, r0
 800245c:	428b      	cmp	r3, r1
 800245e:	d1f3      	bne.n	8002448 <_free_r+0x20>
 8002460:	6819      	ldr	r1, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	1809      	adds	r1, r1, r0
 8002466:	6021      	str	r1, [r4, #0]
 8002468:	e7ee      	b.n	8002448 <_free_r+0x20>
 800246a:	001a      	movs	r2, r3
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <_free_r+0x4e>
 8002472:	42a3      	cmp	r3, r4
 8002474:	d9f9      	bls.n	800246a <_free_r+0x42>
 8002476:	6811      	ldr	r1, [r2, #0]
 8002478:	1850      	adds	r0, r2, r1
 800247a:	42a0      	cmp	r0, r4
 800247c:	d10b      	bne.n	8002496 <_free_r+0x6e>
 800247e:	6820      	ldr	r0, [r4, #0]
 8002480:	1809      	adds	r1, r1, r0
 8002482:	1850      	adds	r0, r2, r1
 8002484:	6011      	str	r1, [r2, #0]
 8002486:	4283      	cmp	r3, r0
 8002488:	d1e0      	bne.n	800244c <_free_r+0x24>
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	1841      	adds	r1, r0, r1
 8002490:	6011      	str	r1, [r2, #0]
 8002492:	6053      	str	r3, [r2, #4]
 8002494:	e7da      	b.n	800244c <_free_r+0x24>
 8002496:	42a0      	cmp	r0, r4
 8002498:	d902      	bls.n	80024a0 <_free_r+0x78>
 800249a:	230c      	movs	r3, #12
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	e7d5      	b.n	800244c <_free_r+0x24>
 80024a0:	6820      	ldr	r0, [r4, #0]
 80024a2:	1821      	adds	r1, r4, r0
 80024a4:	428b      	cmp	r3, r1
 80024a6:	d103      	bne.n	80024b0 <_free_r+0x88>
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1809      	adds	r1, r1, r0
 80024ae:	6021      	str	r1, [r4, #0]
 80024b0:	6063      	str	r3, [r4, #4]
 80024b2:	6054      	str	r4, [r2, #4]
 80024b4:	e7ca      	b.n	800244c <_free_r+0x24>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000378 	.word	0x20000378

080024bc <sbrk_aligned>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4e0f      	ldr	r6, [pc, #60]	; (80024fc <sbrk_aligned+0x40>)
 80024c0:	000d      	movs	r5, r1
 80024c2:	6831      	ldr	r1, [r6, #0]
 80024c4:	0004      	movs	r4, r0
 80024c6:	2900      	cmp	r1, #0
 80024c8:	d102      	bne.n	80024d0 <sbrk_aligned+0x14>
 80024ca:	f000 f9eb 	bl	80028a4 <_sbrk_r>
 80024ce:	6030      	str	r0, [r6, #0]
 80024d0:	0029      	movs	r1, r5
 80024d2:	0020      	movs	r0, r4
 80024d4:	f000 f9e6 	bl	80028a4 <_sbrk_r>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d00a      	beq.n	80024f2 <sbrk_aligned+0x36>
 80024dc:	2303      	movs	r3, #3
 80024de:	1cc5      	adds	r5, r0, #3
 80024e0:	439d      	bics	r5, r3
 80024e2:	42a8      	cmp	r0, r5
 80024e4:	d007      	beq.n	80024f6 <sbrk_aligned+0x3a>
 80024e6:	1a29      	subs	r1, r5, r0
 80024e8:	0020      	movs	r0, r4
 80024ea:	f000 f9db 	bl	80028a4 <_sbrk_r>
 80024ee:	3001      	adds	r0, #1
 80024f0:	d101      	bne.n	80024f6 <sbrk_aligned+0x3a>
 80024f2:	2501      	movs	r5, #1
 80024f4:	426d      	negs	r5, r5
 80024f6:	0028      	movs	r0, r5
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	2000037c 	.word	0x2000037c

08002500 <_malloc_r>:
 8002500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002502:	2203      	movs	r2, #3
 8002504:	1ccb      	adds	r3, r1, #3
 8002506:	4393      	bics	r3, r2
 8002508:	3308      	adds	r3, #8
 800250a:	0006      	movs	r6, r0
 800250c:	001f      	movs	r7, r3
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d238      	bcs.n	8002584 <_malloc_r+0x84>
 8002512:	270c      	movs	r7, #12
 8002514:	42b9      	cmp	r1, r7
 8002516:	d837      	bhi.n	8002588 <_malloc_r+0x88>
 8002518:	0030      	movs	r0, r6
 800251a:	f000 f873 	bl	8002604 <__malloc_lock>
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <_malloc_r+0x100>)
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	001c      	movs	r4, r3
 8002526:	2c00      	cmp	r4, #0
 8002528:	d133      	bne.n	8002592 <_malloc_r+0x92>
 800252a:	0039      	movs	r1, r7
 800252c:	0030      	movs	r0, r6
 800252e:	f7ff ffc5 	bl	80024bc <sbrk_aligned>
 8002532:	0004      	movs	r4, r0
 8002534:	1c43      	adds	r3, r0, #1
 8002536:	d15e      	bne.n	80025f6 <_malloc_r+0xf6>
 8002538:	9b00      	ldr	r3, [sp, #0]
 800253a:	681c      	ldr	r4, [r3, #0]
 800253c:	0025      	movs	r5, r4
 800253e:	2d00      	cmp	r5, #0
 8002540:	d14e      	bne.n	80025e0 <_malloc_r+0xe0>
 8002542:	2c00      	cmp	r4, #0
 8002544:	d051      	beq.n	80025ea <_malloc_r+0xea>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	0029      	movs	r1, r5
 800254a:	18e3      	adds	r3, r4, r3
 800254c:	0030      	movs	r0, r6
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	f000 f9a8 	bl	80028a4 <_sbrk_r>
 8002554:	9b01      	ldr	r3, [sp, #4]
 8002556:	4283      	cmp	r3, r0
 8002558:	d147      	bne.n	80025ea <_malloc_r+0xea>
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	0030      	movs	r0, r6
 800255e:	1aff      	subs	r7, r7, r3
 8002560:	0039      	movs	r1, r7
 8002562:	f7ff ffab 	bl	80024bc <sbrk_aligned>
 8002566:	3001      	adds	r0, #1
 8002568:	d03f      	beq.n	80025ea <_malloc_r+0xea>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	19db      	adds	r3, r3, r7
 800256e:	6023      	str	r3, [r4, #0]
 8002570:	9b00      	ldr	r3, [sp, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d040      	beq.n	80025fa <_malloc_r+0xfa>
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	42a2      	cmp	r2, r4
 800257c:	d133      	bne.n	80025e6 <_malloc_r+0xe6>
 800257e:	2200      	movs	r2, #0
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	e014      	b.n	80025ae <_malloc_r+0xae>
 8002584:	2b00      	cmp	r3, #0
 8002586:	dac5      	bge.n	8002514 <_malloc_r+0x14>
 8002588:	230c      	movs	r3, #12
 800258a:	2500      	movs	r5, #0
 800258c:	6033      	str	r3, [r6, #0]
 800258e:	0028      	movs	r0, r5
 8002590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002592:	6821      	ldr	r1, [r4, #0]
 8002594:	1bc9      	subs	r1, r1, r7
 8002596:	d420      	bmi.n	80025da <_malloc_r+0xda>
 8002598:	290b      	cmp	r1, #11
 800259a:	d918      	bls.n	80025ce <_malloc_r+0xce>
 800259c:	19e2      	adds	r2, r4, r7
 800259e:	6027      	str	r7, [r4, #0]
 80025a0:	42a3      	cmp	r3, r4
 80025a2:	d112      	bne.n	80025ca <_malloc_r+0xca>
 80025a4:	9b00      	ldr	r3, [sp, #0]
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	6863      	ldr	r3, [r4, #4]
 80025aa:	6011      	str	r1, [r2, #0]
 80025ac:	6053      	str	r3, [r2, #4]
 80025ae:	0030      	movs	r0, r6
 80025b0:	0025      	movs	r5, r4
 80025b2:	f000 f82f 	bl	8002614 <__malloc_unlock>
 80025b6:	2207      	movs	r2, #7
 80025b8:	350b      	adds	r5, #11
 80025ba:	1d23      	adds	r3, r4, #4
 80025bc:	4395      	bics	r5, r2
 80025be:	1aea      	subs	r2, r5, r3
 80025c0:	429d      	cmp	r5, r3
 80025c2:	d0e4      	beq.n	800258e <_malloc_r+0x8e>
 80025c4:	1b5b      	subs	r3, r3, r5
 80025c6:	50a3      	str	r3, [r4, r2]
 80025c8:	e7e1      	b.n	800258e <_malloc_r+0x8e>
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	e7ec      	b.n	80025a8 <_malloc_r+0xa8>
 80025ce:	6862      	ldr	r2, [r4, #4]
 80025d0:	42a3      	cmp	r3, r4
 80025d2:	d1d5      	bne.n	8002580 <_malloc_r+0x80>
 80025d4:	9b00      	ldr	r3, [sp, #0]
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e7e9      	b.n	80025ae <_malloc_r+0xae>
 80025da:	0023      	movs	r3, r4
 80025dc:	6864      	ldr	r4, [r4, #4]
 80025de:	e7a2      	b.n	8002526 <_malloc_r+0x26>
 80025e0:	002c      	movs	r4, r5
 80025e2:	686d      	ldr	r5, [r5, #4]
 80025e4:	e7ab      	b.n	800253e <_malloc_r+0x3e>
 80025e6:	0013      	movs	r3, r2
 80025e8:	e7c4      	b.n	8002574 <_malloc_r+0x74>
 80025ea:	230c      	movs	r3, #12
 80025ec:	0030      	movs	r0, r6
 80025ee:	6033      	str	r3, [r6, #0]
 80025f0:	f000 f810 	bl	8002614 <__malloc_unlock>
 80025f4:	e7cb      	b.n	800258e <_malloc_r+0x8e>
 80025f6:	6027      	str	r7, [r4, #0]
 80025f8:	e7d9      	b.n	80025ae <_malloc_r+0xae>
 80025fa:	605b      	str	r3, [r3, #4]
 80025fc:	deff      	udf	#255	; 0xff
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000378 	.word	0x20000378

08002604 <__malloc_lock>:
 8002604:	b510      	push	{r4, lr}
 8002606:	4802      	ldr	r0, [pc, #8]	; (8002610 <__malloc_lock+0xc>)
 8002608:	f7ff ff03 	bl	8002412 <__retarget_lock_acquire_recursive>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000374 	.word	0x20000374

08002614 <__malloc_unlock>:
 8002614:	b510      	push	{r4, lr}
 8002616:	4802      	ldr	r0, [pc, #8]	; (8002620 <__malloc_unlock+0xc>)
 8002618:	f7ff fefc 	bl	8002414 <__retarget_lock_release_recursive>
 800261c:	bd10      	pop	{r4, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000374 	.word	0x20000374

08002624 <__sflush_r>:
 8002624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002626:	898b      	ldrh	r3, [r1, #12]
 8002628:	0005      	movs	r5, r0
 800262a:	000c      	movs	r4, r1
 800262c:	071a      	lsls	r2, r3, #28
 800262e:	d45c      	bmi.n	80026ea <__sflush_r+0xc6>
 8002630:	684a      	ldr	r2, [r1, #4]
 8002632:	2a00      	cmp	r2, #0
 8002634:	dc04      	bgt.n	8002640 <__sflush_r+0x1c>
 8002636:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002638:	2a00      	cmp	r2, #0
 800263a:	dc01      	bgt.n	8002640 <__sflush_r+0x1c>
 800263c:	2000      	movs	r0, #0
 800263e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002640:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002642:	2f00      	cmp	r7, #0
 8002644:	d0fa      	beq.n	800263c <__sflush_r+0x18>
 8002646:	2200      	movs	r2, #0
 8002648:	2080      	movs	r0, #128	; 0x80
 800264a:	682e      	ldr	r6, [r5, #0]
 800264c:	602a      	str	r2, [r5, #0]
 800264e:	001a      	movs	r2, r3
 8002650:	0140      	lsls	r0, r0, #5
 8002652:	6a21      	ldr	r1, [r4, #32]
 8002654:	4002      	ands	r2, r0
 8002656:	4203      	tst	r3, r0
 8002658:	d034      	beq.n	80026c4 <__sflush_r+0xa0>
 800265a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800265c:	89a3      	ldrh	r3, [r4, #12]
 800265e:	075b      	lsls	r3, r3, #29
 8002660:	d506      	bpl.n	8002670 <__sflush_r+0x4c>
 8002662:	6863      	ldr	r3, [r4, #4]
 8002664:	1ac0      	subs	r0, r0, r3
 8002666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <__sflush_r+0x4c>
 800266c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800266e:	1ac0      	subs	r0, r0, r3
 8002670:	0002      	movs	r2, r0
 8002672:	2300      	movs	r3, #0
 8002674:	0028      	movs	r0, r5
 8002676:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002678:	6a21      	ldr	r1, [r4, #32]
 800267a:	47b8      	blx	r7
 800267c:	89a2      	ldrh	r2, [r4, #12]
 800267e:	1c43      	adds	r3, r0, #1
 8002680:	d106      	bne.n	8002690 <__sflush_r+0x6c>
 8002682:	6829      	ldr	r1, [r5, #0]
 8002684:	291d      	cmp	r1, #29
 8002686:	d82c      	bhi.n	80026e2 <__sflush_r+0xbe>
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <__sflush_r+0x110>)
 800268a:	410b      	asrs	r3, r1
 800268c:	07db      	lsls	r3, r3, #31
 800268e:	d428      	bmi.n	80026e2 <__sflush_r+0xbe>
 8002690:	2300      	movs	r3, #0
 8002692:	6063      	str	r3, [r4, #4]
 8002694:	6923      	ldr	r3, [r4, #16]
 8002696:	6023      	str	r3, [r4, #0]
 8002698:	04d2      	lsls	r2, r2, #19
 800269a:	d505      	bpl.n	80026a8 <__sflush_r+0x84>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <__sflush_r+0x82>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d100      	bne.n	80026a8 <__sflush_r+0x84>
 80026a6:	6560      	str	r0, [r4, #84]	; 0x54
 80026a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026aa:	602e      	str	r6, [r5, #0]
 80026ac:	2900      	cmp	r1, #0
 80026ae:	d0c5      	beq.n	800263c <__sflush_r+0x18>
 80026b0:	0023      	movs	r3, r4
 80026b2:	3344      	adds	r3, #68	; 0x44
 80026b4:	4299      	cmp	r1, r3
 80026b6:	d002      	beq.n	80026be <__sflush_r+0x9a>
 80026b8:	0028      	movs	r0, r5
 80026ba:	f7ff feb5 	bl	8002428 <_free_r>
 80026be:	2000      	movs	r0, #0
 80026c0:	6360      	str	r0, [r4, #52]	; 0x34
 80026c2:	e7bc      	b.n	800263e <__sflush_r+0x1a>
 80026c4:	2301      	movs	r3, #1
 80026c6:	0028      	movs	r0, r5
 80026c8:	47b8      	blx	r7
 80026ca:	1c43      	adds	r3, r0, #1
 80026cc:	d1c6      	bne.n	800265c <__sflush_r+0x38>
 80026ce:	682b      	ldr	r3, [r5, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0c3      	beq.n	800265c <__sflush_r+0x38>
 80026d4:	2b1d      	cmp	r3, #29
 80026d6:	d001      	beq.n	80026dc <__sflush_r+0xb8>
 80026d8:	2b16      	cmp	r3, #22
 80026da:	d101      	bne.n	80026e0 <__sflush_r+0xbc>
 80026dc:	602e      	str	r6, [r5, #0]
 80026de:	e7ad      	b.n	800263c <__sflush_r+0x18>
 80026e0:	89a2      	ldrh	r2, [r4, #12]
 80026e2:	2340      	movs	r3, #64	; 0x40
 80026e4:	4313      	orrs	r3, r2
 80026e6:	81a3      	strh	r3, [r4, #12]
 80026e8:	e7a9      	b.n	800263e <__sflush_r+0x1a>
 80026ea:	690e      	ldr	r6, [r1, #16]
 80026ec:	2e00      	cmp	r6, #0
 80026ee:	d0a5      	beq.n	800263c <__sflush_r+0x18>
 80026f0:	680f      	ldr	r7, [r1, #0]
 80026f2:	600e      	str	r6, [r1, #0]
 80026f4:	1bba      	subs	r2, r7, r6
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	079b      	lsls	r3, r3, #30
 80026fc:	d100      	bne.n	8002700 <__sflush_r+0xdc>
 80026fe:	694a      	ldr	r2, [r1, #20]
 8002700:	60a2      	str	r2, [r4, #8]
 8002702:	9b01      	ldr	r3, [sp, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	dd99      	ble.n	800263c <__sflush_r+0x18>
 8002708:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800270a:	0032      	movs	r2, r6
 800270c:	001f      	movs	r7, r3
 800270e:	0028      	movs	r0, r5
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	47b8      	blx	r7
 8002716:	2800      	cmp	r0, #0
 8002718:	dc06      	bgt.n	8002728 <__sflush_r+0x104>
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	2001      	movs	r0, #1
 800271e:	89a2      	ldrh	r2, [r4, #12]
 8002720:	4240      	negs	r0, r0
 8002722:	4313      	orrs	r3, r2
 8002724:	81a3      	strh	r3, [r4, #12]
 8002726:	e78a      	b.n	800263e <__sflush_r+0x1a>
 8002728:	9b01      	ldr	r3, [sp, #4]
 800272a:	1836      	adds	r6, r6, r0
 800272c:	1a1b      	subs	r3, r3, r0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	e7e7      	b.n	8002702 <__sflush_r+0xde>
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	dfbffffe 	.word	0xdfbffffe

08002738 <_fflush_r>:
 8002738:	690b      	ldr	r3, [r1, #16]
 800273a:	b570      	push	{r4, r5, r6, lr}
 800273c:	0005      	movs	r5, r0
 800273e:	000c      	movs	r4, r1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_fflush_r+0x12>
 8002744:	2500      	movs	r5, #0
 8002746:	0028      	movs	r0, r5
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	2800      	cmp	r0, #0
 800274c:	d004      	beq.n	8002758 <_fflush_r+0x20>
 800274e:	6a03      	ldr	r3, [r0, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <_fflush_r+0x20>
 8002754:	f7ff fc56 	bl	8002004 <__sinit>
 8002758:	220c      	movs	r2, #12
 800275a:	5ea3      	ldrsh	r3, [r4, r2]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f1      	beq.n	8002744 <_fflush_r+0xc>
 8002760:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002762:	07d2      	lsls	r2, r2, #31
 8002764:	d404      	bmi.n	8002770 <_fflush_r+0x38>
 8002766:	059b      	lsls	r3, r3, #22
 8002768:	d402      	bmi.n	8002770 <_fflush_r+0x38>
 800276a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800276c:	f7ff fe51 	bl	8002412 <__retarget_lock_acquire_recursive>
 8002770:	0028      	movs	r0, r5
 8002772:	0021      	movs	r1, r4
 8002774:	f7ff ff56 	bl	8002624 <__sflush_r>
 8002778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800277a:	0005      	movs	r5, r0
 800277c:	07db      	lsls	r3, r3, #31
 800277e:	d4e2      	bmi.n	8002746 <_fflush_r+0xe>
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	059b      	lsls	r3, r3, #22
 8002784:	d4df      	bmi.n	8002746 <_fflush_r+0xe>
 8002786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002788:	f7ff fe44 	bl	8002414 <__retarget_lock_release_recursive>
 800278c:	e7db      	b.n	8002746 <_fflush_r+0xe>
	...

08002790 <__swhatbuf_r>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	000e      	movs	r6, r1
 8002794:	001d      	movs	r5, r3
 8002796:	230e      	movs	r3, #14
 8002798:	5ec9      	ldrsh	r1, [r1, r3]
 800279a:	0014      	movs	r4, r2
 800279c:	b096      	sub	sp, #88	; 0x58
 800279e:	2900      	cmp	r1, #0
 80027a0:	da0c      	bge.n	80027bc <__swhatbuf_r+0x2c>
 80027a2:	89b2      	ldrh	r2, [r6, #12]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	0011      	movs	r1, r2
 80027a8:	4019      	ands	r1, r3
 80027aa:	421a      	tst	r2, r3
 80027ac:	d013      	beq.n	80027d6 <__swhatbuf_r+0x46>
 80027ae:	2100      	movs	r1, #0
 80027b0:	3b40      	subs	r3, #64	; 0x40
 80027b2:	2000      	movs	r0, #0
 80027b4:	6029      	str	r1, [r5, #0]
 80027b6:	6023      	str	r3, [r4, #0]
 80027b8:	b016      	add	sp, #88	; 0x58
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	466a      	mov	r2, sp
 80027be:	f000 f84d 	bl	800285c <_fstat_r>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	dbed      	blt.n	80027a2 <__swhatbuf_r+0x12>
 80027c6:	23f0      	movs	r3, #240	; 0xf0
 80027c8:	9901      	ldr	r1, [sp, #4]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	4019      	ands	r1, r3
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <__swhatbuf_r+0x4c>)
 80027d0:	18c9      	adds	r1, r1, r3
 80027d2:	424b      	negs	r3, r1
 80027d4:	4159      	adcs	r1, r3
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	e7ea      	b.n	80027b2 <__swhatbuf_r+0x22>
 80027dc:	ffffe000 	.word	0xffffe000

080027e0 <__smakebuf_r>:
 80027e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027e2:	2602      	movs	r6, #2
 80027e4:	898b      	ldrh	r3, [r1, #12]
 80027e6:	0005      	movs	r5, r0
 80027e8:	000c      	movs	r4, r1
 80027ea:	4233      	tst	r3, r6
 80027ec:	d006      	beq.n	80027fc <__smakebuf_r+0x1c>
 80027ee:	0023      	movs	r3, r4
 80027f0:	3347      	adds	r3, #71	; 0x47
 80027f2:	6023      	str	r3, [r4, #0]
 80027f4:	6123      	str	r3, [r4, #16]
 80027f6:	2301      	movs	r3, #1
 80027f8:	6163      	str	r3, [r4, #20]
 80027fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80027fc:	466a      	mov	r2, sp
 80027fe:	ab01      	add	r3, sp, #4
 8002800:	f7ff ffc6 	bl	8002790 <__swhatbuf_r>
 8002804:	9900      	ldr	r1, [sp, #0]
 8002806:	0007      	movs	r7, r0
 8002808:	0028      	movs	r0, r5
 800280a:	f7ff fe79 	bl	8002500 <_malloc_r>
 800280e:	2800      	cmp	r0, #0
 8002810:	d108      	bne.n	8002824 <__smakebuf_r+0x44>
 8002812:	220c      	movs	r2, #12
 8002814:	5ea3      	ldrsh	r3, [r4, r2]
 8002816:	059a      	lsls	r2, r3, #22
 8002818:	d4ef      	bmi.n	80027fa <__smakebuf_r+0x1a>
 800281a:	2203      	movs	r2, #3
 800281c:	4393      	bics	r3, r2
 800281e:	431e      	orrs	r6, r3
 8002820:	81a6      	strh	r6, [r4, #12]
 8002822:	e7e4      	b.n	80027ee <__smakebuf_r+0xe>
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	89a2      	ldrh	r2, [r4, #12]
 8002828:	6020      	str	r0, [r4, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	81a3      	strh	r3, [r4, #12]
 800282e:	9b00      	ldr	r3, [sp, #0]
 8002830:	6120      	str	r0, [r4, #16]
 8002832:	6163      	str	r3, [r4, #20]
 8002834:	9b01      	ldr	r3, [sp, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <__smakebuf_r+0x74>
 800283a:	0028      	movs	r0, r5
 800283c:	230e      	movs	r3, #14
 800283e:	5ee1      	ldrsh	r1, [r4, r3]
 8002840:	f000 f81e 	bl	8002880 <_isatty_r>
 8002844:	2800      	cmp	r0, #0
 8002846:	d005      	beq.n	8002854 <__smakebuf_r+0x74>
 8002848:	2303      	movs	r3, #3
 800284a:	89a2      	ldrh	r2, [r4, #12]
 800284c:	439a      	bics	r2, r3
 800284e:	3b02      	subs	r3, #2
 8002850:	4313      	orrs	r3, r2
 8002852:	81a3      	strh	r3, [r4, #12]
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	433b      	orrs	r3, r7
 8002858:	81a3      	strh	r3, [r4, #12]
 800285a:	e7ce      	b.n	80027fa <__smakebuf_r+0x1a>

0800285c <_fstat_r>:
 800285c:	2300      	movs	r3, #0
 800285e:	b570      	push	{r4, r5, r6, lr}
 8002860:	4d06      	ldr	r5, [pc, #24]	; (800287c <_fstat_r+0x20>)
 8002862:	0004      	movs	r4, r0
 8002864:	0008      	movs	r0, r1
 8002866:	0011      	movs	r1, r2
 8002868:	602b      	str	r3, [r5, #0]
 800286a:	f7fd ffb4 	bl	80007d6 <_fstat>
 800286e:	1c43      	adds	r3, r0, #1
 8002870:	d103      	bne.n	800287a <_fstat_r+0x1e>
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d000      	beq.n	800287a <_fstat_r+0x1e>
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	20000370 	.word	0x20000370

08002880 <_isatty_r>:
 8002880:	2300      	movs	r3, #0
 8002882:	b570      	push	{r4, r5, r6, lr}
 8002884:	4d06      	ldr	r5, [pc, #24]	; (80028a0 <_isatty_r+0x20>)
 8002886:	0004      	movs	r4, r0
 8002888:	0008      	movs	r0, r1
 800288a:	602b      	str	r3, [r5, #0]
 800288c:	f7fd ffa8 	bl	80007e0 <_isatty>
 8002890:	1c43      	adds	r3, r0, #1
 8002892:	d103      	bne.n	800289c <_isatty_r+0x1c>
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d000      	beq.n	800289c <_isatty_r+0x1c>
 800289a:	6023      	str	r3, [r4, #0]
 800289c:	bd70      	pop	{r4, r5, r6, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	20000370 	.word	0x20000370

080028a4 <_sbrk_r>:
 80028a4:	2300      	movs	r3, #0
 80028a6:	b570      	push	{r4, r5, r6, lr}
 80028a8:	4d06      	ldr	r5, [pc, #24]	; (80028c4 <_sbrk_r+0x20>)
 80028aa:	0004      	movs	r4, r0
 80028ac:	0008      	movs	r0, r1
 80028ae:	602b      	str	r3, [r5, #0]
 80028b0:	f7fd ff9a 	bl	80007e8 <_sbrk>
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	d103      	bne.n	80028c0 <_sbrk_r+0x1c>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d000      	beq.n	80028c0 <_sbrk_r+0x1c>
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20000370 	.word	0x20000370

080028c8 <_init>:
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ce:	bc08      	pop	{r3}
 80028d0:	469e      	mov	lr, r3
 80028d2:	4770      	bx	lr

080028d4 <_fini>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr
