
FDCAN_Bootloader_Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f8  080060f8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006100  08006100  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a530  2000006c  08006174  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a59c  08006174  0002a59c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107aa  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac5  00000000  00000000  00030881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00033348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2f  00000000  00000000  000340b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d838  00000000  00000000  00034adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117ca  00000000  00000000  00052317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8416  00000000  00000000  00063ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003674  00000000  00000000  0011bef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011f56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f38 	.word	0x08005f38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08005f38 	.word	0x08005f38

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_FDCAN1_Init+0x8c>)
 8000638:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000642:	22c0      	movs	r2, #192	; 0xc0
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000650:	2201      	movs	r2, #1
 8000652:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000656:	2200      	movs	r2, #0
 8000658:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800065c:	2200      	movs	r2, #0
 800065e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000662:	2208      	movs	r2, #8
 8000664:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000668:	2203      	movs	r2, #3
 800066a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800066e:	220c      	movs	r2, #12
 8000670:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000674:	2203      	movs	r2, #3
 8000676:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800067a:	2202      	movs	r2, #2
 800067c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000680:	2203      	movs	r2, #3
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000686:	220c      	movs	r2, #12
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800068c:	2203      	movs	r2, #3
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000692:	2201      	movs	r2, #1
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 800069e:	2200      	movs	r2, #0
 80006a0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <MX_FDCAN1_Init+0x88>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fddf 	bl	8001268 <HAL_FDCAN_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80006ae:	f000 f993 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000a0 	.word	0x200000a0
 80006bc:	40006400 	.word	0x40006400

080006c0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b09d      	sub	sp, #116	; 0x74
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	235c      	movs	r3, #92	; 0x5c
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f004 fe4e 	bl	8005374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	2410      	movs	r4, #16
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	234c      	movs	r3, #76	; 0x4c
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f004 fe46 	bl	8005374 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <HAL_FDCAN_MspInit+0xc8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d146      	bne.n	8000780 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0492      	lsls	r2, r2, #18
 80006f8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	f002 fb64 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800070c:	f000 f964 	bl	80009d8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	0149      	lsls	r1, r1, #5
 800071a:	430a      	orrs	r2, r1
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	015b      	lsls	r3, r3, #5
 8000726:	4013      	ands	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 800072e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 8000732:	2108      	movs	r1, #8
 8000734:	430a      	orrs	r2, r1
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_FDCAN_MspInit+0xcc>)
 800073a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073c:	2208      	movs	r2, #8
 800073e:	4013      	ands	r3, r2
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000744:	215c      	movs	r1, #92	; 0x5c
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2203      	movs	r2, #3
 800074a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2202      	movs	r2, #2
 8000750:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2203      	movs	r2, #3
 8000762:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000764:	187b      	adds	r3, r7, r1
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_FDCAN_MspInit+0xd0>)
 8000768:	0019      	movs	r1, r3
 800076a:	0010      	movs	r0, r2
 800076c:	f001 fc50 	bl	8002010 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2015      	movs	r0, #21
 8000776:	f000 fc7d 	bl	8001074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800077a:	2015      	movs	r0, #21
 800077c:	f000 fc8f 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b01d      	add	sp, #116	; 0x74
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	40006400 	.word	0x40006400
 800078c:	40021000 	.word	0x40021000
 8000790:	50000c00 	.word	0x50000c00

08000794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	2414      	movs	r4, #20
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2314      	movs	r3, #20
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f004 fde5 	bl	8005374 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007b0:	2120      	movs	r1, #32
 80007b2:	430a      	orrs	r2, r1
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	2220      	movs	r2, #32
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c6:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
 80007ce:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2202      	movs	r2, #2
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b2f      	ldr	r3, [pc, #188]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_GPIO_Init+0x11c>)
 80007f8:	2104      	movs	r1, #4
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2204      	movs	r2, #4
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_GPIO_Init+0x11c>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000810:	2108      	movs	r1, #8
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2208      	movs	r2, #8
 800081c:	4013      	ands	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000822:	4924      	ldr	r1, [pc, #144]	; (80008b4 <MX_GPIO_Init+0x120>)
 8000824:	23a0      	movs	r3, #160	; 0xa0
 8000826:	05db      	lsls	r3, r3, #23
 8000828:	2200      	movs	r2, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fd5c 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x124>)
 8000832:	2200      	movs	r2, #0
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fd56 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <MX_GPIO_Init+0x120>)
 8000840:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2201      	movs	r2, #1
 8000846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	193a      	adds	r2, r7, r4
 8000856:	23a0      	movs	r3, #160	; 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fbd7 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2201      	movs	r2, #1
 8000872:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000874:	193b      	adds	r3, r7, r4
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <MX_GPIO_Init+0x124>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f001 fbc8 	bl	8002010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 800089a:	187b      	adds	r3, r7, r1
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x124>)
 800089e:	0019      	movs	r1, r3
 80008a0:	0010      	movs	r0, r2
 80008a2:	f001 fbb5 	bl	8002010 <HAL_GPIO_Init>

}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b00b      	add	sp, #44	; 0x2c
 80008ac:	bd90      	pop	{r4, r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000
 80008b4:	00008203 	.word	0x00008203
 80008b8:	50000800 	.word	0x50000800

080008bc <__io_putchar>:

#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008c4:	2301      	movs	r3, #1
 80008c6:	425b      	negs	r3, r3
 80008c8:	1d39      	adds	r1, r7, #4
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <__io_putchar+0x20>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	f002 fd11 	bl	80032f4 <HAL_UART_Transmit>
    return ch;
 80008d2:	687b      	ldr	r3, [r7, #4]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000108 	.word	0x20000108

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fa59 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f817 	bl	800091c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  int i=0,ack;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f7ff ff4f 	bl	8000794 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80008f6:	f7ff fe9b 	bl	8000630 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80008fa:	f000 f96d 	bl	8000bd8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("host\n");
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <main+0x38>)
 8000900:	0018      	movs	r0, r3
 8000902:	f004 fc3b 	bl	800517c <puts>
  FDCAN_Enable();
 8000906:	f004 f831 	bl	800496c <FDCAN_Enable>
  FDCAN_GetCommand();
 800090a:	f004 f9c1 	bl	8004c90 <FDCAN_GetCommand>
  FDCAN_GetID();
 800090e:	f004 fa3b 	bl	8004d88 <FDCAN_GetID>
  FDCAN_ReadMemory();
 8000912:	f004 fa89 	bl	8004e28 <FDCAN_ReadMemory>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000916:	e7fe      	b.n	8000916 <main+0x36>
 8000918:	08005f50 	.word	0x08005f50

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b095      	sub	sp, #84	; 0x54
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	2414      	movs	r4, #20
 8000924:	193b      	adds	r3, r7, r4
 8000926:	0018      	movs	r0, r3
 8000928:	233c      	movs	r3, #60	; 0x3c
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f004 fd21 	bl	8005374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	0018      	movs	r0, r3
 8000936:	2310      	movs	r3, #16
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f004 fd1a 	bl	8005374 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	0018      	movs	r0, r3
 8000946:	f001 fced 	bl	8002324 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2202      	movs	r2, #2
 800094e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000958:	0021      	movs	r1, r4
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2202      	movs	r2, #2
 800096a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2202      	movs	r2, #2
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2208      	movs	r2, #8
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	0292      	lsls	r2, r2, #10
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	0492      	lsls	r2, r2, #18
 800098c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0592      	lsls	r2, r2, #22
 8000994:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	187b      	adds	r3, r7, r1
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fd0f 	bl	80023bc <HAL_RCC_OscConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009a2:	f000 f819 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2202      	movs	r2, #2
 80009b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2102      	movs	r1, #2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 f85a 	bl	8002a7c <HAL_RCC_ClockConfig>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009cc:	f000 f804 	bl	80009d8 <Error_Handler>
  }
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b015      	add	sp, #84	; 0x54
 80009d6:	bd90      	pop	{r4, r7, pc}

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_MspInit+0x4c>)
 80009ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	641a      	str	r2, [r3, #64]	; 0x40
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0549      	lsls	r1, r1, #21
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_MspInit+0x4c>)
 8000a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	055b      	lsls	r3, r3, #21
 8000a18:	4013      	ands	r3, r2
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000a1e:	23c0      	movs	r3, #192	; 0xc0
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fa64 	bl	8000ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 fa0a 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f001 f85e 	bl	8001b2c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200000a0 	.word	0x200000a0

08000a7c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fcda 	bl	800343c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	20000108 	.word	0x20000108

08000a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa6:	e000      	b.n	8000aaa <_read+0x16>
 8000aa8:	bf00      	nop
 8000aaa:	0001      	movs	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
  }

  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b006      	add	sp, #24
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e009      	b.n	8000af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fee7 	bl	80008bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf1      	blt.n	8000ae0 <_write+0x12>
  }
  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	0018      	movs	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b006      	add	sp, #24
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:

int _close(int file)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	425b      	negs	r3, r3
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	0192      	lsls	r2, r2, #6
 8000b2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_isatty>:

int _isatty(int file)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f004 fc46 	bl	8005420 <__errno>
 8000b94:	0003      	movs	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	18d2      	adds	r2, r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b006      	add	sp, #24
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20024000 	.word	0x20024000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	20000104 	.word	0x20000104
 8000bc8:	2000a5a0 	.word	0x2000a5a0

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000bde:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <MX_USART3_UART_Init+0x98>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000be4:	22e1      	movs	r2, #225	; 0xe1
 8000be6:	0252      	lsls	r2, r2, #9
 8000be8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 fb10 	bl	8003248 <HAL_UART_Init>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c2c:	f7ff fed4 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	0018      	movs	r0, r3
 8000c36:	f003 fd63 	bl	8004700 <HAL_UARTEx_SetTxFifoThreshold>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f7ff fecb 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f003 fd9a 	bl	8004780 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c50:	f7ff fec2 	bl	80009d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_USART3_UART_Init+0x94>)
 8000c56:	0018      	movs	r0, r3
 8000c58:	f003 fd18 	bl	800468c <HAL_UARTEx_DisableFifoMode>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f7ff feba 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000108 	.word	0x20000108
 8000c70:	40004800 	.word	0x40004800

08000c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b09d      	sub	sp, #116	; 0x74
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	235c      	movs	r3, #92	; 0x5c
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	2314      	movs	r3, #20
 8000c84:	001a      	movs	r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	f004 fb74 	bl	8005374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	2410      	movs	r4, #16
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	234c      	movs	r3, #76	; 0x4c
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f004 fb6c 	bl	8005374 <memset>
  if(uartHandle->Instance==USART3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <HAL_UART_MspInit+0xc8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d146      	bne.n	8000d34 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	2204      	movs	r2, #4
 8000caa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 f88b 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff fe8b 	bl	80009d8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	02c9      	lsls	r1, r1, #11
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	02db      	lsls	r3, r3, #11
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0xcc>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_UART_MspInit+0xcc>)
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0xcc>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	2202      	movs	r2, #2
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cf6:	215c      	movs	r1, #92	; 0x5c
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	22c0      	movs	r2, #192	; 0xc0
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2202      	movs	r2, #2
 8000d04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2204      	movs	r2, #4
 8000d16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_UART_MspInit+0xd0>)
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0010      	movs	r0, r2
 8000d20:	f001 f976 	bl	8002010 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 2, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2102      	movs	r1, #2
 8000d28:	201d      	movs	r0, #29
 8000d2a:	f000 f9a3 	bl	8001074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000d2e:	201d      	movs	r0, #29
 8000d30:	f000 f9b5 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b01d      	add	sp, #116	; 0x74
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	40021000 	.word	0x40021000
 8000d44:	50000400 	.word	0x50000400

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff ff3e 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f004 fb59 	bl	800542c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d7a:	f7ff fdb1 	bl	80008e0 <main>

08000d7e <LoopForever>:

LoopForever:
  b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d8c:	08006108 	.word	0x08006108
  ldr r2, =_sbss
 8000d90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d94:	2000a59c 	.word	0x2000a59c

08000d98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_COMP_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x3c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Init+0x3c>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0049      	lsls	r1, r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f810 	bl	8000ddc <HAL_InitTick>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff fe0c 	bl	80009e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_InitTick+0x88>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_InitTick+0x8c>)
 8000df6:	681c      	ldr	r4, [r3, #0]
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_InitTick+0x88>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	23fa      	movs	r3, #250	; 0xfa
 8000e00:	0098      	lsls	r0, r3, #2
 8000e02:	f7ff f989 	bl	8000118 <__udivsi3>
 8000e06:	0003      	movs	r3, r0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f7ff f984 	bl	8000118 <__udivsi3>
 8000e10:	0003      	movs	r3, r0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f953 	bl	80010be <HAL_SYSTICK_Config>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d112      	bne.n	8000e42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d80a      	bhi.n	8000e38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2301      	movs	r3, #1
 8000e26:	425b      	negs	r3, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f922 	bl	8001074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_InitTick+0x90>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e00d      	b.n	8000e54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e008      	b.n	8000e54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e42:	230f      	movs	r3, #15
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e003      	b.n	8000e54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	781b      	ldrb	r3, [r3, #0]
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b005      	add	sp, #20
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_IncTick+0x20>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	18d2      	adds	r2, r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_IncTick+0x20>)
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	2000019c 	.word	0x2000019c

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <HAL_GetTick+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	2000019c 	.word	0x2000019c

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff fff0 	bl	8000e94 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	f7ff ffe0 	bl	8000e94 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	0019      	movs	r1, r3
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40010000 	.word	0x40010000
 8000f18:	fffff9ff 	.word	0xfffff9ff

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	0002      	movs	r2, r0
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2e:	d809      	bhi.n	8000f44 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	001a      	movs	r2, r3
 8000f36:	231f      	movs	r3, #31
 8000f38:	401a      	ands	r2, r3
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_EnableIRQ+0x30>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b7f      	cmp	r3, #127	; 0x7f
 8000f64:	d828      	bhi.n	8000fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f66:	4a2f      	ldr	r2, [pc, #188]	; (8001024 <__NVIC_SetPriority+0xd4>)
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	33c0      	adds	r3, #192	; 0xc0
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	589b      	ldr	r3, [r3, r2]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <__NVIC_SetPriority+0xd4>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	33c0      	adds	r3, #192	; 0xc0
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fb6:	e031      	b.n	800101c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3306      	adds	r3, #6
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	18d3      	adds	r3, r2, r3
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1dfa      	adds	r2, r7, #7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	2203      	movs	r2, #3
 8000fda:	400a      	ands	r2, r1
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	21ff      	movs	r1, #255	; 0xff
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4003      	ands	r3, r0
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	001c      	movs	r4, r3
 8001008:	230f      	movs	r3, #15
 800100a:	4023      	ands	r3, r4
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	430a      	orrs	r2, r1
 8001012:	3306      	adds	r3, #6
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	18c3      	adds	r3, r0, r3
 8001018:	3304      	adds	r3, #4
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	045b      	lsls	r3, r3, #17
 800103c:	429a      	cmp	r2, r3
 800103e:	d301      	bcc.n	8001044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001040:	2301      	movs	r3, #1
 8001042:	e010      	b.n	8001066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <SysTick_Config+0x44>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	3a01      	subs	r2, #1
 800104a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2103      	movs	r1, #3
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff ff7c 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x44>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x44>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	210f      	movs	r1, #15
 8001080:	187b      	adds	r3, r7, r1
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	0002      	movs	r2, r0
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ff33 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b002      	add	sp, #8
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff ffaf 	bl	800102c <SysTick_Config>
 80010ce:	0003      	movs	r3, r0
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e04f      	b.n	800118a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2225      	movs	r2, #37	; 0x25
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2204      	movs	r2, #4
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e040      	b.n	800118a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	210e      	movs	r1, #14
 8001114:	438a      	bics	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001122:	491c      	ldr	r1, [pc, #112]	; (8001194 <HAL_DMA_Abort+0xbc>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	438a      	bics	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	221c      	movs	r2, #28
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	2101      	movs	r1, #1
 8001146:	4091      	lsls	r1, r2
 8001148:	000a      	movs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001154:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00c      	beq.n	8001178 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001168:	490a      	ldr	r1, [pc, #40]	; (8001194 <HAL_DMA_Abort+0xbc>)
 800116a:	400a      	ands	r2, r1
 800116c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001176:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2225      	movs	r2, #37	; 0x25
 800117c:	2101      	movs	r1, #1
 800117e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2224      	movs	r2, #36	; 0x24
 8001184:	2100      	movs	r1, #0
 8001186:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	fffffeff 	.word	0xfffffeff

08001198 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	210f      	movs	r1, #15
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2225      	movs	r2, #37	; 0x25
 80011ac:	5c9b      	ldrb	r3, [r3, r2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d006      	beq.n	80011c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e048      	b.n	8001254 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	210e      	movs	r1, #14
 80011ce:	438a      	bics	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	438a      	bics	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	491d      	ldr	r1, [pc, #116]	; (8001264 <HAL_DMA_Abort_IT+0xcc>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	221c      	movs	r2, #28
 80011f8:	401a      	ands	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	2101      	movs	r1, #1
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800120e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00c      	beq.n	8001232 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001222:	4910      	ldr	r1, [pc, #64]	; (8001264 <HAL_DMA_Abort_IT+0xcc>)
 8001224:	400a      	ands	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001230:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2225      	movs	r2, #37	; 0x25
 8001236:	2101      	movs	r1, #1
 8001238:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2224      	movs	r2, #36	; 0x24
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	0010      	movs	r0, r2
 8001252:	4798      	blx	r3
    }
  }
  return status;
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	781b      	ldrb	r3, [r3, #0]
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	fffffeff 	.word	0xfffffeff

08001268 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e14e      	b.n	8001518 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	225c      	movs	r2, #92	; 0x5c
 800127e:	5c9b      	ldrb	r3, [r3, r2]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d107      	bne.n	8001296 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	225d      	movs	r2, #93	; 0x5d
 800128a:	2100      	movs	r1, #0
 800128c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fa15 	bl	80006c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2110      	movs	r1, #16
 80012a2:	438a      	bics	r2, r1
 80012a4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a6:	f7ff fdf5 	bl	8000e94 <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012ae:	e012      	b.n	80012d6 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012b0:	f7ff fdf0 	bl	8000e94 <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d90b      	bls.n	80012d6 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	2201      	movs	r2, #1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	225c      	movs	r2, #92	; 0x5c
 80012ce:	2103      	movs	r1, #3
 80012d0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e120      	b.n	8001518 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2208      	movs	r2, #8
 80012de:	4013      	ands	r3, r2
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d0e5      	beq.n	80012b0 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2101      	movs	r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f4:	f7ff fdce 	bl	8000e94 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80012fc:	e012      	b.n	8001324 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80012fe:	f7ff fdc9 	bl	8000e94 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b0a      	cmp	r3, #10
 800130a:	d90b      	bls.n	8001324 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001310:	2201      	movs	r2, #1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	225c      	movs	r2, #92	; 0x5c
 800131c:	2103      	movs	r1, #3
 800131e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0f9      	b.n	8001518 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2201      	movs	r2, #1
 800132c:	4013      	ands	r3, r2
 800132e:	d0e6      	beq.n	80012fe <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2102      	movs	r1, #2
 800133c:	430a      	orrs	r2, r1
 800133e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a76      	ldr	r2, [pc, #472]	; (8001520 <HAL_FDCAN_Init+0x2b8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d103      	bne.n	8001352 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800134a:	4a76      	ldr	r2, [pc, #472]	; (8001524 <HAL_FDCAN_Init+0x2bc>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7c1b      	ldrb	r3, [r3, #16]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699a      	ldr	r2, [r3, #24]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	438a      	bics	r2, r1
 8001368:	619a      	str	r2, [r3, #24]
 800136a:	e007      	b.n	800137c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2140      	movs	r1, #64	; 0x40
 8001378:	430a      	orrs	r2, r1
 800137a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7c5b      	ldrb	r3, [r3, #17]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d109      	bne.n	8001398 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	01c9      	lsls	r1, r1, #7
 8001392:	430a      	orrs	r2, r1
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	e007      	b.n	80013a8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4961      	ldr	r1, [pc, #388]	; (8001528 <HAL_FDCAN_Init+0x2c0>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7c9b      	ldrb	r3, [r3, #18]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d108      	bne.n	80013c2 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	495c      	ldr	r1, [pc, #368]	; (800152c <HAL_FDCAN_Init+0x2c4>)
 80013bc:	400a      	ands	r2, r1
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	e008      	b.n	80013d4 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0149      	lsls	r1, r1, #5
 80013d0:	430a      	orrs	r2, r1
 80013d2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_FDCAN_Init+0x2c8>)
 80013dc:	4013      	ands	r3, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	21a4      	movs	r1, #164	; 0xa4
 80013f8:	438a      	bics	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2110      	movs	r1, #16
 8001408:	438a      	bics	r2, r1
 800140a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d108      	bne.n	8001426 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2104      	movs	r1, #4
 8001420:	430a      	orrs	r2, r1
 8001422:	619a      	str	r2, [r3, #24]
 8001424:	e02c      	b.n	8001480 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d028      	beq.n	8001480 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d01c      	beq.n	8001470 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	430a      	orrs	r2, r1
 8001444:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2110      	movs	r1, #16
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d110      	bne.n	8001480 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2120      	movs	r1, #32
 800146a:	430a      	orrs	r2, r1
 800146c:	619a      	str	r2, [r3, #24]
 800146e:	e007      	b.n	8001480 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2120      	movs	r1, #32
 800147c:	430a      	orrs	r2, r1
 800147e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	3b01      	subs	r3, #1
 8001486:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
 800148c:	3b01      	subs	r3, #1
 800148e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001490:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001498:	431a      	orrs	r2, r3
 800149a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80014a8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014aa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	23c0      	movs	r3, #192	; 0xc0
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d115      	bne.n	80014e4 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	3b01      	subs	r3, #1
 80014c4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014c6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	3b01      	subs	r3, #1
 80014ce:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80014d0:	431a      	orrs	r2, r3
 80014d2:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	3b01      	subs	r3, #1
 80014da:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80014e0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80014e2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	22c0      	movs	r2, #192	; 0xc0
 80014ea:	5899      	ldr	r1, [r3, r2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	21c0      	movs	r1, #192	; 0xc0
 80014f8:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f000 fc9f 	bl	8001e40 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	225c      	movs	r2, #92	; 0x5c
 8001512:	2101      	movs	r1, #1
 8001514:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40006400 	.word	0x40006400
 8001524:	40006500 	.word	0x40006500
 8001528:	ffffbfff 	.word	0xffffbfff
 800152c:	ffffefff 	.word	0xffffefff
 8001530:	fffffcff 	.word	0xfffffcff

08001534 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800153e:	2017      	movs	r0, #23
 8001540:	183b      	adds	r3, r7, r0
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	215c      	movs	r1, #92	; 0x5c
 8001546:	5c52      	ldrb	r2, [r2, r1]
 8001548:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800154a:	0002      	movs	r2, r0
 800154c:	18bb      	adds	r3, r7, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d003      	beq.n	800155c <HAL_FDCAN_ConfigFilter+0x28>
 8001554:	18bb      	adds	r3, r7, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d13d      	bne.n	80015d8 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d119      	bne.n	8001598 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001570:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001578:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	075a      	lsls	r2, r3, #29
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	079a      	lsls	r2, r3, #30
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	18d3      	adds	r3, r2, r3
 80015c0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3304      	adds	r3, #4
 80015cc:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e006      	b.n	80015e6 <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	2202      	movs	r2, #2
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
  }
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b006      	add	sp, #24
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	225c      	movs	r2, #92	; 0x5c
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d108      	bne.n	8001618 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	0219      	lsls	r1, r3, #8
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	430a      	orrs	r2, r1
 8001612:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e006      	b.n	8001626 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161c:	2204      	movs	r2, #4
 800161e:	431a      	orrs	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
  }
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b004      	add	sp, #16
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	225c      	movs	r2, #92	; 0x5c
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10a      	bne.n	8001658 <HAL_FDCAN_EnableTxDelayCompensation+0x2a>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0409      	lsls	r1, r1, #16
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	e006      	b.n	8001666 <HAL_FDCAN_EnableTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	2204      	movs	r2, #4
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
  }
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	225c      	movs	r2, #92	; 0x5c
 800167a:	5c9b      	ldrb	r3, [r3, r2]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d110      	bne.n	80016a4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	225c      	movs	r2, #92	; 0x5c
 8001686:	2102      	movs	r1, #2
 8001688:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	438a      	bics	r2, r1
 8001698:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e006      	b.n	80016b2 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a8:	2204      	movs	r2, #4
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
  }
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	225c      	movs	r2, #92	; 0x5c
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d12d      	bne.n	800172e <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	22c4      	movs	r2, #196	; 0xc4
 80016d8:	589a      	ldr	r2, [r3, r2]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	039b      	lsls	r3, r3, #14
 80016de:	4013      	ands	r3, r2
 80016e0:	d008      	beq.n	80016f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	431a      	orrs	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e023      	b.n	800173c <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	22c4      	movs	r2, #196	; 0xc4
 80016fa:	589b      	ldr	r3, [r3, r2]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	2203      	movs	r2, #3
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fc04 	bl	8001f18 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4091      	lsls	r1, r2
 800171a:	000a      	movs	r2, r1
 800171c:	21cc      	movs	r1, #204	; 0xcc
 800171e:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001720:	2201      	movs	r2, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	409a      	lsls	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e006      	b.n	800173c <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	2208      	movs	r2, #8
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
  }
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b006      	add	sp, #24
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001756:	201b      	movs	r0, #27
 8001758:	183b      	adds	r3, r7, r0
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	215c      	movs	r1, #92	; 0x5c
 800175e:	5c52      	ldrb	r2, [r2, r1]
 8001760:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001762:	183b      	adds	r3, r7, r0
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d000      	beq.n	800176c <HAL_FDCAN_GetRxMessage+0x28>
 800176a:	e0ec      	b.n	8001946 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b40      	cmp	r3, #64	; 0x40
 8001770:	d137      	bne.n	80017e2 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2290      	movs	r2, #144	; 0x90
 8001778:	589b      	ldr	r3, [r3, r2]
 800177a:	220f      	movs	r2, #15
 800177c:	4013      	ands	r3, r2
 800177e:	d108      	bne.n	8001792 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0052      	lsls	r2, r2, #1
 8001788:	431a      	orrs	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0e0      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2290      	movs	r2, #144	; 0x90
 8001798:	589b      	ldr	r3, [r3, r2]
 800179a:	0e1b      	lsrs	r3, r3, #24
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10a      	bne.n	80017ba <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	589b      	ldr	r3, [r3, r2]
 80017ac:	0a5b      	lsrs	r3, r3, #9
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2290      	movs	r2, #144	; 0x90
 80017c0:	589b      	ldr	r3, [r3, r2]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	2203      	movs	r2, #3
 80017c6:	4013      	ands	r3, r2
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	18d3      	adds	r3, r2, r3
 80017cc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	0013      	movs	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	189b      	adds	r3, r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	18cb      	adds	r3, r1, r3
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
 80017e0:	e036      	b.n	8001850 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2298      	movs	r2, #152	; 0x98
 80017e8:	589b      	ldr	r3, [r3, r2]
 80017ea:	220f      	movs	r2, #15
 80017ec:	4013      	ands	r3, r2
 80017ee:	d108      	bne.n	8001802 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	0052      	lsls	r2, r2, #1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0a8      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2298      	movs	r2, #152	; 0x98
 8001808:	589b      	ldr	r3, [r3, r2]
 800180a:	0e1b      	lsrs	r3, r3, #24
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10a      	bne.n	800182a <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	589b      	ldr	r3, [r3, r2]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	2201      	movs	r2, #1
 8001820:	4013      	ands	r3, r2
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2298      	movs	r2, #152	; 0x98
 8001830:	589b      	ldr	r3, [r3, r2]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	2203      	movs	r2, #3
 8001836:	4013      	ands	r3, r2
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	18d3      	adds	r3, r2, r3
 800183c:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	0013      	movs	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	189b      	adds	r3, r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	18cb      	adds	r3, r1, r3
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	05db      	lsls	r3, r3, #23
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	055b      	lsls	r3, r3, #21
 800186e:	0d5a      	lsrs	r2, r3, #21
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e005      	b.n	8001882 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	059b      	lsls	r3, r3, #22
 800188a:	401a      	ands	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0fdb      	lsrs	r3, r3, #31
 8001896:	07da      	lsls	r2, r3, #31
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3304      	adds	r3, #4
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	0c1a      	lsrs	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	220f      	movs	r2, #15
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	035b      	lsls	r3, r3, #13
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	039b      	lsls	r3, r3, #14
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e1b      	lsrs	r3, r3, #24
 80018de:	227f      	movs	r2, #127	; 0x7f
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0fda      	lsrs	r2, r3, #31
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	3304      	adds	r3, #4
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
 80018fe:	e00a      	b.n	8001916 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	18d2      	adds	r2, r2, r3
 8001906:	6839      	ldr	r1, [r7, #0]
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	18cb      	adds	r3, r1, r3
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	3301      	adds	r3, #1
 8001914:	623b      	str	r3, [r7, #32]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_FDCAN_GetRxMessage+0x218>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	001a      	movs	r2, r3
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	4293      	cmp	r3, r2
 8001924:	d3ec      	bcc.n	8001900 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b40      	cmp	r3, #64	; 0x40
 800192a:	d105      	bne.n	8001938 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2194      	movs	r1, #148	; 0x94
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	505a      	str	r2, [r3, r1]
 8001936:	e004      	b.n	8001942 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	219c      	movs	r1, #156	; 0x9c
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e006      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	2208      	movs	r2, #8
 800194c:	431a      	orrs	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
  }
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b00a      	add	sp, #40	; 0x28
 800195a:	bd80      	pop	{r7, pc}
 800195c:	0800608c 	.word	0x0800608c

08001960 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	22c4      	movs	r2, #196	; 0xc4
 800196e:	589b      	ldr	r3, [r3, r2]
 8001970:	2207      	movs	r2, #7
 8001972:	4013      	ands	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800198c:	2017      	movs	r0, #23
 800198e:	183b      	adds	r3, r7, r0
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	215c      	movs	r1, #92	; 0x5c
 8001994:	5c52      	ldrb	r2, [r2, r1]
 8001996:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001998:	0002      	movs	r2, r0
 800199a:	18bb      	adds	r3, r7, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d004      	beq.n	80019ac <HAL_FDCAN_ActivateNotification+0x2c>
 80019a2:	18bb      	adds	r3, r7, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d000      	beq.n	80019ac <HAL_FDCAN_ActivateNotification+0x2c>
 80019aa:	e0b4      	b.n	8001b16 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2207      	movs	r2, #7
 80019b8:	4013      	ands	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2201      	movs	r2, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	d034      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2238      	movs	r2, #56	; 0x38
 80019c8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80019ca:	d003      	beq.n	80019d4 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d02c      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	23e0      	movs	r3, #224	; 0xe0
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80019dc:	d003      	beq.n	80019e6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2204      	movs	r2, #4
 80019e2:	4013      	ands	r3, r2
 80019e4:	d023      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	23f0      	movs	r3, #240	; 0xf0
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80019ee:	d003      	beq.n	80019f8 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2208      	movs	r2, #8
 80019f4:	4013      	ands	r3, r2
 80019f6:	d01a      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	23e0      	movs	r3, #224	; 0xe0
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a00:	d003      	beq.n	8001a0a <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2210      	movs	r2, #16
 8001a06:	4013      	ands	r3, r2
 8001a08:	d011      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	23c0      	movs	r3, #192	; 0xc0
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a12:	d003      	beq.n	8001a1c <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2220      	movs	r2, #32
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d008      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	23fc      	movs	r3, #252	; 0xfc
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001a24:	d00b      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2240      	movs	r2, #64	; 0x40
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d107      	bne.n	8001a3e <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2207      	movs	r2, #7
 8001a42:	4013      	ands	r3, r2
 8001a44:	d003      	beq.n	8001a4e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d134      	bne.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2238      	movs	r2, #56	; 0x38
 8001a52:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001a54:	d003      	beq.n	8001a5e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d12c      	bne.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	23e0      	movs	r3, #224	; 0xe0
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001a66:	d003      	beq.n	8001a70 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	23f0      	movs	r3, #240	; 0xf0
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001a78:	d003      	beq.n	8001a82 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d11a      	bne.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	23e0      	movs	r3, #224	; 0xe0
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001a8a:	d003      	beq.n	8001a94 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2210      	movs	r2, #16
 8001a90:	4013      	ands	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	029b      	lsls	r3, r3, #10
 8001a9a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a9c:	d003      	beq.n	8001aa6 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d108      	bne.n	8001ab8 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	23fc      	movs	r3, #252	; 0xfc
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001aae:	d00b      	beq.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d007      	beq.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	4013      	ands	r3, r2
 8001ace:	d009      	beq.n	8001ae4 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	22dc      	movs	r2, #220	; 0xdc
 8001ad6:	5899      	ldr	r1, [r3, r2]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	21dc      	movs	r1, #220	; 0xdc
 8001ae2:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	22e0      	movs	r2, #224	; 0xe0
 8001af4:	5899      	ldr	r1, [r3, r2]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	21e0      	movs	r1, #224	; 0xe0
 8001b00:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e006      	b.n	8001b24 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
  }
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b006      	add	sp, #24
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3a:	23e0      	movs	r3, #224	; 0xe0
 8001b3c:	015b      	lsls	r3, r3, #5
 8001b3e:	4013      	ands	r3, r2
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	4013      	ands	r3, r2
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	2238      	movs	r2, #56	; 0x38
 8001b6e:	4013      	ands	r3, r2
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b84:	23f1      	movs	r3, #241	; 0xf1
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	4013      	ands	r3, r2
 8001b8a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	4013      	ands	r3, r2
 8001b96:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b9e:	23e0      	movs	r3, #224	; 0xe0
 8001ba0:	031b      	lsls	r3, r3, #12
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc0:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d00b      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2240      	movs	r2, #64	; 0x40
 8001bd8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f916 	bl	8001e0e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d01b      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d016      	beq.n	8001c24 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	22d8      	movs	r2, #216	; 0xd8
 8001bfc:	589b      	ldr	r3, [r3, r2]
 8001bfe:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	22e0      	movs	r2, #224	; 0xe0
 8001c06:	589a      	ldr	r2, [r3, r2]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 f8dc 	bl	8001ddc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0011      	movs	r1, r2
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f000 f8ac 	bl	8001d96 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0011      	movs	r1, r2
 8001c52:	0018      	movs	r0, r3
 8001c54:	f002 ff88 	bl	8004b68 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f89b 	bl	8001da8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d008      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 f891 	bl	8001dba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d019      	beq.n	8001cd4 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d015      	beq.n	8001cd4 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	22d4      	movs	r2, #212	; 0xd4
 8001cae:	589b      	ldr	r3, [r3, r2]
 8001cb0:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	22dc      	movs	r2, #220	; 0xdc
 8001cb8:	589a      	ldr	r2, [r3, r2]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f87b 	bl	8001dca <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	019b      	lsls	r3, r3, #6
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d008      	beq.n	8001cfa <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0192      	lsls	r2, r2, #6
 8001cf0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f87a 	bl	8001dee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	4013      	ands	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d008      	beq.n	8001d20 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	0212      	lsls	r2, r2, #8
 8001d16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 f86f 	bl	8001dfe <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	01db      	lsls	r3, r3, #7
 8001d26:	4013      	ands	r3, r2
 8001d28:	d00f      	beq.n	8001d4a <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	01db      	lsls	r3, r3, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	d00a      	beq.n	8001d4a <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2280      	movs	r2, #128	; 0x80
 8001d3a:	01d2      	lsls	r2, r2, #7
 8001d3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 f865 	bl	8001e2e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a3a      	ldr	r2, [r7, #32]
 8001d70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f848 	bl	8001e1e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b00c      	add	sp, #48	; 0x30
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b002      	add	sp, #8
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b002      	add	sp, #8
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001e4a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d105      	bne.n	8001e62 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	22d4      	movs	r2, #212	; 0xd4
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4694      	mov	ip, r2
 8001e5e:	4463      	add	r3, ip
 8001e60:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	589b      	ldr	r3, [r3, r2]
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	041a      	lsls	r2, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3370      	adds	r3, #112	; 0x70
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	589b      	ldr	r3, [r3, r2]
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	061a      	lsls	r2, r3, #24
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	33b0      	adds	r3, #176	; 0xb0
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3389      	adds	r3, #137	; 0x89
 8001ebc:	33ff      	adds	r3, #255	; 0xff
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2298      	movs	r2, #152	; 0x98
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	189a      	adds	r2, r3, r2
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	229e      	movs	r2, #158	; 0x9e
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	189a      	adds	r2, r3, r2
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e005      	b.n	8001eee <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3304      	adds	r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	22d4      	movs	r2, #212	; 0xd4
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4694      	mov	ip, r2
 8001ef6:	4463      	add	r3, ip
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3f1      	bcc.n	8001ee2 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b004      	add	sp, #16
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	4000b400 	.word	0x4000b400
 8001f0c:	40006800 	.word	0x40006800
 8001f10:	ffe0ffff 	.word	0xffe0ffff
 8001f14:	f0ffffff 	.word	0xf0ffffff

08001f18 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001f36:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e00b      	b.n	8001f5c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001f4c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001f52:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	05d2      	lsls	r2, r2, #23
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f66:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001f6c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001f72:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	0013      	movs	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	189b      	adds	r3, r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	18cb      	adds	r3, r1, r3
 8001f8e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e020      	b.n	8001ff0 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	18cb      	adds	r3, r1, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fc6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	18cb      	adds	r3, r1, r3
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001fd4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	188a      	adds	r2, r1, r2
 8001fdc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001fde:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3304      	adds	r3, #4
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <FDCAN_CopyMessageToRAM+0xf4>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d3d6      	bcc.n	8001fae <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b008      	add	sp, #32
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	0800608c 	.word	0x0800608c

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201e:	e14d      	b.n	80022bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4091      	lsls	r1, r2
 800202a:	000a      	movs	r2, r1
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d100      	bne.n	8002038 <HAL_GPIO_Init+0x28>
 8002036:	e13e      	b.n	80022b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	4013      	ands	r3, r2
 8002040:	2b01      	cmp	r3, #1
 8002042:	d005      	beq.n	8002050 <HAL_GPIO_Init+0x40>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	4013      	ands	r3, r2
 800204c:	2b02      	cmp	r3, #2
 800204e:	d130      	bne.n	80020b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	43da      	mvns	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002086:	2201      	movs	r2, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	43da      	mvns	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	2201      	movs	r2, #1
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d017      	beq.n	80020ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	409a      	lsls	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	43da      	mvns	r2, r3
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2203      	movs	r2, #3
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d123      	bne.n	8002142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	58d3      	ldr	r3, [r2, r3]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2207      	movs	r2, #7
 800210c:	4013      	ands	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	409a      	lsls	r2, r3
 8002114:	0013      	movs	r3, r2
 8002116:	43da      	mvns	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2107      	movs	r1, #7
 8002126:	400b      	ands	r3, r1
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	409a      	lsls	r2, r3
 800212c:	0013      	movs	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	6939      	ldr	r1, [r7, #16]
 8002140:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	401a      	ands	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	409a      	lsls	r2, r3
 8002168:	0013      	movs	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	4013      	ands	r3, r2
 8002180:	d100      	bne.n	8002184 <HAL_GPIO_Init+0x174>
 8002182:	e098      	b.n	80022b6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002184:	4a53      	ldr	r2, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3318      	adds	r3, #24
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	589b      	ldr	r3, [r3, r2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2203      	movs	r2, #3
 8002196:	4013      	ands	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	220f      	movs	r2, #15
 800219c:	409a      	lsls	r2, r3
 800219e:	0013      	movs	r3, r2
 80021a0:	43da      	mvns	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	23a0      	movs	r3, #160	; 0xa0
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x1d6>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <HAL_GPIO_Init+0x2c8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x1d2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a47      	ldr	r2, [pc, #284]	; (80022dc <HAL_GPIO_Init+0x2cc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x1ce>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <HAL_GPIO_Init+0x2d0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x1ca>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <HAL_GPIO_Init+0x2d4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x1c6>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021d6:	2305      	movs	r3, #5
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021e6:	2300      	movs	r3, #0
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	2103      	movs	r1, #3
 80021ec:	400a      	ands	r2, r1
 80021ee:	00d2      	lsls	r2, r2, #3
 80021f0:	4093      	lsls	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021f8:	4936      	ldr	r1, [pc, #216]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3318      	adds	r3, #24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	035b      	lsls	r3, r3, #13
 800221e:	4013      	ands	r3, r2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43da      	mvns	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	039b      	lsls	r3, r3, #14
 8002248:	4013      	ands	r3, r2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 800225c:	2384      	movs	r3, #132	; 0x84
 800225e:	58d3      	ldr	r3, [r2, r3]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002280:	4914      	ldr	r1, [pc, #80]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 8002282:	2284      	movs	r2, #132	; 0x84
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	58d3      	ldr	r3, [r2, r3]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	4013      	ands	r3, r2
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4909      	ldr	r1, [pc, #36]	; (80022d4 <HAL_GPIO_Init+0x2c4>)
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	1e13      	subs	r3, r2, #0
 80022c6:	d000      	beq.n	80022ca <HAL_GPIO_Init+0x2ba>
 80022c8:	e6aa      	b.n	8002020 <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021800 	.word	0x40021800
 80022d8:	50000400 	.word	0x50000400
 80022dc:	50000800 	.word	0x50000800
 80022e0:	50000c00 	.word	0x50000c00
 80022e4:	50001000 	.word	0x50001000

080022e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	0008      	movs	r0, r1
 80022f2:	0011      	movs	r1, r2
 80022f4:	1cbb      	adds	r3, r7, #2
 80022f6:	1c02      	adds	r2, r0, #0
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	1c7b      	adds	r3, r7, #1
 80022fc:	1c0a      	adds	r2, r1, #0
 80022fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002300:	1c7b      	adds	r3, r7, #1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002308:	1cbb      	adds	r3, r7, #2
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	1cbb      	adds	r3, r7, #2
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d11f      	bne.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	0013      	movs	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	189b      	adds	r3, r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4912      	ldr	r1, [pc, #72]	; (80023a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002356:	0018      	movs	r0, r3
 8002358:	f7fd fede 	bl	8000118 <__udivsi3>
 800235c:	0003      	movs	r3, r0
 800235e:	3301      	adds	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002362:	e008      	b.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b01      	subs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e001      	b.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e009      	b.n	800238a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	401a      	ands	r2, r3
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	429a      	cmp	r2, r3
 8002386:	d0ed      	beq.n	8002364 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	40007000 	.word	0x40007000
 8002398:	fffff9ff 	.word	0xfffff9ff
 800239c:	20000000 	.word	0x20000000
 80023a0:	000f4240 	.word	0x000f4240

080023a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	23e0      	movs	r3, #224	; 0xe0
 80023ae:	01db      	lsls	r3, r3, #7
 80023b0:	4013      	ands	r3, r2
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f000 fb50 	bl	8002a70 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d100      	bne.n	80023dc <HAL_RCC_OscConfig+0x20>
 80023da:	e07c      	b.n	80024d6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023dc:	4bc3      	ldr	r3, [pc, #780]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2238      	movs	r2, #56	; 0x38
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e6:	4bc1      	ldr	r3, [pc, #772]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2203      	movs	r2, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_OscConfig+0x40>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d002      	beq.n	8002402 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d10b      	bne.n	800241a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002402:	4bba      	ldr	r3, [pc, #744]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	4013      	ands	r3, r2
 800240c:	d062      	beq.n	80024d4 <HAL_RCC_OscConfig+0x118>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d15e      	bne.n	80024d4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e32a      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	025b      	lsls	r3, r3, #9
 8002422:	429a      	cmp	r2, r3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_OscConfig+0x7a>
 8002426:	4bb1      	ldr	r3, [pc, #708]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4bb0      	ldr	r3, [pc, #704]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	0249      	lsls	r1, r1, #9
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e020      	b.n	8002478 <HAL_RCC_OscConfig+0xbc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	23a0      	movs	r3, #160	; 0xa0
 800243c:	02db      	lsls	r3, r3, #11
 800243e:	429a      	cmp	r2, r3
 8002440:	d10e      	bne.n	8002460 <HAL_RCC_OscConfig+0xa4>
 8002442:	4baa      	ldr	r3, [pc, #680]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4ba9      	ldr	r3, [pc, #676]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	02c9      	lsls	r1, r1, #11
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	4ba6      	ldr	r3, [pc, #664]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4ba5      	ldr	r3, [pc, #660]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	0249      	lsls	r1, r1, #9
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xbc>
 8002460:	4ba2      	ldr	r3, [pc, #648]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4ba1      	ldr	r3, [pc, #644]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002466:	49a2      	ldr	r1, [pc, #648]	; (80026f0 <HAL_RCC_OscConfig+0x334>)
 8002468:	400a      	ands	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4b9f      	ldr	r3, [pc, #636]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002472:	49a0      	ldr	r1, [pc, #640]	; (80026f4 <HAL_RCC_OscConfig+0x338>)
 8002474:	400a      	ands	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d014      	beq.n	80024aa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fd08 	bl	8000e94 <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248a:	f7fe fd03 	bl	8000e94 <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e2e9      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249c:	4b93      	ldr	r3, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2380      	movs	r3, #128	; 0x80
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	4013      	ands	r3, r2
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0xce>
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fcf3 	bl	8000e94 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fcee 	bl	8000e94 <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e2d4      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0xf8>
 80024d2:	e000      	b.n	80024d6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	d100      	bne.n	80024e2 <HAL_RCC_OscConfig+0x126>
 80024e0:	e099      	b.n	8002616 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e2:	4b82      	ldr	r3, [pc, #520]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2238      	movs	r2, #56	; 0x38
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ec:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2203      	movs	r2, #3
 80024f2:	4013      	ands	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d102      	bne.n	8002502 <HAL_RCC_OscConfig+0x146>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d002      	beq.n	8002508 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d135      	bne.n	8002574 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b78      	ldr	r3, [pc, #480]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4013      	ands	r3, r2
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x164>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e2a7      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b72      	ldr	r3, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a74      	ldr	r2, [pc, #464]	; (80026f8 <HAL_RCC_OscConfig+0x33c>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	021a      	lsls	r2, r3, #8
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d112      	bne.n	8002562 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800253c:	4b6b      	ldr	r3, [pc, #428]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x340>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002550:	4b66      	ldr	r3, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0adb      	lsrs	r3, r3, #11
 8002556:	2207      	movs	r2, #7
 8002558:	4013      	ands	r3, r2
 800255a:	4a69      	ldr	r2, [pc, #420]	; (8002700 <HAL_RCC_OscConfig+0x344>)
 800255c:	40da      	lsrs	r2, r3
 800255e:	4b69      	ldr	r3, [pc, #420]	; (8002704 <HAL_RCC_OscConfig+0x348>)
 8002560:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002562:	4b69      	ldr	r3, [pc, #420]	; (8002708 <HAL_RCC_OscConfig+0x34c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	f7fe fc38 	bl	8000ddc <HAL_InitTick>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d051      	beq.n	8002614 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e27d      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d030      	beq.n	80025de <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5e      	ldr	r2, [pc, #376]	; (80026fc <HAL_RCC_OscConfig+0x340>)
 8002582:	4013      	ands	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b56      	ldr	r3, [pc, #344]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b55      	ldr	r3, [pc, #340]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0049      	lsls	r1, r1, #1
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fc79 	bl	8000e94 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fc74 	bl	8000e94 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e25a      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ba:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b49      	ldr	r3, [pc, #292]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x33c>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	021a      	lsls	r2, r3, #8
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025de:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80025e4:	4949      	ldr	r1, [pc, #292]	; (800270c <HAL_RCC_OscConfig+0x350>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fc53 	bl	8000e94 <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fc4e 	bl	8000e94 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e234      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4013      	ands	r3, r2
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x238>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002614:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2208      	movs	r2, #8
 800261c:	4013      	ands	r3, r2
 800261e:	d047      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2238      	movs	r2, #56	; 0x38
 8002626:	4013      	ands	r3, r2
 8002628:	2b18      	cmp	r3, #24
 800262a:	d10a      	bne.n	8002642 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800262e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d03c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2f4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d138      	bne.n	80026b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e216      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d019      	beq.n	800267e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 800264c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002650:	2101      	movs	r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fc1d 	bl	8000e94 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7fe fc18 	bl	8000e94 <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1fe      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	d0f1      	beq.n	8002660 <HAL_RCC_OscConfig+0x2a4>
 800267c:	e018      	b.n	80026b0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002680:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 8002684:	2101      	movs	r1, #1
 8002686:	438a      	bics	r2, r1
 8002688:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe fc03 	bl	8000e94 <HAL_GetTick>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fbfe 	bl	8000e94 <HAL_GetTick>
 8002698:	0002      	movs	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1e4      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d1f1      	bne.n	8002694 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2204      	movs	r2, #4
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCC_OscConfig+0x300>
 80026ba:	e0c7      	b.n	800284c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026bc:	231f      	movs	r3, #31
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2238      	movs	r2, #56	; 0x38
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d11f      	bne.n	8002710 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x330>)
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d100      	bne.n	80026dc <HAL_RCC_OscConfig+0x320>
 80026da:	e0b7      	b.n	800284c <HAL_RCC_OscConfig+0x490>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d000      	beq.n	80026e6 <HAL_RCC_OscConfig+0x32a>
 80026e4:	e0b2      	b.n	800284c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1c2      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	40021000 	.word	0x40021000
 80026f0:	fffeffff 	.word	0xfffeffff
 80026f4:	fffbffff 	.word	0xfffbffff
 80026f8:	ffff80ff 	.word	0xffff80ff
 80026fc:	ffffc7ff 	.word	0xffffc7ff
 8002700:	00f42400 	.word	0x00f42400
 8002704:	20000000 	.word	0x20000000
 8002708:	20000004 	.word	0x20000004
 800270c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002710:	4bb5      	ldr	r3, [pc, #724]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	055b      	lsls	r3, r3, #21
 8002718:	4013      	ands	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x364>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x366>
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d011      	beq.n	800274a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4bb0      	ldr	r3, [pc, #704]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800272a:	4baf      	ldr	r3, [pc, #700]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	0549      	lsls	r1, r1, #21
 8002730:	430a      	orrs	r2, r1
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
 8002734:	4bac      	ldr	r3, [pc, #688]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	055b      	lsls	r3, r3, #21
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002742:	231f      	movs	r3, #31
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274a:	4ba8      	ldr	r3, [pc, #672]	; (80029ec <HAL_RCC_OscConfig+0x630>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4013      	ands	r3, r2
 8002754:	d11a      	bne.n	800278c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002756:	4ba5      	ldr	r3, [pc, #660]	; (80029ec <HAL_RCC_OscConfig+0x630>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4ba4      	ldr	r3, [pc, #656]	; (80029ec <HAL_RCC_OscConfig+0x630>)
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	0049      	lsls	r1, r1, #1
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002764:	f7fe fb96 	bl	8000e94 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe fb91 	bl	8000e94 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e177      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b9a      	ldr	r3, [pc, #616]	; (80029ec <HAL_RCC_OscConfig+0x630>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4013      	ands	r3, r2
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3e6>
 8002794:	4b94      	ldr	r3, [pc, #592]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002798:	4b93      	ldr	r3, [pc, #588]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	65da      	str	r2, [r3, #92]	; 0x5c
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x420>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x408>
 80027aa:	4b8f      	ldr	r3, [pc, #572]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ae:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027b0:	2104      	movs	r1, #4
 80027b2:	430a      	orrs	r2, r1
 80027b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80027b6:	4b8c      	ldr	r3, [pc, #560]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027ba:	4b8b      	ldr	r3, [pc, #556]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0x420>
 80027c4:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027c8:	4b87      	ldr	r3, [pc, #540]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	438a      	bics	r2, r1
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80027d0:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027d4:	4b84      	ldr	r3, [pc, #528]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80027d6:	2104      	movs	r1, #4
 80027d8:	438a      	bics	r2, r1
 80027da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d014      	beq.n	800280e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fb56 	bl	8000e94 <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ec:	e009      	b.n	8002802 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fb51 	bl	8000e94 <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	4a7d      	ldr	r2, [pc, #500]	; (80029f0 <HAL_RCC_OscConfig+0x634>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e136      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	4b79      	ldr	r3, [pc, #484]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2202      	movs	r2, #2
 8002808:	4013      	ands	r3, r2
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x432>
 800280c:	e013      	b.n	8002836 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7fe fb41 	bl	8000e94 <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002816:	e009      	b.n	800282c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fe fb3c 	bl	8000e94 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	4a73      	ldr	r2, [pc, #460]	; (80029f0 <HAL_RCC_OscConfig+0x634>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e121      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282c:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002846:	496b      	ldr	r1, [pc, #428]	; (80029f4 <HAL_RCC_OscConfig+0x638>)
 8002848:	400a      	ands	r2, r1
 800284a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2220      	movs	r2, #32
 8002852:	4013      	ands	r3, r2
 8002854:	d039      	beq.n	80028ca <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01b      	beq.n	8002896 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800285e:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	03c9      	lsls	r1, r1, #15
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fb12 	bl	8000e94 <HAL_GetTick>
 8002870:	0003      	movs	r3, r0
 8002872:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002876:	f7fe fb0d 	bl	8000e94 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0f3      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002888:	4b57      	ldr	r3, [pc, #348]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	4013      	ands	r3, r2
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x4ba>
 8002894:	e019      	b.n	80028ca <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002896:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800289c:	4956      	ldr	r1, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x63c>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe faf7 	bl	8000e94 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ac:	f7fe faf2 	bl	8000e94 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e0d8      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028be:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d100      	bne.n	80028d4 <HAL_RCC_OscConfig+0x518>
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b44      	ldr	r3, [pc, #272]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2238      	movs	r2, #56	; 0x38
 80028da:	4013      	ands	r3, r2
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d100      	bne.n	80028e2 <HAL_RCC_OscConfig+0x526>
 80028e0:	e07b      	b.n	80029da <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d156      	bne.n	8002998 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b3f      	ldr	r3, [pc, #252]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80028f0:	4942      	ldr	r1, [pc, #264]	; (80029fc <HAL_RCC_OscConfig+0x640>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe facd 	bl	8000e94 <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fac8 	bl	8000e94 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0ae      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002912:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	049b      	lsls	r3, r3, #18
 800291a:	4013      	ands	r3, r2
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4a37      	ldr	r2, [pc, #220]	; (8002a00 <HAL_RCC_OscConfig+0x644>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	431a      	orrs	r2, r3
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800294e:	430a      	orrs	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0449      	lsls	r1, r1, #17
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	0549      	lsls	r1, r1, #21
 800296a:	430a      	orrs	r2, r1
 800296c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fa91 	bl	8000e94 <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fa8c 	bl	8000e94 <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e072      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	049b      	lsls	r3, r3, #18
 8002992:	4013      	ands	r3, r2
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x5bc>
 8002996:	e06a      	b.n	8002a6e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 800299e:	4917      	ldr	r1, [pc, #92]	; (80029fc <HAL_RCC_OscConfig+0x640>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe fa76 	bl	8000e94 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fa71 	bl	8000e94 <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e057      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	049b      	lsls	r3, r3, #18
 80029c8:	4013      	ands	r3, r2
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_OscConfig+0x62c>)
 80029d2:	490c      	ldr	r1, [pc, #48]	; (8002a04 <HAL_RCC_OscConfig+0x648>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	e049      	b.n	8002a6e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d112      	bne.n	8002a08 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e044      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	00001388 	.word	0x00001388
 80029f4:	efffffff 	.word	0xefffffff
 80029f8:	ffbfffff 	.word	0xffbfffff
 80029fc:	feffffff 	.word	0xfeffffff
 8002a00:	11c1808c 	.word	0x11c1808c
 8002a04:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x6bc>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2203      	movs	r2, #3
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d126      	bne.n	8002a6a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2270      	movs	r2, #112	; 0x70
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d11f      	bne.n	8002a6a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	23fe      	movs	r3, #254	; 0xfe
 8002a2e:	01db      	lsls	r3, r3, #7
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d116      	bne.n	8002a6a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	23f8      	movs	r3, #248	; 0xf8
 8002a40:	039b      	lsls	r3, r3, #14
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d10e      	bne.n	8002a6a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	23e0      	movs	r3, #224	; 0xe0
 8002a50:	051b      	lsls	r3, r3, #20
 8002a52:	401a      	ands	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	0f5b      	lsrs	r3, r3, #29
 8002a60:	075a      	lsls	r2, r3, #29
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b008      	add	sp, #32
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0e9      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2207      	movs	r2, #7
 8002a96:	4013      	ands	r3, r2
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d91e      	bls.n	8002adc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	4393      	bics	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe f9f0 	bl	8000e94 <HAL_GetTick>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ab8:	e009      	b.n	8002ace <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aba:	f7fe f9eb 	bl	8000e94 <HAL_GetTick>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	4a6a      	ldr	r2, [pc, #424]	; (8002c70 <HAL_RCC_ClockConfig+0x1f4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0ca      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d015      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	4013      	ands	r3, r2
 8002aee:	d006      	beq.n	8002afe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002af0:	4b60      	ldr	r3, [pc, #384]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002af6:	21e0      	movs	r1, #224	; 0xe0
 8002af8:	01c9      	lsls	r1, r1, #7
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_RCC_ClockConfig+0x1fc>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d057      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b24:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d12b      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e097      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	049b      	lsls	r3, r3, #18
 8002b44:	4013      	ands	r3, r2
 8002b46:	d11f      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e08b      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d113      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e07f      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6c:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	2202      	movs	r2, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d108      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e074      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2202      	movs	r2, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e06d      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b88:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	4393      	bics	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe f97a 	bl	8000e94 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba6:	f7fe f975 	bl	8000e94 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <HAL_RCC_ClockConfig+0x1f4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e054      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2238      	movs	r2, #56	; 0x38
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1ec      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d21e      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2207      	movs	r2, #7
 8002be0:	4393      	bics	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bec:	f7fe f952 	bl	8000e94 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bf4:	e009      	b.n	8002c0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf6:	f7fe f94d 	bl	8000e94 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_RCC_ClockConfig+0x1f4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e02c      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2207      	movs	r2, #7
 8002c10:	4013      	ands	r3, r2
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1ee      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c22:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <HAL_RCC_ClockConfig+0x200>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c36:	f000 f829 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c3a:	0001      	movs	r1, r0
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	220f      	movs	r2, #15
 8002c44:	401a      	ands	r2, r3
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x204>)
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	58d3      	ldr	r3, [r2, r3]
 8002c4c:	221f      	movs	r2, #31
 8002c4e:	4013      	ands	r3, r2
 8002c50:	000a      	movs	r2, r1
 8002c52:	40da      	lsrs	r2, r3
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x208>)
 8002c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x20c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f7fe f8bd 	bl	8000ddc <HAL_InitTick>
 8002c62:	0003      	movs	r3, r0
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	00001388 	.word	0x00001388
 8002c74:	40021000 	.word	0x40021000
 8002c78:	fffff0ff 	.word	0xfffff0ff
 8002c7c:	ffff8fff 	.word	0xffff8fff
 8002c80:	0800602c 	.word	0x0800602c
 8002c84:	20000000 	.word	0x20000000
 8002c88:	20000004 	.word	0x20000004

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c92:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2238      	movs	r2, #56	; 0x38
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d10f      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c9c:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0adb      	lsrs	r3, r3, #11
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	0013      	movs	r3, r2
 8002cac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	4835      	ldr	r0, [pc, #212]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cb2:	f7fd fa31 	bl	8000118 <__udivsi3>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	e05d      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2238      	movs	r2, #56	; 0x38
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x100>)
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2238      	movs	r2, #56	; 0x38
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d138      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	2207      	movs	r2, #7
 8002cec:	4013      	ands	r3, r2
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d10d      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	4824      	ldr	r0, [pc, #144]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x100>)
 8002cfc:	f7fd fa0c 	bl	8000118 <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	0019      	movs	r1, r3
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	227f      	movs	r2, #127	; 0x7f
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	434b      	muls	r3, r1
 8002d10:	617b      	str	r3, [r7, #20]
        break;
 8002d12:	e00d      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	481c      	ldr	r0, [pc, #112]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d18:	f7fd f9fe 	bl	8000118 <__udivsi3>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	0019      	movs	r1, r3
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	227f      	movs	r2, #127	; 0x7f
 8002d28:	4013      	ands	r3, r2
 8002d2a:	434b      	muls	r3, r1
 8002d2c:	617b      	str	r3, [r7, #20]
        break;
 8002d2e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0f5b      	lsrs	r3, r3, #29
 8002d36:	2207      	movs	r2, #7
 8002d38:	4013      	ands	r3, r2
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f7fd f9e9 	bl	8000118 <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e015      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2238      	movs	r2, #56	; 0x38
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d103      	bne.n	8002d60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2238      	movs	r2, #56	; 0x38
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b18      	cmp	r3, #24
 8002d6a:	d103      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d6c:	23fa      	movs	r3, #250	; 0xfa
 8002d6e:	01db      	lsls	r3, r3, #7
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e001      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d78:	693b      	ldr	r3, [r7, #16]
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b006      	add	sp, #24
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	40021000 	.word	0x40021000
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	007a1200 	.word	0x007a1200

08002d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b5b0      	push	{r4, r5, r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002da8:	f7ff fff2 	bl	8002d90 <HAL_RCC_GetHCLKFreq>
 8002dac:	0004      	movs	r4, r0
 8002dae:	f7ff faf9 	bl	80023a4 <LL_RCC_GetAPB1Prescaler>
 8002db2:	0003      	movs	r3, r0
 8002db4:	0b1a      	lsrs	r2, r3, #12
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db8:	0092      	lsls	r2, r2, #2
 8002dba:	58d3      	ldr	r3, [r2, r3]
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	40dc      	lsrs	r4, r3
 8002dc2:	0023      	movs	r3, r4
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	0800606c 	.word	0x0800606c

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002dd8:	2313      	movs	r3, #19
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002de0:	2312      	movs	r3, #18
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	d100      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002df4:	e0ad      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2011      	movs	r0, #17
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	055b      	lsls	r3, r3, #21
 8002e06:	4013      	ands	r3, r2
 8002e08:	d110      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0549      	lsls	r1, r1, #21
 8002e14:	430a      	orrs	r2, r1
 8002e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	055b      	lsls	r3, r3, #21
 8002e20:	4013      	ands	r3, r2
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	183b      	adds	r3, r7, r0
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	0049      	lsls	r1, r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3a:	f7fe f82b 	bl	8000e94 <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e42:	e00b      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fe f826 	bl	8000e94 <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d904      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e52:	2313      	movs	r3, #19
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2203      	movs	r2, #3
 8002e58:	701a      	strb	r2, [r3, #0]
        break;
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d0ed      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e68:	2313      	movs	r3, #19
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d15e      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e72:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e76:	23c0      	movs	r3, #192	; 0xc0
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d019      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d014      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e8e:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	0249      	lsls	r1, r1, #9
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eac:	491e      	ldr	r1, [pc, #120]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d016      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fd ffe8 	bl	8000e94 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec8:	e00c      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fd ffe3 	bl	8000e94 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d904      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002eda:	2313      	movs	r3, #19
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	2203      	movs	r2, #3
 8002ee0:	701a      	strb	r2, [r3, #0]
            break;
 8002ee2:	e004      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d0ed      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002eee:	2313      	movs	r3, #19
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f0c:	e016      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0e:	2312      	movs	r3, #18
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2213      	movs	r2, #19
 8002f14:	18ba      	adds	r2, r7, r2
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e00f      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
 8002f24:	fffffcff 	.word	0xfffffcff
 8002f28:	fffeffff 	.word	0xfffeffff
 8002f2c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	2312      	movs	r3, #18
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2213      	movs	r2, #19
 8002f36:	18ba      	adds	r2, r7, r2
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f3c:	2311      	movs	r3, #17
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4bb6      	ldr	r3, [pc, #728]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4a:	4bb5      	ldr	r3, [pc, #724]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4c:	49b5      	ldr	r1, [pc, #724]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002f4e:	400a      	ands	r2, r1
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f5c:	4bb0      	ldr	r3, [pc, #704]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	2203      	movs	r2, #3
 8002f62:	4393      	bics	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4bad      	ldr	r3, [pc, #692]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2202      	movs	r2, #2
 8002f76:	4013      	ands	r3, r2
 8002f78:	d009      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f7a:	4ba9      	ldr	r3, [pc, #676]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	220c      	movs	r2, #12
 8002f80:	4393      	bics	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4ba5      	ldr	r3, [pc, #660]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f98:	4ba1      	ldr	r3, [pc, #644]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	2230      	movs	r2, #48	; 0x30
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	4b9e      	ldr	r3, [pc, #632]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb6:	4b9a      	ldr	r3, [pc, #616]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	4a9b      	ldr	r2, [pc, #620]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	4b96      	ldr	r3, [pc, #600]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	015b      	lsls	r3, r3, #5
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d009      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002fd6:	4b92      	ldr	r3, [pc, #584]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	4a94      	ldr	r2, [pc, #592]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	4b8e      	ldr	r3, [pc, #568]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff6:	4b8a      	ldr	r3, [pc, #552]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	4a8d      	ldr	r2, [pc, #564]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003006:	430a      	orrs	r2, r1
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4013      	ands	r3, r2
 8003014:	d009      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003016:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	4a86      	ldr	r2, [pc, #536]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	4b7e      	ldr	r3, [pc, #504]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003026:	430a      	orrs	r2, r1
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2220      	movs	r2, #32
 8003030:	4013      	ands	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003034:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	4a7f      	ldr	r2, [pc, #508]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800303a:	4013      	ands	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	4b77      	ldr	r3, [pc, #476]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003044:	430a      	orrs	r2, r1
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2240      	movs	r2, #64	; 0x40
 800304e:	4013      	ands	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	4a79      	ldr	r2, [pc, #484]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003062:	430a      	orrs	r2, r1
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	01db      	lsls	r3, r3, #7
 800306e:	4013      	ands	r3, r2
 8003070:	d015      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003072:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	0899      	lsrs	r1, r3, #2
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307e:	4b68      	ldr	r3, [pc, #416]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003080:	430a      	orrs	r2, r1
 8003082:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	429a      	cmp	r2, r3
 800308e:	d106      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003090:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	0249      	lsls	r1, r1, #9
 800309a:	430a      	orrs	r2, r1
 800309c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	031b      	lsls	r3, r3, #12
 80030a6:	4013      	ands	r3, r2
 80030a8:	d009      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030aa:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	2240      	movs	r2, #64	; 0x40
 80030b0:	4393      	bics	r3, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ba:	430a      	orrs	r2, r1
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	039b      	lsls	r3, r3, #14
 80030c6:	4013      	ands	r3, r2
 80030c8:	d016      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030ca:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	4a5c      	ldr	r2, [pc, #368]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030d8:	4b51      	ldr	r3, [pc, #324]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	03db      	lsls	r3, r3, #15
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d106      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030ea:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	0449      	lsls	r1, r1, #17
 80030f4:	430a      	orrs	r2, r1
 80030f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	03db      	lsls	r3, r3, #15
 8003100:	4013      	ands	r3, r2
 8003102:	d016      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800310a:	4013      	ands	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003114:	430a      	orrs	r2, r1
 8003116:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	045b      	lsls	r3, r3, #17
 8003120:	429a      	cmp	r2, r3
 8003122:	d106      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	0449      	lsls	r1, r1, #17
 800312e:	430a      	orrs	r2, r1
 8003130:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	4013      	ands	r3, r2
 800313c:	d014      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800313e:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	2203      	movs	r2, #3
 8003144:	4393      	bics	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800314e:	430a      	orrs	r2, r1
 8003150:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d106      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800315a:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	4b30      	ldr	r3, [pc, #192]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	0249      	lsls	r1, r1, #9
 8003164:	430a      	orrs	r2, r1
 8003166:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	4013      	ands	r3, r2
 8003172:	d014      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003174:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	220c      	movs	r2, #12
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003184:	430a      	orrs	r2, r1
 8003186:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	2b04      	cmp	r3, #4
 800318e:	d106      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4b22      	ldr	r3, [pc, #136]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0249      	lsls	r1, r1, #9
 800319a:	430a      	orrs	r2, r1
 800319c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	4013      	ands	r3, r2
 80031a8:	d016      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031aa:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	4a22      	ldr	r2, [pc, #136]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	0019      	movs	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ba:	430a      	orrs	r2, r1
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	019b      	lsls	r3, r3, #6
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d106      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	0449      	lsls	r1, r1, #17
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	049b      	lsls	r3, r3, #18
 80031e0:	4013      	ands	r3, r2
 80031e2:	d016      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031f4:	430a      	orrs	r2, r1
 80031f6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	0449      	lsls	r1, r1, #17
 800320e:	430a      	orrs	r2, r1
 8003210:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003212:	2312      	movs	r3, #18
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b006      	add	sp, #24
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	efffffff 	.word	0xefffffff
 8003228:	fffff3ff 	.word	0xfffff3ff
 800322c:	fffffcff 	.word	0xfffffcff
 8003230:	fff3ffff 	.word	0xfff3ffff
 8003234:	ffcfffff 	.word	0xffcfffff
 8003238:	ffffcfff 	.word	0xffffcfff
 800323c:	ffff3fff 	.word	0xffff3fff
 8003240:	ffbfffff 	.word	0xffbfffff
 8003244:	feffffff 	.word	0xfeffffff

08003248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e046      	b.n	80032e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2288      	movs	r2, #136	; 0x88
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2284      	movs	r2, #132	; 0x84
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	0018      	movs	r0, r3
 8003270:	f7fd fd00 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2288      	movs	r2, #136	; 0x88
 8003278:	2124      	movs	r1, #36	; 0x24
 800327a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2101      	movs	r1, #1
 8003288:	438a      	bics	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0018      	movs	r0, r3
 8003298:	f000 ff68 	bl	800416c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 fc0e 	bl	8003ac0 <UART_SetConfig>
 80032a4:	0003      	movs	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01c      	b.n	80032e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	490d      	ldr	r1, [pc, #52]	; (80032f0 <HAL_UART_Init+0xa8>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	212a      	movs	r1, #42	; 0x2a
 80032ca:	438a      	bics	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 fff7 	bl	80042d4 <UART_CheckIdleState>
 80032e6:	0003      	movs	r3, r0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b002      	add	sp, #8
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	ffffb7ff 	.word	0xffffb7ff

080032f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	1dbb      	adds	r3, r7, #6
 8003302:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2288      	movs	r2, #136	; 0x88
 8003308:	589b      	ldr	r3, [r3, r2]
 800330a:	2b20      	cmp	r3, #32
 800330c:	d000      	beq.n	8003310 <HAL_UART_Transmit+0x1c>
 800330e:	e090      	b.n	8003432 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_UART_Transmit+0x2a>
 8003316:	1dbb      	adds	r3, r7, #6
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e088      	b.n	8003434 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	015b      	lsls	r3, r3, #5
 800332a:	429a      	cmp	r2, r3
 800332c:	d109      	bne.n	8003342 <HAL_UART_Transmit+0x4e>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	d001      	beq.n	8003342 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e078      	b.n	8003434 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2290      	movs	r2, #144	; 0x90
 8003346:	2100      	movs	r1, #0
 8003348:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2288      	movs	r2, #136	; 0x88
 800334e:	2121      	movs	r1, #33	; 0x21
 8003350:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003352:	f7fd fd9f 	bl	8000e94 <HAL_GetTick>
 8003356:	0003      	movs	r3, r0
 8003358:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1dba      	adds	r2, r7, #6
 800335e:	2154      	movs	r1, #84	; 0x54
 8003360:	8812      	ldrh	r2, [r2, #0]
 8003362:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1dba      	adds	r2, r7, #6
 8003368:	2156      	movs	r1, #86	; 0x56
 800336a:	8812      	ldrh	r2, [r2, #0]
 800336c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	015b      	lsls	r3, r3, #5
 8003376:	429a      	cmp	r2, r3
 8003378:	d108      	bne.n	800338c <HAL_UART_Transmit+0x98>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	e003      	b.n	8003394 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003394:	e030      	b.n	80033f8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	0013      	movs	r3, r2
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	f001 f840 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2288      	movs	r2, #136	; 0x88
 80033b0:	2120      	movs	r1, #32
 80033b2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e03d      	b.n	8003434 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	001a      	movs	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	05d2      	lsls	r2, r2, #23
 80033ca:	0dd2      	lsrs	r2, r2, #23
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3302      	adds	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e007      	b.n	80033e6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	3301      	adds	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2256      	movs	r2, #86	; 0x56
 80033ea:	5a9b      	ldrh	r3, [r3, r2]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b299      	uxth	r1, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2256      	movs	r2, #86	; 0x56
 80033f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2256      	movs	r2, #86	; 0x56
 80033fc:	5a9b      	ldrh	r3, [r3, r2]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1c8      	bne.n	8003396 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	0013      	movs	r3, r2
 800340e:	2200      	movs	r2, #0
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	f001 f809 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d005      	beq.n	8003426 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2288      	movs	r2, #136	; 0x88
 800341e:	2120      	movs	r1, #32
 8003420:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e006      	b.n	8003434 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2288      	movs	r2, #136	; 0x88
 800342a:	2120      	movs	r1, #32
 800342c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
  }
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b008      	add	sp, #32
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800343c:	b5b0      	push	{r4, r5, r7, lr}
 800343e:	b0aa      	sub	sp, #168	; 0xa8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	22a4      	movs	r2, #164	; 0xa4
 800344c:	18b9      	adds	r1, r7, r2
 800344e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	20a0      	movs	r0, #160	; 0xa0
 8003458:	1839      	adds	r1, r7, r0
 800345a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	249c      	movs	r4, #156	; 0x9c
 8003464:	1939      	adds	r1, r7, r4
 8003466:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003468:	0011      	movs	r1, r2
 800346a:	18bb      	adds	r3, r7, r2
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4aa2      	ldr	r2, [pc, #648]	; (80036f8 <HAL_UART_IRQHandler+0x2bc>)
 8003470:	4013      	ands	r3, r2
 8003472:	2298      	movs	r2, #152	; 0x98
 8003474:	18bd      	adds	r5, r7, r2
 8003476:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003478:	18bb      	adds	r3, r7, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11a      	bne.n	80034b6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003480:	187b      	adds	r3, r7, r1
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2220      	movs	r2, #32
 8003486:	4013      	ands	r3, r2
 8003488:	d015      	beq.n	80034b6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800348a:	183b      	adds	r3, r7, r0
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2220      	movs	r2, #32
 8003490:	4013      	ands	r3, r2
 8003492:	d105      	bne.n	80034a0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003494:	193b      	adds	r3, r7, r4
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	055b      	lsls	r3, r3, #21
 800349c:	4013      	ands	r3, r2
 800349e:	d00a      	beq.n	80034b6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d100      	bne.n	80034aa <HAL_UART_IRQHandler+0x6e>
 80034a8:	e2dc      	b.n	8003a64 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	0010      	movs	r0, r2
 80034b2:	4798      	blx	r3
      }
      return;
 80034b4:	e2d6      	b.n	8003a64 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034b6:	2398      	movs	r3, #152	; 0x98
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d100      	bne.n	80034c2 <HAL_UART_IRQHandler+0x86>
 80034c0:	e122      	b.n	8003708 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034c2:	239c      	movs	r3, #156	; 0x9c
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8c      	ldr	r2, [pc, #560]	; (80036fc <HAL_UART_IRQHandler+0x2c0>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	d106      	bne.n	80034dc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034ce:	23a0      	movs	r3, #160	; 0xa0
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a8a      	ldr	r2, [pc, #552]	; (8003700 <HAL_UART_IRQHandler+0x2c4>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	d100      	bne.n	80034dc <HAL_UART_IRQHandler+0xa0>
 80034da:	e115      	b.n	8003708 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034dc:	23a4      	movs	r3, #164	; 0xa4
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	d012      	beq.n	800350e <HAL_UART_IRQHandler+0xd2>
 80034e8:	23a0      	movs	r3, #160	; 0xa0
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00b      	beq.n	800350e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2201      	movs	r2, #1
 80034fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2290      	movs	r2, #144	; 0x90
 8003502:	589b      	ldr	r3, [r3, r2]
 8003504:	2201      	movs	r2, #1
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2190      	movs	r1, #144	; 0x90
 800350c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800350e:	23a4      	movs	r3, #164	; 0xa4
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2202      	movs	r2, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d011      	beq.n	800353e <HAL_UART_IRQHandler+0x102>
 800351a:	239c      	movs	r3, #156	; 0x9c
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2201      	movs	r2, #1
 8003522:	4013      	ands	r3, r2
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2202      	movs	r2, #2
 800352c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2290      	movs	r2, #144	; 0x90
 8003532:	589b      	ldr	r3, [r3, r2]
 8003534:	2204      	movs	r2, #4
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2190      	movs	r1, #144	; 0x90
 800353c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800353e:	23a4      	movs	r3, #164	; 0xa4
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2204      	movs	r2, #4
 8003546:	4013      	ands	r3, r2
 8003548:	d011      	beq.n	800356e <HAL_UART_IRQHandler+0x132>
 800354a:	239c      	movs	r3, #156	; 0x9c
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d00b      	beq.n	800356e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2204      	movs	r2, #4
 800355c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2290      	movs	r2, #144	; 0x90
 8003562:	589b      	ldr	r3, [r3, r2]
 8003564:	2202      	movs	r2, #2
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2190      	movs	r1, #144	; 0x90
 800356c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800356e:	23a4      	movs	r3, #164	; 0xa4
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2208      	movs	r2, #8
 8003576:	4013      	ands	r3, r2
 8003578:	d017      	beq.n	80035aa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800357a:	23a0      	movs	r3, #160	; 0xa0
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2220      	movs	r2, #32
 8003582:	4013      	ands	r3, r2
 8003584:	d105      	bne.n	8003592 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003586:	239c      	movs	r3, #156	; 0x9c
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_UART_IRQHandler+0x2c0>)
 800358e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003590:	d00b      	beq.n	80035aa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2208      	movs	r2, #8
 8003598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2290      	movs	r2, #144	; 0x90
 800359e:	589b      	ldr	r3, [r3, r2]
 80035a0:	2208      	movs	r2, #8
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2190      	movs	r1, #144	; 0x90
 80035a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035aa:	23a4      	movs	r3, #164	; 0xa4
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4013      	ands	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_UART_IRQHandler+0x1a4>
 80035b8:	23a0      	movs	r3, #160	; 0xa0
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	04db      	lsls	r3, r3, #19
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00c      	beq.n	80035e0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2290      	movs	r2, #144	; 0x90
 80035d4:	589b      	ldr	r3, [r3, r2]
 80035d6:	2220      	movs	r2, #32
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2190      	movs	r1, #144	; 0x90
 80035de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2290      	movs	r2, #144	; 0x90
 80035e4:	589b      	ldr	r3, [r3, r2]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d100      	bne.n	80035ec <HAL_UART_IRQHandler+0x1b0>
 80035ea:	e23d      	b.n	8003a68 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035ec:	23a4      	movs	r3, #164	; 0xa4
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2220      	movs	r2, #32
 80035f4:	4013      	ands	r3, r2
 80035f6:	d015      	beq.n	8003624 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035f8:	23a0      	movs	r3, #160	; 0xa0
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2220      	movs	r2, #32
 8003600:	4013      	ands	r3, r2
 8003602:	d106      	bne.n	8003612 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003604:	239c      	movs	r3, #156	; 0x9c
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	055b      	lsls	r3, r3, #21
 800360e:	4013      	ands	r3, r2
 8003610:	d008      	beq.n	8003624 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	0010      	movs	r0, r2
 8003622:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2290      	movs	r2, #144	; 0x90
 8003628:	589b      	ldr	r3, [r3, r2]
 800362a:	2194      	movs	r1, #148	; 0x94
 800362c:	187a      	adds	r2, r7, r1
 800362e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	4013      	ands	r3, r2
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d004      	beq.n	8003648 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800363e:	187b      	adds	r3, r7, r1
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2228      	movs	r2, #40	; 0x28
 8003644:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003646:	d04c      	beq.n	80036e2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 ff5c 	bl	8004508 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	4013      	ands	r3, r2
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d13c      	bne.n	80036d8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365e:	f3ef 8310 	mrs	r3, PRIMASK
 8003662:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	2090      	movs	r0, #144	; 0x90
 8003668:	183a      	adds	r2, r7, r0
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	2301      	movs	r3, #1
 800366e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2140      	movs	r1, #64	; 0x40
 8003684:	438a      	bics	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	183b      	adds	r3, r7, r0
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	589b      	ldr	r3, [r3, r2]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	589b      	ldr	r3, [r3, r2]
 80036a6:	4a17      	ldr	r2, [pc, #92]	; (8003704 <HAL_UART_IRQHandler+0x2c8>)
 80036a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	589b      	ldr	r3, [r3, r2]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fd fd71 	bl	8001198 <HAL_DMA_Abort_IT>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d01c      	beq.n	80036f4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	589b      	ldr	r3, [r3, r2]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	5852      	ldr	r2, [r2, r1]
 80036c8:	0010      	movs	r0, r2
 80036ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	e012      	b.n	80036f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f9e1 	bl	8003a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d6:	e00d      	b.n	80036f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f9dc 	bl	8003a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	e008      	b.n	80036f4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f9d7 	bl	8003a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2290      	movs	r2, #144	; 0x90
 80036ee:	2100      	movs	r1, #0
 80036f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036f2:	e1b9      	b.n	8003a68 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	46c0      	nop			; (mov r8, r8)
    return;
 80036f6:	e1b7      	b.n	8003a68 <HAL_UART_IRQHandler+0x62c>
 80036f8:	0000080f 	.word	0x0000080f
 80036fc:	10000001 	.word	0x10000001
 8003700:	04000120 	.word	0x04000120
 8003704:	080045d5 	.word	0x080045d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d000      	beq.n	8003712 <HAL_UART_IRQHandler+0x2d6>
 8003710:	e13e      	b.n	8003990 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003712:	23a4      	movs	r3, #164	; 0xa4
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2210      	movs	r2, #16
 800371a:	4013      	ands	r3, r2
 800371c:	d100      	bne.n	8003720 <HAL_UART_IRQHandler+0x2e4>
 800371e:	e137      	b.n	8003990 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003720:	23a0      	movs	r3, #160	; 0xa0
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	4013      	ands	r3, r2
 800372a:	d100      	bne.n	800372e <HAL_UART_IRQHandler+0x2f2>
 800372c:	e130      	b.n	8003990 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2210      	movs	r2, #16
 8003734:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	4013      	ands	r3, r2
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d000      	beq.n	8003746 <HAL_UART_IRQHandler+0x30a>
 8003744:	e0a4      	b.n	8003890 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	589b      	ldr	r3, [r3, r2]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	217e      	movs	r1, #126	; 0x7e
 8003752:	187b      	adds	r3, r7, r1
 8003754:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003756:	187b      	adds	r3, r7, r1
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d100      	bne.n	8003760 <HAL_UART_IRQHandler+0x324>
 800375e:	e185      	b.n	8003a6c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	225c      	movs	r2, #92	; 0x5c
 8003764:	5a9b      	ldrh	r3, [r3, r2]
 8003766:	187a      	adds	r2, r7, r1
 8003768:	8812      	ldrh	r2, [r2, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d300      	bcc.n	8003770 <HAL_UART_IRQHandler+0x334>
 800376e:	e17d      	b.n	8003a6c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	187a      	adds	r2, r7, r1
 8003774:	215e      	movs	r1, #94	; 0x5e
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	589b      	ldr	r3, [r3, r2]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2220      	movs	r2, #32
 8003786:	4013      	ands	r3, r2
 8003788:	d170      	bne.n	800386c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003792:	67bb      	str	r3, [r7, #120]	; 0x78
 8003794:	2301      	movs	r3, #1
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	49b4      	ldr	r1, [pc, #720]	; (8003a7c <HAL_UART_IRQHandler+0x640>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8310 	mrs	r3, PRIMASK
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	677b      	str	r3, [r7, #116]	; 0x74
 80037c6:	2301      	movs	r3, #1
 80037c8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	438a      	bics	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ee:	f3ef 8310 	mrs	r3, PRIMASK
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80037f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f6:	673b      	str	r3, [r7, #112]	; 0x70
 80037f8:	2301      	movs	r3, #1
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	f383 8810 	msr	PRIMASK, r3
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2140      	movs	r1, #64	; 0x40
 8003810:	438a      	bics	r2, r1
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003816:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800381a:	f383 8810 	msr	PRIMASK, r3
}
 800381e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	228c      	movs	r2, #140	; 0x8c
 8003824:	2120      	movs	r1, #32
 8003826:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382e:	f3ef 8310 	mrs	r3, PRIMASK
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003834:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003838:	2301      	movs	r3, #1
 800383a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800383e:	f383 8810 	msr	PRIMASK, r3
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2110      	movs	r1, #16
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003856:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	589b      	ldr	r3, [r3, r2]
 8003866:	0018      	movs	r0, r3
 8003868:	f7fd fc36 	bl	80010d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	225c      	movs	r2, #92	; 0x5c
 8003876:	5a9a      	ldrh	r2, [r3, r2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	215e      	movs	r1, #94	; 0x5e
 800387c:	5a5b      	ldrh	r3, [r3, r1]
 800387e:	b29b      	uxth	r3, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f000 f90d 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800388e:	e0ed      	b.n	8003a6c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	225c      	movs	r2, #92	; 0x5c
 8003894:	5a99      	ldrh	r1, [r3, r2]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	225e      	movs	r2, #94	; 0x5e
 800389a:	5a9b      	ldrh	r3, [r3, r2]
 800389c:	b29a      	uxth	r2, r3
 800389e:	208e      	movs	r0, #142	; 0x8e
 80038a0:	183b      	adds	r3, r7, r0
 80038a2:	1a8a      	subs	r2, r1, r2
 80038a4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	225e      	movs	r2, #94	; 0x5e
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d100      	bne.n	80038b4 <HAL_UART_IRQHandler+0x478>
 80038b2:	e0dd      	b.n	8003a70 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d100      	bne.n	80038be <HAL_UART_IRQHandler+0x482>
 80038bc:	e0d8      	b.n	8003a70 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038c6:	2488      	movs	r4, #136	; 0x88
 80038c8:	193a      	adds	r2, r7, r4
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	2301      	movs	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f383 8810 	msr	PRIMASK, r3
}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4967      	ldr	r1, [pc, #412]	; (8003a80 <HAL_UART_IRQHandler+0x644>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f6:	f3ef 8310 	mrs	r3, PRIMASK
 80038fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80038fc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038fe:	2484      	movs	r4, #132	; 0x84
 8003900:	193a      	adds	r2, r7, r4
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	2301      	movs	r3, #1
 8003906:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	495a      	ldr	r1, [pc, #360]	; (8003a84 <HAL_UART_IRQHandler+0x648>)
 800391c:	400a      	ands	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	193b      	adds	r3, r7, r4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	228c      	movs	r2, #140	; 0x8c
 8003932:	2120      	movs	r1, #32
 8003934:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003942:	f3ef 8310 	mrs	r3, PRIMASK
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394a:	2480      	movs	r4, #128	; 0x80
 800394c:	193a      	adds	r2, r7, r4
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	2301      	movs	r3, #1
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2110      	movs	r1, #16
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	193b      	adds	r3, r7, r4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	f383 8810 	msr	PRIMASK, r3
}
 8003978:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003980:	183b      	adds	r3, r7, r0
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0011      	movs	r1, r2
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f88d 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800398e:	e06f      	b.n	8003a70 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003990:	23a4      	movs	r3, #164	; 0xa4
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	035b      	lsls	r3, r3, #13
 800399a:	4013      	ands	r3, r2
 800399c:	d010      	beq.n	80039c0 <HAL_UART_IRQHandler+0x584>
 800399e:	239c      	movs	r3, #156	; 0x9c
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	03db      	lsls	r3, r3, #15
 80039a8:	4013      	ands	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	0352      	lsls	r2, r2, #13
 80039b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 fe4e 	bl	800465a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039be:	e05a      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80039c0:	23a4      	movs	r3, #164	; 0xa4
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	4013      	ands	r3, r2
 80039ca:	d016      	beq.n	80039fa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80039cc:	23a0      	movs	r3, #160	; 0xa0
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	4013      	ands	r3, r2
 80039d6:	d106      	bne.n	80039e6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80039d8:	239c      	movs	r3, #156	; 0x9c
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	4013      	ands	r3, r2
 80039e4:	d009      	beq.n	80039fa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d042      	beq.n	8003a74 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	0010      	movs	r0, r2
 80039f6:	4798      	blx	r3
    }
    return;
 80039f8:	e03c      	b.n	8003a74 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039fa:	23a4      	movs	r3, #164	; 0xa4
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00a      	beq.n	8003a1c <HAL_UART_IRQHandler+0x5e0>
 8003a06:	23a0      	movs	r3, #160	; 0xa0
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2240      	movs	r2, #64	; 0x40
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 fdf4 	bl	8004602 <UART_EndTransmit_IT>
    return;
 8003a1a:	e02c      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a1c:	23a4      	movs	r3, #164	; 0xa4
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	041b      	lsls	r3, r3, #16
 8003a26:	4013      	ands	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <HAL_UART_IRQHandler+0x606>
 8003a2a:	23a0      	movs	r3, #160	; 0xa0
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	05db      	lsls	r3, r3, #23
 8003a34:	4013      	ands	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 fe1d 	bl	800467a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a40:	e019      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a42:	23a4      	movs	r3, #164	; 0xa4
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	045b      	lsls	r3, r3, #17
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d012      	beq.n	8003a76 <HAL_UART_IRQHandler+0x63a>
 8003a50:	23a0      	movs	r3, #160	; 0xa0
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	da0d      	bge.n	8003a76 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fe04 	bl	800466a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a62:	e008      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
      return;
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	e006      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
    return;
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	e004      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
      return;
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	e002      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
      return;
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	e000      	b.n	8003a76 <HAL_UART_IRQHandler+0x63a>
    return;
 8003a74:	46c0      	nop			; (mov r8, r8)
  }
}
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b02a      	add	sp, #168	; 0xa8
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	fffffeff 	.word	0xfffffeff
 8003a80:	fffffedf 	.word	0xfffffedf
 8003a84:	effffffe 	.word	0xeffffffe

08003a88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	000a      	movs	r2, r1
 8003ab2:	1cbb      	adds	r3, r7, #2
 8003ab4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b002      	add	sp, #8
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b090      	sub	sp, #64	; 0x40
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ac8:	231a      	movs	r3, #26
 8003aca:	2220      	movs	r2, #32
 8003acc:	189b      	adds	r3, r3, r2
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4ac1      	ldr	r2, [pc, #772]	; (8003df8 <UART_SetConfig+0x338>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4abc      	ldr	r2, [pc, #752]	; (8003dfc <UART_SetConfig+0x33c>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	68d9      	ldr	r1, [r3, #12]
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	0003      	movs	r3, r0
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4ab6      	ldr	r2, [pc, #728]	; (8003e00 <UART_SetConfig+0x340>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <UART_SetConfig+0x80>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4ab4      	ldr	r2, [pc, #720]	; (8003e04 <UART_SetConfig+0x344>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4ab0      	ldr	r2, [pc, #704]	; (8003e08 <UART_SetConfig+0x348>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	430b      	orrs	r3, r1
 8003b54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	4393      	bics	r3, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4aa5      	ldr	r2, [pc, #660]	; (8003e0c <UART_SetConfig+0x34c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d131      	bne.n	8003bde <UART_SetConfig+0x11e>
 8003b7a:	4ba5      	ldr	r3, [pc, #660]	; (8003e10 <UART_SetConfig+0x350>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d01d      	beq.n	8003bc2 <UART_SetConfig+0x102>
 8003b86:	d823      	bhi.n	8003bd0 <UART_SetConfig+0x110>
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d00c      	beq.n	8003ba6 <UART_SetConfig+0xe6>
 8003b8c:	d820      	bhi.n	8003bd0 <UART_SetConfig+0x110>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <UART_SetConfig+0xd8>
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d00e      	beq.n	8003bb4 <UART_SetConfig+0xf4>
 8003b96:	e01b      	b.n	8003bd0 <UART_SetConfig+0x110>
 8003b98:	231b      	movs	r3, #27
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e154      	b.n	8003e50 <UART_SetConfig+0x390>
 8003ba6:	231b      	movs	r3, #27
 8003ba8:	2220      	movs	r2, #32
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	2202      	movs	r2, #2
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e14d      	b.n	8003e50 <UART_SetConfig+0x390>
 8003bb4:	231b      	movs	r3, #27
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	19db      	adds	r3, r3, r7
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e146      	b.n	8003e50 <UART_SetConfig+0x390>
 8003bc2:	231b      	movs	r3, #27
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	19db      	adds	r3, r3, r7
 8003bca:	2208      	movs	r2, #8
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e13f      	b.n	8003e50 <UART_SetConfig+0x390>
 8003bd0:	231b      	movs	r3, #27
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2210      	movs	r2, #16
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e138      	b.n	8003e50 <UART_SetConfig+0x390>
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a8c      	ldr	r2, [pc, #560]	; (8003e14 <UART_SetConfig+0x354>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d131      	bne.n	8003c4c <UART_SetConfig+0x18c>
 8003be8:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <UART_SetConfig+0x350>)
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	220c      	movs	r2, #12
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b0c      	cmp	r3, #12
 8003bf2:	d01d      	beq.n	8003c30 <UART_SetConfig+0x170>
 8003bf4:	d823      	bhi.n	8003c3e <UART_SetConfig+0x17e>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d00c      	beq.n	8003c14 <UART_SetConfig+0x154>
 8003bfa:	d820      	bhi.n	8003c3e <UART_SetConfig+0x17e>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <UART_SetConfig+0x146>
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d00e      	beq.n	8003c22 <UART_SetConfig+0x162>
 8003c04:	e01b      	b.n	8003c3e <UART_SetConfig+0x17e>
 8003c06:	231b      	movs	r3, #27
 8003c08:	2220      	movs	r2, #32
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e11d      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c14:	231b      	movs	r3, #27
 8003c16:	2220      	movs	r2, #32
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	19db      	adds	r3, r3, r7
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e116      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c22:	231b      	movs	r3, #27
 8003c24:	2220      	movs	r2, #32
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	19db      	adds	r3, r3, r7
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e10f      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c30:	231b      	movs	r3, #27
 8003c32:	2220      	movs	r2, #32
 8003c34:	189b      	adds	r3, r3, r2
 8003c36:	19db      	adds	r3, r3, r7
 8003c38:	2208      	movs	r2, #8
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e108      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c3e:	231b      	movs	r3, #27
 8003c40:	2220      	movs	r2, #32
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	19db      	adds	r3, r3, r7
 8003c46:	2210      	movs	r2, #16
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e101      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a71      	ldr	r2, [pc, #452]	; (8003e18 <UART_SetConfig+0x358>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d131      	bne.n	8003cba <UART_SetConfig+0x1fa>
 8003c56:	4b6e      	ldr	r3, [pc, #440]	; (8003e10 <UART_SetConfig+0x350>)
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	2230      	movs	r2, #48	; 0x30
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d01d      	beq.n	8003c9e <UART_SetConfig+0x1de>
 8003c62:	d823      	bhi.n	8003cac <UART_SetConfig+0x1ec>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d00c      	beq.n	8003c82 <UART_SetConfig+0x1c2>
 8003c68:	d820      	bhi.n	8003cac <UART_SetConfig+0x1ec>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <UART_SetConfig+0x1b4>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d00e      	beq.n	8003c90 <UART_SetConfig+0x1d0>
 8003c72:	e01b      	b.n	8003cac <UART_SetConfig+0x1ec>
 8003c74:	231b      	movs	r3, #27
 8003c76:	2220      	movs	r2, #32
 8003c78:	189b      	adds	r3, r3, r2
 8003c7a:	19db      	adds	r3, r3, r7
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
 8003c80:	e0e6      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c82:	231b      	movs	r3, #27
 8003c84:	2220      	movs	r2, #32
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	19db      	adds	r3, r3, r7
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e0df      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c90:	231b      	movs	r3, #27
 8003c92:	2220      	movs	r2, #32
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	19db      	adds	r3, r3, r7
 8003c98:	2204      	movs	r2, #4
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e0d8      	b.n	8003e50 <UART_SetConfig+0x390>
 8003c9e:	231b      	movs	r3, #27
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	19db      	adds	r3, r3, r7
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e0d1      	b.n	8003e50 <UART_SetConfig+0x390>
 8003cac:	231b      	movs	r3, #27
 8003cae:	2220      	movs	r2, #32
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	19db      	adds	r3, r3, r7
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	e0ca      	b.n	8003e50 <UART_SetConfig+0x390>
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <UART_SetConfig+0x35c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d106      	bne.n	8003cd2 <UART_SetConfig+0x212>
 8003cc4:	231b      	movs	r3, #27
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	189b      	adds	r3, r3, r2
 8003cca:	19db      	adds	r3, r3, r7
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e0be      	b.n	8003e50 <UART_SetConfig+0x390>
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <UART_SetConfig+0x360>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d106      	bne.n	8003cea <UART_SetConfig+0x22a>
 8003cdc:	231b      	movs	r3, #27
 8003cde:	2220      	movs	r2, #32
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	19db      	adds	r3, r3, r7
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	e0b2      	b.n	8003e50 <UART_SetConfig+0x390>
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a4d      	ldr	r2, [pc, #308]	; (8003e24 <UART_SetConfig+0x364>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d106      	bne.n	8003d02 <UART_SetConfig+0x242>
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	19db      	adds	r3, r3, r7
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e0a6      	b.n	8003e50 <UART_SetConfig+0x390>
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a3e      	ldr	r2, [pc, #248]	; (8003e00 <UART_SetConfig+0x340>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d13e      	bne.n	8003d8a <UART_SetConfig+0x2ca>
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <UART_SetConfig+0x350>)
 8003d0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d10:	23c0      	movs	r3, #192	; 0xc0
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	4013      	ands	r3, r2
 8003d16:	22c0      	movs	r2, #192	; 0xc0
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d027      	beq.n	8003d6e <UART_SetConfig+0x2ae>
 8003d1e:	22c0      	movs	r2, #192	; 0xc0
 8003d20:	0112      	lsls	r2, r2, #4
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d82a      	bhi.n	8003d7c <UART_SetConfig+0x2bc>
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d011      	beq.n	8003d52 <UART_SetConfig+0x292>
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d822      	bhi.n	8003d7c <UART_SetConfig+0x2bc>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <UART_SetConfig+0x284>
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <UART_SetConfig+0x2a0>
 8003d42:	e01b      	b.n	8003d7c <UART_SetConfig+0x2bc>
 8003d44:	231b      	movs	r3, #27
 8003d46:	2220      	movs	r2, #32
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e07e      	b.n	8003e50 <UART_SetConfig+0x390>
 8003d52:	231b      	movs	r3, #27
 8003d54:	2220      	movs	r2, #32
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e077      	b.n	8003e50 <UART_SetConfig+0x390>
 8003d60:	231b      	movs	r3, #27
 8003d62:	2220      	movs	r2, #32
 8003d64:	189b      	adds	r3, r3, r2
 8003d66:	19db      	adds	r3, r3, r7
 8003d68:	2204      	movs	r2, #4
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e070      	b.n	8003e50 <UART_SetConfig+0x390>
 8003d6e:	231b      	movs	r3, #27
 8003d70:	2220      	movs	r2, #32
 8003d72:	189b      	adds	r3, r3, r2
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	2208      	movs	r2, #8
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	e069      	b.n	8003e50 <UART_SetConfig+0x390>
 8003d7c:	231b      	movs	r3, #27
 8003d7e:	2220      	movs	r2, #32
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	19db      	adds	r3, r3, r7
 8003d84:	2210      	movs	r2, #16
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e062      	b.n	8003e50 <UART_SetConfig+0x390>
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <UART_SetConfig+0x344>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d157      	bne.n	8003e44 <UART_SetConfig+0x384>
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <UART_SetConfig+0x350>)
 8003d96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d98:	23c0      	movs	r3, #192	; 0xc0
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	22c0      	movs	r2, #192	; 0xc0
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <UART_SetConfig+0x368>
 8003da6:	22c0      	movs	r2, #192	; 0xc0
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d843      	bhi.n	8003e36 <UART_SetConfig+0x376>
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d011      	beq.n	8003dda <UART_SetConfig+0x31a>
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	0092      	lsls	r2, r2, #2
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d83b      	bhi.n	8003e36 <UART_SetConfig+0x376>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <UART_SetConfig+0x30c>
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	0052      	lsls	r2, r2, #1
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <UART_SetConfig+0x328>
 8003dca:	e034      	b.n	8003e36 <UART_SetConfig+0x376>
 8003dcc:	231b      	movs	r3, #27
 8003dce:	2220      	movs	r2, #32
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	19db      	adds	r3, r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e03a      	b.n	8003e50 <UART_SetConfig+0x390>
 8003dda:	231b      	movs	r3, #27
 8003ddc:	2220      	movs	r2, #32
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	19db      	adds	r3, r3, r7
 8003de2:	2202      	movs	r2, #2
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e033      	b.n	8003e50 <UART_SetConfig+0x390>
 8003de8:	231b      	movs	r3, #27
 8003dea:	2220      	movs	r2, #32
 8003dec:	189b      	adds	r3, r3, r2
 8003dee:	19db      	adds	r3, r3, r7
 8003df0:	2204      	movs	r2, #4
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e02c      	b.n	8003e50 <UART_SetConfig+0x390>
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	cfff69f3 	.word	0xcfff69f3
 8003dfc:	ffffcfff 	.word	0xffffcfff
 8003e00:	40008000 	.word	0x40008000
 8003e04:	40008400 	.word	0x40008400
 8003e08:	11fff4ff 	.word	0x11fff4ff
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40004400 	.word	0x40004400
 8003e18:	40004800 	.word	0x40004800
 8003e1c:	40004c00 	.word	0x40004c00
 8003e20:	40005000 	.word	0x40005000
 8003e24:	40013c00 	.word	0x40013c00
 8003e28:	231b      	movs	r3, #27
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	189b      	adds	r3, r3, r2
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	2208      	movs	r2, #8
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e00c      	b.n	8003e50 <UART_SetConfig+0x390>
 8003e36:	231b      	movs	r3, #27
 8003e38:	2220      	movs	r2, #32
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	19db      	adds	r3, r3, r7
 8003e3e:	2210      	movs	r2, #16
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e005      	b.n	8003e50 <UART_SetConfig+0x390>
 8003e44:	231b      	movs	r3, #27
 8003e46:	2220      	movs	r2, #32
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4ac1      	ldr	r2, [pc, #772]	; (800415c <UART_SetConfig+0x69c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d005      	beq.n	8003e66 <UART_SetConfig+0x3a6>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4ac0      	ldr	r2, [pc, #768]	; (8004160 <UART_SetConfig+0x6a0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d000      	beq.n	8003e66 <UART_SetConfig+0x3a6>
 8003e64:	e093      	b.n	8003f8e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e66:	231b      	movs	r3, #27
 8003e68:	2220      	movs	r2, #32
 8003e6a:	189b      	adds	r3, r3, r2
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d015      	beq.n	8003ea0 <UART_SetConfig+0x3e0>
 8003e74:	dc18      	bgt.n	8003ea8 <UART_SetConfig+0x3e8>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00d      	beq.n	8003e96 <UART_SetConfig+0x3d6>
 8003e7a:	dc15      	bgt.n	8003ea8 <UART_SetConfig+0x3e8>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <UART_SetConfig+0x3c6>
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d005      	beq.n	8003e90 <UART_SetConfig+0x3d0>
 8003e84:	e010      	b.n	8003ea8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e86:	f7fe ff8d 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e8e:	e014      	b.n	8003eba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e90:	4bb4      	ldr	r3, [pc, #720]	; (8004164 <UART_SetConfig+0x6a4>)
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e94:	e011      	b.n	8003eba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e96:	f7fe fef9 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e9e:	e00c      	b.n	8003eba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ea6:	e008      	b.n	8003eba <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003eac:	231a      	movs	r3, #26
 8003eae:	2220      	movs	r2, #32
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	19db      	adds	r3, r3, r7
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
        break;
 8003eb8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d100      	bne.n	8003ec2 <UART_SetConfig+0x402>
 8003ec0:	e135      	b.n	800412e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec6:	4ba8      	ldr	r3, [pc, #672]	; (8004168 <UART_SetConfig+0x6a8>)
 8003ec8:	0052      	lsls	r2, r2, #1
 8003eca:	5ad3      	ldrh	r3, [r2, r3]
 8003ecc:	0019      	movs	r1, r3
 8003ece:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ed0:	f7fc f922 	bl	8000118 <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	0013      	movs	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d305      	bcc.n	8003ef4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d906      	bls.n	8003f02 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003ef4:	231a      	movs	r3, #26
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e044      	b.n	8003f8c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f0e:	4b96      	ldr	r3, [pc, #600]	; (8004168 <UART_SetConfig+0x6a8>)
 8003f10:	0052      	lsls	r2, r2, #1
 8003f12:	5ad3      	ldrh	r3, [r2, r3]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	69b8      	ldr	r0, [r7, #24]
 8003f20:	69f9      	ldr	r1, [r7, #28]
 8003f22:	f7fc fa6f 	bl	8000404 <__aeabi_uldivmod>
 8003f26:	0002      	movs	r2, r0
 8003f28:	000b      	movs	r3, r1
 8003f2a:	0e11      	lsrs	r1, r2, #24
 8003f2c:	021d      	lsls	r5, r3, #8
 8003f2e:	430d      	orrs	r5, r1
 8003f30:	0214      	lsls	r4, r2, #8
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68b8      	ldr	r0, [r7, #8]
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	1900      	adds	r0, r0, r4
 8003f44:	4169      	adcs	r1, r5
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f7fc fa56 	bl	8000404 <__aeabi_uldivmod>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	000b      	movs	r3, r1
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	23c0      	movs	r3, #192	; 0xc0
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d309      	bcc.n	8003f7e <UART_SetConfig+0x4be>
 8003f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	035b      	lsls	r3, r3, #13
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d204      	bcs.n	8003f7e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e006      	b.n	8003f8c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003f7e:	231a      	movs	r3, #26
 8003f80:	2220      	movs	r2, #32
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	19db      	adds	r3, r3, r7
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003f8a:	e0d0      	b.n	800412e <UART_SetConfig+0x66e>
 8003f8c:	e0cf      	b.n	800412e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d000      	beq.n	8003f9c <UART_SetConfig+0x4dc>
 8003f9a:	e070      	b.n	800407e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003f9c:	231b      	movs	r3, #27
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d015      	beq.n	8003fd6 <UART_SetConfig+0x516>
 8003faa:	dc18      	bgt.n	8003fde <UART_SetConfig+0x51e>
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d00d      	beq.n	8003fcc <UART_SetConfig+0x50c>
 8003fb0:	dc15      	bgt.n	8003fde <UART_SetConfig+0x51e>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <UART_SetConfig+0x4fc>
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d005      	beq.n	8003fc6 <UART_SetConfig+0x506>
 8003fba:	e010      	b.n	8003fde <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fef2 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fc4:	e014      	b.n	8003ff0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <UART_SetConfig+0x6a4>)
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fca:	e011      	b.n	8003ff0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fcc:	f7fe fe5e 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8003fd0:	0003      	movs	r3, r0
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fd4:	e00c      	b.n	8003ff0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003fdc:	e008      	b.n	8003ff0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003fe2:	231a      	movs	r3, #26
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
        break;
 8003fee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d100      	bne.n	8003ff8 <UART_SetConfig+0x538>
 8003ff6:	e09a      	b.n	800412e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffc:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <UART_SetConfig+0x6a8>)
 8003ffe:	0052      	lsls	r2, r2, #1
 8004000:	5ad3      	ldrh	r3, [r2, r3]
 8004002:	0019      	movs	r1, r3
 8004004:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004006:	f7fc f887 	bl	8000118 <__udivsi3>
 800400a:	0003      	movs	r3, r0
 800400c:	005a      	lsls	r2, r3, #1
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	18d2      	adds	r2, r2, r3
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	0019      	movs	r1, r3
 800401c:	0010      	movs	r0, r2
 800401e:	f7fc f87b 	bl	8000118 <__udivsi3>
 8004022:	0003      	movs	r3, r0
 8004024:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d921      	bls.n	8004070 <UART_SetConfig+0x5b0>
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	429a      	cmp	r2, r3
 8004034:	d21c      	bcs.n	8004070 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	b29a      	uxth	r2, r3
 800403a:	200e      	movs	r0, #14
 800403c:	2420      	movs	r4, #32
 800403e:	1903      	adds	r3, r0, r4
 8004040:	19db      	adds	r3, r3, r7
 8004042:	210f      	movs	r1, #15
 8004044:	438a      	bics	r2, r1
 8004046:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	b29b      	uxth	r3, r3
 800404e:	2207      	movs	r2, #7
 8004050:	4013      	ands	r3, r2
 8004052:	b299      	uxth	r1, r3
 8004054:	1903      	adds	r3, r0, r4
 8004056:	19db      	adds	r3, r3, r7
 8004058:	1902      	adds	r2, r0, r4
 800405a:	19d2      	adds	r2, r2, r7
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1902      	adds	r2, r0, r4
 8004068:	19d2      	adds	r2, r2, r7
 800406a:	8812      	ldrh	r2, [r2, #0]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	e05e      	b.n	800412e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004070:	231a      	movs	r3, #26
 8004072:	2220      	movs	r2, #32
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19db      	adds	r3, r3, r7
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e057      	b.n	800412e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800407e:	231b      	movs	r3, #27
 8004080:	2220      	movs	r2, #32
 8004082:	189b      	adds	r3, r3, r2
 8004084:	19db      	adds	r3, r3, r7
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d015      	beq.n	80040b8 <UART_SetConfig+0x5f8>
 800408c:	dc18      	bgt.n	80040c0 <UART_SetConfig+0x600>
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00d      	beq.n	80040ae <UART_SetConfig+0x5ee>
 8004092:	dc15      	bgt.n	80040c0 <UART_SetConfig+0x600>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <UART_SetConfig+0x5de>
 8004098:	2b02      	cmp	r3, #2
 800409a:	d005      	beq.n	80040a8 <UART_SetConfig+0x5e8>
 800409c:	e010      	b.n	80040c0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409e:	f7fe fe81 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80040a2:	0003      	movs	r3, r0
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040a6:	e014      	b.n	80040d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <UART_SetConfig+0x6a4>)
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ac:	e011      	b.n	80040d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe fded 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 80040b2:	0003      	movs	r3, r0
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040b6:	e00c      	b.n	80040d2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040be:	e008      	b.n	80040d2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80040c4:	231a      	movs	r3, #26
 80040c6:	2220      	movs	r2, #32
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
        break;
 80040d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02a      	beq.n	800412e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040dc:	4b22      	ldr	r3, [pc, #136]	; (8004168 <UART_SetConfig+0x6a8>)
 80040de:	0052      	lsls	r2, r2, #1
 80040e0:	5ad3      	ldrh	r3, [r2, r3]
 80040e2:	0019      	movs	r1, r3
 80040e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040e6:	f7fc f817 	bl	8000118 <__udivsi3>
 80040ea:	0003      	movs	r3, r0
 80040ec:	001a      	movs	r2, r3
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	18d2      	adds	r2, r2, r3
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	0019      	movs	r1, r3
 80040fc:	0010      	movs	r0, r2
 80040fe:	f7fc f80b 	bl	8000118 <__udivsi3>
 8004102:	0003      	movs	r3, r0
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2b0f      	cmp	r3, #15
 800410a:	d90a      	bls.n	8004122 <UART_SetConfig+0x662>
 800410c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	025b      	lsls	r3, r3, #9
 8004112:	429a      	cmp	r2, r3
 8004114:	d205      	bcs.n	8004122 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	b29a      	uxth	r2, r3
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
 8004120:	e005      	b.n	800412e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004122:	231a      	movs	r3, #26
 8004124:	2220      	movs	r2, #32
 8004126:	189b      	adds	r3, r3, r2
 8004128:	19db      	adds	r3, r3, r7
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	226a      	movs	r2, #106	; 0x6a
 8004132:	2101      	movs	r1, #1
 8004134:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2268      	movs	r2, #104	; 0x68
 800413a:	2101      	movs	r1, #1
 800413c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2200      	movs	r2, #0
 8004142:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	2200      	movs	r2, #0
 8004148:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800414a:	231a      	movs	r3, #26
 800414c:	2220      	movs	r2, #32
 800414e:	189b      	adds	r3, r3, r2
 8004150:	19db      	adds	r3, r3, r7
 8004152:	781b      	ldrb	r3, [r3, #0]
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	b010      	add	sp, #64	; 0x40
 800415a:	bdb0      	pop	{r4, r5, r7, pc}
 800415c:	40008000 	.word	0x40008000
 8004160:	40008400 	.word	0x40008400
 8004164:	00f42400 	.word	0x00f42400
 8004168:	0800609c 	.word	0x0800609c

0800416c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	2208      	movs	r2, #8
 800417a:	4013      	ands	r3, r2
 800417c:	d00b      	beq.n	8004196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <UART_AdvFeatureConfig+0x144>)
 8004186:	4013      	ands	r3, r2
 8004188:	0019      	movs	r1, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d00b      	beq.n	80041b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4a43      	ldr	r2, [pc, #268]	; (80042b4 <UART_AdvFeatureConfig+0x148>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	0019      	movs	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	2202      	movs	r2, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d00b      	beq.n	80041da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a3b      	ldr	r2, [pc, #236]	; (80042b8 <UART_AdvFeatureConfig+0x14c>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	2204      	movs	r2, #4
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00b      	beq.n	80041fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a34      	ldr	r2, [pc, #208]	; (80042bc <UART_AdvFeatureConfig+0x150>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	2210      	movs	r2, #16
 8004202:	4013      	ands	r3, r2
 8004204:	d00b      	beq.n	800421e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <UART_AdvFeatureConfig+0x154>)
 800420e:	4013      	ands	r3, r2
 8004210:	0019      	movs	r1, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	2220      	movs	r2, #32
 8004224:	4013      	ands	r3, r2
 8004226:	d00b      	beq.n	8004240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <UART_AdvFeatureConfig+0x158>)
 8004230:	4013      	ands	r3, r2
 8004232:	0019      	movs	r1, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	2240      	movs	r2, #64	; 0x40
 8004246:	4013      	ands	r3, r2
 8004248:	d01d      	beq.n	8004286 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <UART_AdvFeatureConfig+0x15c>)
 8004252:	4013      	ands	r3, r2
 8004254:	0019      	movs	r1, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	035b      	lsls	r3, r3, #13
 800426a:	429a      	cmp	r2, r3
 800426c:	d10b      	bne.n	8004286 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	4a15      	ldr	r2, [pc, #84]	; (80042cc <UART_AdvFeatureConfig+0x160>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	4013      	ands	r3, r2
 800428e:	d00b      	beq.n	80042a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <UART_AdvFeatureConfig+0x164>)
 8004298:	4013      	ands	r3, r2
 800429a:	0019      	movs	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	ffff7fff 	.word	0xffff7fff
 80042b4:	fffdffff 	.word	0xfffdffff
 80042b8:	fffeffff 	.word	0xfffeffff
 80042bc:	fffbffff 	.word	0xfffbffff
 80042c0:	ffffefff 	.word	0xffffefff
 80042c4:	ffffdfff 	.word	0xffffdfff
 80042c8:	ffefffff 	.word	0xffefffff
 80042cc:	ff9fffff 	.word	0xff9fffff
 80042d0:	fff7ffff 	.word	0xfff7ffff

080042d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b092      	sub	sp, #72	; 0x48
 80042d8:	af02      	add	r7, sp, #8
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2290      	movs	r2, #144	; 0x90
 80042e0:	2100      	movs	r1, #0
 80042e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e4:	f7fc fdd6 	bl	8000e94 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2208      	movs	r2, #8
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d12d      	bne.n	8004356 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	0391      	lsls	r1, r2, #14
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4a47      	ldr	r2, [pc, #284]	; (8004420 <UART_CheckIdleState+0x14c>)
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	f000 f88e 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800430c:	1e03      	subs	r3, r0, #0
 800430e:	d022      	beq.n	8004356 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004318:	63bb      	str	r3, [r7, #56]	; 0x38
 800431a:	2301      	movs	r3, #1
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	438a      	bics	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2288      	movs	r2, #136	; 0x88
 8004346:	2120      	movs	r1, #32
 8004348:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2284      	movs	r2, #132	; 0x84
 800434e:	2100      	movs	r1, #0
 8004350:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e060      	b.n	8004418 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2204      	movs	r2, #4
 800435e:	4013      	ands	r3, r2
 8004360:	2b04      	cmp	r3, #4
 8004362:	d146      	bne.n	80043f2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	03d1      	lsls	r1, r2, #15
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <UART_CheckIdleState+0x14c>)
 800436e:	9200      	str	r2, [sp, #0]
 8004370:	2200      	movs	r2, #0
 8004372:	f000 f859 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8004376:	1e03      	subs	r3, r0, #0
 8004378:	d03b      	beq.n	80043f2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437a:	f3ef 8310 	mrs	r3, PRIMASK
 800437e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004380:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
 8004384:	2301      	movs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f383 8810 	msr	PRIMASK, r3
}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4922      	ldr	r1, [pc, #136]	; (8004424 <UART_CheckIdleState+0x150>)
 800439c:	400a      	ands	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f383 8810 	msr	PRIMASK, r3
}
 80043aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ac:	f3ef 8310 	mrs	r3, PRIMASK
 80043b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80043b2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	438a      	bics	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f383 8810 	msr	PRIMASK, r3
}
 80043dc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	228c      	movs	r2, #140	; 0x8c
 80043e2:	2120      	movs	r1, #32
 80043e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2284      	movs	r2, #132	; 0x84
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e012      	b.n	8004418 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2288      	movs	r2, #136	; 0x88
 80043f6:	2120      	movs	r1, #32
 80043f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	228c      	movs	r2, #140	; 0x8c
 80043fe:	2120      	movs	r1, #32
 8004400:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2284      	movs	r2, #132	; 0x84
 8004412:	2100      	movs	r1, #0
 8004414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b010      	add	sp, #64	; 0x40
 800441e:	bd80      	pop	{r7, pc}
 8004420:	01ffffff 	.word	0x01ffffff
 8004424:	fffffedf 	.word	0xfffffedf

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	1dfb      	adds	r3, r7, #7
 8004436:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e051      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	3301      	adds	r3, #1
 800443e:	d04e      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fc fd28 	bl	8000e94 <HAL_GetTick>
 8004444:	0002      	movs	r2, r0
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e051      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2204      	movs	r2, #4
 8004462:	4013      	ands	r3, r2
 8004464:	d03b      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb6>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d038      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb6>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d035      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2208      	movs	r2, #8
 800447a:	4013      	ands	r3, r2
 800447c:	2b08      	cmp	r3, #8
 800447e:	d111      	bne.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	0018      	movs	r0, r3
 800448c:	f000 f83c 	bl	8004508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2290      	movs	r2, #144	; 0x90
 8004494:	2108      	movs	r1, #8
 8004496:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2284      	movs	r2, #132	; 0x84
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e02c      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	401a      	ands	r2, r3
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d112      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	0112      	lsls	r2, r2, #4
 80044c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	0018      	movs	r0, r3
 80044c6:	f000 f81f 	bl	8004508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2290      	movs	r2, #144	; 0x90
 80044ce:	2120      	movs	r1, #32
 80044d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2284      	movs	r2, #132	; 0x84
 80044d6:	2100      	movs	r1, #0
 80044d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e00f      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	425a      	negs	r2, r3
 80044ee:	4153      	adcs	r3, r2
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	001a      	movs	r2, r3
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d09e      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	; 0x38
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004510:	f3ef 8310 	mrs	r3, PRIMASK
 8004514:	617b      	str	r3, [r7, #20]
  return(result);
 8004516:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
 800451a:	2301      	movs	r3, #1
 800451c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			; (mov r8, r8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4926      	ldr	r1, [pc, #152]	; (80045cc <UART_EndRxTransfer+0xc4>)
 8004532:	400a      	ands	r2, r1
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004542:	f3ef 8310 	mrs	r3, PRIMASK
 8004546:	623b      	str	r3, [r7, #32]
  return(result);
 8004548:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
 800454c:	2301      	movs	r3, #1
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	f383 8810 	msr	PRIMASK, r3
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	491b      	ldr	r1, [pc, #108]	; (80045d0 <UART_EndRxTransfer+0xc8>)
 8004564:	400a      	ands	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	f383 8810 	msr	PRIMASK, r3
}
 8004572:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d118      	bne.n	80045ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457c:	f3ef 8310 	mrs	r3, PRIMASK
 8004580:	60bb      	str	r3, [r7, #8]
  return(result);
 8004582:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004586:	2301      	movs	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f383 8810 	msr	PRIMASK, r3
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2110      	movs	r1, #16
 800459e:	438a      	bics	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f383 8810 	msr	PRIMASK, r3
}
 80045ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	228c      	movs	r2, #140	; 0x8c
 80045b2:	2120      	movs	r1, #32
 80045b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b00e      	add	sp, #56	; 0x38
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	fffffedf 	.word	0xfffffedf
 80045d0:	effffffe 	.word	0xeffffffe

080045d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	225e      	movs	r2, #94	; 0x5e
 80045e6:	2100      	movs	r1, #0
 80045e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2256      	movs	r2, #86	; 0x56
 80045ee:	2100      	movs	r1, #0
 80045f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7ff fa4f 	bl	8003a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460a:	f3ef 8310 	mrs	r3, PRIMASK
 800460e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	2301      	movs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f383 8810 	msr	PRIMASK, r3
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	438a      	bics	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f383 8810 	msr	PRIMASK, r3
}
 800463a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2288      	movs	r2, #136	; 0x88
 8004640:	2120      	movs	r1, #32
 8004642:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0018      	movs	r0, r3
 800464e:	f7ff fa1b 	bl	8003a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b006      	add	sp, #24
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b002      	add	sp, #8
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b002      	add	sp, #8
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b002      	add	sp, #8
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2284      	movs	r2, #132	; 0x84
 8004698:	5c9b      	ldrb	r3, [r3, r2]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800469e:	2302      	movs	r3, #2
 80046a0:	e027      	b.n	80046f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2284      	movs	r2, #132	; 0x84
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2288      	movs	r2, #136	; 0x88
 80046ae:	2124      	movs	r1, #36	; 0x24
 80046b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2101      	movs	r1, #1
 80046c6:	438a      	bics	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <HAL_UARTEx_DisableFifoMode+0x70>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2288      	movs	r2, #136	; 0x88
 80046e4:	2120      	movs	r1, #32
 80046e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2284      	movs	r2, #132	; 0x84
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	0018      	movs	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b004      	add	sp, #16
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	dfffffff 	.word	0xdfffffff

08004700 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2284      	movs	r2, #132	; 0x84
 800470e:	5c9b      	ldrb	r3, [r3, r2]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e02e      	b.n	8004776 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2284      	movs	r2, #132	; 0x84
 800471c:	2101      	movs	r1, #1
 800471e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2288      	movs	r2, #136	; 0x88
 8004724:	2124      	movs	r1, #36	; 0x24
 8004726:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	438a      	bics	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	08d9      	lsrs	r1, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	0018      	movs	r0, r3
 8004758:	f000 f854 	bl	8004804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2288      	movs	r2, #136	; 0x88
 8004768:	2120      	movs	r1, #32
 800476a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2284      	movs	r2, #132	; 0x84
 8004770:	2100      	movs	r1, #0
 8004772:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b004      	add	sp, #16
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2284      	movs	r2, #132	; 0x84
 800478e:	5c9b      	ldrb	r3, [r3, r2]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e02f      	b.n	80047f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2284      	movs	r2, #132	; 0x84
 800479c:	2101      	movs	r1, #1
 800479e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2288      	movs	r2, #136	; 0x88
 80047a4:	2124      	movs	r1, #36	; 0x24
 80047a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2101      	movs	r1, #1
 80047bc:	438a      	bics	r2, r1
 80047be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	4a0e      	ldr	r2, [pc, #56]	; (8004800 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	0019      	movs	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 f813 	bl	8004804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2288      	movs	r2, #136	; 0x88
 80047ea:	2120      	movs	r1, #32
 80047ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2284      	movs	r2, #132	; 0x84
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	0018      	movs	r0, r3
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b004      	add	sp, #16
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	f1ffffff 	.word	0xf1ffffff

08004804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004810:	2b00      	cmp	r3, #0
 8004812:	d108      	bne.n	8004826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	226a      	movs	r2, #106	; 0x6a
 8004818:	2101      	movs	r1, #1
 800481a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2268      	movs	r2, #104	; 0x68
 8004820:	2101      	movs	r1, #1
 8004822:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004824:	e043      	b.n	80048ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004826:	260f      	movs	r6, #15
 8004828:	19bb      	adds	r3, r7, r6
 800482a:	2208      	movs	r2, #8
 800482c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800482e:	200e      	movs	r0, #14
 8004830:	183b      	adds	r3, r7, r0
 8004832:	2208      	movs	r2, #8
 8004834:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	0e5b      	lsrs	r3, r3, #25
 800483e:	b2da      	uxtb	r2, r3
 8004840:	240d      	movs	r4, #13
 8004842:	193b      	adds	r3, r7, r4
 8004844:	2107      	movs	r1, #7
 8004846:	400a      	ands	r2, r1
 8004848:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	0f5b      	lsrs	r3, r3, #29
 8004852:	b2da      	uxtb	r2, r3
 8004854:	250c      	movs	r5, #12
 8004856:	197b      	adds	r3, r7, r5
 8004858:	2107      	movs	r1, #7
 800485a:	400a      	ands	r2, r1
 800485c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800485e:	183b      	adds	r3, r7, r0
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	197a      	adds	r2, r7, r5
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	4914      	ldr	r1, [pc, #80]	; (80048b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004868:	5c8a      	ldrb	r2, [r1, r2]
 800486a:	435a      	muls	r2, r3
 800486c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800486e:	197b      	adds	r3, r7, r5
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <UARTEx_SetNbDataToProcess+0xb8>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004876:	0019      	movs	r1, r3
 8004878:	f7fb fcd8 	bl	800022c <__divsi3>
 800487c:	0003      	movs	r3, r0
 800487e:	b299      	uxth	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	226a      	movs	r2, #106	; 0x6a
 8004884:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004886:	19bb      	adds	r3, r7, r6
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	193a      	adds	r2, r7, r4
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	490a      	ldr	r1, [pc, #40]	; (80048b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004890:	5c8a      	ldrb	r2, [r1, r2]
 8004892:	435a      	muls	r2, r3
 8004894:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004896:	193b      	adds	r3, r7, r4
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <UARTEx_SetNbDataToProcess+0xb8>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800489e:	0019      	movs	r1, r3
 80048a0:	f7fb fcc4 	bl	800022c <__divsi3>
 80048a4:	0003      	movs	r3, r0
 80048a6:	b299      	uxth	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2268      	movs	r2, #104	; 0x68
 80048ac:	5299      	strh	r1, [r3, r2]
}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b005      	add	sp, #20
 80048b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	080060b4 	.word	0x080060b4
 80048bc:	080060bc 	.word	0x080060bc

080048c0 <enterNormalMode>:
{
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
}

void enterNormalMode(void)									//正常模式
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_SET);		//CAN1_STB
 80048c4:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <enterNormalMode+0x28>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7fd fd0c 	bl	80022e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FDCAN1_EN_GPIO_Port, FDCAN1_EN_Pin, GPIO_PIN_SET);		//CAN1_EN
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	0219      	lsls	r1, r3, #8
 80048d4:	23a0      	movs	r3, #160	; 0xa0
 80048d6:	05db      	lsls	r3, r3, #23
 80048d8:	2201      	movs	r2, #1
 80048da:	0018      	movs	r0, r3
 80048dc:	f7fd fd04 	bl	80022e8 <HAL_GPIO_WritePin>
}
 80048e0:	46c0      	nop			; (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	50000800 	.word	0x50000800

080048ec <FDCAN_Config>:
int size = 400;
int validCount;
int head,tail;

void FDCAN_Config(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <FDCAN_Config+0x74>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
	hfdcan_filter.FilterIndex = 0;
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <FDCAN_Config+0x74>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]
	hfdcan_filter.FilterType = FDCAN_FILTER_MASK;
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <FDCAN_Config+0x74>)
 80048fe:	2202      	movs	r2, #2
 8004900:	609a      	str	r2, [r3, #8]
	hfdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004902:	4b17      	ldr	r3, [pc, #92]	; (8004960 <FDCAN_Config+0x74>)
 8004904:	2201      	movs	r2, #1
 8004906:	60da      	str	r2, [r3, #12]
	hfdcan_filter.FilterID1 = 0x111;
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <FDCAN_Config+0x74>)
 800490a:	2212      	movs	r2, #18
 800490c:	32ff      	adds	r2, #255	; 0xff
 800490e:	611a      	str	r2, [r3, #16]
	hfdcan_filter.FilterID2 = 0x7FF;
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <FDCAN_Config+0x74>)
 8004912:	4a14      	ldr	r2, [pc, #80]	; (8004964 <FDCAN_Config+0x78>)
 8004914:	615a      	str	r2, [r3, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <FDCAN_Config+0x74>)
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <FDCAN_Config+0x7c>)
 800491a:	0011      	movs	r1, r2
 800491c:	0018      	movs	r0, r3
 800491e:	f7fc fe09 	bl	8001534 <HAL_FDCAN_ConfigFilter>
 8004922:	1e03      	subs	r3, r0, #0
 8004924:	d001      	beq.n	800492a <FDCAN_Config+0x3e>
	{
		Error_Handler();
 8004926:	f7fc f857 	bl	80009d8 <Error_Handler>
	}

	/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, hfdcan1.Init.DataPrescaler * hfdcan1.Init.DataTimeSeg1, 0) != HAL_OK)
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <FDCAN_Config+0x7c>)
 800492c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <FDCAN_Config+0x7c>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	4353      	muls	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <FDCAN_Config+0x7c>)
 8004938:	2200      	movs	r2, #0
 800493a:	0018      	movs	r0, r3
 800493c:	f7fc fe57 	bl	80015ee <HAL_FDCAN_ConfigTxDelayCompensation>
 8004940:	1e03      	subs	r3, r0, #0
 8004942:	d001      	beq.n	8004948 <FDCAN_Config+0x5c>
	{
		Error_Handler();
 8004944:	f7fc f848 	bl	80009d8 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 8004948:	4b07      	ldr	r3, [pc, #28]	; (8004968 <FDCAN_Config+0x7c>)
 800494a:	0018      	movs	r0, r3
 800494c:	f7fc fe6f 	bl	800162e <HAL_FDCAN_EnableTxDelayCompensation>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d001      	beq.n	8004958 <FDCAN_Config+0x6c>
	{
		Error_Handler();
 8004954:	f7fc f840 	bl	80009d8 <Error_Handler>
	}
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	20000088 	.word	0x20000088
 8004964:	000007ff 	.word	0x000007ff
 8004968:	200000a0 	.word	0x200000a0

0800496c <FDCAN_Enable>:

void FDCAN_Enable(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	FDCAN_Config();
 8004970:	f7ff ffbc 	bl	80048ec <FDCAN_Config>
	enterNormalMode();											//CAN收发器正常模�?????
 8004974:	f7ff ffa4 	bl	80048c0 <enterNormalMode>
	HAL_Delay(5);
 8004978:	2005      	movs	r0, #5
 800497a:	f7fc fa95 	bl	8000ea8 <HAL_Delay>

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)		//使能FIFO0新消息中�?????
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <FDCAN_Enable+0x8c>)
 8004980:	2200      	movs	r2, #0
 8004982:	2101      	movs	r1, #1
 8004984:	0018      	movs	r0, r3
 8004986:	f7fc fffb 	bl	8001980 <HAL_FDCAN_ActivateNotification>
 800498a:	1e03      	subs	r3, r0, #0
 800498c:	d001      	beq.n	8004992 <FDCAN_Enable+0x26>
	{
		Error_Handler();
 800498e:	f7fc f823 	bl	80009d8 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)														//使能FDCAN
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <FDCAN_Enable+0x8c>)
 8004994:	0018      	movs	r0, r3
 8004996:	f7fc fe6a 	bl	800166e <HAL_FDCAN_Start>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d001      	beq.n	80049a2 <FDCAN_Enable+0x36>
	{
		Error_Handler();
 800499e:	f7fc f81b 	bl	80009d8 <Error_Handler>
	}

	TxHeader.Identifier = 0x111;
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <FDCAN_Enable+0x90>)
 80049a4:	2212      	movs	r2, #18
 80049a6:	32ff      	adds	r2, #255	; 0xff
 80049a8:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <FDCAN_Enable+0x90>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80049b0:	4b12      	ldr	r3, [pc, #72]	; (80049fc <FDCAN_Enable+0x90>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <FDCAN_Enable+0x90>)
 80049b8:	220f      	movs	r2, #15
 80049ba:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <FDCAN_Enable+0x90>)
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <FDCAN_Enable+0x90>)
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	0352      	lsls	r2, r2, #13
 80049c8:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <FDCAN_Enable+0x90>)
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	0392      	lsls	r2, r2, #14
 80049d0:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <FDCAN_Enable+0x90>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker       = 0;
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <FDCAN_Enable+0x90>)
 80049da:	2200      	movs	r2, #0
 80049dc:	621a      	str	r2, [r3, #32]

	head = tail = 0;
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <FDCAN_Enable+0x94>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <FDCAN_Enable+0x94>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <FDCAN_Enable+0x98>)
 80049ea:	601a      	str	r2, [r3, #0]
	validCount = 0;
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <FDCAN_Enable+0x9c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	200000a0 	.word	0x200000a0
 80049fc:	200001a0 	.word	0x200001a0
 8004a00:	2000a44c 	.word	0x2000a44c
 8004a04:	2000a448 	.word	0x2000a448
 8004a08:	2000a444 	.word	0x2000a444

08004a0c <FDCAN_SendByte>:
	header->TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
	header->MessageMarker       = 0;
}

void FDCAN_SendByte(uint8_t byte)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	0002      	movs	r2, r0
 8004a14:	1dfb      	adds	r3, r7, #7
 8004a16:	701a      	strb	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <FDCAN_SendByte+0x64>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	60da      	str	r2, [r3, #12]
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <FDCAN_SendByte+0x68>)
 8004a22:	0018      	movs	r0, r3
 8004a24:	f7fc ff9c 	bl	8001960 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004a28:	1e03      	subs	r3, r0, #0
 8004a2a:	d0f9      	beq.n	8004a20 <FDCAN_SendByte+0x14>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,&byte);
 8004a2c:	1dfa      	adds	r2, r7, #7
 8004a2e:	4910      	ldr	r1, [pc, #64]	; (8004a70 <FDCAN_SendByte+0x64>)
 8004a30:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <FDCAN_SendByte+0x68>)
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fc fe41 	bl	80016ba <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE );
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <FDCAN_SendByte+0x68>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	401a      	ands	r2, r3
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d1f5      	bne.n	8004a3a <FDCAN_SendByte+0x2e>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8004a4e:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <FDCAN_SendByte+0x68>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <FDCAN_SendByte+0x68>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	0092      	lsls	r2, r2, #2
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8004a60:	2001      	movs	r0, #1
 8004a62:	f7fc fa21 	bl	8000ea8 <HAL_Delay>
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	200001a0 	.word	0x200001a0
 8004a74:	200000a0 	.word	0x200000a0

08004a78 <FDCAN_SendBytes>:

void FDCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  TxHeader.DataLength = BufferSize;
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <FDCAN_SendBytes+0x60>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	60da      	str	r2, [r3, #12]

  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <FDCAN_SendBytes+0x64>)
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7fc ff67 	bl	8001960 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004a92:	1e03      	subs	r3, r0, #0
 8004a94:	d0f9      	beq.n	8004a8a <FDCAN_SendBytes+0x12>

  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Buffer);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	490f      	ldr	r1, [pc, #60]	; (8004ad8 <FDCAN_SendBytes+0x60>)
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <FDCAN_SendBytes+0x64>)
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7fc fe0c 	bl	80016ba <HAL_FDCAN_AddMessageToTxFifoQ>

  /* Wait that the data is completely sent (sent FIFO empty) */
  while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE);
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <FDCAN_SendBytes+0x64>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	401a      	ands	r2, r3
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1f5      	bne.n	8004aa4 <FDCAN_SendBytes+0x2c>

  /* Clear the complete flag */
  (&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <FDCAN_SendBytes+0x64>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <FDCAN_SendBytes+0x64>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	0092      	lsls	r2, r2, #2
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	651a      	str	r2, [r3, #80]	; 0x50

  HAL_Delay(1);
 8004aca:	2001      	movs	r0, #1
 8004acc:	f7fc f9ec 	bl	8000ea8 <HAL_Delay>
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	200001a0 	.word	0x200001a0
 8004adc:	200000a0 	.word	0x200000a0

08004ae0 <FDCAN_ReadByte>:

uint8_t FDCAN_ReadByte(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b09c      	sub	sp, #112	; 0x70
 8004ae4:	af00      	add	r7, sp, #0
	FDCanRxHeader header;
	int err;

	err = read(&header);
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 f8a1 	bl	8004c30 <read>
 8004aee:	0003      	movs	r3, r0
 8004af0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if(err){
 8004af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <FDCAN_ReadByte+0x26>
		HAL_Delay(1);
 8004af8:	2001      	movs	r0, #1
 8004afa:	f7fc f9d5 	bl	8000ea8 <HAL_Delay>
		return header.data[0];
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	2228      	movs	r2, #40	; 0x28
 8004b02:	5c9b      	ldrb	r3, [r3, r2]
 8004b04:	e003      	b.n	8004b0e <FDCAN_ReadByte+0x2e>
	}
	else
	{
		printf("Buffer is Empty\n");
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <FDCAN_ReadByte+0x38>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 fb37 	bl	800517c <puts>
	}
}
 8004b0e:	0018      	movs	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b01c      	add	sp, #112	; 0x70
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	08005f58 	.word	0x08005f58

08004b1c <FDCAN_ReadBytes>:

void FDCAN_ReadBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8004b1c:	b590      	push	{r4, r7, lr}
 8004b1e:	b09f      	sub	sp, #124	; 0x7c
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
	FDCanRxHeader header;
	int err;

	err = read(&header);
 8004b26:	240c      	movs	r4, #12
 8004b28:	193b      	adds	r3, r7, r4
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 f880 	bl	8004c30 <read>
 8004b30:	0003      	movs	r3, r0
 8004b32:	677b      	str	r3, [r7, #116]	; 0x74
	if(err){
 8004b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <FDCAN_ReadBytes+0x36>
		memcpy(Buffer,header.data,sizeof(header.data));
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	193b      	adds	r3, r7, r4
 8004b3e:	0010      	movs	r0, r2
 8004b40:	3328      	adds	r3, #40	; 0x28
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	0019      	movs	r1, r3
 8004b46:	f000 fc98 	bl	800547a <memcpy>
		HAL_Delay(1);
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f7fc f9ac 	bl	8000ea8 <HAL_Delay>
	}
	else
	{
		printf("Buffer is Empty\n");
	}
}
 8004b50:	e003      	b.n	8004b5a <FDCAN_ReadBytes+0x3e>
		printf("Buffer is Empty\n");
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <FDCAN_ReadBytes+0x48>)
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 fb11 	bl	800517c <puts>
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b01f      	add	sp, #124	; 0x7c
 8004b60:	bd90      	pop	{r4, r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	08005f58 	.word	0x08005f58

08004b68 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)			//接收中断回调函数重写
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b09d      	sub	sp, #116	; 0x74
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	FDCanRxHeader header;
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2201      	movs	r2, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00c      	beq.n	8004b94 <HAL_FDCAN_RxFifo0Callback+0x2c>
	{
//		rx_flag = 1;
		/* Retrieve Rx messages from RX FIFO0 */
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	18bb      	adds	r3, r7, r2
 8004b7e:	3328      	adds	r3, #40	; 0x28
 8004b80:	0014      	movs	r4, r2
 8004b82:	18ba      	adds	r2, r7, r2
 8004b84:	4805      	ldr	r0, [pc, #20]	; (8004b9c <HAL_FDCAN_RxFifo0Callback+0x34>)
 8004b86:	2140      	movs	r1, #64	; 0x40
 8004b88:	f7fc fddc 	bl	8001744 <HAL_FDCAN_GetRxMessage>
		/* write buffer */
		write(&header);
 8004b8c:	193b      	adds	r3, r7, r4
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f81a 	bl	8004bc8 <write>
	}
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b01d      	add	sp, #116	; 0x74
 8004b9a:	bd90      	pop	{r4, r7, pc}
 8004b9c:	200000a0 	.word	0x200000a0

08004ba0 <getNextPos>:

int getNextPos(int cur)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	return (cur+1) == size ? 0 : cur+1;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <getNextPos+0x24>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d002      	beq.n	8004bba <getNextPos+0x1a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	e000      	b.n	8004bbc <getNextPos+0x1c>
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	2000000c 	.word	0x2000000c

08004bc8 <write>:

int write(FDCanRxHeader *content)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
	if (validCount < size) {
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <write+0x58>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <write+0x5c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	da18      	bge.n	8004c12 <write+0x4a>
		_Buffer[tail] = *content;
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <write+0x60>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a11      	ldr	r2, [pc, #68]	; (8004c2c <write+0x64>)
 8004be6:	2168      	movs	r1, #104	; 0x68
 8004be8:	434b      	muls	r3, r1
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	2268      	movs	r2, #104	; 0x68
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 fc42 	bl	800547a <memcpy>

		tail = getNextPos(tail);
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <write+0x60>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7ff ffd0 	bl	8004ba0 <getNextPos>
 8004c00:	0002      	movs	r2, r0
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <write+0x60>)
 8004c04:	601a      	str	r2, [r3, #0]
		validCount++;
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <write+0x58>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <write+0x58>)
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e001      	b.n	8004c16 <write+0x4e>
	} else {
		/* Buffer is FULL */
		ret = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b004      	add	sp, #16
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	2000a444 	.word	0x2000a444
 8004c24:	2000000c 	.word	0x2000000c
 8004c28:	2000a44c 	.word	0x2000a44c
 8004c2c:	200001c4 	.word	0x200001c4

08004c30 <read>:

int read(FDCanRxHeader* buf)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
	if (validCount > 0) {
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <read+0x54>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	dd18      	ble.n	8004c76 <read+0x46>
		*buf = _Buffer[head];
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <read+0x58>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <read+0x5c>)
 8004c4c:	2168      	movs	r1, #104	; 0x68
 8004c4e:	434b      	muls	r3, r1
 8004c50:	18d3      	adds	r3, r2, r3
 8004c52:	2268      	movs	r2, #104	; 0x68
 8004c54:	0019      	movs	r1, r3
 8004c56:	f000 fc10 	bl	800547a <memcpy>

		head = getNextPos(head);
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <read+0x58>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7ff ff9e 	bl	8004ba0 <getNextPos>
 8004c64:	0002      	movs	r2, r0
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <read+0x58>)
 8004c68:	601a      	str	r2, [r3, #0]
		validCount--;
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <read+0x54>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <read+0x54>)
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e001      	b.n	8004c7a <read+0x4a>
	} else {
		/* Buffer is Empty */
		ret = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	2000a444 	.word	0x2000a444
 8004c88:	2000a448 	.word	0x2000a448
 8004c8c:	200001c4 	.word	0x200001c4

08004c90 <FDCAN_GetCommand>:

void FDCAN_GetCommand(void)
{
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
	uint8_t num,  version, commandlist[12];
	TxHeader.Identifier = GET;
 8004c96:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <FDCAN_GetCommand+0xdc>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

	FDCAN_SendByte(0x00);
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f7ff feb5 	bl	8004a0c <FDCAN_SendByte>
	HAL_Delay(10);
 8004ca2:	200a      	movs	r0, #10
 8004ca4:	f7fc f900 	bl	8000ea8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004ca8:	f7ff ff1a 	bl	8004ae0 <FDCAN_ReadByte>
 8004cac:	0003      	movs	r3, r0
 8004cae:	001a      	movs	r2, r3
 8004cb0:	2379      	movs	r3, #121	; 0x79
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b79      	cmp	r3, #121	; 0x79
 8004cb6:	d143      	bne.n	8004d40 <FDCAN_GetCommand+0xb0>
	{
		num = FDCAN_ReadByte();
 8004cb8:	2513      	movs	r5, #19
 8004cba:	197c      	adds	r4, r7, r5
 8004cbc:	f7ff ff10 	bl	8004ae0 <FDCAN_ReadByte>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	7023      	strb	r3, [r4, #0]
		version = FDCAN_ReadByte();
 8004cc4:	2612      	movs	r6, #18
 8004cc6:	19bc      	adds	r4, r7, r6
 8004cc8:	f7ff ff0a 	bl	8004ae0 <FDCAN_ReadByte>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	7023      	strb	r3, [r4, #0]
		printf("num:%d,version:%d\n",num,version);
 8004cd0:	197b      	adds	r3, r7, r5
 8004cd2:	7819      	ldrb	r1, [r3, #0]
 8004cd4:	19bb      	adds	r3, r7, r6
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	4b25      	ldr	r3, [pc, #148]	; (8004d70 <FDCAN_GetCommand+0xe0>)
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f9de 	bl	800509c <iprintf>
		printf("GetCommand:\n");
 8004ce0:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <FDCAN_GetCommand+0xe4>)
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f000 fa4a 	bl	800517c <puts>

		for(int i=0;i<num;i++)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e015      	b.n	8004d1a <FDCAN_GetCommand+0x8a>
		{
			commandlist[i] = FDCAN_ReadByte();
 8004cee:	f7ff fef7 	bl	8004ae0 <FDCAN_ReadByte>
 8004cf2:	0003      	movs	r3, r0
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	1d3a      	adds	r2, r7, #4
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	18d3      	adds	r3, r2, r3
 8004cfc:	1c0a      	adds	r2, r1, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
			printf("0x%x\n",commandlist[i]);
 8004d00:	1d3a      	adds	r2, r7, #4
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	001a      	movs	r2, r3
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <FDCAN_GetCommand+0xe8>)
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f000 f9c4 	bl	800509c <iprintf>
		for(int i=0;i<num;i++)
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	2313      	movs	r3, #19
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	dbe3      	blt.n	8004cee <FDCAN_GetCommand+0x5e>
		}

		if((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004d26:	f7ff fedb 	bl	8004ae0 <FDCAN_ReadByte>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	2379      	movs	r3, #121	; 0x79
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b79      	cmp	r3, #121	; 0x79
 8004d34:	d115      	bne.n	8004d62 <FDCAN_GetCommand+0xd2>
		{
			printf("GetCommand Success!\n");
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <FDCAN_GetCommand+0xec>)
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 fa1f 	bl	800517c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004d3e:	e010      	b.n	8004d62 <FDCAN_GetCommand+0xd2>
	else if((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004d40:	f7ff fece 	bl	8004ae0 <FDCAN_ReadByte>
 8004d44:	0003      	movs	r3, r0
 8004d46:	001a      	movs	r2, r3
 8004d48:	231f      	movs	r3, #31
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b1f      	cmp	r3, #31
 8004d4e:	d104      	bne.n	8004d5a <FDCAN_GetCommand+0xca>
		printf("GetCommand fail!\n");
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <FDCAN_GetCommand+0xf0>)
 8004d52:	0018      	movs	r0, r3
 8004d54:	f000 fa12 	bl	800517c <puts>
}
 8004d58:	e003      	b.n	8004d62 <FDCAN_GetCommand+0xd2>
		printf("error\n");
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <FDCAN_GetCommand+0xf4>)
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 fa0d 	bl	800517c <puts>
}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b007      	add	sp, #28
 8004d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	200001a0 	.word	0x200001a0
 8004d70:	08005f68 	.word	0x08005f68
 8004d74:	08005f7c 	.word	0x08005f7c
 8004d78:	08005f88 	.word	0x08005f88
 8004d7c:	08005f90 	.word	0x08005f90
 8004d80:	08005fa4 	.word	0x08005fa4
 8004d84:	08005fb8 	.word	0x08005fb8

08004d88 <FDCAN_GetID>:

void FDCAN_GetID(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b090      	sub	sp, #64	; 0x40
 8004d8c:	af00      	add	r7, sp, #0
	uint8_t data[64];
	TxHeader.Identifier = GETID;
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <FDCAN_GetID+0x8c>)
 8004d90:	2202      	movs	r2, #2
 8004d92:	601a      	str	r2, [r3, #0]

	FDCAN_SendByte(0x00);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7ff fe39 	bl	8004a0c <FDCAN_SendByte>
	HAL_Delay(10);
 8004d9a:	200a      	movs	r0, #10
 8004d9c:	f7fc f884 	bl	8000ea8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004da0:	f7ff fe9e 	bl	8004ae0 <FDCAN_ReadByte>
 8004da4:	0003      	movs	r3, r0
 8004da6:	001a      	movs	r2, r3
 8004da8:	2379      	movs	r3, #121	; 0x79
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b79      	cmp	r3, #121	; 0x79
 8004dae:	d11b      	bne.n	8004de8 <FDCAN_GetID+0x60>
	{
		FDCAN_ReadBytes(data,FDCAN_DLC_BYTES_2);
 8004db0:	003b      	movs	r3, r7
 8004db2:	2102      	movs	r1, #2
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff feb1 	bl	8004b1c <FDCAN_ReadBytes>
		printf("GetID:0x%x%x\n",*data,*(data+1));
 8004dba:	003b      	movs	r3, r7
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	003b      	movs	r3, r7
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <FDCAN_GetID+0x90>)
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 f967 	bl	800509c <iprintf>
		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004dce:	f7ff fe87 	bl	8004ae0 <FDCAN_ReadByte>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	2379      	movs	r3, #121	; 0x79
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b79      	cmp	r3, #121	; 0x79
 8004ddc:	d115      	bne.n	8004e0a <FDCAN_GetID+0x82>
		{
			printf("GetID Success!\n");
 8004dde:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <FDCAN_GetID+0x94>)
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 f9cb 	bl	800517c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004de6:	e010      	b.n	8004e0a <FDCAN_GetID+0x82>
	else if((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004de8:	f7ff fe7a 	bl	8004ae0 <FDCAN_ReadByte>
 8004dec:	0003      	movs	r3, r0
 8004dee:	001a      	movs	r2, r3
 8004df0:	231f      	movs	r3, #31
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b1f      	cmp	r3, #31
 8004df6:	d104      	bne.n	8004e02 <FDCAN_GetID+0x7a>
		printf("GetID fail!\n");
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <FDCAN_GetID+0x98>)
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 f9be 	bl	800517c <puts>
}
 8004e00:	e003      	b.n	8004e0a <FDCAN_GetID+0x82>
		printf("error\n");
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <FDCAN_GetID+0x9c>)
 8004e04:	0018      	movs	r0, r3
 8004e06:	f000 f9b9 	bl	800517c <puts>
}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b010      	add	sp, #64	; 0x40
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	200001a0 	.word	0x200001a0
 8004e18:	08005fc0 	.word	0x08005fc0
 8004e1c:	08005fd0 	.word	0x08005fd0
 8004e20:	08005fe0 	.word	0x08005fe0
 8004e24:	08005fb8 	.word	0x08005fb8

08004e28 <FDCAN_ReadMemory>:

void FDCAN_ReadMemory(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b094      	sub	sp, #80	; 0x50
 8004e2c:	af00      	add	r7, sp, #0
	uint8_t data[64];
	uint8_t txdata[5] = {0x08,0x00,0x00,0x00,0xFF};
 8004e2e:	003b      	movs	r3, r7
 8004e30:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <FDCAN_ReadMemory+0xd0>)
 8004e32:	6811      	ldr	r1, [r2, #0]
 8004e34:	6019      	str	r1, [r3, #0]
 8004e36:	7912      	ldrb	r2, [r2, #4]
 8004e38:	711a      	strb	r2, [r3, #4]
	TxHeader.Identifier = READ;
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <FDCAN_ReadMemory+0xd4>)
 8004e3c:	2211      	movs	r2, #17
 8004e3e:	601a      	str	r2, [r3, #0]

	FDCAN_SendBytes(txdata,FDCAN_DLC_BYTES_5);
 8004e40:	003b      	movs	r3, r7
 8004e42:	2105      	movs	r1, #5
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff fe17 	bl	8004a78 <FDCAN_SendBytes>
	HAL_Delay(10);
 8004e4a:	200a      	movs	r0, #10
 8004e4c:	f7fc f82c 	bl	8000ea8 <HAL_Delay>
	if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004e50:	f7ff fe46 	bl	8004ae0 <FDCAN_ReadByte>
 8004e54:	0003      	movs	r3, r0
 8004e56:	001a      	movs	r2, r3
 8004e58:	2379      	movs	r3, #121	; 0x79
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b79      	cmp	r3, #121	; 0x79
 8004e5e:	d136      	bne.n	8004ece <FDCAN_ReadMemory+0xa6>
	{
		printf("MemoryData:\n");
 8004e60:	4b27      	ldr	r3, [pc, #156]	; (8004f00 <FDCAN_ReadMemory+0xd8>)
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 f98a 	bl	800517c <puts>
		for(int i=0;i<4;i++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6c:	e01f      	b.n	8004eae <FDCAN_ReadMemory+0x86>
		{
			FDCAN_ReadBytes(data,FDCAN_DLC_BYTES_64);
 8004e6e:	2308      	movs	r3, #8
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	210f      	movs	r1, #15
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7ff fe51 	bl	8004b1c <FDCAN_ReadBytes>
			for (int j=0;j<64;j++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e7e:	e00d      	b.n	8004e9c <FDCAN_ReadMemory+0x74>
			{
				printf("%x ",data[j]);
 8004e80:	2308      	movs	r3, #8
 8004e82:	18fa      	adds	r2, r7, r3
 8004e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e86:	18d3      	adds	r3, r2, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	001a      	movs	r2, r3
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <FDCAN_ReadMemory+0xdc>)
 8004e8e:	0011      	movs	r1, r2
 8004e90:	0018      	movs	r0, r3
 8004e92:	f000 f903 	bl	800509c <iprintf>
			for (int j=0;j<64;j++)
 8004e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e98:	3301      	adds	r3, #1
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	2b3f      	cmp	r3, #63	; 0x3f
 8004ea0:	ddee      	ble.n	8004e80 <FDCAN_ReadMemory+0x58>
			}
			printf("\n");
 8004ea2:	200a      	movs	r0, #10
 8004ea4:	f000 f90a 	bl	80050bc <putchar>
		for(int i=0;i<4;i++)
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eaa:	3301      	adds	r3, #1
 8004eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	dddc      	ble.n	8004e6e <FDCAN_ReadMemory+0x46>
		}

		if ((FDCAN_ReadByte() & ACK_BYTE) == ACK_BYTE)
 8004eb4:	f7ff fe14 	bl	8004ae0 <FDCAN_ReadByte>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	001a      	movs	r2, r3
 8004ebc:	2379      	movs	r3, #121	; 0x79
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b79      	cmp	r3, #121	; 0x79
 8004ec2:	d115      	bne.n	8004ef0 <FDCAN_ReadMemory+0xc8>
		{
			printf("ReadMemory Success!\n");
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <FDCAN_ReadMemory+0xe0>)
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 f958 	bl	800517c <puts>
	}
	else
	{
		printf("error\n");
	}
}
 8004ecc:	e010      	b.n	8004ef0 <FDCAN_ReadMemory+0xc8>
	else if((FDCAN_ReadByte() & NACK_BYTE) == NACK_BYTE)
 8004ece:	f7ff fe07 	bl	8004ae0 <FDCAN_ReadByte>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	231f      	movs	r3, #31
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b1f      	cmp	r3, #31
 8004edc:	d104      	bne.n	8004ee8 <FDCAN_ReadMemory+0xc0>
		printf("ReadMemory fail!\n");
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <FDCAN_ReadMemory+0xe4>)
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 f94b 	bl	800517c <puts>
}
 8004ee6:	e003      	b.n	8004ef0 <FDCAN_ReadMemory+0xc8>
		printf("error\n");
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <FDCAN_ReadMemory+0xe8>)
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 f946 	bl	800517c <puts>
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b014      	add	sp, #80	; 0x50
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	08006024 	.word	0x08006024
 8004efc:	200001a0 	.word	0x200001a0
 8004f00:	08005fec 	.word	0x08005fec
 8004f04:	08005ff8 	.word	0x08005ff8
 8004f08:	08005ffc 	.word	0x08005ffc
 8004f0c:	08006010 	.word	0x08006010
 8004f10:	08005fb8 	.word	0x08005fb8

08004f14 <std>:
 8004f14:	2300      	movs	r3, #0
 8004f16:	b510      	push	{r4, lr}
 8004f18:	0004      	movs	r4, r0
 8004f1a:	6003      	str	r3, [r0, #0]
 8004f1c:	6043      	str	r3, [r0, #4]
 8004f1e:	6083      	str	r3, [r0, #8]
 8004f20:	8181      	strh	r1, [r0, #12]
 8004f22:	6643      	str	r3, [r0, #100]	; 0x64
 8004f24:	81c2      	strh	r2, [r0, #14]
 8004f26:	6103      	str	r3, [r0, #16]
 8004f28:	6143      	str	r3, [r0, #20]
 8004f2a:	6183      	str	r3, [r0, #24]
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	2208      	movs	r2, #8
 8004f30:	305c      	adds	r0, #92	; 0x5c
 8004f32:	f000 fa1f 	bl	8005374 <memset>
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <std+0x50>)
 8004f38:	6224      	str	r4, [r4, #32]
 8004f3a:	6263      	str	r3, [r4, #36]	; 0x24
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <std+0x54>)
 8004f3e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <std+0x58>)
 8004f42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <std+0x5c>)
 8004f46:	6323      	str	r3, [r4, #48]	; 0x30
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <std+0x60>)
 8004f4a:	429c      	cmp	r4, r3
 8004f4c:	d005      	beq.n	8004f5a <std+0x46>
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <std+0x64>)
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d002      	beq.n	8004f5a <std+0x46>
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <std+0x68>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	d103      	bne.n	8004f62 <std+0x4e>
 8004f5a:	0020      	movs	r0, r4
 8004f5c:	3058      	adds	r0, #88	; 0x58
 8004f5e:	f000 fa89 	bl	8005474 <__retarget_lock_init_recursive>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	08005191 	.word	0x08005191
 8004f68:	080051b9 	.word	0x080051b9
 8004f6c:	080051f1 	.word	0x080051f1
 8004f70:	0800521d 	.word	0x0800521d
 8004f74:	2000a450 	.word	0x2000a450
 8004f78:	2000a4b8 	.word	0x2000a4b8
 8004f7c:	2000a520 	.word	0x2000a520

08004f80 <stdio_exit_handler>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <stdio_exit_handler+0x10>)
 8004f84:	4903      	ldr	r1, [pc, #12]	; (8004f94 <stdio_exit_handler+0x14>)
 8004f86:	4804      	ldr	r0, [pc, #16]	; (8004f98 <stdio_exit_handler+0x18>)
 8004f88:	f000 f86c 	bl	8005064 <_fwalk_sglue>
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	20000010 	.word	0x20000010
 8004f94:	08005d25 	.word	0x08005d25
 8004f98:	2000001c 	.word	0x2000001c

08004f9c <cleanup_stdio>:
 8004f9c:	6841      	ldr	r1, [r0, #4]
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <cleanup_stdio+0x30>)
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	4299      	cmp	r1, r3
 8004fa6:	d001      	beq.n	8004fac <cleanup_stdio+0x10>
 8004fa8:	f000 febc 	bl	8005d24 <_fflush_r>
 8004fac:	68a1      	ldr	r1, [r4, #8]
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <cleanup_stdio+0x34>)
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	d002      	beq.n	8004fba <cleanup_stdio+0x1e>
 8004fb4:	0020      	movs	r0, r4
 8004fb6:	f000 feb5 	bl	8005d24 <_fflush_r>
 8004fba:	68e1      	ldr	r1, [r4, #12]
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <cleanup_stdio+0x38>)
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d002      	beq.n	8004fc8 <cleanup_stdio+0x2c>
 8004fc2:	0020      	movs	r0, r4
 8004fc4:	f000 feae 	bl	8005d24 <_fflush_r>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	2000a450 	.word	0x2000a450
 8004fd0:	2000a4b8 	.word	0x2000a4b8
 8004fd4:	2000a520 	.word	0x2000a520

08004fd8 <global_stdio_init.part.0>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4b09      	ldr	r3, [pc, #36]	; (8005000 <global_stdio_init.part.0+0x28>)
 8004fdc:	4a09      	ldr	r2, [pc, #36]	; (8005004 <global_stdio_init.part.0+0x2c>)
 8004fde:	2104      	movs	r1, #4
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	4809      	ldr	r0, [pc, #36]	; (8005008 <global_stdio_init.part.0+0x30>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f7ff ff95 	bl	8004f14 <std>
 8004fea:	2201      	movs	r2, #1
 8004fec:	2109      	movs	r1, #9
 8004fee:	4807      	ldr	r0, [pc, #28]	; (800500c <global_stdio_init.part.0+0x34>)
 8004ff0:	f7ff ff90 	bl	8004f14 <std>
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	2112      	movs	r1, #18
 8004ff8:	4805      	ldr	r0, [pc, #20]	; (8005010 <global_stdio_init.part.0+0x38>)
 8004ffa:	f7ff ff8b 	bl	8004f14 <std>
 8004ffe:	bd10      	pop	{r4, pc}
 8005000:	2000a588 	.word	0x2000a588
 8005004:	08004f81 	.word	0x08004f81
 8005008:	2000a450 	.word	0x2000a450
 800500c:	2000a4b8 	.word	0x2000a4b8
 8005010:	2000a520 	.word	0x2000a520

08005014 <__sfp_lock_acquire>:
 8005014:	b510      	push	{r4, lr}
 8005016:	4802      	ldr	r0, [pc, #8]	; (8005020 <__sfp_lock_acquire+0xc>)
 8005018:	f000 fa2d 	bl	8005476 <__retarget_lock_acquire_recursive>
 800501c:	bd10      	pop	{r4, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	2000a591 	.word	0x2000a591

08005024 <__sfp_lock_release>:
 8005024:	b510      	push	{r4, lr}
 8005026:	4802      	ldr	r0, [pc, #8]	; (8005030 <__sfp_lock_release+0xc>)
 8005028:	f000 fa26 	bl	8005478 <__retarget_lock_release_recursive>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	2000a591 	.word	0x2000a591

08005034 <__sinit>:
 8005034:	b510      	push	{r4, lr}
 8005036:	0004      	movs	r4, r0
 8005038:	f7ff ffec 	bl	8005014 <__sfp_lock_acquire>
 800503c:	6a23      	ldr	r3, [r4, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <__sinit+0x14>
 8005042:	f7ff ffef 	bl	8005024 <__sfp_lock_release>
 8005046:	bd10      	pop	{r4, pc}
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <__sinit+0x28>)
 800504a:	6223      	str	r3, [r4, #32]
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <__sinit+0x2c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f6      	bne.n	8005042 <__sinit+0xe>
 8005054:	f7ff ffc0 	bl	8004fd8 <global_stdio_init.part.0>
 8005058:	e7f3      	b.n	8005042 <__sinit+0xe>
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	08004f9d 	.word	0x08004f9d
 8005060:	2000a588 	.word	0x2000a588

08005064 <_fwalk_sglue>:
 8005064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005066:	0014      	movs	r4, r2
 8005068:	2600      	movs	r6, #0
 800506a:	9000      	str	r0, [sp, #0]
 800506c:	9101      	str	r1, [sp, #4]
 800506e:	68a5      	ldr	r5, [r4, #8]
 8005070:	6867      	ldr	r7, [r4, #4]
 8005072:	3f01      	subs	r7, #1
 8005074:	d504      	bpl.n	8005080 <_fwalk_sglue+0x1c>
 8005076:	6824      	ldr	r4, [r4, #0]
 8005078:	2c00      	cmp	r4, #0
 800507a:	d1f8      	bne.n	800506e <_fwalk_sglue+0xa>
 800507c:	0030      	movs	r0, r6
 800507e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005080:	89ab      	ldrh	r3, [r5, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d908      	bls.n	8005098 <_fwalk_sglue+0x34>
 8005086:	220e      	movs	r2, #14
 8005088:	5eab      	ldrsh	r3, [r5, r2]
 800508a:	3301      	adds	r3, #1
 800508c:	d004      	beq.n	8005098 <_fwalk_sglue+0x34>
 800508e:	0029      	movs	r1, r5
 8005090:	9800      	ldr	r0, [sp, #0]
 8005092:	9b01      	ldr	r3, [sp, #4]
 8005094:	4798      	blx	r3
 8005096:	4306      	orrs	r6, r0
 8005098:	3568      	adds	r5, #104	; 0x68
 800509a:	e7ea      	b.n	8005072 <_fwalk_sglue+0xe>

0800509c <iprintf>:
 800509c:	b40f      	push	{r0, r1, r2, r3}
 800509e:	b507      	push	{r0, r1, r2, lr}
 80050a0:	4905      	ldr	r1, [pc, #20]	; (80050b8 <iprintf+0x1c>)
 80050a2:	ab04      	add	r3, sp, #16
 80050a4:	6808      	ldr	r0, [r1, #0]
 80050a6:	cb04      	ldmia	r3!, {r2}
 80050a8:	6881      	ldr	r1, [r0, #8]
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	f000 fb14 	bl	80056d8 <_vfiprintf_r>
 80050b0:	b003      	add	sp, #12
 80050b2:	bc08      	pop	{r3}
 80050b4:	b004      	add	sp, #16
 80050b6:	4718      	bx	r3
 80050b8:	20000068 	.word	0x20000068

080050bc <putchar>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <putchar+0x10>)
 80050c0:	0001      	movs	r1, r0
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	6882      	ldr	r2, [r0, #8]
 80050c6:	f000 febf 	bl	8005e48 <_putc_r>
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	20000068 	.word	0x20000068

080050d0 <_puts_r>:
 80050d0:	6a03      	ldr	r3, [r0, #32]
 80050d2:	b570      	push	{r4, r5, r6, lr}
 80050d4:	0005      	movs	r5, r0
 80050d6:	000e      	movs	r6, r1
 80050d8:	6884      	ldr	r4, [r0, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <_puts_r+0x12>
 80050de:	f7ff ffa9 	bl	8005034 <__sinit>
 80050e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050e4:	07db      	lsls	r3, r3, #31
 80050e6:	d405      	bmi.n	80050f4 <_puts_r+0x24>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	059b      	lsls	r3, r3, #22
 80050ec:	d402      	bmi.n	80050f4 <_puts_r+0x24>
 80050ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f0:	f000 f9c1 	bl	8005476 <__retarget_lock_acquire_recursive>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	071b      	lsls	r3, r3, #28
 80050f8:	d502      	bpl.n	8005100 <_puts_r+0x30>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d11f      	bne.n	8005140 <_puts_r+0x70>
 8005100:	0021      	movs	r1, r4
 8005102:	0028      	movs	r0, r5
 8005104:	f000 f8d2 	bl	80052ac <__swsetup_r>
 8005108:	2800      	cmp	r0, #0
 800510a:	d019      	beq.n	8005140 <_puts_r+0x70>
 800510c:	2501      	movs	r5, #1
 800510e:	426d      	negs	r5, r5
 8005110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005112:	07db      	lsls	r3, r3, #31
 8005114:	d405      	bmi.n	8005122 <_puts_r+0x52>
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	059b      	lsls	r3, r3, #22
 800511a:	d402      	bmi.n	8005122 <_puts_r+0x52>
 800511c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800511e:	f000 f9ab 	bl	8005478 <__retarget_lock_release_recursive>
 8005122:	0028      	movs	r0, r5
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	3601      	adds	r6, #1
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	da04      	bge.n	8005138 <_puts_r+0x68>
 800512e:	69a2      	ldr	r2, [r4, #24]
 8005130:	429a      	cmp	r2, r3
 8005132:	dc16      	bgt.n	8005162 <_puts_r+0x92>
 8005134:	290a      	cmp	r1, #10
 8005136:	d014      	beq.n	8005162 <_puts_r+0x92>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	6022      	str	r2, [r4, #0]
 800513e:	7019      	strb	r1, [r3, #0]
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	7831      	ldrb	r1, [r6, #0]
 8005144:	3b01      	subs	r3, #1
 8005146:	2900      	cmp	r1, #0
 8005148:	d1ed      	bne.n	8005126 <_puts_r+0x56>
 800514a:	60a3      	str	r3, [r4, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	da0f      	bge.n	8005170 <_puts_r+0xa0>
 8005150:	0028      	movs	r0, r5
 8005152:	0022      	movs	r2, r4
 8005154:	310a      	adds	r1, #10
 8005156:	f000 f867 	bl	8005228 <__swbuf_r>
 800515a:	250a      	movs	r5, #10
 800515c:	3001      	adds	r0, #1
 800515e:	d1d7      	bne.n	8005110 <_puts_r+0x40>
 8005160:	e7d4      	b.n	800510c <_puts_r+0x3c>
 8005162:	0022      	movs	r2, r4
 8005164:	0028      	movs	r0, r5
 8005166:	f000 f85f 	bl	8005228 <__swbuf_r>
 800516a:	3001      	adds	r0, #1
 800516c:	d1e8      	bne.n	8005140 <_puts_r+0x70>
 800516e:	e7cd      	b.n	800510c <_puts_r+0x3c>
 8005170:	250a      	movs	r5, #10
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	6022      	str	r2, [r4, #0]
 8005178:	701d      	strb	r5, [r3, #0]
 800517a:	e7c9      	b.n	8005110 <_puts_r+0x40>

0800517c <puts>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4b03      	ldr	r3, [pc, #12]	; (800518c <puts+0x10>)
 8005180:	0001      	movs	r1, r0
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	f7ff ffa4 	bl	80050d0 <_puts_r>
 8005188:	bd10      	pop	{r4, pc}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	20000068 	.word	0x20000068

08005190 <__sread>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	000c      	movs	r4, r1
 8005194:	250e      	movs	r5, #14
 8005196:	5f49      	ldrsh	r1, [r1, r5]
 8005198:	f000 f91a 	bl	80053d0 <_read_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	db03      	blt.n	80051a8 <__sread+0x18>
 80051a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80051a2:	181b      	adds	r3, r3, r0
 80051a4:	6563      	str	r3, [r4, #84]	; 0x54
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <__sread+0x24>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	e7f9      	b.n	80051a6 <__sread+0x16>
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	ffffefff 	.word	0xffffefff

080051b8 <__swrite>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	001f      	movs	r7, r3
 80051bc:	898b      	ldrh	r3, [r1, #12]
 80051be:	0005      	movs	r5, r0
 80051c0:	000c      	movs	r4, r1
 80051c2:	0016      	movs	r6, r2
 80051c4:	05db      	lsls	r3, r3, #23
 80051c6:	d505      	bpl.n	80051d4 <__swrite+0x1c>
 80051c8:	230e      	movs	r3, #14
 80051ca:	5ec9      	ldrsh	r1, [r1, r3]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2302      	movs	r3, #2
 80051d0:	f000 f8ea 	bl	80053a8 <_lseek_r>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <__swrite+0x34>)
 80051d8:	0028      	movs	r0, r5
 80051da:	4013      	ands	r3, r2
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	0032      	movs	r2, r6
 80051e0:	230e      	movs	r3, #14
 80051e2:	5ee1      	ldrsh	r1, [r4, r3]
 80051e4:	003b      	movs	r3, r7
 80051e6:	f000 f907 	bl	80053f8 <_write_r>
 80051ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ec:	ffffefff 	.word	0xffffefff

080051f0 <__sseek>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	000c      	movs	r4, r1
 80051f4:	250e      	movs	r5, #14
 80051f6:	5f49      	ldrsh	r1, [r1, r5]
 80051f8:	f000 f8d6 	bl	80053a8 <_lseek_r>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	1c42      	adds	r2, r0, #1
 8005200:	d103      	bne.n	800520a <__sseek+0x1a>
 8005202:	4a05      	ldr	r2, [pc, #20]	; (8005218 <__sseek+0x28>)
 8005204:	4013      	ands	r3, r2
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	bd70      	pop	{r4, r5, r6, pc}
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	0152      	lsls	r2, r2, #5
 800520e:	4313      	orrs	r3, r2
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	6560      	str	r0, [r4, #84]	; 0x54
 8005214:	e7f8      	b.n	8005208 <__sseek+0x18>
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	ffffefff 	.word	0xffffefff

0800521c <__sclose>:
 800521c:	b510      	push	{r4, lr}
 800521e:	230e      	movs	r3, #14
 8005220:	5ec9      	ldrsh	r1, [r1, r3]
 8005222:	f000 f8af 	bl	8005384 <_close_r>
 8005226:	bd10      	pop	{r4, pc}

08005228 <__swbuf_r>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	0006      	movs	r6, r0
 800522c:	000d      	movs	r5, r1
 800522e:	0014      	movs	r4, r2
 8005230:	2800      	cmp	r0, #0
 8005232:	d004      	beq.n	800523e <__swbuf_r+0x16>
 8005234:	6a03      	ldr	r3, [r0, #32]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <__swbuf_r+0x16>
 800523a:	f7ff fefb 	bl	8005034 <__sinit>
 800523e:	69a3      	ldr	r3, [r4, #24]
 8005240:	60a3      	str	r3, [r4, #8]
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	071b      	lsls	r3, r3, #28
 8005246:	d528      	bpl.n	800529a <__swbuf_r+0x72>
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d025      	beq.n	800529a <__swbuf_r+0x72>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	b2ef      	uxtb	r7, r5
 8005254:	1ac0      	subs	r0, r0, r3
 8005256:	6963      	ldr	r3, [r4, #20]
 8005258:	b2ed      	uxtb	r5, r5
 800525a:	4283      	cmp	r3, r0
 800525c:	dc05      	bgt.n	800526a <__swbuf_r+0x42>
 800525e:	0021      	movs	r1, r4
 8005260:	0030      	movs	r0, r6
 8005262:	f000 fd5f 	bl	8005d24 <_fflush_r>
 8005266:	2800      	cmp	r0, #0
 8005268:	d11d      	bne.n	80052a6 <__swbuf_r+0x7e>
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	3001      	adds	r0, #1
 800526e:	3b01      	subs	r3, #1
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	701f      	strb	r7, [r3, #0]
 800527a:	6963      	ldr	r3, [r4, #20]
 800527c:	4283      	cmp	r3, r0
 800527e:	d004      	beq.n	800528a <__swbuf_r+0x62>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	07db      	lsls	r3, r3, #31
 8005284:	d507      	bpl.n	8005296 <__swbuf_r+0x6e>
 8005286:	2d0a      	cmp	r5, #10
 8005288:	d105      	bne.n	8005296 <__swbuf_r+0x6e>
 800528a:	0021      	movs	r1, r4
 800528c:	0030      	movs	r0, r6
 800528e:	f000 fd49 	bl	8005d24 <_fflush_r>
 8005292:	2800      	cmp	r0, #0
 8005294:	d107      	bne.n	80052a6 <__swbuf_r+0x7e>
 8005296:	0028      	movs	r0, r5
 8005298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800529a:	0021      	movs	r1, r4
 800529c:	0030      	movs	r0, r6
 800529e:	f000 f805 	bl	80052ac <__swsetup_r>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d0d3      	beq.n	800524e <__swbuf_r+0x26>
 80052a6:	2501      	movs	r5, #1
 80052a8:	426d      	negs	r5, r5
 80052aa:	e7f4      	b.n	8005296 <__swbuf_r+0x6e>

080052ac <__swsetup_r>:
 80052ac:	4b30      	ldr	r3, [pc, #192]	; (8005370 <__swsetup_r+0xc4>)
 80052ae:	b570      	push	{r4, r5, r6, lr}
 80052b0:	0005      	movs	r5, r0
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	000c      	movs	r4, r1
 80052b6:	2800      	cmp	r0, #0
 80052b8:	d004      	beq.n	80052c4 <__swsetup_r+0x18>
 80052ba:	6a03      	ldr	r3, [r0, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <__swsetup_r+0x18>
 80052c0:	f7ff feb8 	bl	8005034 <__sinit>
 80052c4:	230c      	movs	r3, #12
 80052c6:	5ee2      	ldrsh	r2, [r4, r3]
 80052c8:	b293      	uxth	r3, r2
 80052ca:	0711      	lsls	r1, r2, #28
 80052cc:	d423      	bmi.n	8005316 <__swsetup_r+0x6a>
 80052ce:	06d9      	lsls	r1, r3, #27
 80052d0:	d407      	bmi.n	80052e2 <__swsetup_r+0x36>
 80052d2:	2309      	movs	r3, #9
 80052d4:	2001      	movs	r0, #1
 80052d6:	602b      	str	r3, [r5, #0]
 80052d8:	3337      	adds	r3, #55	; 0x37
 80052da:	4313      	orrs	r3, r2
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	4240      	negs	r0, r0
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	075b      	lsls	r3, r3, #29
 80052e4:	d513      	bpl.n	800530e <__swsetup_r+0x62>
 80052e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d008      	beq.n	80052fe <__swsetup_r+0x52>
 80052ec:	0023      	movs	r3, r4
 80052ee:	3344      	adds	r3, #68	; 0x44
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d002      	beq.n	80052fa <__swsetup_r+0x4e>
 80052f4:	0028      	movs	r0, r5
 80052f6:	f000 f8c9 	bl	800548c <_free_r>
 80052fa:	2300      	movs	r3, #0
 80052fc:	6363      	str	r3, [r4, #52]	; 0x34
 80052fe:	2224      	movs	r2, #36	; 0x24
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	4393      	bics	r3, r2
 8005304:	81a3      	strh	r3, [r4, #12]
 8005306:	2300      	movs	r3, #0
 8005308:	6063      	str	r3, [r4, #4]
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	2308      	movs	r3, #8
 8005310:	89a2      	ldrh	r2, [r4, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	6923      	ldr	r3, [r4, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <__swsetup_r+0x88>
 800531c:	21a0      	movs	r1, #160	; 0xa0
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	0089      	lsls	r1, r1, #2
 8005324:	0092      	lsls	r2, r2, #2
 8005326:	400b      	ands	r3, r1
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <__swsetup_r+0x88>
 800532c:	0021      	movs	r1, r4
 800532e:	0028      	movs	r0, r5
 8005330:	f000 fd4c 	bl	8005dcc <__smakebuf_r>
 8005334:	220c      	movs	r2, #12
 8005336:	5ea3      	ldrsh	r3, [r4, r2]
 8005338:	2001      	movs	r0, #1
 800533a:	001a      	movs	r2, r3
 800533c:	b299      	uxth	r1, r3
 800533e:	4002      	ands	r2, r0
 8005340:	4203      	tst	r3, r0
 8005342:	d00f      	beq.n	8005364 <__swsetup_r+0xb8>
 8005344:	2200      	movs	r2, #0
 8005346:	60a2      	str	r2, [r4, #8]
 8005348:	6962      	ldr	r2, [r4, #20]
 800534a:	4252      	negs	r2, r2
 800534c:	61a2      	str	r2, [r4, #24]
 800534e:	2000      	movs	r0, #0
 8005350:	6922      	ldr	r2, [r4, #16]
 8005352:	4282      	cmp	r2, r0
 8005354:	d1c4      	bne.n	80052e0 <__swsetup_r+0x34>
 8005356:	0609      	lsls	r1, r1, #24
 8005358:	d5c2      	bpl.n	80052e0 <__swsetup_r+0x34>
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	4313      	orrs	r3, r2
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	3801      	subs	r0, #1
 8005362:	e7bd      	b.n	80052e0 <__swsetup_r+0x34>
 8005364:	0788      	lsls	r0, r1, #30
 8005366:	d400      	bmi.n	800536a <__swsetup_r+0xbe>
 8005368:	6962      	ldr	r2, [r4, #20]
 800536a:	60a2      	str	r2, [r4, #8]
 800536c:	e7ef      	b.n	800534e <__swsetup_r+0xa2>
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	20000068 	.word	0x20000068

08005374 <memset>:
 8005374:	0003      	movs	r3, r0
 8005376:	1882      	adds	r2, r0, r2
 8005378:	4293      	cmp	r3, r2
 800537a:	d100      	bne.n	800537e <memset+0xa>
 800537c:	4770      	bx	lr
 800537e:	7019      	strb	r1, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	e7f9      	b.n	8005378 <memset+0x4>

08005384 <_close_r>:
 8005384:	2300      	movs	r3, #0
 8005386:	b570      	push	{r4, r5, r6, lr}
 8005388:	4d06      	ldr	r5, [pc, #24]	; (80053a4 <_close_r+0x20>)
 800538a:	0004      	movs	r4, r0
 800538c:	0008      	movs	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fb fbb9 	bl	8000b06 <_close>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d103      	bne.n	80053a0 <_close_r+0x1c>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d000      	beq.n	80053a0 <_close_r+0x1c>
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	2000a58c 	.word	0x2000a58c

080053a8 <_lseek_r>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	0004      	movs	r4, r0
 80053ac:	0008      	movs	r0, r1
 80053ae:	0011      	movs	r1, r2
 80053b0:	001a      	movs	r2, r3
 80053b2:	2300      	movs	r3, #0
 80053b4:	4d05      	ldr	r5, [pc, #20]	; (80053cc <_lseek_r+0x24>)
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fb fbc6 	bl	8000b48 <_lseek>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d103      	bne.n	80053c8 <_lseek_r+0x20>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d000      	beq.n	80053c8 <_lseek_r+0x20>
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	bd70      	pop	{r4, r5, r6, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	2000a58c 	.word	0x2000a58c

080053d0 <_read_r>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	0004      	movs	r4, r0
 80053d4:	0008      	movs	r0, r1
 80053d6:	0011      	movs	r1, r2
 80053d8:	001a      	movs	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	4d05      	ldr	r5, [pc, #20]	; (80053f4 <_read_r+0x24>)
 80053de:	602b      	str	r3, [r5, #0]
 80053e0:	f7fb fb58 	bl	8000a94 <_read>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d103      	bne.n	80053f0 <_read_r+0x20>
 80053e8:	682b      	ldr	r3, [r5, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d000      	beq.n	80053f0 <_read_r+0x20>
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	2000a58c 	.word	0x2000a58c

080053f8 <_write_r>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	0004      	movs	r4, r0
 80053fc:	0008      	movs	r0, r1
 80053fe:	0011      	movs	r1, r2
 8005400:	001a      	movs	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	4d05      	ldr	r5, [pc, #20]	; (800541c <_write_r+0x24>)
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fb fb61 	bl	8000ace <_write>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d103      	bne.n	8005418 <_write_r+0x20>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d000      	beq.n	8005418 <_write_r+0x20>
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	2000a58c 	.word	0x2000a58c

08005420 <__errno>:
 8005420:	4b01      	ldr	r3, [pc, #4]	; (8005428 <__errno+0x8>)
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	4770      	bx	lr
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20000068 	.word	0x20000068

0800542c <__libc_init_array>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2600      	movs	r6, #0
 8005430:	4c0c      	ldr	r4, [pc, #48]	; (8005464 <__libc_init_array+0x38>)
 8005432:	4d0d      	ldr	r5, [pc, #52]	; (8005468 <__libc_init_array+0x3c>)
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	42a6      	cmp	r6, r4
 800543a:	d109      	bne.n	8005450 <__libc_init_array+0x24>
 800543c:	2600      	movs	r6, #0
 800543e:	f000 fd7b 	bl	8005f38 <_init>
 8005442:	4c0a      	ldr	r4, [pc, #40]	; (800546c <__libc_init_array+0x40>)
 8005444:	4d0a      	ldr	r5, [pc, #40]	; (8005470 <__libc_init_array+0x44>)
 8005446:	1b64      	subs	r4, r4, r5
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	42a6      	cmp	r6, r4
 800544c:	d105      	bne.n	800545a <__libc_init_array+0x2e>
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	00b3      	lsls	r3, r6, #2
 8005452:	58eb      	ldr	r3, [r5, r3]
 8005454:	4798      	blx	r3
 8005456:	3601      	adds	r6, #1
 8005458:	e7ee      	b.n	8005438 <__libc_init_array+0xc>
 800545a:	00b3      	lsls	r3, r6, #2
 800545c:	58eb      	ldr	r3, [r5, r3]
 800545e:	4798      	blx	r3
 8005460:	3601      	adds	r6, #1
 8005462:	e7f2      	b.n	800544a <__libc_init_array+0x1e>
 8005464:	08006100 	.word	0x08006100
 8005468:	08006100 	.word	0x08006100
 800546c:	08006104 	.word	0x08006104
 8005470:	08006100 	.word	0x08006100

08005474 <__retarget_lock_init_recursive>:
 8005474:	4770      	bx	lr

08005476 <__retarget_lock_acquire_recursive>:
 8005476:	4770      	bx	lr

08005478 <__retarget_lock_release_recursive>:
 8005478:	4770      	bx	lr

0800547a <memcpy>:
 800547a:	2300      	movs	r3, #0
 800547c:	b510      	push	{r4, lr}
 800547e:	429a      	cmp	r2, r3
 8005480:	d100      	bne.n	8005484 <memcpy+0xa>
 8005482:	bd10      	pop	{r4, pc}
 8005484:	5ccc      	ldrb	r4, [r1, r3]
 8005486:	54c4      	strb	r4, [r0, r3]
 8005488:	3301      	adds	r3, #1
 800548a:	e7f8      	b.n	800547e <memcpy+0x4>

0800548c <_free_r>:
 800548c:	b570      	push	{r4, r5, r6, lr}
 800548e:	0005      	movs	r5, r0
 8005490:	2900      	cmp	r1, #0
 8005492:	d010      	beq.n	80054b6 <_free_r+0x2a>
 8005494:	1f0c      	subs	r4, r1, #4
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	da00      	bge.n	800549e <_free_r+0x12>
 800549c:	18e4      	adds	r4, r4, r3
 800549e:	0028      	movs	r0, r5
 80054a0:	f000 f8e2 	bl	8005668 <__malloc_lock>
 80054a4:	4a1d      	ldr	r2, [pc, #116]	; (800551c <_free_r+0x90>)
 80054a6:	6813      	ldr	r3, [r2, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <_free_r+0x2c>
 80054ac:	6063      	str	r3, [r4, #4]
 80054ae:	6014      	str	r4, [r2, #0]
 80054b0:	0028      	movs	r0, r5
 80054b2:	f000 f8e1 	bl	8005678 <__malloc_unlock>
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
 80054b8:	42a3      	cmp	r3, r4
 80054ba:	d908      	bls.n	80054ce <_free_r+0x42>
 80054bc:	6820      	ldr	r0, [r4, #0]
 80054be:	1821      	adds	r1, r4, r0
 80054c0:	428b      	cmp	r3, r1
 80054c2:	d1f3      	bne.n	80054ac <_free_r+0x20>
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	1809      	adds	r1, r1, r0
 80054ca:	6021      	str	r1, [r4, #0]
 80054cc:	e7ee      	b.n	80054ac <_free_r+0x20>
 80054ce:	001a      	movs	r2, r3
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <_free_r+0x4e>
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	d9f9      	bls.n	80054ce <_free_r+0x42>
 80054da:	6811      	ldr	r1, [r2, #0]
 80054dc:	1850      	adds	r0, r2, r1
 80054de:	42a0      	cmp	r0, r4
 80054e0:	d10b      	bne.n	80054fa <_free_r+0x6e>
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	1809      	adds	r1, r1, r0
 80054e6:	1850      	adds	r0, r2, r1
 80054e8:	6011      	str	r1, [r2, #0]
 80054ea:	4283      	cmp	r3, r0
 80054ec:	d1e0      	bne.n	80054b0 <_free_r+0x24>
 80054ee:	6818      	ldr	r0, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	1841      	adds	r1, r0, r1
 80054f4:	6011      	str	r1, [r2, #0]
 80054f6:	6053      	str	r3, [r2, #4]
 80054f8:	e7da      	b.n	80054b0 <_free_r+0x24>
 80054fa:	42a0      	cmp	r0, r4
 80054fc:	d902      	bls.n	8005504 <_free_r+0x78>
 80054fe:	230c      	movs	r3, #12
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	e7d5      	b.n	80054b0 <_free_r+0x24>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	1821      	adds	r1, r4, r0
 8005508:	428b      	cmp	r3, r1
 800550a:	d103      	bne.n	8005514 <_free_r+0x88>
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	1809      	adds	r1, r1, r0
 8005512:	6021      	str	r1, [r4, #0]
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	6054      	str	r4, [r2, #4]
 8005518:	e7ca      	b.n	80054b0 <_free_r+0x24>
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	2000a594 	.word	0x2000a594

08005520 <sbrk_aligned>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	4e0f      	ldr	r6, [pc, #60]	; (8005560 <sbrk_aligned+0x40>)
 8005524:	000d      	movs	r5, r1
 8005526:	6831      	ldr	r1, [r6, #0]
 8005528:	0004      	movs	r4, r0
 800552a:	2900      	cmp	r1, #0
 800552c:	d102      	bne.n	8005534 <sbrk_aligned+0x14>
 800552e:	f000 fce5 	bl	8005efc <_sbrk_r>
 8005532:	6030      	str	r0, [r6, #0]
 8005534:	0029      	movs	r1, r5
 8005536:	0020      	movs	r0, r4
 8005538:	f000 fce0 	bl	8005efc <_sbrk_r>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d00a      	beq.n	8005556 <sbrk_aligned+0x36>
 8005540:	2303      	movs	r3, #3
 8005542:	1cc5      	adds	r5, r0, #3
 8005544:	439d      	bics	r5, r3
 8005546:	42a8      	cmp	r0, r5
 8005548:	d007      	beq.n	800555a <sbrk_aligned+0x3a>
 800554a:	1a29      	subs	r1, r5, r0
 800554c:	0020      	movs	r0, r4
 800554e:	f000 fcd5 	bl	8005efc <_sbrk_r>
 8005552:	3001      	adds	r0, #1
 8005554:	d101      	bne.n	800555a <sbrk_aligned+0x3a>
 8005556:	2501      	movs	r5, #1
 8005558:	426d      	negs	r5, r5
 800555a:	0028      	movs	r0, r5
 800555c:	bd70      	pop	{r4, r5, r6, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	2000a598 	.word	0x2000a598

08005564 <_malloc_r>:
 8005564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005566:	2203      	movs	r2, #3
 8005568:	1ccb      	adds	r3, r1, #3
 800556a:	4393      	bics	r3, r2
 800556c:	3308      	adds	r3, #8
 800556e:	0006      	movs	r6, r0
 8005570:	001f      	movs	r7, r3
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d238      	bcs.n	80055e8 <_malloc_r+0x84>
 8005576:	270c      	movs	r7, #12
 8005578:	42b9      	cmp	r1, r7
 800557a:	d837      	bhi.n	80055ec <_malloc_r+0x88>
 800557c:	0030      	movs	r0, r6
 800557e:	f000 f873 	bl	8005668 <__malloc_lock>
 8005582:	4b38      	ldr	r3, [pc, #224]	; (8005664 <_malloc_r+0x100>)
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	001c      	movs	r4, r3
 800558a:	2c00      	cmp	r4, #0
 800558c:	d133      	bne.n	80055f6 <_malloc_r+0x92>
 800558e:	0039      	movs	r1, r7
 8005590:	0030      	movs	r0, r6
 8005592:	f7ff ffc5 	bl	8005520 <sbrk_aligned>
 8005596:	0004      	movs	r4, r0
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d15e      	bne.n	800565a <_malloc_r+0xf6>
 800559c:	9b00      	ldr	r3, [sp, #0]
 800559e:	681c      	ldr	r4, [r3, #0]
 80055a0:	0025      	movs	r5, r4
 80055a2:	2d00      	cmp	r5, #0
 80055a4:	d14e      	bne.n	8005644 <_malloc_r+0xe0>
 80055a6:	2c00      	cmp	r4, #0
 80055a8:	d051      	beq.n	800564e <_malloc_r+0xea>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	0029      	movs	r1, r5
 80055ae:	18e3      	adds	r3, r4, r3
 80055b0:	0030      	movs	r0, r6
 80055b2:	9301      	str	r3, [sp, #4]
 80055b4:	f000 fca2 	bl	8005efc <_sbrk_r>
 80055b8:	9b01      	ldr	r3, [sp, #4]
 80055ba:	4283      	cmp	r3, r0
 80055bc:	d147      	bne.n	800564e <_malloc_r+0xea>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	0030      	movs	r0, r6
 80055c2:	1aff      	subs	r7, r7, r3
 80055c4:	0039      	movs	r1, r7
 80055c6:	f7ff ffab 	bl	8005520 <sbrk_aligned>
 80055ca:	3001      	adds	r0, #1
 80055cc:	d03f      	beq.n	800564e <_malloc_r+0xea>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	19db      	adds	r3, r3, r7
 80055d2:	6023      	str	r3, [r4, #0]
 80055d4:	9b00      	ldr	r3, [sp, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d040      	beq.n	800565e <_malloc_r+0xfa>
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	42a2      	cmp	r2, r4
 80055e0:	d133      	bne.n	800564a <_malloc_r+0xe6>
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	e014      	b.n	8005612 <_malloc_r+0xae>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dac5      	bge.n	8005578 <_malloc_r+0x14>
 80055ec:	230c      	movs	r3, #12
 80055ee:	2500      	movs	r5, #0
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	0028      	movs	r0, r5
 80055f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055f6:	6821      	ldr	r1, [r4, #0]
 80055f8:	1bc9      	subs	r1, r1, r7
 80055fa:	d420      	bmi.n	800563e <_malloc_r+0xda>
 80055fc:	290b      	cmp	r1, #11
 80055fe:	d918      	bls.n	8005632 <_malloc_r+0xce>
 8005600:	19e2      	adds	r2, r4, r7
 8005602:	6027      	str	r7, [r4, #0]
 8005604:	42a3      	cmp	r3, r4
 8005606:	d112      	bne.n	800562e <_malloc_r+0xca>
 8005608:	9b00      	ldr	r3, [sp, #0]
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	6011      	str	r1, [r2, #0]
 8005610:	6053      	str	r3, [r2, #4]
 8005612:	0030      	movs	r0, r6
 8005614:	0025      	movs	r5, r4
 8005616:	f000 f82f 	bl	8005678 <__malloc_unlock>
 800561a:	2207      	movs	r2, #7
 800561c:	350b      	adds	r5, #11
 800561e:	1d23      	adds	r3, r4, #4
 8005620:	4395      	bics	r5, r2
 8005622:	1aea      	subs	r2, r5, r3
 8005624:	429d      	cmp	r5, r3
 8005626:	d0e4      	beq.n	80055f2 <_malloc_r+0x8e>
 8005628:	1b5b      	subs	r3, r3, r5
 800562a:	50a3      	str	r3, [r4, r2]
 800562c:	e7e1      	b.n	80055f2 <_malloc_r+0x8e>
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	e7ec      	b.n	800560c <_malloc_r+0xa8>
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	42a3      	cmp	r3, r4
 8005636:	d1d5      	bne.n	80055e4 <_malloc_r+0x80>
 8005638:	9b00      	ldr	r3, [sp, #0]
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e7e9      	b.n	8005612 <_malloc_r+0xae>
 800563e:	0023      	movs	r3, r4
 8005640:	6864      	ldr	r4, [r4, #4]
 8005642:	e7a2      	b.n	800558a <_malloc_r+0x26>
 8005644:	002c      	movs	r4, r5
 8005646:	686d      	ldr	r5, [r5, #4]
 8005648:	e7ab      	b.n	80055a2 <_malloc_r+0x3e>
 800564a:	0013      	movs	r3, r2
 800564c:	e7c4      	b.n	80055d8 <_malloc_r+0x74>
 800564e:	230c      	movs	r3, #12
 8005650:	0030      	movs	r0, r6
 8005652:	6033      	str	r3, [r6, #0]
 8005654:	f000 f810 	bl	8005678 <__malloc_unlock>
 8005658:	e7cb      	b.n	80055f2 <_malloc_r+0x8e>
 800565a:	6027      	str	r7, [r4, #0]
 800565c:	e7d9      	b.n	8005612 <_malloc_r+0xae>
 800565e:	605b      	str	r3, [r3, #4]
 8005660:	deff      	udf	#255	; 0xff
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	2000a594 	.word	0x2000a594

08005668 <__malloc_lock>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4802      	ldr	r0, [pc, #8]	; (8005674 <__malloc_lock+0xc>)
 800566c:	f7ff ff03 	bl	8005476 <__retarget_lock_acquire_recursive>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	2000a590 	.word	0x2000a590

08005678 <__malloc_unlock>:
 8005678:	b510      	push	{r4, lr}
 800567a:	4802      	ldr	r0, [pc, #8]	; (8005684 <__malloc_unlock+0xc>)
 800567c:	f7ff fefc 	bl	8005478 <__retarget_lock_release_recursive>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	2000a590 	.word	0x2000a590

08005688 <__sfputc_r>:
 8005688:	6893      	ldr	r3, [r2, #8]
 800568a:	b510      	push	{r4, lr}
 800568c:	3b01      	subs	r3, #1
 800568e:	6093      	str	r3, [r2, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	da04      	bge.n	800569e <__sfputc_r+0x16>
 8005694:	6994      	ldr	r4, [r2, #24]
 8005696:	42a3      	cmp	r3, r4
 8005698:	db07      	blt.n	80056aa <__sfputc_r+0x22>
 800569a:	290a      	cmp	r1, #10
 800569c:	d005      	beq.n	80056aa <__sfputc_r+0x22>
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	1c58      	adds	r0, r3, #1
 80056a2:	6010      	str	r0, [r2, #0]
 80056a4:	7019      	strb	r1, [r3, #0]
 80056a6:	0008      	movs	r0, r1
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	f7ff fdbd 	bl	8005228 <__swbuf_r>
 80056ae:	0001      	movs	r1, r0
 80056b0:	e7f9      	b.n	80056a6 <__sfputc_r+0x1e>

080056b2 <__sfputs_r>:
 80056b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b4:	0006      	movs	r6, r0
 80056b6:	000f      	movs	r7, r1
 80056b8:	0014      	movs	r4, r2
 80056ba:	18d5      	adds	r5, r2, r3
 80056bc:	42ac      	cmp	r4, r5
 80056be:	d101      	bne.n	80056c4 <__sfputs_r+0x12>
 80056c0:	2000      	movs	r0, #0
 80056c2:	e007      	b.n	80056d4 <__sfputs_r+0x22>
 80056c4:	7821      	ldrb	r1, [r4, #0]
 80056c6:	003a      	movs	r2, r7
 80056c8:	0030      	movs	r0, r6
 80056ca:	f7ff ffdd 	bl	8005688 <__sfputc_r>
 80056ce:	3401      	adds	r4, #1
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d1f3      	bne.n	80056bc <__sfputs_r+0xa>
 80056d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056d8 <_vfiprintf_r>:
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	b0a1      	sub	sp, #132	; 0x84
 80056dc:	000f      	movs	r7, r1
 80056de:	0015      	movs	r5, r2
 80056e0:	001e      	movs	r6, r3
 80056e2:	9003      	str	r0, [sp, #12]
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d004      	beq.n	80056f2 <_vfiprintf_r+0x1a>
 80056e8:	6a03      	ldr	r3, [r0, #32]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <_vfiprintf_r+0x1a>
 80056ee:	f7ff fca1 	bl	8005034 <__sinit>
 80056f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f4:	07db      	lsls	r3, r3, #31
 80056f6:	d405      	bmi.n	8005704 <_vfiprintf_r+0x2c>
 80056f8:	89bb      	ldrh	r3, [r7, #12]
 80056fa:	059b      	lsls	r3, r3, #22
 80056fc:	d402      	bmi.n	8005704 <_vfiprintf_r+0x2c>
 80056fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005700:	f7ff feb9 	bl	8005476 <__retarget_lock_acquire_recursive>
 8005704:	89bb      	ldrh	r3, [r7, #12]
 8005706:	071b      	lsls	r3, r3, #28
 8005708:	d502      	bpl.n	8005710 <_vfiprintf_r+0x38>
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d113      	bne.n	8005738 <_vfiprintf_r+0x60>
 8005710:	0039      	movs	r1, r7
 8005712:	9803      	ldr	r0, [sp, #12]
 8005714:	f7ff fdca 	bl	80052ac <__swsetup_r>
 8005718:	2800      	cmp	r0, #0
 800571a:	d00d      	beq.n	8005738 <_vfiprintf_r+0x60>
 800571c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571e:	07db      	lsls	r3, r3, #31
 8005720:	d503      	bpl.n	800572a <_vfiprintf_r+0x52>
 8005722:	2001      	movs	r0, #1
 8005724:	4240      	negs	r0, r0
 8005726:	b021      	add	sp, #132	; 0x84
 8005728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800572a:	89bb      	ldrh	r3, [r7, #12]
 800572c:	059b      	lsls	r3, r3, #22
 800572e:	d4f8      	bmi.n	8005722 <_vfiprintf_r+0x4a>
 8005730:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005732:	f7ff fea1 	bl	8005478 <__retarget_lock_release_recursive>
 8005736:	e7f4      	b.n	8005722 <_vfiprintf_r+0x4a>
 8005738:	2300      	movs	r3, #0
 800573a:	ac08      	add	r4, sp, #32
 800573c:	6163      	str	r3, [r4, #20]
 800573e:	3320      	adds	r3, #32
 8005740:	7663      	strb	r3, [r4, #25]
 8005742:	3310      	adds	r3, #16
 8005744:	76a3      	strb	r3, [r4, #26]
 8005746:	9607      	str	r6, [sp, #28]
 8005748:	002e      	movs	r6, r5
 800574a:	7833      	ldrb	r3, [r6, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <_vfiprintf_r+0x7c>
 8005750:	2b25      	cmp	r3, #37	; 0x25
 8005752:	d148      	bne.n	80057e6 <_vfiprintf_r+0x10e>
 8005754:	1b73      	subs	r3, r6, r5
 8005756:	9305      	str	r3, [sp, #20]
 8005758:	42ae      	cmp	r6, r5
 800575a:	d00b      	beq.n	8005774 <_vfiprintf_r+0x9c>
 800575c:	002a      	movs	r2, r5
 800575e:	0039      	movs	r1, r7
 8005760:	9803      	ldr	r0, [sp, #12]
 8005762:	f7ff ffa6 	bl	80056b2 <__sfputs_r>
 8005766:	3001      	adds	r0, #1
 8005768:	d100      	bne.n	800576c <_vfiprintf_r+0x94>
 800576a:	e0af      	b.n	80058cc <_vfiprintf_r+0x1f4>
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	9a05      	ldr	r2, [sp, #20]
 8005770:	189b      	adds	r3, r3, r2
 8005772:	6163      	str	r3, [r4, #20]
 8005774:	7833      	ldrb	r3, [r6, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d100      	bne.n	800577c <_vfiprintf_r+0xa4>
 800577a:	e0a7      	b.n	80058cc <_vfiprintf_r+0x1f4>
 800577c:	2201      	movs	r2, #1
 800577e:	2300      	movs	r3, #0
 8005780:	4252      	negs	r2, r2
 8005782:	6062      	str	r2, [r4, #4]
 8005784:	a904      	add	r1, sp, #16
 8005786:	3254      	adds	r2, #84	; 0x54
 8005788:	1852      	adds	r2, r2, r1
 800578a:	1c75      	adds	r5, r6, #1
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	60e3      	str	r3, [r4, #12]
 8005790:	60a3      	str	r3, [r4, #8]
 8005792:	7013      	strb	r3, [r2, #0]
 8005794:	65a3      	str	r3, [r4, #88]	; 0x58
 8005796:	4b59      	ldr	r3, [pc, #356]	; (80058fc <_vfiprintf_r+0x224>)
 8005798:	2205      	movs	r2, #5
 800579a:	0018      	movs	r0, r3
 800579c:	7829      	ldrb	r1, [r5, #0]
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	f000 fbbe 	bl	8005f20 <memchr>
 80057a4:	1c6e      	adds	r6, r5, #1
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d11f      	bne.n	80057ea <_vfiprintf_r+0x112>
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	06d3      	lsls	r3, r2, #27
 80057ae:	d504      	bpl.n	80057ba <_vfiprintf_r+0xe2>
 80057b0:	2353      	movs	r3, #83	; 0x53
 80057b2:	a904      	add	r1, sp, #16
 80057b4:	185b      	adds	r3, r3, r1
 80057b6:	2120      	movs	r1, #32
 80057b8:	7019      	strb	r1, [r3, #0]
 80057ba:	0713      	lsls	r3, r2, #28
 80057bc:	d504      	bpl.n	80057c8 <_vfiprintf_r+0xf0>
 80057be:	2353      	movs	r3, #83	; 0x53
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	185b      	adds	r3, r3, r1
 80057c4:	212b      	movs	r1, #43	; 0x2b
 80057c6:	7019      	strb	r1, [r3, #0]
 80057c8:	782b      	ldrb	r3, [r5, #0]
 80057ca:	2b2a      	cmp	r3, #42	; 0x2a
 80057cc:	d016      	beq.n	80057fc <_vfiprintf_r+0x124>
 80057ce:	002e      	movs	r6, r5
 80057d0:	2100      	movs	r1, #0
 80057d2:	200a      	movs	r0, #10
 80057d4:	68e3      	ldr	r3, [r4, #12]
 80057d6:	7832      	ldrb	r2, [r6, #0]
 80057d8:	1c75      	adds	r5, r6, #1
 80057da:	3a30      	subs	r2, #48	; 0x30
 80057dc:	2a09      	cmp	r2, #9
 80057de:	d94e      	bls.n	800587e <_vfiprintf_r+0x1a6>
 80057e0:	2900      	cmp	r1, #0
 80057e2:	d111      	bne.n	8005808 <_vfiprintf_r+0x130>
 80057e4:	e017      	b.n	8005816 <_vfiprintf_r+0x13e>
 80057e6:	3601      	adds	r6, #1
 80057e8:	e7af      	b.n	800574a <_vfiprintf_r+0x72>
 80057ea:	9b05      	ldr	r3, [sp, #20]
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	1ac0      	subs	r0, r0, r3
 80057f0:	2301      	movs	r3, #1
 80057f2:	4083      	lsls	r3, r0
 80057f4:	4313      	orrs	r3, r2
 80057f6:	0035      	movs	r5, r6
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	e7cc      	b.n	8005796 <_vfiprintf_r+0xbe>
 80057fc:	9b07      	ldr	r3, [sp, #28]
 80057fe:	1d19      	adds	r1, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9107      	str	r1, [sp, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	db01      	blt.n	800580c <_vfiprintf_r+0x134>
 8005808:	930b      	str	r3, [sp, #44]	; 0x2c
 800580a:	e004      	b.n	8005816 <_vfiprintf_r+0x13e>
 800580c:	425b      	negs	r3, r3
 800580e:	60e3      	str	r3, [r4, #12]
 8005810:	2302      	movs	r3, #2
 8005812:	4313      	orrs	r3, r2
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	7833      	ldrb	r3, [r6, #0]
 8005818:	2b2e      	cmp	r3, #46	; 0x2e
 800581a:	d10a      	bne.n	8005832 <_vfiprintf_r+0x15a>
 800581c:	7873      	ldrb	r3, [r6, #1]
 800581e:	2b2a      	cmp	r3, #42	; 0x2a
 8005820:	d135      	bne.n	800588e <_vfiprintf_r+0x1b6>
 8005822:	9b07      	ldr	r3, [sp, #28]
 8005824:	3602      	adds	r6, #2
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	9207      	str	r2, [sp, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	db2b      	blt.n	8005888 <_vfiprintf_r+0x1b0>
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	4d33      	ldr	r5, [pc, #204]	; (8005900 <_vfiprintf_r+0x228>)
 8005834:	2203      	movs	r2, #3
 8005836:	0028      	movs	r0, r5
 8005838:	7831      	ldrb	r1, [r6, #0]
 800583a:	f000 fb71 	bl	8005f20 <memchr>
 800583e:	2800      	cmp	r0, #0
 8005840:	d006      	beq.n	8005850 <_vfiprintf_r+0x178>
 8005842:	2340      	movs	r3, #64	; 0x40
 8005844:	1b40      	subs	r0, r0, r5
 8005846:	4083      	lsls	r3, r0
 8005848:	6822      	ldr	r2, [r4, #0]
 800584a:	3601      	adds	r6, #1
 800584c:	4313      	orrs	r3, r2
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	7831      	ldrb	r1, [r6, #0]
 8005852:	2206      	movs	r2, #6
 8005854:	482b      	ldr	r0, [pc, #172]	; (8005904 <_vfiprintf_r+0x22c>)
 8005856:	1c75      	adds	r5, r6, #1
 8005858:	7621      	strb	r1, [r4, #24]
 800585a:	f000 fb61 	bl	8005f20 <memchr>
 800585e:	2800      	cmp	r0, #0
 8005860:	d043      	beq.n	80058ea <_vfiprintf_r+0x212>
 8005862:	4b29      	ldr	r3, [pc, #164]	; (8005908 <_vfiprintf_r+0x230>)
 8005864:	2b00      	cmp	r3, #0
 8005866:	d125      	bne.n	80058b4 <_vfiprintf_r+0x1dc>
 8005868:	2207      	movs	r2, #7
 800586a:	9b07      	ldr	r3, [sp, #28]
 800586c:	3307      	adds	r3, #7
 800586e:	4393      	bics	r3, r2
 8005870:	3308      	adds	r3, #8
 8005872:	9307      	str	r3, [sp, #28]
 8005874:	6963      	ldr	r3, [r4, #20]
 8005876:	9a04      	ldr	r2, [sp, #16]
 8005878:	189b      	adds	r3, r3, r2
 800587a:	6163      	str	r3, [r4, #20]
 800587c:	e764      	b.n	8005748 <_vfiprintf_r+0x70>
 800587e:	4343      	muls	r3, r0
 8005880:	002e      	movs	r6, r5
 8005882:	2101      	movs	r1, #1
 8005884:	189b      	adds	r3, r3, r2
 8005886:	e7a6      	b.n	80057d6 <_vfiprintf_r+0xfe>
 8005888:	2301      	movs	r3, #1
 800588a:	425b      	negs	r3, r3
 800588c:	e7d0      	b.n	8005830 <_vfiprintf_r+0x158>
 800588e:	2300      	movs	r3, #0
 8005890:	200a      	movs	r0, #10
 8005892:	001a      	movs	r2, r3
 8005894:	3601      	adds	r6, #1
 8005896:	6063      	str	r3, [r4, #4]
 8005898:	7831      	ldrb	r1, [r6, #0]
 800589a:	1c75      	adds	r5, r6, #1
 800589c:	3930      	subs	r1, #48	; 0x30
 800589e:	2909      	cmp	r1, #9
 80058a0:	d903      	bls.n	80058aa <_vfiprintf_r+0x1d2>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0c5      	beq.n	8005832 <_vfiprintf_r+0x15a>
 80058a6:	9209      	str	r2, [sp, #36]	; 0x24
 80058a8:	e7c3      	b.n	8005832 <_vfiprintf_r+0x15a>
 80058aa:	4342      	muls	r2, r0
 80058ac:	002e      	movs	r6, r5
 80058ae:	2301      	movs	r3, #1
 80058b0:	1852      	adds	r2, r2, r1
 80058b2:	e7f1      	b.n	8005898 <_vfiprintf_r+0x1c0>
 80058b4:	aa07      	add	r2, sp, #28
 80058b6:	9200      	str	r2, [sp, #0]
 80058b8:	0021      	movs	r1, r4
 80058ba:	003a      	movs	r2, r7
 80058bc:	4b13      	ldr	r3, [pc, #76]	; (800590c <_vfiprintf_r+0x234>)
 80058be:	9803      	ldr	r0, [sp, #12]
 80058c0:	e000      	b.n	80058c4 <_vfiprintf_r+0x1ec>
 80058c2:	bf00      	nop
 80058c4:	9004      	str	r0, [sp, #16]
 80058c6:	9b04      	ldr	r3, [sp, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	d1d3      	bne.n	8005874 <_vfiprintf_r+0x19c>
 80058cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ce:	07db      	lsls	r3, r3, #31
 80058d0:	d405      	bmi.n	80058de <_vfiprintf_r+0x206>
 80058d2:	89bb      	ldrh	r3, [r7, #12]
 80058d4:	059b      	lsls	r3, r3, #22
 80058d6:	d402      	bmi.n	80058de <_vfiprintf_r+0x206>
 80058d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80058da:	f7ff fdcd 	bl	8005478 <__retarget_lock_release_recursive>
 80058de:	89bb      	ldrh	r3, [r7, #12]
 80058e0:	065b      	lsls	r3, r3, #25
 80058e2:	d500      	bpl.n	80058e6 <_vfiprintf_r+0x20e>
 80058e4:	e71d      	b.n	8005722 <_vfiprintf_r+0x4a>
 80058e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80058e8:	e71d      	b.n	8005726 <_vfiprintf_r+0x4e>
 80058ea:	aa07      	add	r2, sp, #28
 80058ec:	9200      	str	r2, [sp, #0]
 80058ee:	0021      	movs	r1, r4
 80058f0:	003a      	movs	r2, r7
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <_vfiprintf_r+0x234>)
 80058f4:	9803      	ldr	r0, [sp, #12]
 80058f6:	f000 f87b 	bl	80059f0 <_printf_i>
 80058fa:	e7e3      	b.n	80058c4 <_vfiprintf_r+0x1ec>
 80058fc:	080060c4 	.word	0x080060c4
 8005900:	080060ca 	.word	0x080060ca
 8005904:	080060ce 	.word	0x080060ce
 8005908:	00000000 	.word	0x00000000
 800590c:	080056b3 	.word	0x080056b3

08005910 <_printf_common>:
 8005910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005912:	0016      	movs	r6, r2
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	688a      	ldr	r2, [r1, #8]
 8005918:	690b      	ldr	r3, [r1, #16]
 800591a:	000c      	movs	r4, r1
 800591c:	9000      	str	r0, [sp, #0]
 800591e:	4293      	cmp	r3, r2
 8005920:	da00      	bge.n	8005924 <_printf_common+0x14>
 8005922:	0013      	movs	r3, r2
 8005924:	0022      	movs	r2, r4
 8005926:	6033      	str	r3, [r6, #0]
 8005928:	3243      	adds	r2, #67	; 0x43
 800592a:	7812      	ldrb	r2, [r2, #0]
 800592c:	2a00      	cmp	r2, #0
 800592e:	d001      	beq.n	8005934 <_printf_common+0x24>
 8005930:	3301      	adds	r3, #1
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	069b      	lsls	r3, r3, #26
 8005938:	d502      	bpl.n	8005940 <_printf_common+0x30>
 800593a:	6833      	ldr	r3, [r6, #0]
 800593c:	3302      	adds	r3, #2
 800593e:	6033      	str	r3, [r6, #0]
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	2306      	movs	r3, #6
 8005944:	0015      	movs	r5, r2
 8005946:	401d      	ands	r5, r3
 8005948:	421a      	tst	r2, r3
 800594a:	d027      	beq.n	800599c <_printf_common+0x8c>
 800594c:	0023      	movs	r3, r4
 800594e:	3343      	adds	r3, #67	; 0x43
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	4193      	sbcs	r3, r2
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	0692      	lsls	r2, r2, #26
 800595a:	d430      	bmi.n	80059be <_printf_common+0xae>
 800595c:	0022      	movs	r2, r4
 800595e:	9901      	ldr	r1, [sp, #4]
 8005960:	9800      	ldr	r0, [sp, #0]
 8005962:	9d08      	ldr	r5, [sp, #32]
 8005964:	3243      	adds	r2, #67	; 0x43
 8005966:	47a8      	blx	r5
 8005968:	3001      	adds	r0, #1
 800596a:	d025      	beq.n	80059b8 <_printf_common+0xa8>
 800596c:	2206      	movs	r2, #6
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	2500      	movs	r5, #0
 8005972:	4013      	ands	r3, r2
 8005974:	2b04      	cmp	r3, #4
 8005976:	d105      	bne.n	8005984 <_printf_common+0x74>
 8005978:	6833      	ldr	r3, [r6, #0]
 800597a:	68e5      	ldr	r5, [r4, #12]
 800597c:	1aed      	subs	r5, r5, r3
 800597e:	43eb      	mvns	r3, r5
 8005980:	17db      	asrs	r3, r3, #31
 8005982:	401d      	ands	r5, r3
 8005984:	68a3      	ldr	r3, [r4, #8]
 8005986:	6922      	ldr	r2, [r4, #16]
 8005988:	4293      	cmp	r3, r2
 800598a:	dd01      	ble.n	8005990 <_printf_common+0x80>
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	18ed      	adds	r5, r5, r3
 8005990:	2600      	movs	r6, #0
 8005992:	42b5      	cmp	r5, r6
 8005994:	d120      	bne.n	80059d8 <_printf_common+0xc8>
 8005996:	2000      	movs	r0, #0
 8005998:	e010      	b.n	80059bc <_printf_common+0xac>
 800599a:	3501      	adds	r5, #1
 800599c:	68e3      	ldr	r3, [r4, #12]
 800599e:	6832      	ldr	r2, [r6, #0]
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	42ab      	cmp	r3, r5
 80059a4:	ddd2      	ble.n	800594c <_printf_common+0x3c>
 80059a6:	0022      	movs	r2, r4
 80059a8:	2301      	movs	r3, #1
 80059aa:	9901      	ldr	r1, [sp, #4]
 80059ac:	9800      	ldr	r0, [sp, #0]
 80059ae:	9f08      	ldr	r7, [sp, #32]
 80059b0:	3219      	adds	r2, #25
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	d1f0      	bne.n	800599a <_printf_common+0x8a>
 80059b8:	2001      	movs	r0, #1
 80059ba:	4240      	negs	r0, r0
 80059bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059be:	2030      	movs	r0, #48	; 0x30
 80059c0:	18e1      	adds	r1, r4, r3
 80059c2:	3143      	adds	r1, #67	; 0x43
 80059c4:	7008      	strb	r0, [r1, #0]
 80059c6:	0021      	movs	r1, r4
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	3145      	adds	r1, #69	; 0x45
 80059cc:	7809      	ldrb	r1, [r1, #0]
 80059ce:	18a2      	adds	r2, r4, r2
 80059d0:	3243      	adds	r2, #67	; 0x43
 80059d2:	3302      	adds	r3, #2
 80059d4:	7011      	strb	r1, [r2, #0]
 80059d6:	e7c1      	b.n	800595c <_printf_common+0x4c>
 80059d8:	0022      	movs	r2, r4
 80059da:	2301      	movs	r3, #1
 80059dc:	9901      	ldr	r1, [sp, #4]
 80059de:	9800      	ldr	r0, [sp, #0]
 80059e0:	9f08      	ldr	r7, [sp, #32]
 80059e2:	321a      	adds	r2, #26
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa8>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d1      	b.n	8005992 <_printf_common+0x82>
	...

080059f0 <_printf_i>:
 80059f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f2:	b08b      	sub	sp, #44	; 0x2c
 80059f4:	9206      	str	r2, [sp, #24]
 80059f6:	000a      	movs	r2, r1
 80059f8:	3243      	adds	r2, #67	; 0x43
 80059fa:	9307      	str	r3, [sp, #28]
 80059fc:	9005      	str	r0, [sp, #20]
 80059fe:	9204      	str	r2, [sp, #16]
 8005a00:	7e0a      	ldrb	r2, [r1, #24]
 8005a02:	000c      	movs	r4, r1
 8005a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a06:	2a78      	cmp	r2, #120	; 0x78
 8005a08:	d809      	bhi.n	8005a1e <_printf_i+0x2e>
 8005a0a:	2a62      	cmp	r2, #98	; 0x62
 8005a0c:	d80b      	bhi.n	8005a26 <_printf_i+0x36>
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d100      	bne.n	8005a14 <_printf_i+0x24>
 8005a12:	e0be      	b.n	8005b92 <_printf_i+0x1a2>
 8005a14:	497c      	ldr	r1, [pc, #496]	; (8005c08 <_printf_i+0x218>)
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	2a58      	cmp	r2, #88	; 0x58
 8005a1a:	d100      	bne.n	8005a1e <_printf_i+0x2e>
 8005a1c:	e093      	b.n	8005b46 <_printf_i+0x156>
 8005a1e:	0026      	movs	r6, r4
 8005a20:	3642      	adds	r6, #66	; 0x42
 8005a22:	7032      	strb	r2, [r6, #0]
 8005a24:	e022      	b.n	8005a6c <_printf_i+0x7c>
 8005a26:	0010      	movs	r0, r2
 8005a28:	3863      	subs	r0, #99	; 0x63
 8005a2a:	2815      	cmp	r0, #21
 8005a2c:	d8f7      	bhi.n	8005a1e <_printf_i+0x2e>
 8005a2e:	f7fa fb69 	bl	8000104 <__gnu_thumb1_case_shi>
 8005a32:	0016      	.short	0x0016
 8005a34:	fff6001f 	.word	0xfff6001f
 8005a38:	fff6fff6 	.word	0xfff6fff6
 8005a3c:	001ffff6 	.word	0x001ffff6
 8005a40:	fff6fff6 	.word	0xfff6fff6
 8005a44:	fff6fff6 	.word	0xfff6fff6
 8005a48:	003600a3 	.word	0x003600a3
 8005a4c:	fff60083 	.word	0xfff60083
 8005a50:	00b4fff6 	.word	0x00b4fff6
 8005a54:	0036fff6 	.word	0x0036fff6
 8005a58:	fff6fff6 	.word	0xfff6fff6
 8005a5c:	0087      	.short	0x0087
 8005a5e:	0026      	movs	r6, r4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	3642      	adds	r6, #66	; 0x42
 8005a64:	1d11      	adds	r1, r2, #4
 8005a66:	6019      	str	r1, [r3, #0]
 8005a68:	6813      	ldr	r3, [r2, #0]
 8005a6a:	7033      	strb	r3, [r6, #0]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0a2      	b.n	8005bb6 <_printf_i+0x1c6>
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	6809      	ldr	r1, [r1, #0]
 8005a74:	1d02      	adds	r2, r0, #4
 8005a76:	060d      	lsls	r5, r1, #24
 8005a78:	d50b      	bpl.n	8005a92 <_printf_i+0xa2>
 8005a7a:	6805      	ldr	r5, [r0, #0]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	da03      	bge.n	8005a8a <_printf_i+0x9a>
 8005a82:	232d      	movs	r3, #45	; 0x2d
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	426d      	negs	r5, r5
 8005a88:	7013      	strb	r3, [r2, #0]
 8005a8a:	4b5f      	ldr	r3, [pc, #380]	; (8005c08 <_printf_i+0x218>)
 8005a8c:	270a      	movs	r7, #10
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	e01b      	b.n	8005aca <_printf_i+0xda>
 8005a92:	6805      	ldr	r5, [r0, #0]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	0649      	lsls	r1, r1, #25
 8005a98:	d5f1      	bpl.n	8005a7e <_printf_i+0x8e>
 8005a9a:	b22d      	sxth	r5, r5
 8005a9c:	e7ef      	b.n	8005a7e <_printf_i+0x8e>
 8005a9e:	680d      	ldr	r5, [r1, #0]
 8005aa0:	6819      	ldr	r1, [r3, #0]
 8005aa2:	1d08      	adds	r0, r1, #4
 8005aa4:	6018      	str	r0, [r3, #0]
 8005aa6:	062e      	lsls	r6, r5, #24
 8005aa8:	d501      	bpl.n	8005aae <_printf_i+0xbe>
 8005aaa:	680d      	ldr	r5, [r1, #0]
 8005aac:	e003      	b.n	8005ab6 <_printf_i+0xc6>
 8005aae:	066d      	lsls	r5, r5, #25
 8005ab0:	d5fb      	bpl.n	8005aaa <_printf_i+0xba>
 8005ab2:	680d      	ldr	r5, [r1, #0]
 8005ab4:	b2ad      	uxth	r5, r5
 8005ab6:	4b54      	ldr	r3, [pc, #336]	; (8005c08 <_printf_i+0x218>)
 8005ab8:	2708      	movs	r7, #8
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	2a6f      	cmp	r2, #111	; 0x6f
 8005abe:	d000      	beq.n	8005ac2 <_printf_i+0xd2>
 8005ac0:	3702      	adds	r7, #2
 8005ac2:	0023      	movs	r3, r4
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	3343      	adds	r3, #67	; 0x43
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	db03      	blt.n	8005ada <_printf_i+0xea>
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	6822      	ldr	r2, [r4, #0]
 8005ad6:	438a      	bics	r2, r1
 8005ad8:	6022      	str	r2, [r4, #0]
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	d102      	bne.n	8005ae4 <_printf_i+0xf4>
 8005ade:	9e04      	ldr	r6, [sp, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <_printf_i+0x10e>
 8005ae4:	9e04      	ldr	r6, [sp, #16]
 8005ae6:	0028      	movs	r0, r5
 8005ae8:	0039      	movs	r1, r7
 8005aea:	f7fa fb9b 	bl	8000224 <__aeabi_uidivmod>
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	3e01      	subs	r6, #1
 8005af2:	5c5b      	ldrb	r3, [r3, r1]
 8005af4:	7033      	strb	r3, [r6, #0]
 8005af6:	002b      	movs	r3, r5
 8005af8:	0005      	movs	r5, r0
 8005afa:	429f      	cmp	r7, r3
 8005afc:	d9f3      	bls.n	8005ae6 <_printf_i+0xf6>
 8005afe:	2f08      	cmp	r7, #8
 8005b00:	d109      	bne.n	8005b16 <_printf_i+0x126>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	07db      	lsls	r3, r3, #31
 8005b06:	d506      	bpl.n	8005b16 <_printf_i+0x126>
 8005b08:	6862      	ldr	r2, [r4, #4]
 8005b0a:	6923      	ldr	r3, [r4, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	dc02      	bgt.n	8005b16 <_printf_i+0x126>
 8005b10:	2330      	movs	r3, #48	; 0x30
 8005b12:	3e01      	subs	r6, #1
 8005b14:	7033      	strb	r3, [r6, #0]
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	1b9b      	subs	r3, r3, r6
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	9b07      	ldr	r3, [sp, #28]
 8005b1e:	0021      	movs	r1, r4
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	9805      	ldr	r0, [sp, #20]
 8005b24:	9b06      	ldr	r3, [sp, #24]
 8005b26:	aa09      	add	r2, sp, #36	; 0x24
 8005b28:	f7ff fef2 	bl	8005910 <_printf_common>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d147      	bne.n	8005bc0 <_printf_i+0x1d0>
 8005b30:	2001      	movs	r0, #1
 8005b32:	4240      	negs	r0, r0
 8005b34:	b00b      	add	sp, #44	; 0x2c
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b38:	2220      	movs	r2, #32
 8005b3a:	6809      	ldr	r1, [r1, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	2278      	movs	r2, #120	; 0x78
 8005b42:	4932      	ldr	r1, [pc, #200]	; (8005c0c <_printf_i+0x21c>)
 8005b44:	9103      	str	r1, [sp, #12]
 8005b46:	0021      	movs	r1, r4
 8005b48:	3145      	adds	r1, #69	; 0x45
 8005b4a:	700a      	strb	r2, [r1, #0]
 8005b4c:	6819      	ldr	r1, [r3, #0]
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	c920      	ldmia	r1!, {r5}
 8005b52:	0610      	lsls	r0, r2, #24
 8005b54:	d402      	bmi.n	8005b5c <_printf_i+0x16c>
 8005b56:	0650      	lsls	r0, r2, #25
 8005b58:	d500      	bpl.n	8005b5c <_printf_i+0x16c>
 8005b5a:	b2ad      	uxth	r5, r5
 8005b5c:	6019      	str	r1, [r3, #0]
 8005b5e:	07d3      	lsls	r3, r2, #31
 8005b60:	d502      	bpl.n	8005b68 <_printf_i+0x178>
 8005b62:	2320      	movs	r3, #32
 8005b64:	4313      	orrs	r3, r2
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	2710      	movs	r7, #16
 8005b6a:	2d00      	cmp	r5, #0
 8005b6c:	d1a9      	bne.n	8005ac2 <_printf_i+0xd2>
 8005b6e:	2220      	movs	r2, #32
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	4393      	bics	r3, r2
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	e7a4      	b.n	8005ac2 <_printf_i+0xd2>
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	680d      	ldr	r5, [r1, #0]
 8005b7c:	1d10      	adds	r0, r2, #4
 8005b7e:	6949      	ldr	r1, [r1, #20]
 8005b80:	6018      	str	r0, [r3, #0]
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	062e      	lsls	r6, r5, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0x19c>
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0x1a2>
 8005b8c:	066d      	lsls	r5, r5, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0x198>
 8005b90:	8019      	strh	r1, [r3, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	9e04      	ldr	r6, [sp, #16]
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	e7c0      	b.n	8005b1c <_printf_i+0x12c>
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	1d11      	adds	r1, r2, #4
 8005b9e:	6019      	str	r1, [r3, #0]
 8005ba0:	6816      	ldr	r6, [r2, #0]
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	0030      	movs	r0, r6
 8005ba6:	6862      	ldr	r2, [r4, #4]
 8005ba8:	f000 f9ba 	bl	8005f20 <memchr>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d001      	beq.n	8005bb4 <_printf_i+0x1c4>
 8005bb0:	1b80      	subs	r0, r0, r6
 8005bb2:	6060      	str	r0, [r4, #4]
 8005bb4:	6863      	ldr	r3, [r4, #4]
 8005bb6:	6123      	str	r3, [r4, #16]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	7013      	strb	r3, [r2, #0]
 8005bbe:	e7ad      	b.n	8005b1c <_printf_i+0x12c>
 8005bc0:	0032      	movs	r2, r6
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	9906      	ldr	r1, [sp, #24]
 8005bc6:	9805      	ldr	r0, [sp, #20]
 8005bc8:	9d07      	ldr	r5, [sp, #28]
 8005bca:	47a8      	blx	r5
 8005bcc:	3001      	adds	r0, #1
 8005bce:	d0af      	beq.n	8005b30 <_printf_i+0x140>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	079b      	lsls	r3, r3, #30
 8005bd4:	d415      	bmi.n	8005c02 <_printf_i+0x212>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	68e0      	ldr	r0, [r4, #12]
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	daaa      	bge.n	8005b34 <_printf_i+0x144>
 8005bde:	0018      	movs	r0, r3
 8005be0:	e7a8      	b.n	8005b34 <_printf_i+0x144>
 8005be2:	0022      	movs	r2, r4
 8005be4:	2301      	movs	r3, #1
 8005be6:	9906      	ldr	r1, [sp, #24]
 8005be8:	9805      	ldr	r0, [sp, #20]
 8005bea:	9e07      	ldr	r6, [sp, #28]
 8005bec:	3219      	adds	r2, #25
 8005bee:	47b0      	blx	r6
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d09d      	beq.n	8005b30 <_printf_i+0x140>
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	68e3      	ldr	r3, [r4, #12]
 8005bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	42ab      	cmp	r3, r5
 8005bfe:	dcf0      	bgt.n	8005be2 <_printf_i+0x1f2>
 8005c00:	e7e9      	b.n	8005bd6 <_printf_i+0x1e6>
 8005c02:	2500      	movs	r5, #0
 8005c04:	e7f7      	b.n	8005bf6 <_printf_i+0x206>
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	080060d5 	.word	0x080060d5
 8005c0c:	080060e6 	.word	0x080060e6

08005c10 <__sflush_r>:
 8005c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c12:	898b      	ldrh	r3, [r1, #12]
 8005c14:	0005      	movs	r5, r0
 8005c16:	000c      	movs	r4, r1
 8005c18:	071a      	lsls	r2, r3, #28
 8005c1a:	d45c      	bmi.n	8005cd6 <__sflush_r+0xc6>
 8005c1c:	684a      	ldr	r2, [r1, #4]
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	dc04      	bgt.n	8005c2c <__sflush_r+0x1c>
 8005c22:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005c24:	2a00      	cmp	r2, #0
 8005c26:	dc01      	bgt.n	8005c2c <__sflush_r+0x1c>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	d0fa      	beq.n	8005c28 <__sflush_r+0x18>
 8005c32:	2200      	movs	r2, #0
 8005c34:	2080      	movs	r0, #128	; 0x80
 8005c36:	682e      	ldr	r6, [r5, #0]
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	0140      	lsls	r0, r0, #5
 8005c3e:	6a21      	ldr	r1, [r4, #32]
 8005c40:	4002      	ands	r2, r0
 8005c42:	4203      	tst	r3, r0
 8005c44:	d034      	beq.n	8005cb0 <__sflush_r+0xa0>
 8005c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	075b      	lsls	r3, r3, #29
 8005c4c:	d506      	bpl.n	8005c5c <__sflush_r+0x4c>
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	1ac0      	subs	r0, r0, r3
 8005c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <__sflush_r+0x4c>
 8005c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c5a:	1ac0      	subs	r0, r0, r3
 8005c5c:	0002      	movs	r2, r0
 8005c5e:	2300      	movs	r3, #0
 8005c60:	0028      	movs	r0, r5
 8005c62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c64:	6a21      	ldr	r1, [r4, #32]
 8005c66:	47b8      	blx	r7
 8005c68:	89a2      	ldrh	r2, [r4, #12]
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d106      	bne.n	8005c7c <__sflush_r+0x6c>
 8005c6e:	6829      	ldr	r1, [r5, #0]
 8005c70:	291d      	cmp	r1, #29
 8005c72:	d82c      	bhi.n	8005cce <__sflush_r+0xbe>
 8005c74:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <__sflush_r+0x110>)
 8005c76:	410b      	asrs	r3, r1
 8005c78:	07db      	lsls	r3, r3, #31
 8005c7a:	d428      	bmi.n	8005cce <__sflush_r+0xbe>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	04d2      	lsls	r2, r2, #19
 8005c86:	d505      	bpl.n	8005c94 <__sflush_r+0x84>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d102      	bne.n	8005c92 <__sflush_r+0x82>
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d100      	bne.n	8005c94 <__sflush_r+0x84>
 8005c92:	6560      	str	r0, [r4, #84]	; 0x54
 8005c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c96:	602e      	str	r6, [r5, #0]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	d0c5      	beq.n	8005c28 <__sflush_r+0x18>
 8005c9c:	0023      	movs	r3, r4
 8005c9e:	3344      	adds	r3, #68	; 0x44
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	d002      	beq.n	8005caa <__sflush_r+0x9a>
 8005ca4:	0028      	movs	r0, r5
 8005ca6:	f7ff fbf1 	bl	800548c <_free_r>
 8005caa:	2000      	movs	r0, #0
 8005cac:	6360      	str	r0, [r4, #52]	; 0x34
 8005cae:	e7bc      	b.n	8005c2a <__sflush_r+0x1a>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	0028      	movs	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d1c6      	bne.n	8005c48 <__sflush_r+0x38>
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0c3      	beq.n	8005c48 <__sflush_r+0x38>
 8005cc0:	2b1d      	cmp	r3, #29
 8005cc2:	d001      	beq.n	8005cc8 <__sflush_r+0xb8>
 8005cc4:	2b16      	cmp	r3, #22
 8005cc6:	d101      	bne.n	8005ccc <__sflush_r+0xbc>
 8005cc8:	602e      	str	r6, [r5, #0]
 8005cca:	e7ad      	b.n	8005c28 <__sflush_r+0x18>
 8005ccc:	89a2      	ldrh	r2, [r4, #12]
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	e7a9      	b.n	8005c2a <__sflush_r+0x1a>
 8005cd6:	690e      	ldr	r6, [r1, #16]
 8005cd8:	2e00      	cmp	r6, #0
 8005cda:	d0a5      	beq.n	8005c28 <__sflush_r+0x18>
 8005cdc:	680f      	ldr	r7, [r1, #0]
 8005cde:	600e      	str	r6, [r1, #0]
 8005ce0:	1bba      	subs	r2, r7, r6
 8005ce2:	9201      	str	r2, [sp, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	079b      	lsls	r3, r3, #30
 8005ce8:	d100      	bne.n	8005cec <__sflush_r+0xdc>
 8005cea:	694a      	ldr	r2, [r1, #20]
 8005cec:	60a2      	str	r2, [r4, #8]
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dd99      	ble.n	8005c28 <__sflush_r+0x18>
 8005cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cf6:	0032      	movs	r2, r6
 8005cf8:	001f      	movs	r7, r3
 8005cfa:	0028      	movs	r0, r5
 8005cfc:	9b01      	ldr	r3, [sp, #4]
 8005cfe:	6a21      	ldr	r1, [r4, #32]
 8005d00:	47b8      	blx	r7
 8005d02:	2800      	cmp	r0, #0
 8005d04:	dc06      	bgt.n	8005d14 <__sflush_r+0x104>
 8005d06:	2340      	movs	r3, #64	; 0x40
 8005d08:	2001      	movs	r0, #1
 8005d0a:	89a2      	ldrh	r2, [r4, #12]
 8005d0c:	4240      	negs	r0, r0
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	e78a      	b.n	8005c2a <__sflush_r+0x1a>
 8005d14:	9b01      	ldr	r3, [sp, #4]
 8005d16:	1836      	adds	r6, r6, r0
 8005d18:	1a1b      	subs	r3, r3, r0
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	e7e7      	b.n	8005cee <__sflush_r+0xde>
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	dfbffffe 	.word	0xdfbffffe

08005d24 <_fflush_r>:
 8005d24:	690b      	ldr	r3, [r1, #16]
 8005d26:	b570      	push	{r4, r5, r6, lr}
 8005d28:	0005      	movs	r5, r0
 8005d2a:	000c      	movs	r4, r1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <_fflush_r+0x12>
 8005d30:	2500      	movs	r5, #0
 8005d32:	0028      	movs	r0, r5
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d004      	beq.n	8005d44 <_fflush_r+0x20>
 8005d3a:	6a03      	ldr	r3, [r0, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <_fflush_r+0x20>
 8005d40:	f7ff f978 	bl	8005034 <__sinit>
 8005d44:	220c      	movs	r2, #12
 8005d46:	5ea3      	ldrsh	r3, [r4, r2]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f1      	beq.n	8005d30 <_fflush_r+0xc>
 8005d4c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d4e:	07d2      	lsls	r2, r2, #31
 8005d50:	d404      	bmi.n	8005d5c <_fflush_r+0x38>
 8005d52:	059b      	lsls	r3, r3, #22
 8005d54:	d402      	bmi.n	8005d5c <_fflush_r+0x38>
 8005d56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d58:	f7ff fb8d 	bl	8005476 <__retarget_lock_acquire_recursive>
 8005d5c:	0028      	movs	r0, r5
 8005d5e:	0021      	movs	r1, r4
 8005d60:	f7ff ff56 	bl	8005c10 <__sflush_r>
 8005d64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d66:	0005      	movs	r5, r0
 8005d68:	07db      	lsls	r3, r3, #31
 8005d6a:	d4e2      	bmi.n	8005d32 <_fflush_r+0xe>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	059b      	lsls	r3, r3, #22
 8005d70:	d4df      	bmi.n	8005d32 <_fflush_r+0xe>
 8005d72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d74:	f7ff fb80 	bl	8005478 <__retarget_lock_release_recursive>
 8005d78:	e7db      	b.n	8005d32 <_fflush_r+0xe>
	...

08005d7c <__swhatbuf_r>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	000e      	movs	r6, r1
 8005d80:	001d      	movs	r5, r3
 8005d82:	230e      	movs	r3, #14
 8005d84:	5ec9      	ldrsh	r1, [r1, r3]
 8005d86:	0014      	movs	r4, r2
 8005d88:	b096      	sub	sp, #88	; 0x58
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	da0c      	bge.n	8005da8 <__swhatbuf_r+0x2c>
 8005d8e:	89b2      	ldrh	r2, [r6, #12]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	0011      	movs	r1, r2
 8005d94:	4019      	ands	r1, r3
 8005d96:	421a      	tst	r2, r3
 8005d98:	d013      	beq.n	8005dc2 <__swhatbuf_r+0x46>
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	3b40      	subs	r3, #64	; 0x40
 8005d9e:	2000      	movs	r0, #0
 8005da0:	6029      	str	r1, [r5, #0]
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	b016      	add	sp, #88	; 0x58
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	466a      	mov	r2, sp
 8005daa:	f000 f883 	bl	8005eb4 <_fstat_r>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	dbed      	blt.n	8005d8e <__swhatbuf_r+0x12>
 8005db2:	23f0      	movs	r3, #240	; 0xf0
 8005db4:	9901      	ldr	r1, [sp, #4]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	4019      	ands	r1, r3
 8005dba:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <__swhatbuf_r+0x4c>)
 8005dbc:	18c9      	adds	r1, r1, r3
 8005dbe:	424b      	negs	r3, r1
 8005dc0:	4159      	adcs	r1, r3
 8005dc2:	2380      	movs	r3, #128	; 0x80
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	e7ea      	b.n	8005d9e <__swhatbuf_r+0x22>
 8005dc8:	ffffe000 	.word	0xffffe000

08005dcc <__smakebuf_r>:
 8005dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dce:	2602      	movs	r6, #2
 8005dd0:	898b      	ldrh	r3, [r1, #12]
 8005dd2:	0005      	movs	r5, r0
 8005dd4:	000c      	movs	r4, r1
 8005dd6:	4233      	tst	r3, r6
 8005dd8:	d006      	beq.n	8005de8 <__smakebuf_r+0x1c>
 8005dda:	0023      	movs	r3, r4
 8005ddc:	3347      	adds	r3, #71	; 0x47
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	6123      	str	r3, [r4, #16]
 8005de2:	2301      	movs	r3, #1
 8005de4:	6163      	str	r3, [r4, #20]
 8005de6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005de8:	466a      	mov	r2, sp
 8005dea:	ab01      	add	r3, sp, #4
 8005dec:	f7ff ffc6 	bl	8005d7c <__swhatbuf_r>
 8005df0:	9900      	ldr	r1, [sp, #0]
 8005df2:	0007      	movs	r7, r0
 8005df4:	0028      	movs	r0, r5
 8005df6:	f7ff fbb5 	bl	8005564 <_malloc_r>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d108      	bne.n	8005e10 <__smakebuf_r+0x44>
 8005dfe:	220c      	movs	r2, #12
 8005e00:	5ea3      	ldrsh	r3, [r4, r2]
 8005e02:	059a      	lsls	r2, r3, #22
 8005e04:	d4ef      	bmi.n	8005de6 <__smakebuf_r+0x1a>
 8005e06:	2203      	movs	r2, #3
 8005e08:	4393      	bics	r3, r2
 8005e0a:	431e      	orrs	r6, r3
 8005e0c:	81a6      	strh	r6, [r4, #12]
 8005e0e:	e7e4      	b.n	8005dda <__smakebuf_r+0xe>
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	89a2      	ldrh	r2, [r4, #12]
 8005e14:	6020      	str	r0, [r4, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	9b00      	ldr	r3, [sp, #0]
 8005e1c:	6120      	str	r0, [r4, #16]
 8005e1e:	6163      	str	r3, [r4, #20]
 8005e20:	9b01      	ldr	r3, [sp, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <__smakebuf_r+0x74>
 8005e26:	0028      	movs	r0, r5
 8005e28:	230e      	movs	r3, #14
 8005e2a:	5ee1      	ldrsh	r1, [r4, r3]
 8005e2c:	f000 f854 	bl	8005ed8 <_isatty_r>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d005      	beq.n	8005e40 <__smakebuf_r+0x74>
 8005e34:	2303      	movs	r3, #3
 8005e36:	89a2      	ldrh	r2, [r4, #12]
 8005e38:	439a      	bics	r2, r3
 8005e3a:	3b02      	subs	r3, #2
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	433b      	orrs	r3, r7
 8005e44:	81a3      	strh	r3, [r4, #12]
 8005e46:	e7ce      	b.n	8005de6 <__smakebuf_r+0x1a>

08005e48 <_putc_r>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	0006      	movs	r6, r0
 8005e4c:	000d      	movs	r5, r1
 8005e4e:	0014      	movs	r4, r2
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d004      	beq.n	8005e5e <_putc_r+0x16>
 8005e54:	6a03      	ldr	r3, [r0, #32]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <_putc_r+0x16>
 8005e5a:	f7ff f8eb 	bl	8005034 <__sinit>
 8005e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e60:	07db      	lsls	r3, r3, #31
 8005e62:	d405      	bmi.n	8005e70 <_putc_r+0x28>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	059b      	lsls	r3, r3, #22
 8005e68:	d402      	bmi.n	8005e70 <_putc_r+0x28>
 8005e6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6c:	f7ff fb03 	bl	8005476 <__retarget_lock_acquire_recursive>
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da05      	bge.n	8005e86 <_putc_r+0x3e>
 8005e7a:	69a2      	ldr	r2, [r4, #24]
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	db12      	blt.n	8005ea6 <_putc_r+0x5e>
 8005e80:	b2eb      	uxtb	r3, r5
 8005e82:	2b0a      	cmp	r3, #10
 8005e84:	d00f      	beq.n	8005ea6 <_putc_r+0x5e>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	6022      	str	r2, [r4, #0]
 8005e8c:	701d      	strb	r5, [r3, #0]
 8005e8e:	b2ed      	uxtb	r5, r5
 8005e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_putc_r+0x5a>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	059b      	lsls	r3, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_putc_r+0x5a>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f7ff faeb 	bl	8005478 <__retarget_lock_release_recursive>
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	0029      	movs	r1, r5
 8005ea8:	0022      	movs	r2, r4
 8005eaa:	0030      	movs	r0, r6
 8005eac:	f7ff f9bc 	bl	8005228 <__swbuf_r>
 8005eb0:	0005      	movs	r5, r0
 8005eb2:	e7ed      	b.n	8005e90 <_putc_r+0x48>

08005eb4 <_fstat_r>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b570      	push	{r4, r5, r6, lr}
 8005eb8:	4d06      	ldr	r5, [pc, #24]	; (8005ed4 <_fstat_r+0x20>)
 8005eba:	0004      	movs	r4, r0
 8005ebc:	0008      	movs	r0, r1
 8005ebe:	0011      	movs	r1, r2
 8005ec0:	602b      	str	r3, [r5, #0]
 8005ec2:	f7fa fe2a 	bl	8000b1a <_fstat>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d103      	bne.n	8005ed2 <_fstat_r+0x1e>
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d000      	beq.n	8005ed2 <_fstat_r+0x1e>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	2000a58c 	.word	0x2000a58c

08005ed8 <_isatty_r>:
 8005ed8:	2300      	movs	r3, #0
 8005eda:	b570      	push	{r4, r5, r6, lr}
 8005edc:	4d06      	ldr	r5, [pc, #24]	; (8005ef8 <_isatty_r+0x20>)
 8005ede:	0004      	movs	r4, r0
 8005ee0:	0008      	movs	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fa fe27 	bl	8000b36 <_isatty>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d103      	bne.n	8005ef4 <_isatty_r+0x1c>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d000      	beq.n	8005ef4 <_isatty_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd70      	pop	{r4, r5, r6, pc}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	2000a58c 	.word	0x2000a58c

08005efc <_sbrk_r>:
 8005efc:	2300      	movs	r3, #0
 8005efe:	b570      	push	{r4, r5, r6, lr}
 8005f00:	4d06      	ldr	r5, [pc, #24]	; (8005f1c <_sbrk_r+0x20>)
 8005f02:	0004      	movs	r4, r0
 8005f04:	0008      	movs	r0, r1
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	f7fa fe2a 	bl	8000b60 <_sbrk>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	d103      	bne.n	8005f18 <_sbrk_r+0x1c>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d000      	beq.n	8005f18 <_sbrk_r+0x1c>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	bd70      	pop	{r4, r5, r6, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	2000a58c 	.word	0x2000a58c

08005f20 <memchr>:
 8005f20:	b2c9      	uxtb	r1, r1
 8005f22:	1882      	adds	r2, r0, r2
 8005f24:	4290      	cmp	r0, r2
 8005f26:	d101      	bne.n	8005f2c <memchr+0xc>
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4770      	bx	lr
 8005f2c:	7803      	ldrb	r3, [r0, #0]
 8005f2e:	428b      	cmp	r3, r1
 8005f30:	d0fb      	beq.n	8005f2a <memchr+0xa>
 8005f32:	3001      	adds	r0, #1
 8005f34:	e7f6      	b.n	8005f24 <memchr+0x4>
	...

08005f38 <_init>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr

08005f44 <_fini>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr
