
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e00  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e4  0800a2e4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2ec  0800a2ec  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800a2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000318  20000104  0800a3f8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  2000041c  0800a3f8  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b309  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046c1  00000000  00000000  0003b478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0003fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128b  00000000  00000000  00041310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d05  00000000  00000000  0004259b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021c38  00000000  00000000  000632a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c26d7  00000000  00000000  00084ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fbc  00000000  00000000  001475b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0014d56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009e98 	.word	0x08009e98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	08009e98 	.word	0x08009e98

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	240c      	movs	r4, #12
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f008 f977 	bl	8008948 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <MX_GPIO_Init+0xf0>)
 800065c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800065e:	4b35      	ldr	r3, [pc, #212]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000660:	2120      	movs	r1, #32
 8000662:	430a      	orrs	r2, r1
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
 8000666:	4b33      	ldr	r3, [pc, #204]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066a:	2220      	movs	r2, #32
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000678:	2101      	movs	r1, #1
 800067a:	430a      	orrs	r2, r1
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000682:	2201      	movs	r2, #1
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_GPIO_Init+0xf0>)
 800068c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000690:	2102      	movs	r1, #2
 8000692:	430a      	orrs	r2, r1
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
 8000696:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_GPIO_Init+0xf0>)
 8000698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069a:	2202      	movs	r2, #2
 800069c:	4013      	ands	r3, r2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80006a2:	23a0      	movs	r3, #160	; 0xa0
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2200      	movs	r2, #0
 80006a8:	2110      	movs	r1, #16
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fa67 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_GPIO_Init+0xf4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	2130      	movs	r1, #48	; 0x30
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fa61 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2210      	movs	r2, #16
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80006d4:	193a      	adds	r2, r7, r4
 80006d6:	23a0      	movs	r3, #160	; 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 f8c5 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	0212      	lsls	r2, r2, #8
 80006ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	000c      	movs	r4, r1
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2201      	movs	r2, #1
 80006f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <MX_GPIO_Init+0xf4>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f001 f8b3 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8000706:	0021      	movs	r1, r4
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2230      	movs	r2, #48	; 0x30
 800070c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	187b      	adds	r3, r7, r1
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <MX_GPIO_Init+0xf4>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f001 f8a0 	bl	800186c <HAL_GPIO_Init>

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b009      	add	sp, #36	; 0x24
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	50000400 	.word	0x50000400

0800073c <ProgramDead>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ProgramDead(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	TIM_SetTime(200);
 8000740:	20c8      	movs	r0, #200	; 0xc8
 8000742:	f006 fdc3 	bl	80072cc <TIM_SetTime>
	TIM_Start();
 8000746:	f006 fdf3 	bl	8007330 <TIM_Start>
	while(1);
 800074a:	e7fe      	b.n	800074a <ProgramDead+0xe>

0800074c <GetUpdateFlie>:
}

static u32 GetUpdateFlie(char *buf,u32 max_len)
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	4c13      	ldr	r4, [pc, #76]	; (800079c <GetUpdateFlie+0x50>)
 8000750:	44a5      	add	sp, r4
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	6039      	str	r1, [r7, #0]
	//FATFS fs;
	FRESULT res;
	FIL file;
	u32 len=0;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
//	res = f_mount(0, &fs);
	res = f_open(&file, CFG_FILE_NAME, FA_OPEN_EXISTING | FA_READ);//CFG_FILE_NAME--updateAT.cfg。FA_OPEN_EXISTING | FA_READ以只读方式打�????????
 800075c:	4e10      	ldr	r6, [pc, #64]	; (80007a0 <GetUpdateFlie+0x54>)
 800075e:	19bc      	adds	r4, r7, r6
 8000760:	4910      	ldr	r1, [pc, #64]	; (80007a4 <GetUpdateFlie+0x58>)
 8000762:	250c      	movs	r5, #12
 8000764:	197b      	adds	r3, r7, r5
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f006 f8f3 	bl	8006954 <f_open>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
	if(res == FR_OK) {
 8000772:	19bb      	adds	r3, r7, r6
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10a      	bne.n	8000790 <GetUpdateFlie+0x44>
		f_read(&file,buf,max_len,&len);
 800077a:	2308      	movs	r3, #8
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	1978      	adds	r0, r7, r5
 8000784:	f006 faeb 	bl	8006d5e <f_read>
		f_close(&file);
 8000788:	197b      	adds	r3, r7, r5
 800078a:	0018      	movs	r0, r3
 800078c:	f006 fcd3 	bl	8007136 <f_close>
	}
	return len;
 8000790:	68bb      	ldr	r3, [r7, #8]
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <GetUpdateFlie+0x5c>)
 8000798:	449d      	add	sp, r3
 800079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079c:	ffffefbc 	.word	0xffffefbc
 80007a0:	0000103f 	.word	0x0000103f
 80007a4:	08009ec0 	.word	0x08009ec0
 80007a8:	00001044 	.word	0x00001044

080007ac <jump_to_app>:

void jump_to_app(uint32_t APP_FLASH_ADDR)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	/* 检查栈顶地址是否合法 */
	if(((*(__IO uint32_t *)APP_FLASH_ADDR) & 0x2FFDB000) == 0x20000000)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <jump_to_app+0x58>)
 80007ba:	401a      	ands	r2, r3
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	059b      	lsls	r3, r3, #22
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d11a      	bne.n	80007fa <jump_to_app+0x4e>
	{
		printf("jump\n");
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <jump_to_app+0x5c>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f007 ff98 	bl	80086fc <puts>

		/* 去初始化 */
		HAL_SuspendTick();
 80007cc:	f000 fd32 	bl	8001234 <HAL_SuspendTick>
		HAL_RCC_DeInit();
 80007d0:	f001 fa5a 	bl	8001c88 <HAL_RCC_DeInit>
		HAL_DeInit();
 80007d4:	f000 fc78 	bl	80010c8 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	46c0      	nop			; (mov r8, r8)

		/* 屏蔽所有中断，防止在跳转过程中，中断干扰出现异常 */
		__disable_irq();

		/* 用户代码区第二个 字 为程序开始地址(复位地址) */
		JumpAddress = *(__IO uint32_t *) (APP_FLASH_ADDR + 4);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	617b      	str	r3, [r7, #20]

		/* Initialize user application's Stack Pointer */
		/* 初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址) */
		__set_MSP(*(__IO uint32_t *) APP_FLASH_ADDR);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f383 8808 	msr	MSP, r3
}
 80007f0:	46c0      	nop			; (mov r8, r8)

		/* 类型转换 */
		Jump_To_Application = (pFunction) JumpAddress;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	613b      	str	r3, [r7, #16]

		/* 跳转到 APP */
		Jump_To_Application();
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4798      	blx	r3
	}
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b006      	add	sp, #24
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	2ffdb000 	.word	0x2ffdb000
 8000808:	08009ed0 	.word	0x08009ed0

0800080c <__io_putchar>:

#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000814:	2301      	movs	r3, #1
 8000816:	425b      	negs	r3, r3
 8000818:	1d39      	adds	r1, r7, #4
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <__io_putchar+0x20>)
 800081c:	2201      	movs	r2, #1
 800081e:	f003 f8eb 	bl	80039f8 <HAL_UART_Transmit>
    return ch;
 8000822:	687b      	ldr	r3, [r7, #4]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	b002      	add	sp, #8
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200001d4 	.word	0x200001d4

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	4c62      	ldr	r4, [pc, #392]	; (80009bc <main+0x18c>)
 8000834:	44a5      	add	sp, r4
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fc26 	bl	8001088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f8da 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f7ff ff00 	bl	8000644 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000844:	f000 f936 	bl	8000ab4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000848:	f000 fac8 	bl	8000ddc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800084c:	f000 fb44 	bl	8000ed8 <MX_USART2_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000850:	f004 f81a 	bl	8004888 <MX_FATFS_Init>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <main+0x2c>
    Error_Handler();
 8000858:	f000 f926 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  LED_G_WritePin(GPIO_PIN_SET);
 800085c:	2001      	movs	r0, #1
 800085e:	f006 fd03 	bl	8007268 <LED_G_WritePin>

//  SD_Init();
  printf("hello\n");
 8000862:	4b57      	ldr	r3, [pc, #348]	; (80009c0 <main+0x190>)
 8000864:	0018      	movs	r0, r3
 8000866:	f007 ff49 	bl	80086fc <puts>

  if(SPI_SD_GetSDCard())
 800086a:	f007 f95b 	bl	8007b24 <SPI_SD_GetSDCard>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d100      	bne.n	8000874 <main+0x44>
 8000872:	e095      	b.n	80009a0 <main+0x170>
  {
	  LED_G_WritePin(GPIO_PIN_RESET);
 8000874:	2000      	movs	r0, #0
 8000876:	f006 fcf7 	bl	8007268 <LED_G_WritePin>
	  HAL_Delay(1000);
 800087a:	23fa      	movs	r3, #250	; 0xfa
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fcb4 	bl	80011ec <HAL_Delay>
	  TIM_SetTime(50);
 8000884:	2032      	movs	r0, #50	; 0x32
 8000886:	f006 fd21 	bl	80072cc <TIM_SetTime>
	  TIM_Start();
 800088a:	f006 fd51 	bl	8007330 <TIM_Start>

	  char buf[BUF_MAX_LEN];

	  FATFS fs;
	  u32 res;
	  res = f_mount(&fs,"0:",1);									//挂载
 800088e:	494d      	ldr	r1, [pc, #308]	; (80009c4 <main+0x194>)
 8000890:	23b2      	movs	r3, #178	; 0xb2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2201      	movs	r2, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f006 f80f 	bl	80068bc <f_mount>
 800089e:	0003      	movs	r3, r0
 80008a0:	4a49      	ldr	r2, [pc, #292]	; (80009c8 <main+0x198>)
 80008a2:	18ba      	adds	r2, r7, r2
 80008a4:	6013      	str	r3, [r2, #0]
	  printf("fmount ok\n");
 80008a6:	4b49      	ldr	r3, [pc, #292]	; (80009cc <main+0x19c>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f007 ff27 	bl	80086fc <puts>
	  u32 buf_len = GetUpdateFlie(buf,BUF_MAX_LEN);			//获取文件升级描述
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	00da      	lsls	r2, r3, #3
 80008b2:	25c8      	movs	r5, #200	; 0xc8
 80008b4:	006d      	lsls	r5, r5, #1
 80008b6:	197b      	adds	r3, r7, r5
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff ff46 	bl	800074c <GetUpdateFlie>
 80008c0:	0003      	movs	r3, r0
 80008c2:	4c43      	ldr	r4, [pc, #268]	; (80009d0 <main+0x1a0>)
 80008c4:	193a      	adds	r2, r7, r4
 80008c6:	6013      	str	r3, [r2, #0]
	  printf("buf_len:%d\n",buf_len);
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <main+0x1a4>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f007 fead 	bl	8008630 <iprintf>
	  if (buf_len){
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d05a      	beq.n	8000996 <main+0x166>
		  	struct UpdateCfgEntry pupdateCfg[CFGENTRY_MAX_NUM];
			int update_num=0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	4c3d      	ldr	r4, [pc, #244]	; (80009d8 <main+0x1a8>)
 80008e4:	193a      	adds	r2, r7, r4
 80008e6:	6013      	str	r3, [r2, #0]
			update_num = UpdateCfgParser(buf,buf_len,pupdateCfg);//获取待升级文件数�????????
 80008e8:	003a      	movs	r2, r7
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	197b      	adds	r3, r7, r5
 80008f0:	0018      	movs	r0, r3
 80008f2:	f006 fecf 	bl	8007694 <UpdateCfgParser>
 80008f6:	0003      	movs	r3, r0
 80008f8:	193a      	adds	r2, r7, r4
 80008fa:	6013      	str	r3, [r2, #0]
			printf("update_num:%d\n",update_num);
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <main+0x1ac>)
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f007 fe93 	bl	8008630 <iprintf>
			if(update_num) {
 800090a:	193b      	adds	r3, r7, r4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d03f      	beq.n	8000992 <main+0x162>
				for(int i=0;i<update_num;i++) {
 8000912:	2300      	movs	r3, #0
 8000914:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <main+0x1b0>)
 8000916:	18ba      	adds	r2, r7, r2
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e031      	b.n	8000980 <main+0x150>
					int ret;
					if(pupdateCfg[i].type == INTERNAL)
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <main+0x18c>)
 800091e:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <main+0x1b4>)
 8000920:	189b      	adds	r3, r3, r2
 8000922:	19d9      	adds	r1, r3, r7
 8000924:	482e      	ldr	r0, [pc, #184]	; (80009e0 <main+0x1b0>)
 8000926:	183b      	adds	r3, r7, r0
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	0013      	movs	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	189b      	adds	r3, r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18cb      	adds	r3, r1, r3
 8000934:	3304      	adds	r3, #4
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d10f      	bne.n	800095c <main+0x12c>
						ret = InternalFlashUpdate(&pupdateCfg[i]);
 800093c:	0039      	movs	r1, r7
 800093e:	183b      	adds	r3, r7, r0
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	0013      	movs	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	189b      	adds	r3, r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	18cb      	adds	r3, r1, r3
 800094c:	0018      	movs	r0, r3
 800094e:	f006 fd6f 	bl	8007430 <InternalFlashUpdate>
 8000952:	0003      	movs	r3, r0
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <main+0x1b8>)
 8000956:	18ba      	adds	r2, r7, r2
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	e004      	b.n	8000966 <main+0x136>
//					else if(pupdateCfg[i].type == SPI)//SD卡升�????????
//					{
//						ret = SPIFlashUpdate(&pupdateCfg[i]);
//						StartApplication(ApplicationFlashAddress);
//					}
					else ret = -1;
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <main+0x1b8>)
 8000962:	18ba      	adds	r2, r7, r2
 8000964:	6013      	str	r3, [r2, #0]
					if(ret) ProgramDead();
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <main+0x1b8>)
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <main+0x144>
 8000970:	f7ff fee4 	bl	800073c <ProgramDead>
				for(int i=0;i<update_num;i++) {
 8000974:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <main+0x1b0>)
 8000976:	18bb      	adds	r3, r7, r2
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	18ba      	adds	r2, r7, r2
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <main+0x1b0>)
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <main+0x1a8>)
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbc5      	blt.n	800091c <main+0xec>
 8000990:	e001      	b.n	8000996 <main+0x166>
				}
			} else {
				ProgramDead();
 8000992:	f7ff fed3 	bl	800073c <ProgramDead>
			}
	  }
	  TIM_Stop();
 8000996:	f006 fcdf 	bl	8007358 <TIM_Stop>
	  LED_G_WritePin(GPIO_PIN_SET);
 800099a:	2001      	movs	r0, #1
 800099c:	f006 fc64 	bl	8007268 <LED_G_WritePin>
  }

  SPI_SD_Release();
 80009a0:	f007 f882 	bl	8007aa8 <SPI_SD_Release>
  printf("jump_to_app...\n");
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x1bc>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f007 fea8 	bl	80086fc <puts>
  jump_to_app(ApplicationFlashAddress);
 80009ac:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <main+0x1c0>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fefc 	bl	80007ac <jump_to_app>
  ProgramDead();
 80009b4:	f7ff fec2 	bl	800073c <ProgramDead>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x188>
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	ffffea28 	.word	0xffffea28
 80009c0:	08009ed8 	.word	0x08009ed8
 80009c4:	08009ee0 	.word	0x08009ee0
 80009c8:	000015cc 	.word	0x000015cc
 80009cc:	08009ee4 	.word	0x08009ee4
 80009d0:	000015c8 	.word	0x000015c8
 80009d4:	08009ef0 	.word	0x08009ef0
 80009d8:	000015c4 	.word	0x000015c4
 80009dc:	08009efc 	.word	0x08009efc
 80009e0:	000015d4 	.word	0x000015d4
 80009e4:	000015d8 	.word	0x000015d8
 80009e8:	000015d0 	.word	0x000015d0
 80009ec:	08009f0c 	.word	0x08009f0c
 80009f0:	0800f000 	.word	0x0800f000

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b095      	sub	sp, #84	; 0x54
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	2414      	movs	r4, #20
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	0018      	movs	r0, r3
 8000a00:	233c      	movs	r3, #60	; 0x3c
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f007 ff9f 	bl	8008948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2310      	movs	r3, #16
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f007 ff98 	bl	8008948 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 f8e7 	bl	8001bf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0252      	lsls	r2, r2, #9
 8000a2e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	0021      	movs	r1, r4
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2202      	movs	r2, #2
 8000a36:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2210      	movs	r2, #16
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2280      	movs	r2, #128	; 0x80
 8000a4e:	0292      	lsls	r2, r2, #10
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0492      	lsls	r2, r2, #18
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	0592      	lsls	r2, r2, #22
 8000a60:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 f98b 	bl	8001d80 <HAL_RCC_OscConfig>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a6e:	f000 f81b 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fcd6 	bl	8002440 <HAL_RCC_ClockConfig>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000a98:	f000 f806 	bl	8000aa8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a9c:	f001 fe7a 	bl	8002794 <HAL_RCC_EnableCSS>
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b015      	add	sp, #84	; 0x54
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000aba:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <MX_SPI1_Init+0x88>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000ac0:	2282      	movs	r2, #130	; 0x82
 8000ac2:	0052      	lsls	r2, r2, #1
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000ace:	22e0      	movs	r2, #224	; 0xe0
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 f8b1 	bl	8002c7c <HAL_SPI_Init>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f7ff ffc3 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <MX_SPI1_Init+0x84>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000120 	.word	0x20000120
 8000b3c:	40013000 	.word	0x40013000

08000b40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	2414      	movs	r4, #20
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	2314      	movs	r3, #20
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f007 fef8 	bl	8008948 <memset>
  if(spiHandle->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_SPI_MspInit+0x9c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d138      	bne.n	8000bd4 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <HAL_SPI_MspInit+0xa0>)
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_SPI_MspInit+0xa0>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0149      	lsls	r1, r1, #5
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_SPI_MspInit+0xa0>)
 8000b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_SPI_MspInit+0xa0>)
 8000b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_SPI_MspInit+0xa0>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_SPI_MspInit+0xa0>)
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b96:	0021      	movs	r1, r4
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	22e0      	movs	r2, #224	; 0xe0
 8000b9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	187a      	adds	r2, r7, r1
 8000bb8:	23a0      	movs	r3, #160	; 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fe54 	bl	800186c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2019      	movs	r0, #25
 8000bca:	f000 fc03 	bl	80013d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bce:	2019      	movs	r0, #25
 8000bd0:	f000 fc15 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b00b      	add	sp, #44	; 0x2c
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	40013000 	.word	0x40013000
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0549      	lsls	r1, r1, #21
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_MspInit+0x4c>)
 8000c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	055b      	lsls	r3, r3, #21
 8000c18:	4013      	ands	r3, r2
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 fb14 	bl	8001250 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000c38:	f001 fdba 	bl	80027b0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x8>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 faaa 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <TIM3_TIM4_IRQHandler+0x14>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 faac 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000188 	.word	0x20000188

08000c80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1/I2S1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <SPI1_IRQHandler+0x14>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 f8b0 	bl	8002dec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000120 	.word	0x20000120

08000c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e00a      	b.n	8000cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000caa:	e000      	b.n	8000cae <_read+0x16>
 8000cac:	bf00      	nop
 8000cae:	0001      	movs	r1, r0
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	b2ca      	uxtb	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf0      	blt.n	8000caa <_read+0x12>
  }

  return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b006      	add	sp, #24
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e009      	b.n	8000cf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fd8d 	bl	800080c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf1      	blt.n	8000ce4 <_write+0x12>
  }
  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b006      	add	sp, #24
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_close>:

int _close(int file)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	425b      	negs	r3, r3
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	0192      	lsls	r2, r2, #6
 8000d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b004      	add	sp, #16
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f007 fe40 	bl	8008a18 <__errno>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	425b      	negs	r3, r3
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	18d2      	adds	r2, r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b006      	add	sp, #24
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20024000 	.word	0x20024000
 8000dc4:	00002000 	.word	0x00002000
 8000dc8:	20000184 	.word	0x20000184
 8000dcc:	20000420 	.word	0x20000420

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	2310      	movs	r3, #16
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	0018      	movs	r0, r3
 8000de8:	2310      	movs	r3, #16
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f007 fdab 	bl	8008948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	0018      	movs	r0, r3
 8000df6:	230c      	movs	r3, #12
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f007 fda4 	bl	8008948 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <MX_TIM3_Init+0xa4>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_TIM3_Init+0xa8>)
 8000e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_TIM3_Init+0xac>)
 8000e16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f002 f8e8 	bl	8002ffc <HAL_TIM_Base_Init>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e30:	f7ff fe3a 	bl	8000aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	2110      	movs	r1, #16
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	0152      	lsls	r2, r2, #5
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3e:	187a      	adds	r2, r7, r1
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f002 fac9 	bl	80033dc <HAL_TIM_ConfigClockSource>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e4e:	f7ff fe2b 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5e:	1d3a      	adds	r2, r7, #4
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_TIM3_Init+0xa0>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f002 fce3 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	1e03      	subs	r3, r0, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e6e:	f7ff fe1b 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b008      	add	sp, #32
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	20000188 	.word	0x20000188
 8000e80:	40000400 	.word	0x40000400
 8000e84:	000018ff 	.word	0x000018ff
 8000e88:	000007cf 	.word	0x000007cf

08000e8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_TIM_Base_MspInit+0x44>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d113      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_TIM_Base_MspInit+0x48>)
 8000ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_TIM_Base_MspInit+0x48>)
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_TIM_Base_MspInit+0x48>)
 8000eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2010      	movs	r0, #16
 8000ebc:	f000 fa8a 	bl	80013d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8000ec0:	2010      	movs	r0, #16
 8000ec2:	f000 fa9c 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b004      	add	sp, #16
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000ede:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <MX_USART2_UART_Init+0x98>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000ee4:	22e1      	movs	r2, #225	; 0xe1
 8000ee6:	0252      	lsls	r2, r2, #9
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f002 fd12 	bl	800394c <HAL_UART_Init>
 8000f28:	1e03      	subs	r3, r0, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f2c:	f7ff fdbc 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	0018      	movs	r0, r3
 8000f36:	f003 fbc7 	bl	80046c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f7ff fdb3 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	0018      	movs	r0, r3
 8000f48:	f003 fbfe 	bl	8004748 <HAL_UARTEx_SetRxFifoThreshold>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f50:	f7ff fdaa 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <MX_USART2_UART_Init+0x94>)
 8000f56:	0018      	movs	r0, r3
 8000f58:	f003 fb7c 	bl	8004654 <HAL_UARTEx_DisableFifoMode>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f7ff fda2 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	200001d4 	.word	0x200001d4
 8000f70:	40004400 	.word	0x40004400

08000f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b09d      	sub	sp, #116	; 0x74
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	235c      	movs	r3, #92	; 0x5c
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f007 fcde 	bl	8008948 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f8c:	2410      	movs	r4, #16
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	0018      	movs	r0, r3
 8000f92:	234c      	movs	r3, #76	; 0x4c
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f007 fcd6 	bl	8008948 <memset>
  if(uartHandle->Instance==USART2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a22      	ldr	r2, [pc, #136]	; (800102c <HAL_UART_MspInit+0xb8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d13e      	bne.n	8001024 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	2202      	movs	r2, #2
 8000faa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 fc25 	bl	8002804 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fbe:	f7ff fd73 	bl	8000aa8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_UART_MspInit+0xbc>)
 8000fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_UART_MspInit+0xbc>)
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0289      	lsls	r1, r1, #10
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_UART_MspInit+0xbc>)
 8000fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	029b      	lsls	r3, r3, #10
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_UART_MspInit+0xbc>)
 8000fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_UART_MspInit+0xbc>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0xbc>)
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ff6:	215c      	movs	r1, #92	; 0x5c
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2202      	movs	r2, #2
 8001002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2201      	movs	r2, #1
 8001014:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	187a      	adds	r2, r7, r1
 8001018:	23a0      	movs	r3, #160	; 0xa0
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fc24 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b01d      	add	sp, #116	; 0x74
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	40004400 	.word	0x40004400
 8001030:	40021000 	.word	0x40021000

08001034 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001036:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001038:	f7ff feca 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <LoopForever+0x6>)
  ldr r1, =_edata
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <LoopForever+0xe>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001054:	4c0a      	ldr	r4, [pc, #40]	; (8001080 <LoopForever+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001062:	f007 fcdf 	bl	8008a24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001066:	f7ff fbe3 	bl	8000830 <main>

0800106a <LoopForever>:

LoopForever:
  b LoopForever
 800106a:	e7fe      	b.n	800106a <LoopForever>
  ldr   r0, =_estack
 800106c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001074:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001078:	0800a2f4 	.word	0x0800a2f4
  ldr r2, =_sbss
 800107c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001080:	2000041c 	.word	0x2000041c

08001084 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC1_COMP_IRQHandler>
	...

08001088 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x3c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Init+0x3c>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0049      	lsls	r1, r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a2:	2003      	movs	r0, #3
 80010a4:	f000 f83c 	bl	8001120 <HAL_InitTick>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	e001      	b.n	80010b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fd96 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	781b      	ldrb	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40022000 	.word	0x40022000

080010c8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_DeInit+0x48>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	4252      	negs	r2, r2
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_DeInit+0x48>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <HAL_DeInit+0x48>)
 80010dc:	2201      	movs	r2, #1
 80010de:	4252      	negs	r2, r2
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_DeInit+0x48>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_DeInit+0x48>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	4252      	negs	r2, r2
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_DeInit+0x48>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_DeInit+0x48>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	4252      	negs	r2, r2
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HAL_DeInit+0x48>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001104:	f000 f806 	bl	8001114 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_InitTick+0x88>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02b      	beq.n	8001190 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_InitTick+0x8c>)
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_InitTick+0x88>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	0019      	movs	r1, r3
 8001142:	23fa      	movs	r3, #250	; 0xfa
 8001144:	0098      	lsls	r0, r3, #2
 8001146:	f7fe fff1 	bl	800012c <__udivsi3>
 800114a:	0003      	movs	r3, r0
 800114c:	0019      	movs	r1, r3
 800114e:	0020      	movs	r0, r4
 8001150:	f7fe ffec 	bl	800012c <__udivsi3>
 8001154:	0003      	movs	r3, r0
 8001156:	0018      	movs	r0, r3
 8001158:	f000 f961 	bl	800141e <HAL_SYSTICK_Config>
 800115c:	1e03      	subs	r3, r0, #0
 800115e:	d112      	bne.n	8001186 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d80a      	bhi.n	800117c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	425b      	negs	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f930 	bl	80013d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_InitTick+0x90>)
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00d      	b.n	8001198 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800117c:	230f      	movs	r3, #15
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e008      	b.n	8001198 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001186:	230f      	movs	r3, #15
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	e003      	b.n	8001198 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	230f      	movs	r3, #15
 8001192:	18fb      	adds	r3, r7, r3
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	781b      	ldrb	r3, [r3, #0]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b005      	add	sp, #20
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	001a      	movs	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	18d2      	adds	r2, r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000268 	.word	0x20000268

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000268 	.word	0x20000268

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3301      	adds	r3, #1
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	001a      	movs	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	189b      	adds	r3, r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	f7ff ffe0 	bl	80011d8 <HAL_GetTick>
 8001218:	0002      	movs	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <HAL_SuspendTick+0x18>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_SuspendTick+0x18>)
 800123e:	2102      	movs	r1, #2
 8001240:	438a      	bics	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40010000 	.word	0x40010000
 8001278:	fffff9ff 	.word	0xfffff9ff

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001288:	1dfb      	adds	r3, r7, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b7f      	cmp	r3, #127	; 0x7f
 800128e:	d809      	bhi.n	80012a4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	231f      	movs	r3, #31
 8001298:	401a      	ands	r2, r3
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_EnableIRQ+0x30>)
 800129c:	2101      	movs	r1, #1
 800129e:	4091      	lsls	r1, r2
 80012a0:	000a      	movs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	0002      	movs	r2, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b7f      	cmp	r3, #127	; 0x7f
 80012c4:	d828      	bhi.n	8001318 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c6:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <__NVIC_SetPriority+0xd4>)
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	33c0      	adds	r3, #192	; 0xc0
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	589b      	ldr	r3, [r3, r2]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	481f      	ldr	r0, [pc, #124]	; (8001384 <__NVIC_SetPriority+0xd4>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	430a      	orrs	r2, r1
 8001310:	33c0      	adds	r3, #192	; 0xc0
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001316:	e031      	b.n	800137c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <__NVIC_SetPriority+0xd8>)
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0019      	movs	r1, r3
 8001320:	230f      	movs	r3, #15
 8001322:	400b      	ands	r3, r1
 8001324:	3b08      	subs	r3, #8
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3306      	adds	r3, #6
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	18d3      	adds	r3, r2, r3
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	1dfa      	adds	r2, r7, #7
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	0011      	movs	r1, r2
 8001338:	2203      	movs	r2, #3
 800133a:	400a      	ands	r2, r1
 800133c:	00d2      	lsls	r2, r2, #3
 800133e:	21ff      	movs	r1, #255	; 0xff
 8001340:	4091      	lsls	r1, r2
 8001342:	000a      	movs	r2, r1
 8001344:	43d2      	mvns	r2, r2
 8001346:	401a      	ands	r2, r3
 8001348:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	019b      	lsls	r3, r3, #6
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	401a      	ands	r2, r3
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	2303      	movs	r3, #3
 800135a:	4003      	ands	r3, r0
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <__NVIC_SetPriority+0xd8>)
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	001c      	movs	r4, r3
 8001368:	230f      	movs	r3, #15
 800136a:	4023      	ands	r3, r4
 800136c:	3b08      	subs	r3, #8
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	430a      	orrs	r2, r1
 8001372:	3306      	adds	r3, #6
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	18c3      	adds	r3, r0, r3
 8001378:	3304      	adds	r3, #4
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b003      	add	sp, #12
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	1e5a      	subs	r2, r3, #1
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	045b      	lsls	r3, r3, #17
 800139c:	429a      	cmp	r2, r3
 800139e:	d301      	bcc.n	80013a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a0:	2301      	movs	r3, #1
 80013a2:	e010      	b.n	80013c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <SysTick_Config+0x44>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	3a01      	subs	r2, #1
 80013aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ac:	2301      	movs	r3, #1
 80013ae:	425b      	negs	r3, r3
 80013b0:	2103      	movs	r1, #3
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff ff7c 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x44>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x44>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	210f      	movs	r1, #15
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	1c02      	adds	r2, r0, #0
 80013e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b004      	add	sp, #16
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	0002      	movs	r2, r0
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ff33 	bl	800127c <__NVIC_EnableIRQ>
}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff ffaf 	bl	800138c <SysTick_Config>
 800142e:	0003      	movs	r3, r0
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001440:	210f      	movs	r1, #15
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2225      	movs	r2, #37	; 0x25
 800144c:	5c9b      	ldrb	r3, [r3, r2]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d006      	beq.n	8001462 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e048      	b.n	80014f4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	210e      	movs	r1, #14
 800146e:	438a      	bics	r2, r1
 8001470:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	438a      	bics	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148c:	491d      	ldr	r1, [pc, #116]	; (8001504 <HAL_DMA_Abort_IT+0xcc>)
 800148e:	400a      	ands	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	221c      	movs	r2, #28
 8001498:	401a      	ands	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2101      	movs	r1, #1
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00c      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c2:	4910      	ldr	r1, [pc, #64]	; (8001504 <HAL_DMA_Abort_IT+0xcc>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2225      	movs	r2, #37	; 0x25
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2224      	movs	r2, #36	; 0x24
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	0010      	movs	r0, r2
 80014f2:	4798      	blx	r3
    }
  }
  return status;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	781b      	ldrb	r3, [r3, #0]
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	fffffeff 	.word	0xfffffeff

08001508 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	603a      	str	r2, [r7, #0]
 8001514:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_FLASH_Program+0x94>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_FLASH_Program+0x1a>
 800151e:	2302      	movs	r3, #2
 8001520:	e038      	b.n	8001594 <HAL_FLASH_Program+0x8c>
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_FLASH_Program+0x94>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <HAL_FLASH_Program+0x94>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800152e:	2517      	movs	r5, #23
 8001530:	197c      	adds	r4, r7, r5
 8001532:	23fa      	movs	r3, #250	; 0xfa
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f87a 	bl	8001630 <FLASH_WaitForLastOperation>
 800153c:	0003      	movs	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001540:	197b      	adds	r3, r7, r5
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11f      	bne.n	8001588 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d106      	bne.n	800155c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	0008      	movs	r0, r1
 8001556:	f000 f8b9 	bl	80016cc <FLASH_Program_DoubleWord>
 800155a:	e005      	b.n	8001568 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0011      	movs	r1, r2
 8001562:	0018      	movs	r0, r3
 8001564:	f008 fca4 	bl	8009eb0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001568:	2317      	movs	r3, #23
 800156a:	18fc      	adds	r4, r7, r3
 800156c:	23fa      	movs	r3, #250	; 0xfa
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	0018      	movs	r0, r3
 8001572:	f000 f85d 	bl	8001630 <FLASH_WaitForLastOperation>
 8001576:	0003      	movs	r3, r0
 8001578:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_FLASH_Program+0x98>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43d9      	mvns	r1, r3
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_FLASH_Program+0x98>)
 8001584:	400a      	ands	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_FLASH_Program+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800158e:	2317      	movs	r3, #23
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b006      	add	sp, #24
 800159a:	bdb0      	pop	{r4, r5, r7, pc}
 800159c:	2000026c 	.word	0x2000026c
 80015a0:	40022000 	.word	0x40022000

080015a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_FLASH_Unlock+0x3c>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	da0c      	bge.n	80015d2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_FLASH_Unlock+0x3c>)
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_FLASH_Unlock+0x40>)
 80015bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_FLASH_Unlock+0x3c>)
 80015c0:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_FLASH_Unlock+0x44>)
 80015c2:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_FLASH_Unlock+0x3c>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da02      	bge.n	80015d2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	781b      	ldrb	r3, [r3, #0]
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40022000 	.word	0x40022000
 80015e4:	45670123 	.word	0x45670123
 80015e8:	cdef89ab 	.word	0xcdef89ab

080015ec <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015f8:	23fa      	movs	r3, #250	; 0xfa
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 f817 	bl	8001630 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_FLASH_Lock+0x40>)
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_FLASH_Lock+0x40>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0609      	lsls	r1, r1, #24
 800160c:	430a      	orrs	r2, r1
 800160e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_FLASH_Lock+0x40>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da02      	bge.n	800161e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40022000 	.word	0x40022000

08001630 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fdce 	bl	80011d8 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8001640:	23c0      	movs	r3, #192	; 0xc0
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8001646:	e00c      	b.n	8001662 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3301      	adds	r3, #1
 800164c:	d009      	beq.n	8001662 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800164e:	f7ff fdc3 	bl	80011d8 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	d801      	bhi.n	8001662 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e028      	b.n	80016b4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <FLASH_WaitForLastOperation+0x8c>)
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4013      	ands	r3, r2
 800166a:	d1ed      	bne.n	8001648 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <FLASH_WaitForLastOperation+0x8c>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <FLASH_WaitForLastOperation+0x90>)
 8001672:	4013      	ands	r3, r2
 8001674:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <FLASH_WaitForLastOperation+0x8c>)
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <FLASH_WaitForLastOperation+0x94>)
 800167a:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d011      	beq.n	80016a6 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <FLASH_WaitForLastOperation+0x98>)
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e013      	b.n	80016b4 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	d009      	beq.n	80016a6 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001692:	f7ff fda1 	bl	80011d8 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d801      	bhi.n	80016a6 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e006      	b.n	80016b4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <FLASH_WaitForLastOperation+0x8c>)
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	02db      	lsls	r3, r3, #11
 80016ae:	4013      	ands	r3, r2
 80016b0:	d1ec      	bne.n	800168c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000
 80016c0:	0000c3fa 	.word	0x0000c3fa
 80016c4:	0008c3fb 	.word	0x0008c3fb
 80016c8:	2000026c 	.word	0x2000026c

080016cc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	603a      	str	r2, [r7, #0]
 80016d6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <FLASH_Program_DoubleWord+0x3c>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <FLASH_Program_DoubleWord+0x3c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80016ea:	f3bf 8f6f 	isb	sy
}
 80016ee:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	001c      	movs	r4, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	001d      	movs	r5, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3304      	adds	r3, #4
 80016fc:	0022      	movs	r2, r4
 80016fe:	601a      	str	r2, [r3, #0]
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b004      	add	sp, #16
 8001706:	bdb0      	pop	{r4, r5, r7, pc}
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_FLASHEx_Erase+0x16>
 800171e:	2302      	movs	r3, #2
 8001720:	e05c      	b.n	80017dc <HAL_FLASHEx_Erase+0xd0>
 8001722:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800172e:	250f      	movs	r5, #15
 8001730:	197c      	adds	r4, r7, r5
 8001732:	23fa      	movs	r3, #250	; 0xfa
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff ff7a 	bl	8001630 <FLASH_WaitForLastOperation>
 800173c:	0003      	movs	r3, r0
 800173e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001740:	002c      	movs	r4, r5
 8001742:	193b      	adds	r3, r7, r4
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d142      	bne.n	80017d0 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d10d      	bne.n	800176e <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f848 	bl	80017ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800175c:	193c      	adds	r4, r7, r4
 800175e:	23fa      	movs	r3, #250	; 0xfa
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff64 	bl	8001630 <FLASH_WaitForLastOperation>
 8001768:	0003      	movs	r3, r0
 800176a:	7023      	strb	r3, [r4, #0]
 800176c:	e030      	b.n	80017d0 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4252      	negs	r2, r2
 8001774:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	e01a      	b.n	80017b4 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	0011      	movs	r1, r2
 8001786:	0018      	movs	r0, r3
 8001788:	f000 f844 	bl	8001814 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800178c:	250f      	movs	r5, #15
 800178e:	197c      	adds	r4, r7, r5
 8001790:	23fa      	movs	r3, #250	; 0xfa
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff ff4b 	bl	8001630 <FLASH_WaitForLastOperation>
 800179a:	0003      	movs	r3, r0
 800179c:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800179e:	197b      	adds	r3, r7, r5
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	601a      	str	r2, [r3, #0]
          break;
 80017ac:	e00a      	b.n	80017c4 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3dc      	bcc.n	800177e <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_FLASHEx_Erase+0xdc>)
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_FLASHEx_Erase+0xdc>)
 80017ca:	2102      	movs	r1, #2
 80017cc:	438a      	bics	r2, r1
 80017ce:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_FLASHEx_Erase+0xd8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	2000026c 	.word	0x2000026c
 80017e8:	40022000 	.word	0x40022000

080017ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <FLASH_MassErase+0x24>)
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <FLASH_MassErase+0x24>)
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0249      	lsls	r1, r1, #9
 8001802:	430a      	orrs	r2, r1
 8001804:	615a      	str	r2, [r3, #20]
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	40022000 	.word	0x40022000

08001814 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <FLASH_PageErase+0x48>)
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <FLASH_PageErase+0x4c>)
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b04      	cmp	r3, #4
 800182c:	d005      	beq.n	800183a <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	0192      	lsls	r2, r2, #6
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e003      	b.n	8001842 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a09      	ldr	r2, [pc, #36]	; (8001864 <FLASH_PageErase+0x50>)
 800183e:	4013      	ands	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	00da      	lsls	r2, r3, #3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	431a      	orrs	r2, r3
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <FLASH_PageErase+0x48>)
 800184c:	4906      	ldr	r1, [pc, #24]	; (8001868 <FLASH_PageErase+0x54>)
 800184e:	430a      	orrs	r2, r1
 8001850:	615a      	str	r2, [r3, #20]
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40022000 	.word	0x40022000
 8001860:	ffffe007 	.word	0xffffe007
 8001864:	ffffdfff 	.word	0xffffdfff
 8001868:	00010002 	.word	0x00010002

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e14d      	b.n	8001b18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4091      	lsls	r1, r2
 8001886:	000a      	movs	r2, r1
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x28>
 8001892:	e13e      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	4013      	ands	r3, r2
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x40>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	409a      	lsls	r2, r3
 80018ba:	0013      	movs	r3, r2
 80018bc:	43da      	mvns	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	0013      	movs	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
 80018e8:	0013      	movs	r3, r2
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	2201      	movs	r2, #1
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
 8001900:	0013      	movs	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	4013      	ands	r3, r2
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	4013      	ands	r3, r2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	58d3      	ldr	r3, [r2, r3]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	409a      	lsls	r2, r3
 8001970:	0013      	movs	r3, r2
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2107      	movs	r1, #7
 8001982:	400b      	ands	r3, r1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	409a      	lsls	r2, r3
 8001988:	0013      	movs	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	6939      	ldr	r1, [r7, #16]
 800199c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	401a      	ands	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	23c0      	movs	r3, #192	; 0xc0
 80019d8:	029b      	lsls	r3, r3, #10
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_GPIO_Init+0x174>
 80019de:	e098      	b.n	8001b12 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80019e0:	4a53      	ldr	r2, [pc, #332]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3318      	adds	r3, #24
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	589b      	ldr	r3, [r3, r2]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2203      	movs	r2, #3
 80019f2:	4013      	ands	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	220f      	movs	r2, #15
 80019f8:	409a      	lsls	r2, r3
 80019fa:	0013      	movs	r3, r2
 80019fc:	43da      	mvns	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	23a0      	movs	r3, #160	; 0xa0
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x1d6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2c8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x1d2>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_GPIO_Init+0x2cc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x1ce>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a46      	ldr	r2, [pc, #280]	; (8001b3c <HAL_GPIO_Init+0x2d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x1ca>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a45      	ldr	r2, [pc, #276]	; (8001b40 <HAL_GPIO_Init+0x2d4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x1c6>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1d8>
 8001a42:	2300      	movs	r3, #0
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a54:	4936      	ldr	r1, [pc, #216]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	035b      	lsls	r3, r3, #13
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ab8:	2384      	movs	r3, #132	; 0x84
 8001aba:	58d3      	ldr	r3, [r2, r3]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001adc:	4914      	ldr	r1, [pc, #80]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ade:	2284      	movs	r2, #132	; 0x84
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	58d3      	ldr	r3, [r2, r3]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	4013      	ands	r3, r2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0a:	4909      	ldr	r1, [pc, #36]	; (8001b30 <HAL_GPIO_Init+0x2c4>)
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	40da      	lsrs	r2, r3
 8001b20:	1e13      	subs	r3, r2, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_GPIO_Init+0x2ba>
 8001b24:	e6aa      	b.n	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021800 	.word	0x40021800
 8001b34:	50000400 	.word	0x50000400
 8001b38:	50000800 	.word	0x50000800
 8001b3c:	50000c00 	.word	0x50000c00
 8001b40:	50001000 	.word	0x50001000

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	1cba      	adds	r2, r7, #2
 8001b58:	8812      	ldrh	r2, [r2, #0]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b68:	230f      	movs	r3, #15
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b70:	230f      	movs	r3, #15
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	0008      	movs	r0, r1
 8001b88:	0011      	movs	r1, r2
 8001b8a:	1cbb      	adds	r3, r7, #2
 8001b8c:	1c02      	adds	r2, r0, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	1c7b      	adds	r3, r7, #1
 8001b92:	1c0a      	adds	r2, r1, #0
 8001b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b96:	1c7b      	adds	r3, r7, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba6:	e003      	b.n	8001bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba8:	1cbb      	adds	r3, r7, #2
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	1cbb      	adds	r3, r7, #2
 8001bc4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bcc:	1cbb      	adds	r3, r7, #2
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	1cb9      	adds	r1, r7, #2
 8001bdc:	8809      	ldrh	r1, [r1, #0]
 8001bde:	400b      	ands	r3, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b004      	add	sp, #16
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d11f      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	0013      	movs	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	189b      	adds	r3, r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4912      	ldr	r1, [pc, #72]	; (8001c6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7fe fa82 	bl	800012c <__udivsi3>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c2e:	e008      	b.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e001      	b.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e009      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d0ed      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40007000 	.word	0x40007000
 8001c64:	fffff9ff 	.word	0xfffff9ff
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	000f4240 	.word	0x000f4240

08001c70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	23e0      	movs	r3, #224	; 0xe0
 8001c7a:	01db      	lsls	r3, r3, #7
 8001c7c:	4013      	ands	r3, r2
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001c8e:	f7ff faa3 	bl	80011d8 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	0049      	lsls	r1, r1, #1
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fa97 	bl	80011d8 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e054      	b.n	8001d62 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	01d2      	lsls	r2, r2, #7
 8001cca:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fa84 	bl	80011d8 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001cda:	e009      	b.n	8001cf0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff fa7c 	bl	80011d8 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_RCC_DeInit+0xe8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e038      	b.n	8001d62 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	0052      	lsls	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001d0a:	f7ff fa65 	bl	80011d8 <HAL_GetTick>
 8001d0e:	0003      	movs	r3, r0
 8001d10:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff fa60 	bl	80011d8 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e01d      	b.n	8001d62 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	049b      	lsls	r3, r3, #18
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	0152      	lsls	r2, r2, #5
 8001d38:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_RCC_DeInit+0xe4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	4252      	negs	r2, r2
 8001d46:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_DeInit+0xec>)
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_RCC_DeInit+0xf0>)
 8001d4c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_DeInit+0xf4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff f9e4 	bl	8001120 <HAL_InitTick>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
  }
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b002      	add	sp, #8
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00001388 	.word	0x00001388
 8001d74:	20000000 	.word	0x20000000
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f000 fb50 	bl	8002434 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d100      	bne.n	8001da0 <HAL_RCC_OscConfig+0x20>
 8001d9e:	e07c      	b.n	8001e9a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da0:	4bc3      	ldr	r3, [pc, #780]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2238      	movs	r2, #56	; 0x38
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001daa:	4bc1      	ldr	r3, [pc, #772]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2203      	movs	r2, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d102      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x40>
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d002      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d10b      	bne.n	8001dde <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc6:	4bba      	ldr	r3, [pc, #744]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d062      	beq.n	8001e98 <HAL_RCC_OscConfig+0x118>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d15e      	bne.n	8001e98 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e32a      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	025b      	lsls	r3, r3, #9
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_OscConfig+0x7a>
 8001dea:	4bb1      	ldr	r3, [pc, #708]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4bb0      	ldr	r3, [pc, #704]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0249      	lsls	r1, r1, #9
 8001df4:	430a      	orrs	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e020      	b.n	8001e3c <HAL_RCC_OscConfig+0xbc>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	23a0      	movs	r3, #160	; 0xa0
 8001e00:	02db      	lsls	r3, r3, #11
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d10e      	bne.n	8001e24 <HAL_RCC_OscConfig+0xa4>
 8001e06:	4baa      	ldr	r3, [pc, #680]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4ba9      	ldr	r3, [pc, #676]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	02c9      	lsls	r1, r1, #11
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4ba6      	ldr	r3, [pc, #664]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4ba5      	ldr	r3, [pc, #660]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	0249      	lsls	r1, r1, #9
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xbc>
 8001e24:	4ba2      	ldr	r3, [pc, #648]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4ba1      	ldr	r3, [pc, #644]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e2a:	49a2      	ldr	r1, [pc, #648]	; (80020b4 <HAL_RCC_OscConfig+0x334>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	4b9f      	ldr	r3, [pc, #636]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e36:	49a0      	ldr	r1, [pc, #640]	; (80020b8 <HAL_RCC_OscConfig+0x338>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d014      	beq.n	8001e6e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f9c8 	bl	80011d8 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4e:	f7ff f9c3 	bl	80011d8 <HAL_GetTick>
 8001e52:	0002      	movs	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b64      	cmp	r3, #100	; 0x64
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e2e9      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e60:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0xce>
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f9b3 	bl	80011d8 <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7ff f9ae 	bl	80011d8 <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e2d4      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	4013      	ands	r3, r2
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0xf8>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x126>
 8001ea4:	e099      	b.n	8001fda <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4b82      	ldr	r3, [pc, #520]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2238      	movs	r2, #56	; 0x38
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	4b7f      	ldr	r3, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x146>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d135      	bne.n	8001f38 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x164>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e2a7      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a74      	ldr	r2, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x33c>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	0019      	movs	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	021a      	lsls	r2, r3, #8
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6e      	ldr	r2, [pc, #440]	; (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f14:	4b66      	ldr	r3, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	0adb      	lsrs	r3, r3, #11
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_RCC_OscConfig+0x344>)
 8001f20:	40da      	lsrs	r2, r3
 8001f22:	4b69      	ldr	r3, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x348>)
 8001f24:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f26:	4b69      	ldr	r3, [pc, #420]	; (80020cc <HAL_RCC_OscConfig+0x34c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f7ff f8f8 	bl	8001120 <HAL_InitTick>
 8001f30:	1e03      	subs	r3, r0, #0
 8001f32:	d051      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e27d      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d030      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f40:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5e      	ldr	r2, [pc, #376]	; (80020c0 <HAL_RCC_OscConfig+0x340>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f50:	430a      	orrs	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b55      	ldr	r3, [pc, #340]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	0049      	lsls	r1, r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f939 	bl	80011d8 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f934 	bl	80011d8 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e25a      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a4b      	ldr	r2, [pc, #300]	; (80020bc <HAL_RCC_OscConfig+0x33c>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	e01b      	b.n	8001fda <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001fa8:	4949      	ldr	r1, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x350>)
 8001faa:	400a      	ands	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fae:	f7ff f913 	bl	80011d8 <HAL_GetTick>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff f90e 	bl	80011d8 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e234      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x238>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2208      	movs	r2, #8
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d047      	beq.n	8002074 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2238      	movs	r2, #56	; 0x38
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b18      	cmp	r3, #24
 8001fee:	d10a      	bne.n	8002006 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d03c      	beq.n	8002074 <HAL_RCC_OscConfig+0x2f4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d138      	bne.n	8002074 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e216      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800200e:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002010:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002012:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002014:	2101      	movs	r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff f8dd 	bl	80011d8 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff f8d8 	bl	80011d8 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1fe      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	2202      	movs	r2, #2
 800203c:	4013      	ands	r3, r2
 800203e:	d0f1      	beq.n	8002024 <HAL_RCC_OscConfig+0x2a4>
 8002040:	e018      	b.n	8002074 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002044:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002048:	2101      	movs	r1, #1
 800204a:	438a      	bics	r2, r1
 800204c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204e:	f7ff f8c3 	bl	80011d8 <HAL_GetTick>
 8002052:	0003      	movs	r3, r0
 8002054:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff f8be 	bl	80011d8 <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1e4      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d1f1      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2204      	movs	r2, #4
 800207a:	4013      	ands	r3, r2
 800207c:	d100      	bne.n	8002080 <HAL_RCC_OscConfig+0x300>
 800207e:	e0c7      	b.n	8002210 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002080:	231f      	movs	r3, #31
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2238      	movs	r2, #56	; 0x38
 800208e:	4013      	ands	r3, r2
 8002090:	2b20      	cmp	r3, #32
 8002092:	d11f      	bne.n	80020d4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_RCC_OscConfig+0x330>)
 8002096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d100      	bne.n	80020a0 <HAL_RCC_OscConfig+0x320>
 800209e:	e0b7      	b.n	8002210 <HAL_RCC_OscConfig+0x490>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d000      	beq.n	80020aa <HAL_RCC_OscConfig+0x32a>
 80020a8:	e0b2      	b.n	8002210 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e1c2      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000
 80020b4:	fffeffff 	.word	0xfffeffff
 80020b8:	fffbffff 	.word	0xfffbffff
 80020bc:	ffff80ff 	.word	0xffff80ff
 80020c0:	ffffc7ff 	.word	0xffffc7ff
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000004 	.word	0x20000004
 80020d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020d4:	4bb5      	ldr	r3, [pc, #724]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80020d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	4013      	ands	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x364>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x366>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d011      	beq.n	800210e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4bb0      	ldr	r3, [pc, #704]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80020ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ee:	4baf      	ldr	r3, [pc, #700]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	0549      	lsls	r1, r1, #21
 80020f4:	430a      	orrs	r2, r1
 80020f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f8:	4bac      	ldr	r3, [pc, #688]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80020fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	055b      	lsls	r3, r3, #21
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002106:	231f      	movs	r3, #31
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	4ba8      	ldr	r3, [pc, #672]	; (80023b0 <HAL_RCC_OscConfig+0x630>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4013      	ands	r3, r2
 8002118:	d11a      	bne.n	8002150 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211a:	4ba5      	ldr	r3, [pc, #660]	; (80023b0 <HAL_RCC_OscConfig+0x630>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4ba4      	ldr	r3, [pc, #656]	; (80023b0 <HAL_RCC_OscConfig+0x630>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0049      	lsls	r1, r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002128:	f7ff f856 	bl	80011d8 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7ff f851 	bl	80011d8 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e177      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002144:	4b9a      	ldr	r3, [pc, #616]	; (80023b0 <HAL_RCC_OscConfig+0x630>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4013      	ands	r3, r2
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x3e6>
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800215a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800215c:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800215e:	2101      	movs	r1, #1
 8002160:	430a      	orrs	r2, r1
 8002162:	65da      	str	r2, [r3, #92]	; 0x5c
 8002164:	e01c      	b.n	80021a0 <HAL_RCC_OscConfig+0x420>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x408>
 800216e:	4b8f      	ldr	r3, [pc, #572]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002172:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002174:	2104      	movs	r1, #4
 8002176:	430a      	orrs	r2, r1
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
 800217a:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800217c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002180:	2101      	movs	r1, #1
 8002182:	430a      	orrs	r2, r1
 8002184:	65da      	str	r2, [r3, #92]	; 0x5c
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0x420>
 8002188:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800218a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800218c:	4b87      	ldr	r3, [pc, #540]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800218e:	2101      	movs	r1, #1
 8002190:	438a      	bics	r2, r1
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c
 8002194:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002196:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800219a:	2104      	movs	r1, #4
 800219c:	438a      	bics	r2, r1
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d014      	beq.n	80021d2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff f816 	bl	80011d8 <HAL_GetTick>
 80021ac:	0003      	movs	r3, r0
 80021ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b0:	e009      	b.n	80021c6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff f811 	bl	80011d8 <HAL_GetTick>
 80021b6:	0002      	movs	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	4a7d      	ldr	r2, [pc, #500]	; (80023b4 <HAL_RCC_OscConfig+0x634>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e136      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	4b79      	ldr	r3, [pc, #484]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	2202      	movs	r2, #2
 80021cc:	4013      	ands	r3, r2
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x432>
 80021d0:	e013      	b.n	80021fa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff f801 	bl	80011d8 <HAL_GetTick>
 80021d6:	0003      	movs	r3, r0
 80021d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021da:	e009      	b.n	80021f0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe fffc 	bl	80011d8 <HAL_GetTick>
 80021e0:	0002      	movs	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	4a73      	ldr	r2, [pc, #460]	; (80023b4 <HAL_RCC_OscConfig+0x634>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e121      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f0:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021fa:	231f      	movs	r3, #31
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b69      	ldr	r3, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800220a:	496b      	ldr	r1, [pc, #428]	; (80023b8 <HAL_RCC_OscConfig+0x638>)
 800220c:	400a      	ands	r2, r1
 800220e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2220      	movs	r2, #32
 8002216:	4013      	ands	r3, r2
 8002218:	d039      	beq.n	800228e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01b      	beq.n	800225a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	03c9      	lsls	r1, r1, #15
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe ffd2 	bl	80011d8 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800223a:	f7fe ffcd 	bl	80011d8 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0f3      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800224c:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	4013      	ands	r3, r2
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x4ba>
 8002258:	e019      	b.n	800228e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800225a:	4b54      	ldr	r3, [pc, #336]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002260:	4956      	ldr	r1, [pc, #344]	; (80023bc <HAL_RCC_OscConfig+0x63c>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7fe ffb7 	bl	80011d8 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002270:	f7fe ffb2 	bl	80011d8 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0d8      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	4013      	ands	r3, r2
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d100      	bne.n	8002298 <HAL_RCC_OscConfig+0x518>
 8002296:	e0cc      	b.n	8002432 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002298:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2238      	movs	r2, #56	; 0x38
 800229e:	4013      	ands	r3, r2
 80022a0:	2b10      	cmp	r3, #16
 80022a2:	d100      	bne.n	80022a6 <HAL_RCC_OscConfig+0x526>
 80022a4:	e07b      	b.n	800239e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d156      	bne.n	800235c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80022b4:	4942      	ldr	r1, [pc, #264]	; (80023c0 <HAL_RCC_OscConfig+0x640>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe ff8d 	bl	80011d8 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe ff88 	bl	80011d8 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0ae      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	049b      	lsls	r3, r3, #18
 80022de:	4013      	ands	r3, r2
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4a37      	ldr	r2, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x644>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	431a      	orrs	r2, r3
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	0449      	lsls	r1, r1, #17
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002324:	4b21      	ldr	r3, [pc, #132]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800232a:	2180      	movs	r1, #128	; 0x80
 800232c:	0549      	lsls	r1, r1, #21
 800232e:	430a      	orrs	r2, r1
 8002330:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe ff51 	bl	80011d8 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe ff4c 	bl	80011d8 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e072      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	049b      	lsls	r3, r3, #18
 8002356:	4013      	ands	r3, r2
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x5bc>
 800235a:	e06a      	b.n	8002432 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002362:	4917      	ldr	r1, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x640>)
 8002364:	400a      	ands	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe ff36 	bl	80011d8 <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe ff31 	bl	80011d8 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e057      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	049b      	lsls	r3, r3, #18
 800238c:	4013      	ands	r3, r2
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_OscConfig+0x62c>)
 8002396:	490c      	ldr	r1, [pc, #48]	; (80023c8 <HAL_RCC_OscConfig+0x648>)
 8002398:	400a      	ands	r2, r1
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e049      	b.n	8002432 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e044      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	00001388 	.word	0x00001388
 80023b8:	efffffff 	.word	0xefffffff
 80023bc:	ffbfffff 	.word	0xffbfffff
 80023c0:	feffffff 	.word	0xfeffffff
 80023c4:	11c1808c 	.word	0x11c1808c
 80023c8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCC_OscConfig+0x6bc>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2203      	movs	r2, #3
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	429a      	cmp	r2, r3
 80023de:	d126      	bne.n	800242e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2270      	movs	r2, #112	; 0x70
 80023e4:	401a      	ands	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11f      	bne.n	800242e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	23fe      	movs	r3, #254	; 0xfe
 80023f2:	01db      	lsls	r3, r3, #7
 80023f4:	401a      	ands	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d116      	bne.n	800242e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	23f8      	movs	r3, #248	; 0xf8
 8002404:	039b      	lsls	r3, r3, #14
 8002406:	401a      	ands	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d10e      	bne.n	800242e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	23e0      	movs	r3, #224	; 0xe0
 8002414:	051b      	lsls	r3, r3, #20
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	0f5b      	lsrs	r3, r3, #29
 8002424:	075a      	lsls	r2, r3, #29
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b008      	add	sp, #32
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0e9      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2207      	movs	r2, #7
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d91e      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b73      	ldr	r3, [pc, #460]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2207      	movs	r2, #7
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	4b70      	ldr	r3, [pc, #448]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002474:	f7fe feb0 	bl	80011d8 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe feab 	bl	80011d8 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a6a      	ldr	r2, [pc, #424]	; (8002634 <HAL_RCC_ClockConfig+0x1f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0ca      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d015      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2204      	movs	r2, #4
 80024b0:	4013      	ands	r3, r2
 80024b2:	d006      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024b4:	4b60      	ldr	r3, [pc, #384]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	21e0      	movs	r1, #224	; 0xe0
 80024bc:	01c9      	lsls	r1, r1, #7
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c2:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4a5d      	ldr	r2, [pc, #372]	; (800263c <HAL_RCC_ClockConfig+0x1fc>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d057      	beq.n	8002590 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e8:	4b53      	ldr	r3, [pc, #332]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4013      	ands	r3, r2
 80024f2:	d12b      	bne.n	800254c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e097      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	049b      	lsls	r3, r3, #18
 8002508:	4013      	ands	r3, r2
 800250a:	d11f      	bne.n	800254c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e08b      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d107      	bne.n	8002528 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4013      	ands	r3, r2
 8002522:	d113      	bne.n	800254c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e07f      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d106      	bne.n	800253e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d108      	bne.n	800254c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e074      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253e:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e06d      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2207      	movs	r2, #7
 8002552:	4393      	bics	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 800255c:	430a      	orrs	r2, r1
 800255e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002560:	f7fe fe3a 	bl	80011d8 <HAL_GetTick>
 8002564:	0003      	movs	r3, r0
 8002566:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002568:	e009      	b.n	800257e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256a:	f7fe fe35 	bl	80011d8 <HAL_GetTick>
 800256e:	0002      	movs	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <HAL_RCC_ClockConfig+0x1f4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e054      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2238      	movs	r2, #56	; 0x38
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	429a      	cmp	r2, r3
 800258e:	d1ec      	bne.n	800256a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2207      	movs	r2, #7
 8002596:	4013      	ands	r3, r2
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d21e      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2207      	movs	r2, #7
 80025a4:	4393      	bics	r3, r2
 80025a6:	0019      	movs	r1, r3
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fe12 	bl	80011d8 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025b8:	e009      	b.n	80025ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ba:	f7fe fe0d 	bl	80011d8 <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_RCC_ClockConfig+0x1f4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e02c      	b.n	8002628 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2207      	movs	r2, #7
 80025d4:	4013      	ands	r3, r2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2204      	movs	r2, #4
 80025e2:	4013      	ands	r3, r2
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_RCC_ClockConfig+0x200>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 80025f6:	430a      	orrs	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025fa:	f000 f829 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 80025fe:	0001      	movs	r1, r0
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_RCC_ClockConfig+0x1f8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	220f      	movs	r2, #15
 8002608:	401a      	ands	r2, r3
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCC_ClockConfig+0x204>)
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	58d3      	ldr	r3, [r2, r3]
 8002610:	221f      	movs	r2, #31
 8002612:	4013      	ands	r3, r2
 8002614:	000a      	movs	r2, r1
 8002616:	40da      	lsrs	r2, r3
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x208>)
 800261a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x20c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f7fe fd7d 	bl	8001120 <HAL_InitTick>
 8002626:	0003      	movs	r3, r0
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b004      	add	sp, #16
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40022000 	.word	0x40022000
 8002634:	00001388 	.word	0x00001388
 8002638:	40021000 	.word	0x40021000
 800263c:	fffff0ff 	.word	0xfffff0ff
 8002640:	ffff8fff 	.word	0xffff8fff
 8002644:	0800a08c 	.word	0x0800a08c
 8002648:	20000000 	.word	0x20000000
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002656:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2238      	movs	r2, #56	; 0x38
 800265c:	4013      	ands	r3, r2
 800265e:	d10f      	bne.n	8002680 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0adb      	lsrs	r3, r3, #11
 8002666:	2207      	movs	r2, #7
 8002668:	4013      	ands	r3, r2
 800266a:	2201      	movs	r2, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	4835      	ldr	r0, [pc, #212]	; (800274c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002676:	f7fd fd59 	bl	800012c <__udivsi3>
 800267a:	0003      	movs	r3, r0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	e05d      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2238      	movs	r2, #56	; 0x38
 8002686:	4013      	ands	r3, r2
 8002688:	2b08      	cmp	r3, #8
 800268a:	d102      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_GetSysClockFreq+0x100>)
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	e054      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2238      	movs	r2, #56	; 0x38
 8002698:	4013      	ands	r3, r2
 800269a:	2b10      	cmp	r3, #16
 800269c:	d138      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2203      	movs	r2, #3
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	2207      	movs	r2, #7
 80026b0:	4013      	ands	r3, r2
 80026b2:	3301      	adds	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4824      	ldr	r0, [pc, #144]	; (8002750 <HAL_RCC_GetSysClockFreq+0x100>)
 80026c0:	f7fd fd34 	bl	800012c <__udivsi3>
 80026c4:	0003      	movs	r3, r0
 80026c6:	0019      	movs	r1, r3
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	227f      	movs	r2, #127	; 0x7f
 80026d0:	4013      	ands	r3, r2
 80026d2:	434b      	muls	r3, r1
 80026d4:	617b      	str	r3, [r7, #20]
        break;
 80026d6:	e00d      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	481c      	ldr	r0, [pc, #112]	; (800274c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026dc:	f7fd fd26 	bl	800012c <__udivsi3>
 80026e0:	0003      	movs	r3, r0
 80026e2:	0019      	movs	r1, r3
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	227f      	movs	r2, #127	; 0x7f
 80026ec:	4013      	ands	r3, r2
 80026ee:	434b      	muls	r3, r1
 80026f0:	617b      	str	r3, [r7, #20]
        break;
 80026f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0f5b      	lsrs	r3, r3, #29
 80026fa:	2207      	movs	r2, #7
 80026fc:	4013      	ands	r3, r2
 80026fe:	3301      	adds	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f7fd fd11 	bl	800012c <__udivsi3>
 800270a:	0003      	movs	r3, r0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	e015      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2238      	movs	r2, #56	; 0x38
 8002716:	4013      	ands	r3, r2
 8002718:	2b20      	cmp	r3, #32
 800271a:	d103      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e00b      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2238      	movs	r2, #56	; 0x38
 800272a:	4013      	ands	r3, r2
 800272c:	2b18      	cmp	r3, #24
 800272e:	d103      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002730:	23fa      	movs	r3, #250	; 0xfa
 8002732:	01db      	lsls	r3, r3, #7
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	e001      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800273c:	693b      	ldr	r3, [r7, #16]
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b006      	add	sp, #24
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40021000 	.word	0x40021000
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200

08002754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b02      	ldr	r3, [pc, #8]	; (8002764 <HAL_RCC_GetHCLKFreq+0x10>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	20000000 	.word	0x20000000

08002768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002768:	b5b0      	push	{r4, r5, r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800276c:	f7ff fff2 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002770:	0004      	movs	r4, r0
 8002772:	f7ff fa7d 	bl	8001c70 <LL_RCC_GetAPB1Prescaler>
 8002776:	0003      	movs	r3, r0
 8002778:	0b1a      	lsrs	r2, r3, #12
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	58d3      	ldr	r3, [r2, r3]
 8002780:	221f      	movs	r2, #31
 8002782:	4013      	ands	r3, r2
 8002784:	40dc      	lsrs	r4, r3
 8002786:	0023      	movs	r3, r4
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bdb0      	pop	{r4, r5, r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	0800a0cc 	.word	0x0800a0cc

08002794 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_EnableCSS+0x18>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCC_EnableCSS+0x18>)
 800279e:	2180      	movs	r1, #128	; 0x80
 80027a0:	0309      	lsls	r1, r1, #12
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_NMI_IRQHandler+0x3c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_NMI_IRQHandler+0x3c>)
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	22c0      	movs	r2, #192	; 0xc0
 80027c2:	0092      	lsls	r2, r2, #2
 80027c4:	400a      	ands	r2, r1
 80027c6:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80027d2:	f000 f80d 	bl	80027f0 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4013      	ands	r3, r2
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 80027e0:	f000 f80b 	bl	80027fa <HAL_RCC_LSECSSCallback>
  }
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b002      	add	sp, #8
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000

080027f0 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800280c:	2313      	movs	r3, #19
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002814:	2312      	movs	r3, #18
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	029b      	lsls	r3, r3, #10
 8002824:	4013      	ands	r3, r2
 8002826:	d100      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002828:	e0ad      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2011      	movs	r0, #17
 800282c:	183b      	adds	r3, r7, r0
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	055b      	lsls	r3, r3, #21
 800283a:	4013      	ands	r3, r2
 800283c:	d110      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b44      	ldr	r3, [pc, #272]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0549      	lsls	r1, r1, #21
 8002848:	430a      	orrs	r2, r1
 800284a:	63da      	str	r2, [r3, #60]	; 0x3c
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800284e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	055b      	lsls	r3, r3, #21
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	183b      	adds	r3, r7, r0
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0049      	lsls	r1, r1, #1
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800286e:	f7fe fcb3 	bl	80011d8 <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002876:	e00b      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe fcae 	bl	80011d8 <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d904      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002886:	2313      	movs	r3, #19
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2203      	movs	r2, #3
 800288c:	701a      	strb	r2, [r3, #0]
        break;
 800288e:	e005      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d0ed      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800289c:	2313      	movs	r3, #19
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d15e      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4013      	ands	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d019      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d014      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	4a24      	ldr	r2, [pc, #144]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028cc:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	0249      	lsls	r1, r1, #9
 80028d6:	430a      	orrs	r2, r1
 80028d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028e0:	491e      	ldr	r1, [pc, #120]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2201      	movs	r2, #1
 80028f0:	4013      	ands	r3, r2
 80028f2:	d016      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fc70 	bl	80011d8 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fc:	e00c      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fc6b 	bl	80011d8 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4a15      	ldr	r2, [pc, #84]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d904      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800290e:	2313      	movs	r3, #19
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2203      	movs	r2, #3
 8002914:	701a      	strb	r2, [r3, #0]
            break;
 8002916:	e004      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d0ed      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002922:	2313      	movs	r3, #19
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800293c:	430a      	orrs	r2, r1
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002940:	e016      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002942:	2312      	movs	r3, #18
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	2213      	movs	r2, #19
 8002948:	18ba      	adds	r2, r7, r2
 800294a:	7812      	ldrb	r2, [r2, #0]
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	e00f      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
 8002958:	fffffcff 	.word	0xfffffcff
 800295c:	fffeffff 	.word	0xfffeffff
 8002960:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	2312      	movs	r3, #18
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2213      	movs	r2, #19
 800296a:	18ba      	adds	r2, r7, r2
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002970:	2311      	movs	r3, #17
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4bb6      	ldr	r3, [pc, #728]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800297c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800297e:	4bb5      	ldr	r3, [pc, #724]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002980:	49b5      	ldr	r1, [pc, #724]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002982:	400a      	ands	r2, r1
 8002984:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002990:	4bb0      	ldr	r3, [pc, #704]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	2203      	movs	r2, #3
 8002996:	4393      	bics	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4bad      	ldr	r3, [pc, #692]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2202      	movs	r2, #2
 80029aa:	4013      	ands	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ae:	4ba9      	ldr	r3, [pc, #676]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	220c      	movs	r2, #12
 80029b4:	4393      	bics	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4ba5      	ldr	r3, [pc, #660]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2204      	movs	r2, #4
 80029c8:	4013      	ands	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029cc:	4ba1      	ldr	r3, [pc, #644]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	2230      	movs	r2, #48	; 0x30
 80029d2:	4393      	bics	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b9e      	ldr	r3, [pc, #632]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	4013      	ands	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ea:	4b9a      	ldr	r3, [pc, #616]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	4a9b      	ldr	r2, [pc, #620]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	4b96      	ldr	r3, [pc, #600]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	015b      	lsls	r3, r3, #5
 8002a06:	4013      	ands	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002a0a:	4b92      	ldr	r3, [pc, #584]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	4a94      	ldr	r2, [pc, #592]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	4b8e      	ldr	r3, [pc, #568]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4013      	ands	r3, r2
 8002a28:	d009      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2a:	4b8a      	ldr	r3, [pc, #552]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	4a8d      	ldr	r2, [pc, #564]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a38:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4013      	ands	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a4a:	4b82      	ldr	r3, [pc, #520]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	4a86      	ldr	r2, [pc, #536]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2220      	movs	r2, #32
 8002a64:	4013      	ands	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a68:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6c:	4a7f      	ldr	r2, [pc, #508]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	4b77      	ldr	r3, [pc, #476]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2240      	movs	r2, #64	; 0x40
 8002a82:	4013      	ands	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	4a79      	ldr	r2, [pc, #484]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a96:	430a      	orrs	r2, r1
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	01db      	lsls	r3, r3, #7
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d015      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa6:	4b6b      	ldr	r3, [pc, #428]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	0899      	lsrs	r1, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab2:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	05db      	lsls	r3, r3, #23
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ac4:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0249      	lsls	r1, r1, #9
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	031b      	lsls	r3, r3, #12
 8002ada:	4013      	ands	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ade:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	039b      	lsls	r3, r3, #14
 8002afa:	4013      	ands	r3, r2
 8002afc:	d016      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002afe:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b0c:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	03db      	lsls	r3, r3, #15
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b1e:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	0449      	lsls	r1, r1, #17
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	03db      	lsls	r3, r3, #15
 8002b34:	4013      	ands	r3, r2
 8002b36:	d016      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	045b      	lsls	r3, r3, #17
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d106      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b58:	4b3e      	ldr	r3, [pc, #248]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0449      	lsls	r1, r1, #17
 8002b62:	430a      	orrs	r2, r1
 8002b64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d014      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	2203      	movs	r2, #3
 8002b78:	4393      	bics	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0249      	lsls	r1, r1, #9
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	019b      	lsls	r3, r3, #6
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d014      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	220c      	movs	r2, #12
 8002bae:	4393      	bics	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0249      	lsls	r1, r1, #9
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	; 0x80
 8002bd8:	045b      	lsls	r3, r3, #17
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d016      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	019b      	lsls	r3, r3, #6
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0449      	lsls	r1, r1, #17
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	049b      	lsls	r3, r3, #18
 8002c14:	4013      	ands	r3, r2
 8002c16:	d016      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d106      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	0449      	lsls	r1, r1, #17
 8002c42:	430a      	orrs	r2, r1
 8002c44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c46:	2312      	movs	r3, #18
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b006      	add	sp, #24
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	efffffff 	.word	0xefffffff
 8002c5c:	fffff3ff 	.word	0xfffff3ff
 8002c60:	fffffcff 	.word	0xfffffcff
 8002c64:	fff3ffff 	.word	0xfff3ffff
 8002c68:	ffcfffff 	.word	0xffcfffff
 8002c6c:	ffffcfff 	.word	0xffffcfff
 8002c70:	ffff3fff 	.word	0xffff3fff
 8002c74:	ffbfffff 	.word	0xffbfffff
 8002c78:	feffffff 	.word	0xfeffffff

08002c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0a8      	b.n	8002de0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	2382      	movs	r3, #130	; 0x82
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d009      	beq.n	8002cb6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	61da      	str	r2, [r3, #28]
 8002ca8:	e005      	b.n	8002cb6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225d      	movs	r2, #93	; 0x5d
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	225c      	movs	r2, #92	; 0x5c
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7fd ff34 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	225d      	movs	r2, #93	; 0x5d
 8002cdc:	2102      	movs	r1, #2
 8002cde:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	438a      	bics	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	23e0      	movs	r3, #224	; 0xe0
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d902      	bls.n	8002d02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e002      	b.n	8002d08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	23f0      	movs	r3, #240	; 0xf0
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d008      	beq.n	8002d26 <HAL_SPI_Init+0xaa>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	23e0      	movs	r3, #224	; 0xe0
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	2382      	movs	r3, #130	; 0x82
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	401a      	ands	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	2384      	movs	r3, #132	; 0x84
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	400b      	ands	r3, r1
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2102      	movs	r1, #2
 8002d42:	400b      	ands	r3, r1
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6999      	ldr	r1, [r3, #24]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	400b      	ands	r3, r1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2138      	movs	r1, #56	; 0x38
 8002d62:	400b      	ands	r3, r1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	400b      	ands	r3, r1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	0011      	movs	r1, r2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2110      	movs	r1, #16
 8002d94:	400b      	ands	r3, r1
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9c:	2108      	movs	r1, #8
 8002d9e:	400b      	ands	r3, r1
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	23f0      	movs	r3, #240	; 0xf0
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	400b      	ands	r3, r1
 8002dac:	431a      	orrs	r2, r3
 8002dae:	0011      	movs	r1, r2
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4907      	ldr	r1, [pc, #28]	; (8002de8 <HAL_SPI_Init+0x16c>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	225d      	movs	r2, #93	; 0x5d
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	fffff7ff 	.word	0xfffff7ff

08002dec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2240      	movs	r2, #64	; 0x40
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d10d      	bne.n	8002e28 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e12:	d009      	beq.n	8002e28 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d005      	beq.n	8002e28 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	0010      	movs	r0, r2
 8002e24:	4798      	blx	r3
    return;
 8002e26:	e0c5      	b.n	8002fb4 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_SPI_IRQHandler+0x58>
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	4013      	ands	r3, r2
 8002e36:	d005      	beq.n	8002e44 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	0010      	movs	r0, r2
 8002e40:	4798      	blx	r3
    return;
 8002e42:	e0b7      	b.n	8002fb4 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2220      	movs	r2, #32
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d109      	bne.n	8002e60 <HAL_SPI_IRQHandler+0x74>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2240      	movs	r2, #64	; 0x40
 8002e50:	4013      	ands	r3, r2
 8002e52:	d105      	bne.n	8002e60 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d100      	bne.n	8002e60 <HAL_SPI_IRQHandler+0x74>
 8002e5e:	e0a9      	b.n	8002fb4 <HAL_SPI_IRQHandler+0x1c8>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d100      	bne.n	8002e6a <HAL_SPI_IRQHandler+0x7e>
 8002e68:	e0a4      	b.n	8002fb4 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2240      	movs	r2, #64	; 0x40
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d023      	beq.n	8002eba <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	225d      	movs	r2, #93	; 0x5d
 8002e76:	5c9b      	ldrb	r3, [r3, r2]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d011      	beq.n	8002ea2 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	2204      	movs	r2, #4
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	e00b      	b.n	8002eba <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
        return;
 8002eb8:	e07c      	b.n	8002fb4 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d014      	beq.n	8002eec <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00c      	beq.n	8002f10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efa:	2208      	movs	r2, #8
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d04c      	beq.n	8002fb2 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	21e0      	movs	r1, #224	; 0xe0
 8002f24:	438a      	bics	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	225d      	movs	r2, #93	; 0x5d
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d103      	bne.n	8002f40 <HAL_SPI_IRQHandler+0x154>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d032      	beq.n	8002fa6 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	438a      	bics	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <HAL_SPI_IRQHandler+0x1d0>)
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7fe fa67 	bl	8001438 <HAL_DMA_Abort_IT>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_SPI_IRQHandler+0x1d0>)
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fe fa52 	bl	8001438 <HAL_DMA_Abort_IT>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002fa4:	e004      	b.n	8002fb0 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f809 	bl	8002fc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002fae:	e000      	b.n	8002fb2 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002fb0:	46c0      	nop			; (mov r8, r8)
    return;
 8002fb2:	46c0      	nop			; (mov r8, r8)
  }
}
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b008      	add	sp, #32
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	08002fd1 	.word	0x08002fd1

08002fc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2246      	movs	r2, #70	; 0x46
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff ffe6 	bl	8002fc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e04a      	b.n	80030a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223d      	movs	r2, #61	; 0x3d
 8003012:	5c9b      	ldrb	r3, [r3, r2]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	223c      	movs	r2, #60	; 0x3c
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f7fd ff31 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	223d      	movs	r2, #61	; 0x3d
 800302e:	2102      	movs	r1, #2
 8003030:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3304      	adds	r3, #4
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f000 fac3 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2248      	movs	r2, #72	; 0x48
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223e      	movs	r2, #62	; 0x3e
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	223f      	movs	r2, #63	; 0x3f
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2240      	movs	r2, #64	; 0x40
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2241      	movs	r2, #65	; 0x41
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2242      	movs	r2, #66	; 0x42
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2243      	movs	r2, #67	; 0x43
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2244      	movs	r2, #68	; 0x44
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2245      	movs	r2, #69	; 0x45
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2246      	movs	r2, #70	; 0x46
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2247      	movs	r2, #71	; 0x47
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223d      	movs	r2, #61	; 0x3d
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	223d      	movs	r2, #61	; 0x3d
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d001      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e047      	b.n	8003154 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	223d      	movs	r2, #61	; 0x3d
 80030c8:	2102      	movs	r1, #2
 80030ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_TIM_Base_Start_IT+0xb0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d014      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x64>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	05db      	lsls	r3, r3, #23
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d00e      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x64>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_TIM_Base_Start_IT+0xb4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x64>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_TIM_Base_Start_IT+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x64>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_TIM_Base_Start_IT+0xbc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d116      	bne.n	800313e <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_TIM_Base_Start_IT+0xc0>)
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d016      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0xa4>
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	025b      	lsls	r3, r3, #9
 8003128:	429a      	cmp	r2, r3
 800312a:	d011      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2101      	movs	r1, #1
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	e008      	b.n	8003150 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2101      	movs	r1, #1
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e000      	b.n	8003152 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40014000 	.word	0x40014000
 800316c:	00010007 	.word	0x00010007

08003170 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	438a      	bics	r2, r1
 8003186:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_TIM_Base_Stop_IT+0x54>)
 8003190:	4013      	ands	r3, r2
 8003192:	d10d      	bne.n	80031b0 <HAL_TIM_Base_Stop_IT+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <HAL_TIM_Base_Stop_IT+0x58>)
 800319c:	4013      	ands	r3, r2
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_Base_Stop_IT+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2101      	movs	r1, #1
 80031ac:	438a      	bics	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	223d      	movs	r2, #61	; 0x3d
 80031b4:	2101      	movs	r1, #1
 80031b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	00001111 	.word	0x00001111
 80031c8:	00000444 	.word	0x00000444

080031cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d021      	beq.n	8003230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2202      	movs	r2, #2
 80031f0:	4013      	ands	r3, r2
 80031f2:	d01d      	beq.n	8003230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2203      	movs	r2, #3
 80031fa:	4252      	negs	r2, r2
 80031fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2203      	movs	r2, #3
 800320c:	4013      	ands	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0018      	movs	r0, r3
 8003214:	f000 f9c0 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 8003218:	e007      	b.n	800322a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f000 f9b3 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 f9bf 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2204      	movs	r2, #4
 8003234:	4013      	ands	r3, r2
 8003236:	d022      	beq.n	800327e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2204      	movs	r2, #4
 800323c:	4013      	ands	r3, r2
 800323e:	d01e      	beq.n	800327e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2205      	movs	r2, #5
 8003246:	4252      	negs	r2, r2
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	23c0      	movs	r3, #192	; 0xc0
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f999 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 8003266:	e007      	b.n	8003278 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f98c 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 f998 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2208      	movs	r2, #8
 8003282:	4013      	ands	r3, r2
 8003284:	d021      	beq.n	80032ca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2208      	movs	r2, #8
 800328a:	4013      	ands	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2209      	movs	r2, #9
 8003294:	4252      	negs	r2, r2
 8003296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2204      	movs	r2, #4
 800329c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4013      	ands	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 f973 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 80032b2:	e007      	b.n	80032c4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 f966 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 f972 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2210      	movs	r2, #16
 80032ce:	4013      	ands	r3, r2
 80032d0:	d022      	beq.n	8003318 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2210      	movs	r2, #16
 80032d6:	4013      	ands	r3, r2
 80032d8:	d01e      	beq.n	8003318 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2211      	movs	r2, #17
 80032e0:	4252      	negs	r2, r2
 80032e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2208      	movs	r2, #8
 80032e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	23c0      	movs	r3, #192	; 0xc0
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 f94c 	bl	8003598 <HAL_TIM_IC_CaptureCallback>
 8003300:	e007      	b.n	8003312 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0018      	movs	r0, r3
 8003306:	f000 f93f 	bl	8003588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 f94b 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
 800331e:	d00c      	beq.n	800333a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d008      	beq.n	800333a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2202      	movs	r2, #2
 800332e:	4252      	negs	r2, r2
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f003 ffb7 	bl	80072a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	4013      	ands	r3, r2
 8003340:	d104      	bne.n	800334c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	019b      	lsls	r3, r3, #6
 8003348:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800334a:	d00b      	beq.n	8003364 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	4013      	ands	r3, r2
 8003352:	d007      	beq.n	8003364 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_TIM_IRQHandler+0x208>)
 800335a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 fae4 	bl	800392c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4013      	ands	r3, r2
 800336c:	d00b      	beq.n	8003386 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	4013      	ands	r3, r2
 8003374:	d007      	beq.n	8003386 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <HAL_TIM_IRQHandler+0x20c>)
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f000 fadb 	bl	800393c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	4013      	ands	r3, r2
 800338c:	d00c      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2240      	movs	r2, #64	; 0x40
 8003392:	4013      	ands	r3, r2
 8003394:	d008      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2241      	movs	r2, #65	; 0x41
 800339c:	4252      	negs	r2, r2
 800339e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f000 f908 	bl	80035b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2220      	movs	r2, #32
 80033ac:	4013      	ands	r3, r2
 80033ae:	d00c      	beq.n	80033ca <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	4013      	ands	r3, r2
 80033b6:	d008      	beq.n	80033ca <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2221      	movs	r2, #33	; 0x21
 80033be:	4252      	negs	r2, r2
 80033c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 faa9 	bl	800391c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	ffffdf7f 	.word	0xffffdf7f
 80033d8:	fffffeff 	.word	0xfffffeff

080033dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	230f      	movs	r3, #15
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223c      	movs	r2, #60	; 0x3c
 80033f2:	5c9b      	ldrb	r3, [r3, r2]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_TIM_ConfigClockSource+0x20>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e0bc      	b.n	8003576 <HAL_TIM_ConfigClockSource+0x19a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	223c      	movs	r2, #60	; 0x3c
 8003400:	2101      	movs	r1, #1
 8003402:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	223d      	movs	r2, #61	; 0x3d
 8003408:	2102      	movs	r1, #2
 800340a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4a5a      	ldr	r2, [pc, #360]	; (8003580 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4a59      	ldr	r2, [pc, #356]	; (8003584 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	0192      	lsls	r2, r2, #6
 8003434:	4293      	cmp	r3, r2
 8003436:	d040      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xde>
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	0192      	lsls	r2, r2, #6
 800343c:	4293      	cmp	r3, r2
 800343e:	d900      	bls.n	8003442 <HAL_TIM_ConfigClockSource+0x66>
 8003440:	e088      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	0152      	lsls	r2, r2, #5
 8003446:	4293      	cmp	r3, r2
 8003448:	d100      	bne.n	800344c <HAL_TIM_ConfigClockSource+0x70>
 800344a:	e088      	b.n	800355e <HAL_TIM_ConfigClockSource+0x182>
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	0152      	lsls	r2, r2, #5
 8003450:	4293      	cmp	r3, r2
 8003452:	d900      	bls.n	8003456 <HAL_TIM_ConfigClockSource+0x7a>
 8003454:	e07e      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 8003456:	2b70      	cmp	r3, #112	; 0x70
 8003458:	d018      	beq.n	800348c <HAL_TIM_ConfigClockSource+0xb0>
 800345a:	d900      	bls.n	800345e <HAL_TIM_ConfigClockSource+0x82>
 800345c:	e07a      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 800345e:	2b60      	cmp	r3, #96	; 0x60
 8003460:	d04f      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x126>
 8003462:	d900      	bls.n	8003466 <HAL_TIM_ConfigClockSource+0x8a>
 8003464:	e076      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 8003466:	2b50      	cmp	r3, #80	; 0x50
 8003468:	d03b      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x106>
 800346a:	d900      	bls.n	800346e <HAL_TIM_ConfigClockSource+0x92>
 800346c:	e072      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d057      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x146>
 8003472:	d900      	bls.n	8003476 <HAL_TIM_ConfigClockSource+0x9a>
 8003474:	e06e      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 8003476:	2b30      	cmp	r3, #48	; 0x30
 8003478:	d063      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x166>
 800347a:	d86b      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 800347c:	2b20      	cmp	r3, #32
 800347e:	d060      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x166>
 8003480:	d868      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d05d      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x166>
 8003486:	2b10      	cmp	r3, #16
 8003488:	d05b      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x166>
 800348a:	e063      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800349c:	f000 f9a8 	bl	80037f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2277      	movs	r2, #119	; 0x77
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
      break;
 80034b8:	e052      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ca:	f000 f991 	bl	80037f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	01c9      	lsls	r1, r1, #7
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
      break;
 80034e0:	e03e      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	001a      	movs	r2, r3
 80034f0:	f000 f902 	bl	80036f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2150      	movs	r1, #80	; 0x50
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 f95c 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 8003500:	e02e      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	001a      	movs	r2, r3
 8003510:	f000 f920 	bl	8003754 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2160      	movs	r1, #96	; 0x60
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f94c 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 8003520:	e01e      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	001a      	movs	r2, r3
 8003530:	f000 f8e2 	bl	80036f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f93c 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 8003540:	e00e      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0019      	movs	r1, r3
 800354c:	0010      	movs	r0, r2
 800354e:	f000 f933 	bl	80037b8 <TIM_ITRx_SetConfig>
      break;
 8003552:	e005      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003554:	230f      	movs	r3, #15
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
      break;
 800355c:	e000      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800355e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	223d      	movs	r2, #61	; 0x3d
 8003564:	2101      	movs	r1, #1
 8003566:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	223c      	movs	r2, #60	; 0x3c
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]

  return status;
 8003570:	230f      	movs	r3, #15
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	781b      	ldrb	r3, [r3, #0]
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	ffceff88 	.word	0xffceff88
 8003584:	ffff00ff 	.word	0xffff00ff

08003588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a3f      	ldr	r2, [pc, #252]	; (80036d8 <TIM_Base_SetConfig+0x110>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00c      	beq.n	80035fa <TIM_Base_SetConfig+0x32>
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d007      	beq.n	80035fa <TIM_Base_SetConfig+0x32>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a3b      	ldr	r2, [pc, #236]	; (80036dc <TIM_Base_SetConfig+0x114>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0x32>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <TIM_Base_SetConfig+0x118>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2270      	movs	r2, #112	; 0x70
 80035fe:	4393      	bics	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <TIM_Base_SetConfig+0x110>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d01c      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	429a      	cmp	r2, r3
 800361c:	d017      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2e      	ldr	r2, [pc, #184]	; (80036dc <TIM_Base_SetConfig+0x114>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2d      	ldr	r2, [pc, #180]	; (80036e0 <TIM_Base_SetConfig+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <TIM_Base_SetConfig+0x11c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2b      	ldr	r2, [pc, #172]	; (80036e8 <TIM_Base_SetConfig+0x120>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2a      	ldr	r2, [pc, #168]	; (80036ec <TIM_Base_SetConfig+0x124>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x86>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <TIM_Base_SetConfig+0x128>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <TIM_Base_SetConfig+0x12c>)
 8003652:	4013      	ands	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	4393      	bics	r3, r2
 8003666:	001a      	movs	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <TIM_Base_SetConfig+0x110>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0xde>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <TIM_Base_SetConfig+0x120>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0xde>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <TIM_Base_SetConfig+0x124>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0xde>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <TIM_Base_SetConfig+0x128>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d103      	bne.n	80036ae <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2201      	movs	r2, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2201      	movs	r2, #1
 80036c6:	4393      	bics	r3, r2
 80036c8:	001a      	movs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
  }
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b004      	add	sp, #16
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40002000 	.word	0x40002000
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800
 80036f4:	fffffcff 	.word	0xfffffcff

080036f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	2201      	movs	r2, #1
 8003710:	4393      	bics	r3, r2
 8003712:	001a      	movs	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	22f0      	movs	r2, #240	; 0xf0
 8003722:	4393      	bics	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	220a      	movs	r2, #10
 8003734:	4393      	bics	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b006      	add	sp, #24
 8003752:	bd80      	pop	{r7, pc}

08003754 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2210      	movs	r2, #16
 800376c:	4393      	bics	r3, r2
 800376e:	001a      	movs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <TIM_TI2_ConfigInputStage+0x60>)
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	031b      	lsls	r3, r3, #12
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	22a0      	movs	r2, #160	; 0xa0
 8003790:	4393      	bics	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b006      	add	sp, #24
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	ffff0fff 	.word	0xffff0fff

080037b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <TIM_ITRx_SetConfig+0x34>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	2207      	movs	r2, #7
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	609a      	str	r2, [r3, #8]
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	ffcfff8f 	.word	0xffcfff8f

080037f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <TIM_ETR_SetConfig+0x3c>)
 8003808:	4013      	ands	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	021a      	lsls	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	431a      	orrs	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b006      	add	sp, #24
 800382a:	bd80      	pop	{r7, pc}
 800382c:	ffff00ff 	.word	0xffff00ff

08003830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223c      	movs	r2, #60	; 0x3c
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003844:	2302      	movs	r3, #2
 8003846:	e05a      	b.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223c      	movs	r2, #60	; 0x3c
 800384c:	2101      	movs	r1, #1
 800384e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	223d      	movs	r2, #61	; 0x3d
 8003854:	2102      	movs	r1, #2
 8003856:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a26      	ldr	r2, [pc, #152]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a25      	ldr	r2, [pc, #148]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003876:	4013      	ands	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2270      	movs	r2, #112	; 0x70
 8003888:	4393      	bics	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a19      	ldr	r2, [pc, #100]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d014      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	05db      	lsls	r3, r3, #23
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d00e      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	4393      	bics	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	223d      	movs	r2, #61	; 0x3d
 80038f0:	2101      	movs	r1, #1
 80038f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	223c      	movs	r2, #60	; 0x3c
 80038f8:	2100      	movs	r1, #0
 80038fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	40012c00 	.word	0x40012c00
 800390c:	ff0fffff 	.word	0xff0fffff
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40014000 	.word	0x40014000

0800391c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b002      	add	sp, #8
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	b002      	add	sp, #8
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e046      	b.n	80039ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2288      	movs	r2, #136	; 0x88
 8003962:	589b      	ldr	r3, [r3, r2]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2284      	movs	r2, #132	; 0x84
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f7fd fafe 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2288      	movs	r2, #136	; 0x88
 800397c:	2124      	movs	r1, #36	; 0x24
 800397e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2101      	movs	r1, #1
 800398c:	438a      	bics	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fc26 	bl	80041ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 f8cc 	bl	8003b40 <UART_SetConfig>
 80039a8:	0003      	movs	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01c      	b.n	80039ec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	490d      	ldr	r1, [pc, #52]	; (80039f4 <HAL_UART_Init+0xa8>)
 80039be:	400a      	ands	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	212a      	movs	r1, #42	; 0x2a
 80039ce:	438a      	bics	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 fcb5 	bl	8004354 <UART_CheckIdleState>
 80039ea:	0003      	movs	r3, r0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b002      	add	sp, #8
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	ffffb7ff 	.word	0xffffb7ff

080039f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	1dbb      	adds	r3, r7, #6
 8003a06:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2288      	movs	r2, #136	; 0x88
 8003a0c:	589b      	ldr	r3, [r3, r2]
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d000      	beq.n	8003a14 <HAL_UART_Transmit+0x1c>
 8003a12:	e090      	b.n	8003b36 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_UART_Transmit+0x2a>
 8003a1a:	1dbb      	adds	r3, r7, #6
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e088      	b.n	8003b38 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d109      	bne.n	8003a46 <HAL_UART_Transmit+0x4e>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d001      	beq.n	8003a46 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e078      	b.n	8003b38 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2290      	movs	r2, #144	; 0x90
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2288      	movs	r2, #136	; 0x88
 8003a52:	2121      	movs	r1, #33	; 0x21
 8003a54:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a56:	f7fd fbbf 	bl	80011d8 <HAL_GetTick>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1dba      	adds	r2, r7, #6
 8003a62:	2154      	movs	r1, #84	; 0x54
 8003a64:	8812      	ldrh	r2, [r2, #0]
 8003a66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1dba      	adds	r2, r7, #6
 8003a6c:	2156      	movs	r1, #86	; 0x56
 8003a6e:	8812      	ldrh	r2, [r2, #0]
 8003a70:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	015b      	lsls	r3, r3, #5
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d108      	bne.n	8003a90 <HAL_UART_Transmit+0x98>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e003      	b.n	8003a98 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a98:	e030      	b.n	8003afc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	f000 fcfe 	bl	80044a8 <UART_WaitOnFlagUntilTimeout>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d005      	beq.n	8003abc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2288      	movs	r2, #136	; 0x88
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e03d      	b.n	8003b38 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	05d2      	lsls	r2, r2, #23
 8003ace:	0dd2      	lsrs	r2, r2, #23
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e007      	b.n	8003aea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2256      	movs	r2, #86	; 0x56
 8003aee:	5a9b      	ldrh	r3, [r3, r2]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b299      	uxth	r1, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2256      	movs	r2, #86	; 0x56
 8003afa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2256      	movs	r2, #86	; 0x56
 8003b00:	5a9b      	ldrh	r3, [r3, r2]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1c8      	bne.n	8003a9a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	0013      	movs	r3, r2
 8003b12:	2200      	movs	r2, #0
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	f000 fcc7 	bl	80044a8 <UART_WaitOnFlagUntilTimeout>
 8003b1a:	1e03      	subs	r3, r0, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2288      	movs	r2, #136	; 0x88
 8003b22:	2120      	movs	r1, #32
 8003b24:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e006      	b.n	8003b38 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2288      	movs	r2, #136	; 0x88
 8003b2e:	2120      	movs	r1, #32
 8003b30:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b008      	add	sp, #32
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	b090      	sub	sp, #64	; 0x40
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b48:	231a      	movs	r3, #26
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	189b      	adds	r3, r3, r2
 8003b4e:	19db      	adds	r3, r3, r7
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4ac1      	ldr	r2, [pc, #772]	; (8003e78 <UART_SetConfig+0x338>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4abc      	ldr	r2, [pc, #752]	; (8003e7c <UART_SetConfig+0x33c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	68d9      	ldr	r1, [r3, #12]
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	0003      	movs	r3, r0
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4ab6      	ldr	r2, [pc, #728]	; (8003e80 <UART_SetConfig+0x340>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <UART_SetConfig+0x80>
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4ab4      	ldr	r2, [pc, #720]	; (8003e84 <UART_SetConfig+0x344>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4ab0      	ldr	r2, [pc, #704]	; (8003e88 <UART_SetConfig+0x348>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	220f      	movs	r2, #15
 8003bde:	4393      	bics	r3, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	0003      	movs	r3, r0
 8003bec:	430b      	orrs	r3, r1
 8003bee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4aa5      	ldr	r2, [pc, #660]	; (8003e8c <UART_SetConfig+0x34c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d131      	bne.n	8003c5e <UART_SetConfig+0x11e>
 8003bfa:	4ba5      	ldr	r3, [pc, #660]	; (8003e90 <UART_SetConfig+0x350>)
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	2203      	movs	r2, #3
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d01d      	beq.n	8003c42 <UART_SetConfig+0x102>
 8003c06:	d823      	bhi.n	8003c50 <UART_SetConfig+0x110>
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d00c      	beq.n	8003c26 <UART_SetConfig+0xe6>
 8003c0c:	d820      	bhi.n	8003c50 <UART_SetConfig+0x110>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <UART_SetConfig+0xd8>
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d00e      	beq.n	8003c34 <UART_SetConfig+0xf4>
 8003c16:	e01b      	b.n	8003c50 <UART_SetConfig+0x110>
 8003c18:	231b      	movs	r3, #27
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	19db      	adds	r3, r3, r7
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
 8003c24:	e154      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003c26:	231b      	movs	r3, #27
 8003c28:	2220      	movs	r2, #32
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	19db      	adds	r3, r3, r7
 8003c2e:	2202      	movs	r2, #2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e14d      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003c34:	231b      	movs	r3, #27
 8003c36:	2220      	movs	r2, #32
 8003c38:	189b      	adds	r3, r3, r2
 8003c3a:	19db      	adds	r3, r3, r7
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	701a      	strb	r2, [r3, #0]
 8003c40:	e146      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003c42:	231b      	movs	r3, #27
 8003c44:	2220      	movs	r2, #32
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e13f      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003c50:	231b      	movs	r3, #27
 8003c52:	2220      	movs	r2, #32
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	19db      	adds	r3, r3, r7
 8003c58:	2210      	movs	r2, #16
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	e138      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a8c      	ldr	r2, [pc, #560]	; (8003e94 <UART_SetConfig+0x354>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d131      	bne.n	8003ccc <UART_SetConfig+0x18c>
 8003c68:	4b89      	ldr	r3, [pc, #548]	; (8003e90 <UART_SetConfig+0x350>)
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	220c      	movs	r2, #12
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b0c      	cmp	r3, #12
 8003c72:	d01d      	beq.n	8003cb0 <UART_SetConfig+0x170>
 8003c74:	d823      	bhi.n	8003cbe <UART_SetConfig+0x17e>
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d00c      	beq.n	8003c94 <UART_SetConfig+0x154>
 8003c7a:	d820      	bhi.n	8003cbe <UART_SetConfig+0x17e>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <UART_SetConfig+0x146>
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00e      	beq.n	8003ca2 <UART_SetConfig+0x162>
 8003c84:	e01b      	b.n	8003cbe <UART_SetConfig+0x17e>
 8003c86:	231b      	movs	r3, #27
 8003c88:	2220      	movs	r2, #32
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	19db      	adds	r3, r3, r7
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e11d      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003c94:	231b      	movs	r3, #27
 8003c96:	2220      	movs	r2, #32
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	19db      	adds	r3, r3, r7
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e116      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003ca2:	231b      	movs	r3, #27
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	19db      	adds	r3, r3, r7
 8003caa:	2204      	movs	r2, #4
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e10f      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003cb0:	231b      	movs	r3, #27
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	189b      	adds	r3, r3, r2
 8003cb6:	19db      	adds	r3, r3, r7
 8003cb8:	2208      	movs	r2, #8
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e108      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003cbe:	231b      	movs	r3, #27
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	19db      	adds	r3, r3, r7
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e101      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a71      	ldr	r2, [pc, #452]	; (8003e98 <UART_SetConfig+0x358>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d131      	bne.n	8003d3a <UART_SetConfig+0x1fa>
 8003cd6:	4b6e      	ldr	r3, [pc, #440]	; (8003e90 <UART_SetConfig+0x350>)
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	2230      	movs	r2, #48	; 0x30
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b30      	cmp	r3, #48	; 0x30
 8003ce0:	d01d      	beq.n	8003d1e <UART_SetConfig+0x1de>
 8003ce2:	d823      	bhi.n	8003d2c <UART_SetConfig+0x1ec>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d00c      	beq.n	8003d02 <UART_SetConfig+0x1c2>
 8003ce8:	d820      	bhi.n	8003d2c <UART_SetConfig+0x1ec>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <UART_SetConfig+0x1b4>
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d00e      	beq.n	8003d10 <UART_SetConfig+0x1d0>
 8003cf2:	e01b      	b.n	8003d2c <UART_SetConfig+0x1ec>
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	19db      	adds	r3, r3, r7
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e0e6      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d02:	231b      	movs	r3, #27
 8003d04:	2220      	movs	r2, #32
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	19db      	adds	r3, r3, r7
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e0df      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d10:	231b      	movs	r3, #27
 8003d12:	2220      	movs	r2, #32
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2204      	movs	r2, #4
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e0d8      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d1e:	231b      	movs	r3, #27
 8003d20:	2220      	movs	r2, #32
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	19db      	adds	r3, r3, r7
 8003d26:	2208      	movs	r2, #8
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e0d1      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d2c:	231b      	movs	r3, #27
 8003d2e:	2220      	movs	r2, #32
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	19db      	adds	r3, r3, r7
 8003d34:	2210      	movs	r2, #16
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e0ca      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <UART_SetConfig+0x35c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d106      	bne.n	8003d52 <UART_SetConfig+0x212>
 8003d44:	231b      	movs	r3, #27
 8003d46:	2220      	movs	r2, #32
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e0be      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <UART_SetConfig+0x360>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d106      	bne.n	8003d6a <UART_SetConfig+0x22a>
 8003d5c:	231b      	movs	r3, #27
 8003d5e:	2220      	movs	r2, #32
 8003d60:	189b      	adds	r3, r3, r2
 8003d62:	19db      	adds	r3, r3, r7
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e0b2      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ea4 <UART_SetConfig+0x364>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d106      	bne.n	8003d82 <UART_SetConfig+0x242>
 8003d74:	231b      	movs	r3, #27
 8003d76:	2220      	movs	r2, #32
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e0a6      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3e      	ldr	r2, [pc, #248]	; (8003e80 <UART_SetConfig+0x340>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d13e      	bne.n	8003e0a <UART_SetConfig+0x2ca>
 8003d8c:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <UART_SetConfig+0x350>)
 8003d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d90:	23c0      	movs	r3, #192	; 0xc0
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	4013      	ands	r3, r2
 8003d96:	22c0      	movs	r2, #192	; 0xc0
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d027      	beq.n	8003dee <UART_SetConfig+0x2ae>
 8003d9e:	22c0      	movs	r2, #192	; 0xc0
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d82a      	bhi.n	8003dfc <UART_SetConfig+0x2bc>
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d011      	beq.n	8003dd2 <UART_SetConfig+0x292>
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d822      	bhi.n	8003dfc <UART_SetConfig+0x2bc>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <UART_SetConfig+0x284>
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	00d2      	lsls	r2, r2, #3
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <UART_SetConfig+0x2a0>
 8003dc2:	e01b      	b.n	8003dfc <UART_SetConfig+0x2bc>
 8003dc4:	231b      	movs	r3, #27
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	189b      	adds	r3, r3, r2
 8003dca:	19db      	adds	r3, r3, r7
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e07e      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003dd2:	231b      	movs	r3, #27
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	189b      	adds	r3, r3, r2
 8003dd8:	19db      	adds	r3, r3, r7
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e077      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003de0:	231b      	movs	r3, #27
 8003de2:	2220      	movs	r2, #32
 8003de4:	189b      	adds	r3, r3, r2
 8003de6:	19db      	adds	r3, r3, r7
 8003de8:	2204      	movs	r2, #4
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e070      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003dee:	231b      	movs	r3, #27
 8003df0:	2220      	movs	r2, #32
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	19db      	adds	r3, r3, r7
 8003df6:	2208      	movs	r2, #8
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e069      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003dfc:	231b      	movs	r3, #27
 8003dfe:	2220      	movs	r2, #32
 8003e00:	189b      	adds	r3, r3, r2
 8003e02:	19db      	adds	r3, r3, r7
 8003e04:	2210      	movs	r2, #16
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e062      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <UART_SetConfig+0x344>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d157      	bne.n	8003ec4 <UART_SetConfig+0x384>
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <UART_SetConfig+0x350>)
 8003e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e18:	23c0      	movs	r3, #192	; 0xc0
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	22c0      	movs	r2, #192	; 0xc0
 8003e20:	0092      	lsls	r2, r2, #2
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <UART_SetConfig+0x368>
 8003e26:	22c0      	movs	r2, #192	; 0xc0
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d843      	bhi.n	8003eb6 <UART_SetConfig+0x376>
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d011      	beq.n	8003e5a <UART_SetConfig+0x31a>
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d83b      	bhi.n	8003eb6 <UART_SetConfig+0x376>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <UART_SetConfig+0x30c>
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	0052      	lsls	r2, r2, #1
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <UART_SetConfig+0x328>
 8003e4a:	e034      	b.n	8003eb6 <UART_SetConfig+0x376>
 8003e4c:	231b      	movs	r3, #27
 8003e4e:	2220      	movs	r2, #32
 8003e50:	189b      	adds	r3, r3, r2
 8003e52:	19db      	adds	r3, r3, r7
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e03a      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003e5a:	231b      	movs	r3, #27
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	19db      	adds	r3, r3, r7
 8003e62:	2202      	movs	r2, #2
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e033      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003e68:	231b      	movs	r3, #27
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	189b      	adds	r3, r3, r2
 8003e6e:	19db      	adds	r3, r3, r7
 8003e70:	2204      	movs	r2, #4
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e02c      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	cfff69f3 	.word	0xcfff69f3
 8003e7c:	ffffcfff 	.word	0xffffcfff
 8003e80:	40008000 	.word	0x40008000
 8003e84:	40008400 	.word	0x40008400
 8003e88:	11fff4ff 	.word	0x11fff4ff
 8003e8c:	40013800 	.word	0x40013800
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40004800 	.word	0x40004800
 8003e9c:	40004c00 	.word	0x40004c00
 8003ea0:	40005000 	.word	0x40005000
 8003ea4:	40013c00 	.word	0x40013c00
 8003ea8:	231b      	movs	r3, #27
 8003eaa:	2220      	movs	r2, #32
 8003eac:	189b      	adds	r3, r3, r2
 8003eae:	19db      	adds	r3, r3, r7
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e00c      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003eb6:	231b      	movs	r3, #27
 8003eb8:	2220      	movs	r2, #32
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e005      	b.n	8003ed0 <UART_SetConfig+0x390>
 8003ec4:	231b      	movs	r3, #27
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	189b      	adds	r3, r3, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	2210      	movs	r2, #16
 8003ece:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4ac1      	ldr	r2, [pc, #772]	; (80041dc <UART_SetConfig+0x69c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d005      	beq.n	8003ee6 <UART_SetConfig+0x3a6>
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4ac0      	ldr	r2, [pc, #768]	; (80041e0 <UART_SetConfig+0x6a0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d000      	beq.n	8003ee6 <UART_SetConfig+0x3a6>
 8003ee4:	e093      	b.n	800400e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d015      	beq.n	8003f20 <UART_SetConfig+0x3e0>
 8003ef4:	dc18      	bgt.n	8003f28 <UART_SetConfig+0x3e8>
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d00d      	beq.n	8003f16 <UART_SetConfig+0x3d6>
 8003efa:	dc15      	bgt.n	8003f28 <UART_SetConfig+0x3e8>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <UART_SetConfig+0x3c6>
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d005      	beq.n	8003f10 <UART_SetConfig+0x3d0>
 8003f04:	e010      	b.n	8003f28 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f06:	f7fe fc2f 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f0e:	e014      	b.n	8003f3a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f10:	4bb4      	ldr	r3, [pc, #720]	; (80041e4 <UART_SetConfig+0x6a4>)
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f14:	e011      	b.n	8003f3a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f16:	f7fe fb9b 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f1e:	e00c      	b.n	8003f3a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f26:	e008      	b.n	8003f3a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f2c:	231a      	movs	r3, #26
 8003f2e:	2220      	movs	r2, #32
 8003f30:	189b      	adds	r3, r3, r2
 8003f32:	19db      	adds	r3, r3, r7
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
        break;
 8003f38:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d100      	bne.n	8003f42 <UART_SetConfig+0x402>
 8003f40:	e135      	b.n	80041ae <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f46:	4ba8      	ldr	r3, [pc, #672]	; (80041e8 <UART_SetConfig+0x6a8>)
 8003f48:	0052      	lsls	r2, r2, #1
 8003f4a:	5ad3      	ldrh	r3, [r2, r3]
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f50:	f7fc f8ec 	bl	800012c <__udivsi3>
 8003f54:	0003      	movs	r3, r0
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d305      	bcc.n	8003f74 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d906      	bls.n	8003f82 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003f74:	231a      	movs	r3, #26
 8003f76:	2220      	movs	r2, #32
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e044      	b.n	800400c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8e:	4b96      	ldr	r3, [pc, #600]	; (80041e8 <UART_SetConfig+0x6a8>)
 8003f90:	0052      	lsls	r2, r2, #1
 8003f92:	5ad3      	ldrh	r3, [r2, r3]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	69f9      	ldr	r1, [r7, #28]
 8003fa2:	f7fc fa39 	bl	8000418 <__aeabi_uldivmod>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	000b      	movs	r3, r1
 8003faa:	0e11      	lsrs	r1, r2, #24
 8003fac:	021d      	lsls	r5, r3, #8
 8003fae:	430d      	orrs	r5, r1
 8003fb0:	0214      	lsls	r4, r2, #8
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68b8      	ldr	r0, [r7, #8]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	1900      	adds	r0, r0, r4
 8003fc4:	4169      	adcs	r1, r5
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	607b      	str	r3, [r7, #4]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f7fc fa20 	bl	8000418 <__aeabi_uldivmod>
 8003fd8:	0002      	movs	r2, r0
 8003fda:	000b      	movs	r3, r1
 8003fdc:	0013      	movs	r3, r2
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	23c0      	movs	r3, #192	; 0xc0
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d309      	bcc.n	8003ffe <UART_SetConfig+0x4be>
 8003fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	035b      	lsls	r3, r3, #13
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d204      	bcs.n	8003ffe <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e006      	b.n	800400c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003ffe:	231a      	movs	r3, #26
 8004000:	2220      	movs	r2, #32
 8004002:	189b      	adds	r3, r3, r2
 8004004:	19db      	adds	r3, r3, r7
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800400a:	e0d0      	b.n	80041ae <UART_SetConfig+0x66e>
 800400c:	e0cf      	b.n	80041ae <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	429a      	cmp	r2, r3
 8004018:	d000      	beq.n	800401c <UART_SetConfig+0x4dc>
 800401a:	e070      	b.n	80040fe <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800401c:	231b      	movs	r3, #27
 800401e:	2220      	movs	r2, #32
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d015      	beq.n	8004056 <UART_SetConfig+0x516>
 800402a:	dc18      	bgt.n	800405e <UART_SetConfig+0x51e>
 800402c:	2b04      	cmp	r3, #4
 800402e:	d00d      	beq.n	800404c <UART_SetConfig+0x50c>
 8004030:	dc15      	bgt.n	800405e <UART_SetConfig+0x51e>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <UART_SetConfig+0x4fc>
 8004036:	2b02      	cmp	r3, #2
 8004038:	d005      	beq.n	8004046 <UART_SetConfig+0x506>
 800403a:	e010      	b.n	800405e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800403c:	f7fe fb94 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004040:	0003      	movs	r3, r0
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004044:	e014      	b.n	8004070 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004046:	4b67      	ldr	r3, [pc, #412]	; (80041e4 <UART_SetConfig+0x6a4>)
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800404a:	e011      	b.n	8004070 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404c:	f7fe fb00 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8004050:	0003      	movs	r3, r0
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004054:	e00c      	b.n	8004070 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800405c:	e008      	b.n	8004070 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004062:	231a      	movs	r3, #26
 8004064:	2220      	movs	r2, #32
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
        break;
 800406e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004072:	2b00      	cmp	r3, #0
 8004074:	d100      	bne.n	8004078 <UART_SetConfig+0x538>
 8004076:	e09a      	b.n	80041ae <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407c:	4b5a      	ldr	r3, [pc, #360]	; (80041e8 <UART_SetConfig+0x6a8>)
 800407e:	0052      	lsls	r2, r2, #1
 8004080:	5ad3      	ldrh	r3, [r2, r3]
 8004082:	0019      	movs	r1, r3
 8004084:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004086:	f7fc f851 	bl	800012c <__udivsi3>
 800408a:	0003      	movs	r3, r0
 800408c:	005a      	lsls	r2, r3, #1
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	18d2      	adds	r2, r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0019      	movs	r1, r3
 800409c:	0010      	movs	r0, r2
 800409e:	f7fc f845 	bl	800012c <__udivsi3>
 80040a2:	0003      	movs	r3, r0
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d921      	bls.n	80040f0 <UART_SetConfig+0x5b0>
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	025b      	lsls	r3, r3, #9
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d21c      	bcs.n	80040f0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	200e      	movs	r0, #14
 80040bc:	2420      	movs	r4, #32
 80040be:	1903      	adds	r3, r0, r4
 80040c0:	19db      	adds	r3, r3, r7
 80040c2:	210f      	movs	r1, #15
 80040c4:	438a      	bics	r2, r1
 80040c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2207      	movs	r2, #7
 80040d0:	4013      	ands	r3, r2
 80040d2:	b299      	uxth	r1, r3
 80040d4:	1903      	adds	r3, r0, r4
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	1902      	adds	r2, r0, r4
 80040da:	19d2      	adds	r2, r2, r7
 80040dc:	8812      	ldrh	r2, [r2, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	1902      	adds	r2, r0, r4
 80040e8:	19d2      	adds	r2, r2, r7
 80040ea:	8812      	ldrh	r2, [r2, #0]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	e05e      	b.n	80041ae <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80040f0:	231a      	movs	r3, #26
 80040f2:	2220      	movs	r2, #32
 80040f4:	189b      	adds	r3, r3, r2
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	2201      	movs	r2, #1
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e057      	b.n	80041ae <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fe:	231b      	movs	r3, #27
 8004100:	2220      	movs	r2, #32
 8004102:	189b      	adds	r3, r3, r2
 8004104:	19db      	adds	r3, r3, r7
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d015      	beq.n	8004138 <UART_SetConfig+0x5f8>
 800410c:	dc18      	bgt.n	8004140 <UART_SetConfig+0x600>
 800410e:	2b04      	cmp	r3, #4
 8004110:	d00d      	beq.n	800412e <UART_SetConfig+0x5ee>
 8004112:	dc15      	bgt.n	8004140 <UART_SetConfig+0x600>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <UART_SetConfig+0x5de>
 8004118:	2b02      	cmp	r3, #2
 800411a:	d005      	beq.n	8004128 <UART_SetConfig+0x5e8>
 800411c:	e010      	b.n	8004140 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411e:	f7fe fb23 	bl	8002768 <HAL_RCC_GetPCLK1Freq>
 8004122:	0003      	movs	r3, r0
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004126:	e014      	b.n	8004152 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <UART_SetConfig+0x6a4>)
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800412c:	e011      	b.n	8004152 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fe fa8f 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 8004132:	0003      	movs	r3, r0
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004136:	e00c      	b.n	8004152 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800413e:	e008      	b.n	8004152 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004144:	231a      	movs	r3, #26
 8004146:	2220      	movs	r2, #32
 8004148:	189b      	adds	r3, r3, r2
 800414a:	19db      	adds	r3, r3, r7
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
        break;
 8004150:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	2b00      	cmp	r3, #0
 8004156:	d02a      	beq.n	80041ae <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <UART_SetConfig+0x6a8>)
 800415e:	0052      	lsls	r2, r2, #1
 8004160:	5ad3      	ldrh	r3, [r2, r3]
 8004162:	0019      	movs	r1, r3
 8004164:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004166:	f7fb ffe1 	bl	800012c <__udivsi3>
 800416a:	0003      	movs	r3, r0
 800416c:	001a      	movs	r2, r3
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	18d2      	adds	r2, r2, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0019      	movs	r1, r3
 800417c:	0010      	movs	r0, r2
 800417e:	f7fb ffd5 	bl	800012c <__udivsi3>
 8004182:	0003      	movs	r3, r0
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	2b0f      	cmp	r3, #15
 800418a:	d90a      	bls.n	80041a2 <UART_SetConfig+0x662>
 800418c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	429a      	cmp	r2, r3
 8004194:	d205      	bcs.n	80041a2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	b29a      	uxth	r2, r3
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	e005      	b.n	80041ae <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80041a2:	231a      	movs	r3, #26
 80041a4:	2220      	movs	r2, #32
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	226a      	movs	r2, #106	; 0x6a
 80041b2:	2101      	movs	r1, #1
 80041b4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2268      	movs	r2, #104	; 0x68
 80041ba:	2101      	movs	r1, #1
 80041bc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2200      	movs	r2, #0
 80041c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	2200      	movs	r2, #0
 80041c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80041ca:	231a      	movs	r3, #26
 80041cc:	2220      	movs	r2, #32
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	19db      	adds	r3, r3, r7
 80041d2:	781b      	ldrb	r3, [r3, #0]
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b010      	add	sp, #64	; 0x40
 80041da:	bdb0      	pop	{r4, r5, r7, pc}
 80041dc:	40008000 	.word	0x40008000
 80041e0:	40008400 	.word	0x40008400
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	0800a0ec 	.word	0x0800a0ec

080041ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2208      	movs	r2, #8
 80041fa:	4013      	ands	r3, r2
 80041fc:	d00b      	beq.n	8004216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <UART_AdvFeatureConfig+0x144>)
 8004206:	4013      	ands	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	2201      	movs	r2, #1
 800421c:	4013      	ands	r3, r2
 800421e:	d00b      	beq.n	8004238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4a43      	ldr	r2, [pc, #268]	; (8004334 <UART_AdvFeatureConfig+0x148>)
 8004228:	4013      	ands	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	2202      	movs	r2, #2
 800423e:	4013      	ands	r3, r2
 8004240:	d00b      	beq.n	800425a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <UART_AdvFeatureConfig+0x14c>)
 800424a:	4013      	ands	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	2204      	movs	r2, #4
 8004260:	4013      	ands	r3, r2
 8004262:	d00b      	beq.n	800427c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a34      	ldr	r2, [pc, #208]	; (800433c <UART_AdvFeatureConfig+0x150>)
 800426c:	4013      	ands	r3, r2
 800426e:	0019      	movs	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	2210      	movs	r2, #16
 8004282:	4013      	ands	r3, r2
 8004284:	d00b      	beq.n	800429e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <UART_AdvFeatureConfig+0x154>)
 800428e:	4013      	ands	r3, r2
 8004290:	0019      	movs	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	2220      	movs	r2, #32
 80042a4:	4013      	ands	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	4a25      	ldr	r2, [pc, #148]	; (8004344 <UART_AdvFeatureConfig+0x158>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	0019      	movs	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	2240      	movs	r2, #64	; 0x40
 80042c6:	4013      	ands	r3, r2
 80042c8:	d01d      	beq.n	8004306 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <UART_AdvFeatureConfig+0x15c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	035b      	lsls	r3, r3, #13
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d10b      	bne.n	8004306 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4a15      	ldr	r2, [pc, #84]	; (800434c <UART_AdvFeatureConfig+0x160>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	2280      	movs	r2, #128	; 0x80
 800430c:	4013      	ands	r3, r2
 800430e:	d00b      	beq.n	8004328 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <UART_AdvFeatureConfig+0x164>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}
 8004330:	ffff7fff 	.word	0xffff7fff
 8004334:	fffdffff 	.word	0xfffdffff
 8004338:	fffeffff 	.word	0xfffeffff
 800433c:	fffbffff 	.word	0xfffbffff
 8004340:	ffffefff 	.word	0xffffefff
 8004344:	ffffdfff 	.word	0xffffdfff
 8004348:	ffefffff 	.word	0xffefffff
 800434c:	ff9fffff 	.word	0xff9fffff
 8004350:	fff7ffff 	.word	0xfff7ffff

08004354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b092      	sub	sp, #72	; 0x48
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2290      	movs	r2, #144	; 0x90
 8004360:	2100      	movs	r1, #0
 8004362:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004364:	f7fc ff38 	bl	80011d8 <HAL_GetTick>
 8004368:	0003      	movs	r3, r0
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2208      	movs	r2, #8
 8004374:	4013      	ands	r3, r2
 8004376:	2b08      	cmp	r3, #8
 8004378:	d12d      	bne.n	80043d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437c:	2280      	movs	r2, #128	; 0x80
 800437e:	0391      	lsls	r1, r2, #14
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <UART_CheckIdleState+0x14c>)
 8004384:	9200      	str	r2, [sp, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	f000 f88e 	bl	80044a8 <UART_WaitOnFlagUntilTimeout>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d022      	beq.n	80043d6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
 800439a:	2301      	movs	r3, #1
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	438a      	bics	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2288      	movs	r2, #136	; 0x88
 80043c6:	2120      	movs	r1, #32
 80043c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2284      	movs	r2, #132	; 0x84
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e060      	b.n	8004498 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2204      	movs	r2, #4
 80043de:	4013      	ands	r3, r2
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d146      	bne.n	8004472 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e6:	2280      	movs	r2, #128	; 0x80
 80043e8:	03d1      	lsls	r1, r2, #15
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <UART_CheckIdleState+0x14c>)
 80043ee:	9200      	str	r2, [sp, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f000 f859 	bl	80044a8 <UART_WaitOnFlagUntilTimeout>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d03b      	beq.n	8004472 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004400:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4922      	ldr	r1, [pc, #136]	; (80044a4 <UART_CheckIdleState+0x150>)
 800441c:	400a      	ands	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442c:	f3ef 8310 	mrs	r3, PRIMASK
 8004430:	61bb      	str	r3, [r7, #24]
  return(result);
 8004432:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004434:	633b      	str	r3, [r7, #48]	; 0x30
 8004436:	2301      	movs	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2101      	movs	r1, #1
 800444e:	438a      	bics	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	228c      	movs	r2, #140	; 0x8c
 8004462:	2120      	movs	r1, #32
 8004464:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2284      	movs	r2, #132	; 0x84
 800446a:	2100      	movs	r1, #0
 800446c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e012      	b.n	8004498 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2288      	movs	r2, #136	; 0x88
 8004476:	2120      	movs	r1, #32
 8004478:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	228c      	movs	r2, #140	; 0x8c
 800447e:	2120      	movs	r1, #32
 8004480:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2284      	movs	r2, #132	; 0x84
 8004492:	2100      	movs	r1, #0
 8004494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	0018      	movs	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	b010      	add	sp, #64	; 0x40
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	01ffffff 	.word	0x01ffffff
 80044a4:	fffffedf 	.word	0xfffffedf

080044a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	1dfb      	adds	r3, r7, #7
 80044b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b8:	e051      	b.n	800455e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3301      	adds	r3, #1
 80044be:	d04e      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c0:	f7fc fe8a 	bl	80011d8 <HAL_GetTick>
 80044c4:	0002      	movs	r2, r0
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e051      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2204      	movs	r2, #4
 80044e2:	4013      	ands	r3, r2
 80044e4:	d03b      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb6>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d038      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb6>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d035      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	2208      	movs	r2, #8
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d111      	bne.n	8004524 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2208      	movs	r2, #8
 8004506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	0018      	movs	r0, r3
 800450c:	f000 f83c 	bl	8004588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2290      	movs	r2, #144	; 0x90
 8004514:	2108      	movs	r1, #8
 8004516:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2284      	movs	r2, #132	; 0x84
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e02c      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	401a      	ands	r2, r3
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	429a      	cmp	r2, r3
 8004536:	d112      	bne.n	800455e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	0112      	lsls	r2, r2, #4
 8004540:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	0018      	movs	r0, r3
 8004546:	f000 f81f 	bl	8004588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2290      	movs	r2, #144	; 0x90
 800454e:	2120      	movs	r1, #32
 8004550:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2284      	movs	r2, #132	; 0x84
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e00f      	b.n	800457e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	425a      	negs	r2, r3
 800456e:	4153      	adcs	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	001a      	movs	r2, r3
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d09e      	beq.n	80044ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b004      	add	sp, #16
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08e      	sub	sp, #56	; 0x38
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004590:	f3ef 8310 	mrs	r3, PRIMASK
 8004594:	617b      	str	r3, [r7, #20]
  return(result);
 8004596:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4926      	ldr	r1, [pc, #152]	; (800464c <UART_EndRxTransfer+0xc4>)
 80045b2:	400a      	ands	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c2:	f3ef 8310 	mrs	r3, PRIMASK
 80045c6:	623b      	str	r3, [r7, #32]
  return(result);
 80045c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ca:	633b      	str	r3, [r7, #48]	; 0x30
 80045cc:	2301      	movs	r3, #1
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	f383 8810 	msr	PRIMASK, r3
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	491b      	ldr	r1, [pc, #108]	; (8004650 <UART_EndRxTransfer+0xc8>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d118      	bne.n	800462e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004600:	60bb      	str	r3, [r7, #8]
  return(result);
 8004602:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004606:	2301      	movs	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f383 8810 	msr	PRIMASK, r3
}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2110      	movs	r1, #16
 800461e:	438a      	bics	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	228c      	movs	r2, #140	; 0x8c
 8004632:	2120      	movs	r1, #32
 8004634:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b00e      	add	sp, #56	; 0x38
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	fffffedf 	.word	0xfffffedf
 8004650:	effffffe 	.word	0xeffffffe

08004654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2284      	movs	r2, #132	; 0x84
 8004660:	5c9b      	ldrb	r3, [r3, r2]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UARTEx_DisableFifoMode+0x16>
 8004666:	2302      	movs	r3, #2
 8004668:	e027      	b.n	80046ba <HAL_UARTEx_DisableFifoMode+0x66>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2284      	movs	r2, #132	; 0x84
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2288      	movs	r2, #136	; 0x88
 8004676:	2124      	movs	r1, #36	; 0x24
 8004678:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2101      	movs	r1, #1
 800468e:	438a      	bics	r2, r1
 8004690:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004696:	4013      	ands	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2288      	movs	r2, #136	; 0x88
 80046ac:	2120      	movs	r1, #32
 80046ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2284      	movs	r2, #132	; 0x84
 80046b4:	2100      	movs	r1, #0
 80046b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	b004      	add	sp, #16
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	dfffffff 	.word	0xdfffffff

080046c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2284      	movs	r2, #132	; 0x84
 80046d6:	5c9b      	ldrb	r3, [r3, r2]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046dc:	2302      	movs	r3, #2
 80046de:	e02e      	b.n	800473e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2284      	movs	r2, #132	; 0x84
 80046e4:	2101      	movs	r1, #1
 80046e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2288      	movs	r2, #136	; 0x88
 80046ec:	2124      	movs	r1, #36	; 0x24
 80046ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2101      	movs	r1, #1
 8004704:	438a      	bics	r2, r1
 8004706:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	08d9      	lsrs	r1, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f854 	bl	80047cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2288      	movs	r2, #136	; 0x88
 8004730:	2120      	movs	r1, #32
 8004732:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2284      	movs	r2, #132	; 0x84
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2284      	movs	r2, #132	; 0x84
 8004756:	5c9b      	ldrb	r3, [r3, r2]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e02f      	b.n	80047c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2284      	movs	r2, #132	; 0x84
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2288      	movs	r2, #136	; 0x88
 800476c:	2124      	movs	r1, #36	; 0x24
 800476e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2101      	movs	r1, #1
 8004784:	438a      	bics	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004790:	4013      	ands	r3, r2
 8004792:	0019      	movs	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 f813 	bl	80047cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2288      	movs	r2, #136	; 0x88
 80047b2:	2120      	movs	r1, #32
 80047b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2284      	movs	r2, #132	; 0x84
 80047ba:	2100      	movs	r1, #0
 80047bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b004      	add	sp, #16
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	f1ffffff 	.word	0xf1ffffff

080047cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	226a      	movs	r2, #106	; 0x6a
 80047e0:	2101      	movs	r1, #1
 80047e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2268      	movs	r2, #104	; 0x68
 80047e8:	2101      	movs	r1, #1
 80047ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047ec:	e043      	b.n	8004876 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ee:	260f      	movs	r6, #15
 80047f0:	19bb      	adds	r3, r7, r6
 80047f2:	2208      	movs	r2, #8
 80047f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047f6:	200e      	movs	r0, #14
 80047f8:	183b      	adds	r3, r7, r0
 80047fa:	2208      	movs	r2, #8
 80047fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	0e5b      	lsrs	r3, r3, #25
 8004806:	b2da      	uxtb	r2, r3
 8004808:	240d      	movs	r4, #13
 800480a:	193b      	adds	r3, r7, r4
 800480c:	2107      	movs	r1, #7
 800480e:	400a      	ands	r2, r1
 8004810:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	0f5b      	lsrs	r3, r3, #29
 800481a:	b2da      	uxtb	r2, r3
 800481c:	250c      	movs	r5, #12
 800481e:	197b      	adds	r3, r7, r5
 8004820:	2107      	movs	r1, #7
 8004822:	400a      	ands	r2, r1
 8004824:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004826:	183b      	adds	r3, r7, r0
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	197a      	adds	r2, r7, r5
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	4914      	ldr	r1, [pc, #80]	; (8004880 <UARTEx_SetNbDataToProcess+0xb4>)
 8004830:	5c8a      	ldrb	r2, [r1, r2]
 8004832:	435a      	muls	r2, r3
 8004834:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004836:	197b      	adds	r3, r7, r5
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <UARTEx_SetNbDataToProcess+0xb8>)
 800483c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800483e:	0019      	movs	r1, r3
 8004840:	f7fb fcfe 	bl	8000240 <__divsi3>
 8004844:	0003      	movs	r3, r0
 8004846:	b299      	uxth	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	226a      	movs	r2, #106	; 0x6a
 800484c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800484e:	19bb      	adds	r3, r7, r6
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	193a      	adds	r2, r7, r4
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	490a      	ldr	r1, [pc, #40]	; (8004880 <UARTEx_SetNbDataToProcess+0xb4>)
 8004858:	5c8a      	ldrb	r2, [r1, r2]
 800485a:	435a      	muls	r2, r3
 800485c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800485e:	193b      	adds	r3, r7, r4
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	4a08      	ldr	r2, [pc, #32]	; (8004884 <UARTEx_SetNbDataToProcess+0xb8>)
 8004864:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004866:	0019      	movs	r1, r3
 8004868:	f7fb fcea 	bl	8000240 <__divsi3>
 800486c:	0003      	movs	r3, r0
 800486e:	b299      	uxth	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2268      	movs	r2, #104	; 0x68
 8004874:	5299      	strh	r1, [r3, r2]
}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	b005      	add	sp, #20
 800487c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	0800a104 	.word	0x0800a104
 8004884:	0800a10c 	.word	0x0800a10c

08004888 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <MX_FATFS_Init+0x28>)
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <MX_FATFS_Init+0x2c>)
 8004890:	0011      	movs	r1, r2
 8004892:	0018      	movs	r0, r3
 8004894:	f002 fcd8 	bl	8007248 <FATFS_LinkDriver>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d002      	beq.n	80048a2 <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	425b      	negs	r3, r3
 80048a0:	e003      	b.n	80048aa <MX_FATFS_Init+0x22>
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <MX_FATFS_Init+0x30>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80048a8:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000288 	.word	0x20000288
 80048b4:	2000000c 	.word	0x2000000c
 80048b8:	2000028c 	.word	0x2000028c

080048bc <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80048c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048c8:	b5b0      	push	{r4, r5, r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	0002      	movs	r2, r0
 80048d0:	1dfb      	adds	r3, r7, #7
 80048d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	uint8_t res;
	res = SD_Init();//SD_Initialize()
 80048d4:	250f      	movs	r5, #15
 80048d6:	197c      	adds	r4, r7, r5
 80048d8:	f003 fa54 	bl	8007d84 <SD_Init>
 80048dc:	0003      	movs	r3, r0
 80048de:	7023      	strb	r3, [r4, #0]
	printf("sd_init:%d\n",res);
 80048e0:	197b      	adds	r3, r7, r5
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <USER_initialize+0x68>)
 80048e6:	0011      	movs	r1, r2
 80048e8:	0018      	movs	r0, r3
 80048ea:	f003 fea1 	bl	8008630 <iprintf>
	if(res)//STM32 SPI的bug,在sd卡操作失败的时�?�如果不执行下面的语�??,可能导致SPI读写异常
 80048ee:	197b      	adds	r3, r7, r5
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <USER_initialize+0x40>
	{
		SPI_SetSpeed(SPI_SPEED_LOW);
 80048f6:	2000      	movs	r0, #0
 80048f8:	f003 f926 	bl	8007b48 <SPI_SetSpeed>
		SPI_ReadWriteByte(0xff);//提供额外�??8个时�??
 80048fc:	20ff      	movs	r0, #255	; 0xff
 80048fe:	f003 f943 	bl	8007b88 <SPI_ReadWriteByte>
		SPI_SetSpeed(SPI_SPEED_HIGH);
 8004902:	2001      	movs	r0, #1
 8004904:	f003 f920 	bl	8007b48 <SPI_SetSpeed>
	}
	if(res)
 8004908:	230f      	movs	r3, #15
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <USER_initialize+0x56>
	{
		printf("error\n");
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <USER_initialize+0x6c>)
 8004914:	0018      	movs	r0, r3
 8004916:	f003 fef1 	bl	80086fc <puts>
		return  STA_NOINIT;
 800491a:	2301      	movs	r3, #1
 800491c:	e004      	b.n	8004928 <USER_initialize+0x60>
	}
	else
	{
		printf("ok\n");
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <USER_initialize+0x70>)
 8004920:	0018      	movs	r0, r3
 8004922:	f003 feeb 	bl	80086fc <puts>
		return RES_OK; //初始化成�??
 8004926:	2300      	movs	r3, #0
	}
  /* USER CODE END INIT */
}
 8004928:	0018      	movs	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	b004      	add	sp, #16
 800492e:	bdb0      	pop	{r4, r5, r7, pc}
 8004930:	08009f1c 	.word	0x08009f1c
 8004934:	08009f28 	.word	0x08009f28
 8004938:	08009f30 	.word	0x08009f30

0800493c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	0002      	movs	r2, r0
 8004944:	1dfb      	adds	r3, r7, #7
 8004946:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	switch (pdrv)
 8004948:	1dfb      	adds	r3, r7, #7
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d009      	beq.n	8004964 <USER_status+0x28>
 8004950:	dc0a      	bgt.n	8004968 <USER_status+0x2c>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <USER_status+0x20>
 8004956:	2b01      	cmp	r3, #1
 8004958:	d002      	beq.n	8004960 <USER_status+0x24>
 800495a:	e005      	b.n	8004968 <USER_status+0x2c>
	{
		case 0 :
			return RES_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e004      	b.n	800496a <USER_status+0x2e>
		case 1 :
			return RES_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e002      	b.n	800496a <USER_status+0x2e>
		case 2 :
			return RES_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <USER_status+0x2e>
		default:
			return STA_NOINIT;
 8004968:	2301      	movs	r3, #1
	}
  /* USER CODE END STATUS */
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b002      	add	sp, #8
 8004970:	bd80      	pop	{r7, pc}

08004972 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004972:	b5b0      	push	{r4, r5, r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	230f      	movs	r3, #15
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	1c02      	adds	r2, r0, #0
 8004984:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	uint8_t res;
	if( !count )
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <USER_read+0x1e>
	{
		return RES_PARERR;  /* count不能等于0，否则返回参数错�?? */
 800498c:	2304      	movs	r3, #4
 800498e:	e018      	b.n	80049c2 <USER_read+0x50>
	}
	switch (pdrv)
 8004990:	230f      	movs	r3, #15
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d112      	bne.n	80049c0 <USER_read+0x4e>
	{
		case 0:
			res=SD_ReadMultiBlock(sector,buff,count);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	2517      	movs	r5, #23
 80049a0:	197c      	adds	r4, r7, r5
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f003 fc8e 	bl	80082c8 <SD_ReadMultiBlock>
 80049ac:	0003      	movs	r3, r0
 80049ae:	7023      	strb	r3, [r4, #0]
			if(res == 0){
 80049b0:	197b      	adds	r3, r7, r5
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <USER_read+0x4a>
				return RES_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e002      	b.n	80049c2 <USER_read+0x50>
			}else{
				return RES_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <USER_read+0x50>
			}
		default:
			return RES_ERROR;
 80049c0:	2301      	movs	r3, #1
	}
  /* USER CODE END READ */
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b006      	add	sp, #24
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80049ca:	b5b0      	push	{r4, r5, r7, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	230f      	movs	r3, #15
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	1c02      	adds	r2, r0, #0
 80049dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	uint8_t  res;
	if( !count )
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <USER_write+0x1e>
	{
		return RES_PARERR;  /* count不能等于0，否则返回参数错�?? */
 80049e4:	2304      	movs	r3, #4
 80049e6:	e018      	b.n	8004a1a <USER_write+0x50>
	}
	switch (pdrv)
 80049e8:	230f      	movs	r3, #15
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d112      	bne.n	8004a18 <USER_write+0x4e>
	{
		case 0:
			res=SD_WriteMultiBlock(sector,(uint8_t *)buff,count);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	2517      	movs	r5, #23
 80049f8:	197c      	adds	r4, r7, r5
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0018      	movs	r0, r3
 8004a00:	f003 fcb4 	bl	800836c <SD_WriteMultiBlock>
 8004a04:	0003      	movs	r3, r0
 8004a06:	7023      	strb	r3, [r4, #0]
			if(res == 0){
 8004a08:	197b      	adds	r3, r7, r5
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <USER_write+0x4a>
				return RES_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e002      	b.n	8004a1a <USER_write+0x50>
			}else{
				return RES_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <USER_write+0x50>
			}
		default:return RES_ERROR;
 8004a18:	2301      	movs	r3, #1
	}
  /* USER CODE END WRITE */
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b006      	add	sp, #24
 8004a20:	bdb0      	pop	{r4, r5, r7, pc}

08004a22 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	603a      	str	r2, [r7, #0]
 8004a2a:	1dfb      	adds	r3, r7, #7
 8004a2c:	1c02      	adds	r2, r0, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	1dbb      	adds	r3, r7, #6
 8004a32:	1c0a      	adds	r2, r1, #0
 8004a34:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	DRESULT res;
	 switch(cmd)
 8004a36:	1dbb      	adds	r3, r7, #6
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d023      	beq.n	8004a86 <USER_ioctl+0x64>
 8004a3e:	dc34      	bgt.n	8004aaa <USER_ioctl+0x88>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d017      	beq.n	8004a74 <USER_ioctl+0x52>
 8004a44:	dc31      	bgt.n	8004aaa <USER_ioctl+0x88>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <USER_ioctl+0x2e>
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d023      	beq.n	8004a96 <USER_ioctl+0x74>
 8004a4e:	e02c      	b.n	8004aaa <USER_ioctl+0x88>
	{
		case CTRL_SYNC:
			SPI_SD_EnableSelect();
 8004a50:	f003 f850 	bl	8007af4 <SPI_SD_EnableSelect>
			do{
				HAL_Delay(20);
 8004a54:	2014      	movs	r0, #20
 8004a56:	f7fc fbc9 	bl	80011ec <HAL_Delay>
			}while(SPI_ReadWriteByte(0xFF)!=0xFF);
 8004a5a:	20ff      	movs	r0, #255	; 0xff
 8004a5c:	f003 f894 	bl	8007b88 <SPI_ReadWriteByte>
 8004a60:	0003      	movs	r3, r0
 8004a62:	2bff      	cmp	r3, #255	; 0xff
 8004a64:	d1f6      	bne.n	8004a54 <USER_ioctl+0x32>
			res=RES_OK;
 8004a66:	230f      	movs	r3, #15
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
			SPI_SD_DisableSelect();
 8004a6e:	f003 f84d 	bl	8007b0c <SPI_SD_DisableSelect>
			break;
 8004a72:	e01f      	b.n	8004ab4 <USER_ioctl+0x92>
		case GET_SECTOR_SIZE:
			*(WORD*)buff = 512;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
			break;
 8004a84:	e016      	b.n	8004ab4 <USER_ioctl+0x92>
		case GET_BLOCK_SIZE:
			*(WORD*)buff = 8;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004a8c:	230f      	movs	r3, #15
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
			break;
 8004a94:	e00e      	b.n	8004ab4 <USER_ioctl+0x92>
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = SD_GetCapacity();
 8004a96:	f003 fb75 	bl	8008184 <SD_GetCapacity>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 8004aa0:	230f      	movs	r3, #15
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
			break;
 8004aa8:	e004      	b.n	8004ab4 <USER_ioctl+0x92>
		default:
			res = RES_PARERR;
 8004aaa:	230f      	movs	r3, #15
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	2204      	movs	r2, #4
 8004ab0:	701a      	strb	r2, [r3, #0]
			break;
 8004ab2:	46c0      	nop			; (mov r8, r8)
	}
	return res;
 8004ab4:	230f      	movs	r3, #15
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE END IOCTL */
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004ac4:	b5b0      	push	{r4, r5, r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	0002      	movs	r2, r0
 8004acc:	1dfb      	adds	r3, r7, #7
 8004ace:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ad0:	1dfb      	adds	r3, r7, #7
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4a0b      	ldr	r2, [pc, #44]	; (8004b04 <disk_status+0x40>)
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	3304      	adds	r3, #4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	1dfa      	adds	r2, r7, #7
 8004ae2:	7812      	ldrb	r2, [r2, #0]
 8004ae4:	4907      	ldr	r1, [pc, #28]	; (8004b04 <disk_status+0x40>)
 8004ae6:	188a      	adds	r2, r1, r2
 8004ae8:	7b12      	ldrb	r2, [r2, #12]
 8004aea:	250f      	movs	r5, #15
 8004aec:	197c      	adds	r4, r7, r5
 8004aee:	0010      	movs	r0, r2
 8004af0:	4798      	blx	r3
 8004af2:	0003      	movs	r3, r0
 8004af4:	7023      	strb	r3, [r4, #0]
  return stat;
 8004af6:	197b      	adds	r3, r7, r5
 8004af8:	781b      	ldrb	r3, [r3, #0]
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b004      	add	sp, #16
 8004b00:	bdb0      	pop	{r4, r5, r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	200002bc 	.word	0x200002bc

08004b08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	0002      	movs	r2, r0
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8004b14:	200f      	movs	r0, #15
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8004b1c:	1dfb      	adds	r3, r7, #7
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <disk_initialize+0x5c>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d116      	bne.n	8004b56 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8004b28:	1dfb      	adds	r3, r7, #7
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	; (8004b64 <disk_initialize+0x5c>)
 8004b2e:	2101      	movs	r1, #1
 8004b30:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b32:	1dfb      	adds	r3, r7, #7
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	4a0b      	ldr	r2, [pc, #44]	; (8004b64 <disk_initialize+0x5c>)
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	18d3      	adds	r3, r2, r3
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1dfa      	adds	r2, r7, #7
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	4907      	ldr	r1, [pc, #28]	; (8004b64 <disk_initialize+0x5c>)
 8004b48:	188a      	adds	r2, r1, r2
 8004b4a:	7b12      	ldrb	r2, [r2, #12]
 8004b4c:	183c      	adds	r4, r7, r0
 8004b4e:	0010      	movs	r0, r2
 8004b50:	4798      	blx	r3
 8004b52:	0003      	movs	r3, r0
 8004b54:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8004b56:	230f      	movs	r3, #15
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	781b      	ldrb	r3, [r3, #0]
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b005      	add	sp, #20
 8004b62:	bd90      	pop	{r4, r7, pc}
 8004b64:	200002bc 	.word	0x200002bc

08004b68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	210f      	movs	r1, #15
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	1c02      	adds	r2, r0, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b7c:	187b      	adds	r3, r7, r1
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	4a0c      	ldr	r2, [pc, #48]	; (8004bb4 <disk_read+0x4c>)
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	18d3      	adds	r3, r2, r3
 8004b86:	3304      	adds	r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689d      	ldr	r5, [r3, #8]
 8004b8c:	187b      	adds	r3, r7, r1
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <disk_read+0x4c>)
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	7b18      	ldrb	r0, [r3, #12]
 8004b96:	2617      	movs	r6, #23
 8004b98:	19bc      	adds	r4, r7, r6
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	47a8      	blx	r5
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	7023      	strb	r3, [r4, #0]
  return res;
 8004ba6:	19bb      	adds	r3, r7, r6
 8004ba8:	781b      	ldrb	r3, [r3, #0]
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b007      	add	sp, #28
 8004bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	200002bc 	.word	0x200002bc

08004bb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	607a      	str	r2, [r7, #4]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	210f      	movs	r1, #15
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	1c02      	adds	r2, r0, #0
 8004bca:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <disk_write+0x4c>)
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	18d3      	adds	r3, r2, r3
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68dd      	ldr	r5, [r3, #12]
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4a08      	ldr	r2, [pc, #32]	; (8004c04 <disk_write+0x4c>)
 8004be2:	18d3      	adds	r3, r2, r3
 8004be4:	7b18      	ldrb	r0, [r3, #12]
 8004be6:	2617      	movs	r6, #23
 8004be8:	19bc      	adds	r4, r7, r6
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	47a8      	blx	r5
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	7023      	strb	r3, [r4, #0]
  return res;
 8004bf6:	19bb      	adds	r3, r7, r6
 8004bf8:	781b      	ldrb	r3, [r3, #0]
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b007      	add	sp, #28
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	200002bc 	.word	0x200002bc

08004c08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	603a      	str	r2, [r7, #0]
 8004c10:	1dfb      	adds	r3, r7, #7
 8004c12:	1c02      	adds	r2, r0, #0
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	1dbb      	adds	r3, r7, #6
 8004c18:	1c0a      	adds	r2, r1, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c1c:	1dfb      	adds	r3, r7, #7
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <disk_ioctl+0x4c>)
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	18d3      	adds	r3, r2, r3
 8004c26:	3304      	adds	r3, #4
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	1dfa      	adds	r2, r7, #7
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	4908      	ldr	r1, [pc, #32]	; (8004c54 <disk_ioctl+0x4c>)
 8004c32:	188a      	adds	r2, r1, r2
 8004c34:	7b10      	ldrb	r0, [r2, #12]
 8004c36:	260f      	movs	r6, #15
 8004c38:	19bc      	adds	r4, r7, r6
 8004c3a:	683d      	ldr	r5, [r7, #0]
 8004c3c:	1dba      	adds	r2, r7, #6
 8004c3e:	7811      	ldrb	r1, [r2, #0]
 8004c40:	002a      	movs	r2, r5
 8004c42:	4798      	blx	r3
 8004c44:	0003      	movs	r3, r0
 8004c46:	7023      	strb	r3, [r4, #0]
  return res;
 8004c48:	19bb      	adds	r3, r7, r6
 8004c4a:	781b      	ldrb	r3, [r3, #0]
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b005      	add	sp, #20
 8004c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c54:	200002bc 	.word	0x200002bc

08004c58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3301      	adds	r3, #1
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	210e      	movs	r1, #14
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	b21a      	sxth	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b21b      	sxth	r3, r3
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	b21a      	sxth	r2, r3
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	801a      	strh	r2, [r3, #0]
	return rv;
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	881b      	ldrh	r3, [r3, #0]
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b004      	add	sp, #16
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3303      	adds	r3, #3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	3202      	adds	r2, #2
 8004ca6:	7812      	ldrb	r2, [r2, #0]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	3201      	adds	r2, #1
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	7812      	ldrb	r2, [r2, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
	return rv;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b004      	add	sp, #16
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	000a      	movs	r2, r1
 8004cda:	1cbb      	adds	r3, r7, #2
 8004cdc:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	1cba      	adds	r2, r7, #2
 8004ce6:	8812      	ldrh	r2, [r2, #0]
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	1cbb      	adds	r3, r7, #2
 8004cee:	1cba      	adds	r2, r7, #2
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	0a12      	lsrs	r2, r2, #8
 8004cf4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	1cba      	adds	r2, r7, #2
 8004cfe:	8812      	ldrh	r2, [r2, #0]
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	1c53      	adds	r3, r2, #1
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	6179      	str	r1, [r7, #20]
 8004d86:	7812      	ldrb	r2, [r2, #0]
 8004d88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	607b      	str	r3, [r7, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f1      	bne.n	8004d7a <mem_cpy+0x1a>
	}
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b006      	add	sp, #24
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	617a      	str	r2, [r7, #20]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f3      	bne.n	8004dae <mem_set+0x10>
}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b006      	add	sp, #24
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	61fa      	str	r2, [r7, #28]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	0019      	movs	r1, r3
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	61ba      	str	r2, [r7, #24]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	1acb      	subs	r3, r1, r3
 8004dfc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <mem_cmp+0x40>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0eb      	beq.n	8004de8 <mem_cmp+0x18>

	return r;
 8004e10:	697b      	ldr	r3, [r7, #20]
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b008      	add	sp, #32
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e24:	e002      	b.n	8004e2c <chk_chr+0x12>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <chk_chr+0x26>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	001a      	movs	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d1f2      	bne.n	8004e26 <chk_chr+0xc>
	return *str;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	781b      	ldrb	r3, [r3, #0]
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e027      	b.n	8004eb0 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <chk_lock+0xac>)
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	0112      	lsls	r2, r2, #4
 8004e66:	58d3      	ldr	r3, [r2, r3]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01c      	beq.n	8004ea6 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004e6c:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <chk_lock+0xac>)
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	58d2      	ldr	r2, [r2, r3]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d116      	bne.n	8004eaa <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <chk_lock+0xac>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	3304      	adds	r3, #4
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d10c      	bne.n	8004eaa <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <chk_lock+0xac>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	3308      	adds	r3, #8
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d102      	bne.n	8004eaa <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8004ea4:	e007      	b.n	8004eb6 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d9d4      	bls.n	8004e60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d109      	bne.n	8004ed0 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <chk_lock+0x7c>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d101      	bne.n	8004ecc <chk_lock+0x80>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e011      	b.n	8004ef0 <chk_lock+0xa4>
 8004ecc:	2312      	movs	r3, #18
 8004ece:	e00f      	b.n	8004ef0 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <chk_lock+0x9e>
 8004ed6:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <chk_lock+0xac>)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	330c      	adds	r3, #12
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d101      	bne.n	8004eee <chk_lock+0xa2>
 8004eea:	2310      	movs	r3, #16
 8004eec:	e000      	b.n	8004ef0 <chk_lock+0xa4>
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	2000029c 	.word	0x2000029c

08004efc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	e002      	b.n	8004f0e <enq_lock+0x12>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d805      	bhi.n	8004f20 <enq_lock+0x24>
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <enq_lock+0x38>)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	58d3      	ldr	r3, [r2, r3]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f3      	bne.n	8004f08 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3b02      	subs	r3, #2
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	4193      	sbcs	r3, r2
 8004f28:	b2db      	uxtb	r3, r3
}
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b002      	add	sp, #8
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	2000029c 	.word	0x2000029c

08004f38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e01e      	b.n	8004f86 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8004f48:	4b3f      	ldr	r3, [pc, #252]	; (8005048 <inc_lock+0x110>)
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	58d2      	ldr	r2, [r2, r3]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d113      	bne.n	8004f80 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8004f58:	4a3b      	ldr	r2, [pc, #236]	; (8005048 <inc_lock+0x110>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	18d3      	adds	r3, r2, r3
 8004f60:	3304      	adds	r3, #4
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d109      	bne.n	8004f80 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8004f6c:	4a36      	ldr	r2, [pc, #216]	; (8005048 <inc_lock+0x110>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	3308      	adds	r3, #8
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d006      	beq.n	8004f8e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d9dd      	bls.n	8004f48 <inc_lock+0x10>
 8004f8c:	e000      	b.n	8004f90 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8004f8e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d130      	bne.n	8004ff8 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e002      	b.n	8004fa2 <inc_lock+0x6a>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d805      	bhi.n	8004fb4 <inc_lock+0x7c>
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <inc_lock+0x110>)
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	0112      	lsls	r2, r2, #4
 8004fae:	58d3      	ldr	r3, [r2, r3]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f3      	bne.n	8004f9c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d101      	bne.n	8004fbe <inc_lock+0x86>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e03f      	b.n	800503e <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	4b21      	ldr	r3, [pc, #132]	; (8005048 <inc_lock+0x110>)
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	491e      	ldr	r1, [pc, #120]	; (8005048 <inc_lock+0x110>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	18cb      	adds	r3, r1, r3
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	491a      	ldr	r1, [pc, #104]	; (8005048 <inc_lock+0x110>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	18cb      	adds	r3, r1, r3
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004fea:	4a17      	ldr	r2, [pc, #92]	; (8005048 <inc_lock+0x110>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <inc_lock+0xda>
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <inc_lock+0x110>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	18d3      	adds	r3, r2, r3
 8005006:	330c      	adds	r3, #12
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <inc_lock+0xda>
 800500e:	2300      	movs	r3, #0
 8005010:	e015      	b.n	800503e <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <inc_lock+0xf2>
 8005018:	4a0b      	ldr	r2, [pc, #44]	; (8005048 <inc_lock+0x110>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	18d3      	adds	r3, r2, r3
 8005020:	330c      	adds	r3, #12
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	b29b      	uxth	r3, r3
 8005028:	e001      	b.n	800502e <inc_lock+0xf6>
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4906      	ldr	r1, [pc, #24]	; (8005048 <inc_lock+0x110>)
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	188a      	adds	r2, r1, r2
 8005036:	320c      	adds	r2, #12
 8005038:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	2000029c 	.word	0x2000029c

0800504c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3b01      	subs	r3, #1
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d832      	bhi.n	80050c6 <dec_lock+0x7a>
		n = Files[i].ctr;
 8005060:	200e      	movs	r0, #14
 8005062:	183b      	adds	r3, r7, r0
 8005064:	491d      	ldr	r1, [pc, #116]	; (80050dc <dec_lock+0x90>)
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	188a      	adds	r2, r1, r2
 800506c:	320c      	adds	r2, #12
 800506e:	8812      	ldrh	r2, [r2, #0]
 8005070:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005072:	183b      	adds	r3, r7, r0
 8005074:	881a      	ldrh	r2, [r3, #0]
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	429a      	cmp	r2, r3
 800507c:	d102      	bne.n	8005084 <dec_lock+0x38>
 800507e:	183b      	adds	r3, r7, r0
 8005080:	2200      	movs	r2, #0
 8005082:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005084:	210e      	movs	r1, #14
 8005086:	187b      	adds	r3, r7, r1
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <dec_lock+0x4c>
 800508e:	187b      	adds	r3, r7, r1
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	187b      	adds	r3, r7, r1
 8005094:	3a01      	subs	r2, #1
 8005096:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8005098:	4a10      	ldr	r2, [pc, #64]	; (80050dc <dec_lock+0x90>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	18d3      	adds	r3, r2, r3
 80050a0:	330c      	adds	r3, #12
 80050a2:	210e      	movs	r1, #14
 80050a4:	187a      	adds	r2, r7, r1
 80050a6:	8812      	ldrh	r2, [r2, #0]
 80050a8:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <dec_lock+0x70>
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <dec_lock+0x90>)
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	0112      	lsls	r2, r2, #4
 80050b8:	2100      	movs	r1, #0
 80050ba:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 80050bc:	230d      	movs	r3, #13
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e003      	b.n	80050ce <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80050c6:	230d      	movs	r3, #13
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	2202      	movs	r2, #2
 80050cc:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80050ce:	230d      	movs	r3, #13
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	781b      	ldrb	r3, [r3, #0]
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b004      	add	sp, #16
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	2000029c 	.word	0x2000029c

080050e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e00e      	b.n	800510c <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <clear_lock+0x3c>)
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	58d3      	ldr	r3, [r2, r3]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d104      	bne.n	8005106 <clear_lock+0x26>
 80050fc:	4b07      	ldr	r3, [pc, #28]	; (800511c <clear_lock+0x3c>)
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	0112      	lsls	r2, r2, #4
 8005102:	2100      	movs	r1, #0
 8005104:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d9ed      	bls.n	80050ee <clear_lock+0xe>
	}
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}
 800511c:	2000029c 	.word	0x2000029c

08005120 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005128:	240f      	movs	r4, #15
 800512a:	193b      	adds	r3, r7, r4
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	78db      	ldrb	r3, [r3, #3]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d034      	beq.n	80051a2 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7858      	ldrb	r0, [r3, #1]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3334      	adds	r3, #52	; 0x34
 8005146:	0019      	movs	r1, r3
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	2301      	movs	r3, #1
 800514c:	f7ff fd34 	bl	8004bb8 <disk_write>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d003      	beq.n	800515c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8005154:	193b      	adds	r3, r7, r4
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	e022      	b.n	80051a2 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	429a      	cmp	r2, r3
 8005170:	d217      	bcs.n	80051a2 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	789b      	ldrb	r3, [r3, #2]
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	e010      	b.n	800519c <sync_window+0x7c>
					wsect += fs->fsize;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	18d3      	adds	r3, r2, r3
 8005182:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7858      	ldrb	r0, [r3, #1]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3334      	adds	r3, #52	; 0x34
 800518c:	0019      	movs	r1, r3
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	2301      	movs	r3, #1
 8005192:	f7ff fd11 	bl	8004bb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3b01      	subs	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d8eb      	bhi.n	800517a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 80051a2:	230f      	movs	r3, #15
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	781b      	ldrb	r3, [r3, #0]
}
 80051a8:	0018      	movs	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b007      	add	sp, #28
 80051ae:	bd90      	pop	{r4, r7, pc}

080051b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80051b0:	b5b0      	push	{r4, r5, r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80051ba:	250f      	movs	r5, #15
 80051bc:	197b      	adds	r3, r7, r5
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d01f      	beq.n	800520c <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80051cc:	197c      	adds	r4, r7, r5
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff ffa5 	bl	8005120 <sync_window>
 80051d6:	0003      	movs	r3, r0
 80051d8:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80051da:	002c      	movs	r4, r5
 80051dc:	193b      	adds	r3, r7, r4
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d113      	bne.n	800520c <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	7858      	ldrb	r0, [r3, #1]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3334      	adds	r3, #52	; 0x34
 80051ec:	0019      	movs	r1, r3
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	2301      	movs	r3, #1
 80051f2:	f7ff fcb9 	bl	8004b68 <disk_read>
 80051f6:	1e03      	subs	r3, r0, #0
 80051f8:	d005      	beq.n	8005206 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80051fa:	2301      	movs	r3, #1
 80051fc:	425b      	negs	r3, r3
 80051fe:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005200:	193b      	adds	r3, r7, r4
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800520c:	230f      	movs	r3, #15
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	781b      	ldrb	r3, [r3, #0]
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b004      	add	sp, #16
 8005218:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800521c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800521c:	b5b0      	push	{r4, r5, r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005224:	250f      	movs	r5, #15
 8005226:	197c      	adds	r4, r7, r5
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	0018      	movs	r0, r3
 800522c:	f7ff ff78 	bl	8005120 <sync_window>
 8005230:	0003      	movs	r3, r0
 8005232:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005234:	197b      	adds	r3, r7, r5
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d15e      	bne.n	80052fa <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d14d      	bne.n	80052e0 <sync_fs+0xc4>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	791b      	ldrb	r3, [r3, #4]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d149      	bne.n	80052e0 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3334      	adds	r3, #52	; 0x34
 8005250:	0018      	movs	r0, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	899b      	ldrh	r3, [r3, #12]
 8005256:	001a      	movs	r2, r3
 8005258:	2100      	movs	r1, #0
 800525a:	f7ff fda0 	bl	8004d9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3334      	adds	r3, #52	; 0x34
 8005262:	33ff      	adds	r3, #255	; 0xff
 8005264:	33ff      	adds	r3, #255	; 0xff
 8005266:	4a28      	ldr	r2, [pc, #160]	; (8005308 <sync_fs+0xec>)
 8005268:	0011      	movs	r1, r2
 800526a:	0018      	movs	r0, r3
 800526c:	f7ff fd30 	bl	8004cd0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3334      	adds	r3, #52	; 0x34
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <sync_fs+0xf0>)
 8005276:	0011      	movs	r1, r2
 8005278:	0018      	movs	r0, r3
 800527a:	f7ff fd47 	bl	8004d0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3334      	adds	r3, #52	; 0x34
 8005282:	33e5      	adds	r3, #229	; 0xe5
 8005284:	33ff      	adds	r3, #255	; 0xff
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <sync_fs+0xf4>)
 8005288:	0011      	movs	r1, r2
 800528a:	0018      	movs	r0, r3
 800528c:	f7ff fd3e 	bl	8004d0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3334      	adds	r3, #52	; 0x34
 8005294:	33e9      	adds	r3, #233	; 0xe9
 8005296:	33ff      	adds	r3, #255	; 0xff
 8005298:	001a      	movs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	0019      	movs	r1, r3
 80052a0:	0010      	movs	r0, r2
 80052a2:	f7ff fd33 	bl	8004d0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3334      	adds	r3, #52	; 0x34
 80052aa:	33ed      	adds	r3, #237	; 0xed
 80052ac:	33ff      	adds	r3, #255	; 0xff
 80052ae:	001a      	movs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	0019      	movs	r1, r3
 80052b6:	0010      	movs	r0, r2
 80052b8:	f7ff fd28 	bl	8004d0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	7858      	ldrb	r0, [r3, #1]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3334      	adds	r3, #52	; 0x34
 80052ce:	0019      	movs	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d4:	2301      	movs	r3, #1
 80052d6:	f7ff fc6f 	bl	8004bb8 <disk_write>
			fs->fsi_flag = 0;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2200      	movs	r2, #0
 80052e6:	2100      	movs	r1, #0
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7ff fc8d 	bl	8004c08 <disk_ioctl>
 80052ee:	1e03      	subs	r3, r0, #0
 80052f0:	d003      	beq.n	80052fa <sync_fs+0xde>
 80052f2:	230f      	movs	r3, #15
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80052fa:	230f      	movs	r3, #15
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	781b      	ldrb	r3, [r3, #0]
}
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b004      	add	sp, #16
 8005306:	bdb0      	pop	{r4, r5, r7, pc}
 8005308:	0000aa55 	.word	0x0000aa55
 800530c:	41615252 	.word	0x41615252
 8005310:	61417272 	.word	0x61417272

08005314 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	3b02      	subs	r3, #2
 8005322:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	3b02      	subs	r3, #2
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d301      	bcc.n	8005334 <clust2sect+0x20>
 8005330:	2300      	movs	r3, #0
 8005332:	e007      	b.n	8005344 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	895b      	ldrh	r3, [r3, #10]
 8005338:	001a      	movs	r2, r3
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	435a      	muls	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	18d3      	adds	r3, r2, r3
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}

0800534c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d904      	bls.n	800536c <get_fat+0x20>
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <get_fat+0x26>
		val = 1;	/* Internal error */
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e0c2      	b.n	80054f8 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005372:	2301      	movs	r3, #1
 8005374:	425b      	negs	r3, r3
 8005376:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d100      	bne.n	8005382 <get_fat+0x36>
 8005380:	e088      	b.n	8005494 <get_fat+0x148>
 8005382:	dd00      	ble.n	8005386 <get_fat+0x3a>
 8005384:	e0ae      	b.n	80054e4 <get_fat+0x198>
 8005386:	2b01      	cmp	r3, #1
 8005388:	d002      	beq.n	8005390 <get_fat+0x44>
 800538a:	2b02      	cmp	r3, #2
 800538c:	d05c      	beq.n	8005448 <get_fat+0xfc>
 800538e:	e0a9      	b.n	80054e4 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	899b      	ldrh	r3, [r3, #12]
 80053a6:	0019      	movs	r1, r3
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7fa febf 	bl	800012c <__udivsi3>
 80053ae:	0003      	movs	r3, r0
 80053b0:	18e2      	adds	r2, r4, r3
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	0011      	movs	r1, r2
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7ff fefa 	bl	80051b0 <move_window>
 80053bc:	1e03      	subs	r3, r0, #0
 80053be:	d000      	beq.n	80053c2 <get_fat+0x76>
 80053c0:	e093      	b.n	80054ea <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	60fa      	str	r2, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	8992      	ldrh	r2, [r2, #12]
 80053cc:	0011      	movs	r1, r2
 80053ce:	0018      	movs	r0, r3
 80053d0:	f7fa ff32 	bl	8000238 <__aeabi_uidivmod>
 80053d4:	000b      	movs	r3, r1
 80053d6:	0019      	movs	r1, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2234      	movs	r2, #52	; 0x34
 80053dc:	185b      	adds	r3, r3, r1
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	899b      	ldrh	r3, [r3, #12]
 80053ec:	0019      	movs	r1, r3
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fa fe9c 	bl	800012c <__udivsi3>
 80053f4:	0003      	movs	r3, r0
 80053f6:	18e2      	adds	r2, r4, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7ff fed7 	bl	80051b0 <move_window>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d000      	beq.n	8005408 <get_fat+0xbc>
 8005406:	e072      	b.n	80054ee <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	899b      	ldrh	r3, [r3, #12]
 800540c:	001a      	movs	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0011      	movs	r1, r2
 8005412:	0018      	movs	r0, r3
 8005414:	f7fa ff10 	bl	8000238 <__aeabi_uidivmod>
 8005418:	000b      	movs	r3, r1
 800541a:	0019      	movs	r1, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2234      	movs	r2, #52	; 0x34
 8005420:	185b      	adds	r3, r3, r1
 8005422:	189b      	adds	r3, r3, r2
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	001a      	movs	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4313      	orrs	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	4013      	ands	r3, r2
 8005436:	d002      	beq.n	800543e <get_fat+0xf2>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	e002      	b.n	8005444 <get_fat+0xf8>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	051b      	lsls	r3, r3, #20
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	617b      	str	r3, [r7, #20]
			break;
 8005446:	e057      	b.n	80054f8 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	899b      	ldrh	r3, [r3, #12]
 8005450:	085b      	lsrs	r3, r3, #1
 8005452:	b29b      	uxth	r3, r3
 8005454:	0019      	movs	r1, r3
 8005456:	6838      	ldr	r0, [r7, #0]
 8005458:	f7fa fe68 	bl	800012c <__udivsi3>
 800545c:	0003      	movs	r3, r0
 800545e:	18e2      	adds	r2, r4, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	0011      	movs	r1, r2
 8005464:	0018      	movs	r0, r3
 8005466:	f7ff fea3 	bl	80051b0 <move_window>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d141      	bne.n	80054f2 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	3334      	adds	r3, #52	; 0x34
 8005472:	001c      	movs	r4, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	005a      	lsls	r2, r3, #1
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	899b      	ldrh	r3, [r3, #12]
 800547c:	0019      	movs	r1, r3
 800547e:	0010      	movs	r0, r2
 8005480:	f7fa feda 	bl	8000238 <__aeabi_uidivmod>
 8005484:	000b      	movs	r3, r1
 8005486:	18e3      	adds	r3, r4, r3
 8005488:	0018      	movs	r0, r3
 800548a:	f7ff fbe5 	bl	8004c58 <ld_word>
 800548e:	0003      	movs	r3, r0
 8005490:	617b      	str	r3, [r7, #20]
			break;
 8005492:	e031      	b.n	80054f8 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	899b      	ldrh	r3, [r3, #12]
 800549c:	089b      	lsrs	r3, r3, #2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	0019      	movs	r1, r3
 80054a2:	6838      	ldr	r0, [r7, #0]
 80054a4:	f7fa fe42 	bl	800012c <__udivsi3>
 80054a8:	0003      	movs	r3, r0
 80054aa:	18e2      	adds	r2, r4, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	0011      	movs	r1, r2
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7ff fe7d 	bl	80051b0 <move_window>
 80054b6:	1e03      	subs	r3, r0, #0
 80054b8:	d11d      	bne.n	80054f6 <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	3334      	adds	r3, #52	; 0x34
 80054be:	001c      	movs	r4, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	009a      	lsls	r2, r3, #2
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	899b      	ldrh	r3, [r3, #12]
 80054c8:	0019      	movs	r1, r3
 80054ca:	0010      	movs	r0, r2
 80054cc:	f7fa feb4 	bl	8000238 <__aeabi_uidivmod>
 80054d0:	000b      	movs	r3, r1
 80054d2:	18e3      	adds	r3, r4, r3
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7ff fbda 	bl	8004c8e <ld_dword>
 80054da:	0003      	movs	r3, r0
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	617b      	str	r3, [r7, #20]
			break;
 80054e2:	e009      	b.n	80054f8 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80054e4:	2301      	movs	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e006      	b.n	80054f8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	e004      	b.n	80054f8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	e002      	b.n	80054f8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	e000      	b.n	80054f8 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 80054f8:	697b      	ldr	r3, [r7, #20]
}
 80054fa:	0018      	movs	r0, r3
 80054fc:	46bd      	mov	sp, r7
 80054fe:	b007      	add	sp, #28
 8005500:	bd90      	pop	{r4, r7, pc}

08005502 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005502:	b5b0      	push	{r4, r5, r7, lr}
 8005504:	b088      	sub	sp, #32
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800550e:	231f      	movs	r3, #31
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	2202      	movs	r2, #2
 8005514:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d800      	bhi.n	800551e <put_fat+0x1c>
 800551c:	e11a      	b.n	8005754 <put_fat+0x252>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d300      	bcc.n	800552a <put_fat+0x28>
 8005528:	e114      	b.n	8005754 <put_fat+0x252>
		switch (fs->fs_type) {
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b03      	cmp	r3, #3
 8005530:	d100      	bne.n	8005534 <put_fat+0x32>
 8005532:	e0c1      	b.n	80056b8 <put_fat+0x1b6>
 8005534:	dd00      	ble.n	8005538 <put_fat+0x36>
 8005536:	e10d      	b.n	8005754 <put_fat+0x252>
 8005538:	2b01      	cmp	r3, #1
 800553a:	d003      	beq.n	8005544 <put_fat+0x42>
 800553c:	2b02      	cmp	r3, #2
 800553e:	d100      	bne.n	8005542 <put_fat+0x40>
 8005540:	e08a      	b.n	8005658 <put_fat+0x156>
 8005542:	e107      	b.n	8005754 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	18d3      	adds	r3, r2, r3
 8005550:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	899b      	ldrh	r3, [r3, #12]
 800555a:	0019      	movs	r1, r3
 800555c:	69b8      	ldr	r0, [r7, #24]
 800555e:	f7fa fde5 	bl	800012c <__udivsi3>
 8005562:	0003      	movs	r3, r0
 8005564:	18e2      	adds	r2, r4, r3
 8005566:	251f      	movs	r5, #31
 8005568:	197c      	adds	r4, r7, r5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	0011      	movs	r1, r2
 800556e:	0018      	movs	r0, r3
 8005570:	f7ff fe1e 	bl	80051b0 <move_window>
 8005574:	0003      	movs	r3, r0
 8005576:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005578:	197b      	adds	r3, r7, r5
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d000      	beq.n	8005582 <put_fat+0x80>
 8005580:	e0e1      	b.n	8005746 <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	3334      	adds	r3, #52	; 0x34
 8005586:	001c      	movs	r4, r3
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	61ba      	str	r2, [r7, #24]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	8992      	ldrh	r2, [r2, #12]
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f7fa fe4f 	bl	8000238 <__aeabi_uidivmod>
 800559a:	000b      	movs	r3, r1
 800559c:	18e3      	adds	r3, r4, r3
 800559e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2201      	movs	r2, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	d00d      	beq.n	80055c4 <put_fat+0xc2>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	220f      	movs	r2, #15
 80055b0:	4013      	ands	r3, r2
 80055b2:	b25a      	sxtb	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	4313      	orrs	r3, r2
 80055be:	b25b      	sxtb	r3, r3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e001      	b.n	80055c8 <put_fat+0xc6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	899b      	ldrh	r3, [r3, #12]
 80055da:	0019      	movs	r1, r3
 80055dc:	69b8      	ldr	r0, [r7, #24]
 80055de:	f7fa fda5 	bl	800012c <__udivsi3>
 80055e2:	0003      	movs	r3, r0
 80055e4:	18e2      	adds	r2, r4, r3
 80055e6:	251f      	movs	r5, #31
 80055e8:	197c      	adds	r4, r7, r5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	0011      	movs	r1, r2
 80055ee:	0018      	movs	r0, r3
 80055f0:	f7ff fdde 	bl	80051b0 <move_window>
 80055f4:	0003      	movs	r3, r0
 80055f6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80055f8:	197b      	adds	r3, r7, r5
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d000      	beq.n	8005602 <put_fat+0x100>
 8005600:	e0a3      	b.n	800574a <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3334      	adds	r3, #52	; 0x34
 8005606:	001c      	movs	r4, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	899b      	ldrh	r3, [r3, #12]
 800560c:	001a      	movs	r2, r3
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	0011      	movs	r1, r2
 8005612:	0018      	movs	r0, r3
 8005614:	f7fa fe10 	bl	8000238 <__aeabi_uidivmod>
 8005618:	000b      	movs	r3, r1
 800561a:	18e3      	adds	r3, r4, r3
 800561c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2201      	movs	r2, #1
 8005622:	4013      	ands	r3, r2
 8005624:	d003      	beq.n	800562e <put_fat+0x12c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e00e      	b.n	800564c <put_fat+0x14a>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b25b      	sxtb	r3, r3
 8005634:	220f      	movs	r2, #15
 8005636:	4393      	bics	r3, r2
 8005638:	b25a      	sxtb	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	b25b      	sxtb	r3, r3
 8005640:	210f      	movs	r1, #15
 8005642:	400b      	ands	r3, r1
 8005644:	b25b      	sxtb	r3, r3
 8005646:	4313      	orrs	r3, r2
 8005648:	b25b      	sxtb	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	70da      	strb	r2, [r3, #3]
			break;
 8005656:	e07d      	b.n	8005754 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	899b      	ldrh	r3, [r3, #12]
 8005660:	085b      	lsrs	r3, r3, #1
 8005662:	b29b      	uxth	r3, r3
 8005664:	0019      	movs	r1, r3
 8005666:	68b8      	ldr	r0, [r7, #8]
 8005668:	f7fa fd60 	bl	800012c <__udivsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	18e2      	adds	r2, r4, r3
 8005670:	251f      	movs	r5, #31
 8005672:	197c      	adds	r4, r7, r5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	0011      	movs	r1, r2
 8005678:	0018      	movs	r0, r3
 800567a:	f7ff fd99 	bl	80051b0 <move_window>
 800567e:	0003      	movs	r3, r0
 8005680:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005682:	197b      	adds	r3, r7, r5
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d161      	bne.n	800574e <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3334      	adds	r3, #52	; 0x34
 800568e:	001c      	movs	r4, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	005a      	lsls	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	899b      	ldrh	r3, [r3, #12]
 8005698:	0019      	movs	r1, r3
 800569a:	0010      	movs	r0, r2
 800569c:	f7fa fdcc 	bl	8000238 <__aeabi_uidivmod>
 80056a0:	000b      	movs	r3, r1
 80056a2:	18e3      	adds	r3, r4, r3
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	b292      	uxth	r2, r2
 80056a8:	0011      	movs	r1, r2
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7ff fb10 	bl	8004cd0 <st_word>
			fs->wflag = 1;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	70da      	strb	r2, [r3, #3]
			break;
 80056b6:	e04d      	b.n	8005754 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	899b      	ldrh	r3, [r3, #12]
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	0019      	movs	r1, r3
 80056c6:	68b8      	ldr	r0, [r7, #8]
 80056c8:	f7fa fd30 	bl	800012c <__udivsi3>
 80056cc:	0003      	movs	r3, r0
 80056ce:	18e2      	adds	r2, r4, r3
 80056d0:	251f      	movs	r5, #31
 80056d2:	197c      	adds	r4, r7, r5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	0011      	movs	r1, r2
 80056d8:	0018      	movs	r0, r3
 80056da:	f7ff fd69 	bl	80051b0 <move_window>
 80056de:	0003      	movs	r3, r0
 80056e0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80056e2:	197b      	adds	r3, r7, r5
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d133      	bne.n	8005752 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	091c      	lsrs	r4, r3, #4
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3334      	adds	r3, #52	; 0x34
 80056f4:	001d      	movs	r5, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	009a      	lsls	r2, r3, #2
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	899b      	ldrh	r3, [r3, #12]
 80056fe:	0019      	movs	r1, r3
 8005700:	0010      	movs	r0, r2
 8005702:	f7fa fd99 	bl	8000238 <__aeabi_uidivmod>
 8005706:	000b      	movs	r3, r1
 8005708:	18eb      	adds	r3, r5, r3
 800570a:	0018      	movs	r0, r3
 800570c:	f7ff fabf 	bl	8004c8e <ld_dword>
 8005710:	0003      	movs	r3, r0
 8005712:	0f1b      	lsrs	r3, r3, #28
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4323      	orrs	r3, r4
 8005718:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3334      	adds	r3, #52	; 0x34
 800571e:	001c      	movs	r4, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	009a      	lsls	r2, r3, #2
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	899b      	ldrh	r3, [r3, #12]
 8005728:	0019      	movs	r1, r3
 800572a:	0010      	movs	r0, r2
 800572c:	f7fa fd84 	bl	8000238 <__aeabi_uidivmod>
 8005730:	000b      	movs	r3, r1
 8005732:	18e3      	adds	r3, r4, r3
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fae7 	bl	8004d0c <st_dword>
			fs->wflag = 1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	70da      	strb	r2, [r3, #3]
			break;
 8005744:	e006      	b.n	8005754 <put_fat+0x252>
			if (res != FR_OK) break;
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	e004      	b.n	8005754 <put_fat+0x252>
			if (res != FR_OK) break;
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	e002      	b.n	8005754 <put_fat+0x252>
			if (res != FR_OK) break;
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	e000      	b.n	8005754 <put_fat+0x252>
			if (res != FR_OK) break;
 8005752:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8005754:	231f      	movs	r3, #31
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	781b      	ldrb	r3, [r3, #0]
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b008      	add	sp, #32
 8005760:	bdb0      	pop	{r4, r5, r7, pc}

08005762 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005762:	b5b0      	push	{r4, r5, r7, lr}
 8005764:	b088      	sub	sp, #32
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800576e:	231f      	movs	r3, #31
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d904      	bls.n	800578c <remove_chain+0x2a>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d301      	bcc.n	8005790 <remove_chain+0x2e>
 800578c:	2302      	movs	r3, #2
 800578e:	e057      	b.n	8005840 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005796:	251f      	movs	r5, #31
 8005798:	197c      	adds	r4, r7, r5
 800579a:	2301      	movs	r3, #1
 800579c:	425a      	negs	r2, r3
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7ff fead 	bl	8005502 <put_fat>
 80057a8:	0003      	movs	r3, r0
 80057aa:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 80057ac:	197b      	adds	r3, r7, r5
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <remove_chain+0x58>
 80057b4:	197b      	adds	r3, r7, r5
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	e042      	b.n	8005840 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	0011      	movs	r1, r2
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7ff fdc3 	bl	800534c <get_fat>
 80057c6:	0003      	movs	r3, r0
 80057c8:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d035      	beq.n	800583c <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <remove_chain+0x78>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e032      	b.n	8005840 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	3301      	adds	r3, #1
 80057de:	d101      	bne.n	80057e4 <remove_chain+0x82>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e02d      	b.n	8005840 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80057e4:	251f      	movs	r5, #31
 80057e6:	197c      	adds	r4, r7, r5
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2200      	movs	r2, #0
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff fe87 	bl	8005502 <put_fat>
 80057f4:	0003      	movs	r3, r0
 80057f6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80057f8:	197b      	adds	r3, r7, r5
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <remove_chain+0xa4>
 8005800:	197b      	adds	r3, r7, r5
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	e01c      	b.n	8005840 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	3b02      	subs	r3, #2
 8005810:	429a      	cmp	r2, r3
 8005812:	d20b      	bcs.n	800582c <remove_chain+0xca>
			fs->free_clst++;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	791b      	ldrb	r3, [r3, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	4313      	orrs	r3, r2
 8005826:	b2da      	uxtb	r2, r3
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d3bf      	bcc.n	80057ba <remove_chain+0x58>
 800583a:	e000      	b.n	800583e <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800583c:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	0018      	movs	r0, r3
 8005842:	46bd      	mov	sp, r7
 8005844:	b008      	add	sp, #32
 8005846:	bdb0      	pop	{r4, r5, r7, pc}

08005848 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005848:	b5b0      	push	{r4, r5, r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d004      	beq.n	8005874 <create_chain+0x2c>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	429a      	cmp	r2, r3
 8005872:	d31d      	bcc.n	80058b0 <create_chain+0x68>
 8005874:	2301      	movs	r3, #1
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e01a      	b.n	80058b0 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	0011      	movs	r1, r2
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff fd63 	bl	800534c <get_fat>
 8005886:	0003      	movs	r3, r0
 8005888:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d801      	bhi.n	8005894 <create_chain+0x4c>
 8005890:	2301      	movs	r3, #1
 8005892:	e07b      	b.n	800598c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	d101      	bne.n	800589e <create_chain+0x56>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	e076      	b.n	800598c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d201      	bcs.n	80058ac <create_chain+0x64>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	e06f      	b.n	800598c <create_chain+0x144>
		scl = clst;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3301      	adds	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d307      	bcc.n	80058d4 <create_chain+0x8c>
				ncl = 2;
 80058c4:	2302      	movs	r3, #2
 80058c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d901      	bls.n	80058d4 <create_chain+0x8c>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e05b      	b.n	800598c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fd36 	bl	800534c <get_fat>
 80058e0:	0003      	movs	r3, r0
 80058e2:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d002      	beq.n	80058f6 <create_chain+0xae>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	d101      	bne.n	80058fa <create_chain+0xb2>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	e048      	b.n	800598c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d1d8      	bne.n	80058b4 <create_chain+0x6c>
 8005902:	2300      	movs	r3, #0
 8005904:	e042      	b.n	800598c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8005906:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005908:	2517      	movs	r5, #23
 800590a:	197c      	adds	r4, r7, r5
 800590c:	2301      	movs	r3, #1
 800590e:	425a      	negs	r2, r3
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	0018      	movs	r0, r3
 8005916:	f7ff fdf4 	bl	8005502 <put_fat>
 800591a:	0003      	movs	r3, r0
 800591c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800591e:	197b      	adds	r3, r7, r5
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <create_chain+0xf6>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800592c:	197c      	adds	r4, r7, r5
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	0018      	movs	r0, r3
 8005936:	f7ff fde4 	bl	8005502 <put_fat>
 800593a:	0003      	movs	r3, r0
 800593c:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800593e:	2317      	movs	r3, #23
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d116      	bne.n	8005976 <create_chain+0x12e>
		fs->last_clst = ncl;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	3b02      	subs	r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d804      	bhi.n	8005966 <create_chain+0x11e>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	1e5a      	subs	r2, r3, #1
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	791b      	ldrb	r3, [r3, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	4313      	orrs	r3, r2
 800596e:	b2da      	uxtb	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	711a      	strb	r2, [r3, #4]
 8005974:	e009      	b.n	800598a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005976:	2317      	movs	r3, #23
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <create_chain+0x13e>
 8005980:	2301      	movs	r3, #1
 8005982:	425b      	negs	r3, r3
 8005984:	e000      	b.n	8005988 <create_chain+0x140>
 8005986:	2301      	movs	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b008      	add	sp, #32
 8005992:	bdb0      	pop	{r4, r5, r7, pc}

08005994 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	3304      	adds	r3, #4
 80059aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	899b      	ldrh	r3, [r3, #12]
 80059b0:	0019      	movs	r1, r3
 80059b2:	6838      	ldr	r0, [r7, #0]
 80059b4:	f7fa fbba 	bl	800012c <__udivsi3>
 80059b8:	0003      	movs	r3, r0
 80059ba:	001a      	movs	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	895b      	ldrh	r3, [r3, #10]
 80059c0:	0019      	movs	r1, r3
 80059c2:	0010      	movs	r0, r2
 80059c4:	f7fa fbb2 	bl	800012c <__udivsi3>
 80059c8:	0003      	movs	r3, r0
 80059ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1d1a      	adds	r2, r3, #4
 80059d0:	613a      	str	r2, [r7, #16]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <clmt_clust+0x4c>
 80059dc:	2300      	movs	r3, #0
 80059de:	e010      	b.n	8005a02 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d307      	bcc.n	80059f8 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3304      	adds	r3, #4
 80059f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059f6:	e7e9      	b.n	80059cc <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 80059f8:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	18d3      	adds	r3, r2, r3
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b006      	add	sp, #24
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005a0a:	b590      	push	{r4, r7, lr}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	039b      	lsls	r3, r3, #14
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d203      	bcs.n	8005a2c <dir_sdi+0x22>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	221f      	movs	r2, #31
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d001      	beq.n	8005a30 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e074      	b.n	8005b1a <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <dir_sdi+0x46>
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d902      	bls.n	8005a50 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10c      	bne.n	8005a70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	8912      	ldrh	r2, [r2, #8]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d301      	bcc.n	8005a66 <dir_sdi+0x5c>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e059      	b.n	8005b1a <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	61da      	str	r2, [r3, #28]
 8005a6e:	e02f      	b.n	8005ad0 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	895b      	ldrh	r3, [r3, #10]
 8005a74:	001a      	movs	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	899b      	ldrh	r3, [r3, #12]
 8005a7a:	4353      	muls	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a7e:	e01a      	b.n	8005ab6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fc60 	bl	800534c <get_fat>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	3301      	adds	r3, #1
 8005a94:	d101      	bne.n	8005a9a <dir_sdi+0x90>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e03f      	b.n	8005b1a <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d904      	bls.n	8005aaa <dir_sdi+0xa0>
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d301      	bcc.n	8005aae <dir_sdi+0xa4>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e035      	b.n	8005b1a <dir_sdi+0x110>
			ofs -= csz;
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d2e0      	bcs.n	8005a80 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff fc25 	bl	8005314 <clust2sect>
 8005aca:	0002      	movs	r2, r0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <dir_sdi+0xd8>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e01b      	b.n	8005b1a <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69dc      	ldr	r4, [r3, #28]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	899b      	ldrh	r3, [r3, #12]
 8005aea:	0019      	movs	r1, r3
 8005aec:	6838      	ldr	r0, [r7, #0]
 8005aee:	f7fa fb1d 	bl	800012c <__udivsi3>
 8005af2:	0003      	movs	r3, r0
 8005af4:	18e2      	adds	r2, r4, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	3334      	adds	r3, #52	; 0x34
 8005afe:	001c      	movs	r4, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	899b      	ldrh	r3, [r3, #12]
 8005b04:	001a      	movs	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	0011      	movs	r1, r2
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7fa fb94 	bl	8000238 <__aeabi_uidivmod>
 8005b10:	000b      	movs	r3, r1
 8005b12:	18e2      	adds	r2, r4, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b007      	add	sp, #28
 8005b20:	bd90      	pop	{r4, r7, pc}

08005b22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b22:	b590      	push	{r4, r7, lr}
 8005b24:	b087      	sub	sp, #28
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	3320      	adds	r3, #32
 8005b38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <dir_next+0x2a>
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	039b      	lsls	r3, r3, #14
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d301      	bcc.n	8005b50 <dir_next+0x2e>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	e0c0      	b.n	8005cd2 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	899b      	ldrh	r3, [r3, #12]
 8005b54:	001a      	movs	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	0011      	movs	r1, r2
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f7fa fb6c 	bl	8000238 <__aeabi_uidivmod>
 8005b60:	1e0b      	subs	r3, r1, #0
 8005b62:	d000      	beq.n	8005b66 <dir_next+0x44>
 8005b64:	e0a2      	b.n	8005cac <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	8912      	ldrh	r2, [r2, #8]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d200      	bcs.n	8005b86 <dir_next+0x64>
 8005b84:	e092      	b.n	8005cac <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	61da      	str	r2, [r3, #28]
 8005b8c:	2304      	movs	r3, #4
 8005b8e:	e0a0      	b.n	8005cd2 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	899b      	ldrh	r3, [r3, #12]
 8005b94:	0019      	movs	r1, r3
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f7fa fac8 	bl	800012c <__udivsi3>
 8005b9c:	0003      	movs	r3, r0
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	895b      	ldrh	r3, [r3, #10]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d000      	beq.n	8005bac <dir_next+0x8a>
 8005baa:	e07f      	b.n	8005cac <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	0010      	movs	r0, r2
 8005bb6:	f7ff fbc9 	bl	800534c <get_fat>
 8005bba:	0003      	movs	r3, r0
 8005bbc:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d801      	bhi.n	8005bc8 <dir_next+0xa6>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e084      	b.n	8005cd2 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <dir_next+0xb0>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e07f      	b.n	8005cd2 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d35b      	bcc.n	8005c94 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	61da      	str	r2, [r3, #28]
 8005be8:	2304      	movs	r3, #4
 8005bea:	e072      	b.n	8005cd2 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	0010      	movs	r0, r2
 8005bf6:	f7ff fe27 	bl	8005848 <create_chain>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <dir_next+0xe6>
 8005c04:	2307      	movs	r3, #7
 8005c06:	e064      	b.n	8005cd2 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <dir_next+0xf0>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e05f      	b.n	8005cd2 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	3301      	adds	r3, #1
 8005c16:	d101      	bne.n	8005c1c <dir_next+0xfa>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e05a      	b.n	8005cd2 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7ff fa7e 	bl	8005120 <sync_window>
 8005c24:	1e03      	subs	r3, r0, #0
 8005c26:	d001      	beq.n	8005c2c <dir_next+0x10a>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e052      	b.n	8005cd2 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3334      	adds	r3, #52	; 0x34
 8005c30:	0018      	movs	r0, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	899b      	ldrh	r3, [r3, #12]
 8005c36:	001a      	movs	r2, r3
 8005c38:	2100      	movs	r1, #0
 8005c3a:	f7ff f8b0 	bl	8004d9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	0011      	movs	r1, r2
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff fb63 	bl	8005314 <clust2sect>
 8005c4e:	0002      	movs	r2, r0
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
 8005c54:	e012      	b.n	8005c7c <dir_next+0x15a>
						fs->wflag = 1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f7ff fa5e 	bl	8005120 <sync_window>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d001      	beq.n	8005c6c <dir_next+0x14a>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e032      	b.n	8005cd2 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	895b      	ldrh	r3, [r3, #10]
 8005c80:	001a      	movs	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d3e6      	bcc.n	8005c56 <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad2      	subs	r2, r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	0011      	movs	r1, r2
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f7ff fb37 	bl	8005314 <clust2sect>
 8005ca6:	0002      	movs	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3334      	adds	r3, #52	; 0x34
 8005cb6:	001c      	movs	r4, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	899b      	ldrh	r3, [r3, #12]
 8005cbc:	001a      	movs	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	0011      	movs	r1, r2
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f7fa fab8 	bl	8000238 <__aeabi_uidivmod>
 8005cc8:	000b      	movs	r3, r1
 8005cca:	18e2      	adds	r2, r4, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b007      	add	sp, #28
 8005cd8:	bd90      	pop	{r4, r7, pc}

08005cda <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005cda:	b5b0      	push	{r4, r5, r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005cea:	2517      	movs	r5, #23
 8005cec:	197c      	adds	r4, r7, r5
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7ff fe89 	bl	8005a0a <dir_sdi>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005cfc:	197b      	adds	r3, r7, r5
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d133      	bne.n	8005d6c <dir_alloc+0x92>
		n = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	2517      	movs	r5, #23
 8005d0e:	197c      	adds	r4, r7, r5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	0011      	movs	r1, r2
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7ff fa4b 	bl	80051b0 <move_window>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005d1e:	197b      	adds	r3, r7, r5
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d121      	bne.n	8005d6a <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2be5      	cmp	r3, #229	; 0xe5
 8005d2e:	d004      	beq.n	8005d3a <dir_alloc+0x60>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d102      	bne.n	8005d4e <dir_alloc+0x74>
 8005d48:	e010      	b.n	8005d6c <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005d4e:	2517      	movs	r5, #23
 8005d50:	197c      	adds	r4, r7, r5
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2101      	movs	r1, #1
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7ff fee3 	bl	8005b22 <dir_next>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005d60:	197b      	adds	r3, r7, r5
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0cf      	beq.n	8005d08 <dir_alloc+0x2e>
 8005d68:	e000      	b.n	8005d6c <dir_alloc+0x92>
			if (res != FR_OK) break;
 8005d6a:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005d6c:	2217      	movs	r2, #23
 8005d6e:	18bb      	adds	r3, r7, r2
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d102      	bne.n	8005d7c <dir_alloc+0xa2>
 8005d76:	18bb      	adds	r3, r7, r2
 8005d78:	2207      	movs	r2, #7
 8005d7a:	701a      	strb	r2, [r3, #0]
	return res;
 8005d7c:	2317      	movs	r3, #23
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	781b      	ldrb	r3, [r3, #0]
}
 8005d82:	0018      	movs	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b006      	add	sp, #24
 8005d88:	bdb0      	pop	{r4, r5, r7, pc}

08005d8a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	331a      	adds	r3, #26
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7fe ff5d 	bl	8004c58 <ld_word>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d109      	bne.n	8005dbe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	0018      	movs	r0, r3
 8005db0:	f7fe ff52 	bl	8004c58 <ld_word>
 8005db4:	0003      	movs	r3, r0
 8005db6:	041b      	lsls	r3, r3, #16
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b004      	add	sp, #16
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	331a      	adds	r3, #26
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	b292      	uxth	r2, r2
 8005ddc:	0011      	movs	r1, r2
 8005dde:	0018      	movs	r0, r3
 8005de0:	f7fe ff76 	bl	8004cd0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d109      	bne.n	8005e00 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3314      	adds	r3, #20
 8005df0:	001a      	movs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	0019      	movs	r1, r3
 8005dfa:	0010      	movs	r0, r2
 8005dfc:	f7fe ff68 	bl	8004cd0 <st_word>
	}
}
 8005e00:	46c0      	nop			; (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b004      	add	sp, #16
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005e08:	b5b0      	push	{r4, r5, r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e16:	2517      	movs	r5, #23
 8005e18:	197c      	adds	r4, r7, r5
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7ff fdf3 	bl	8005a0a <dir_sdi>
 8005e24:	0003      	movs	r3, r0
 8005e26:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8005e28:	197b      	adds	r3, r7, r5
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <dir_find+0x2e>
 8005e30:	197b      	adds	r3, r7, r5
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	e04c      	b.n	8005ed0 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	2517      	movs	r5, #23
 8005e3c:	197c      	adds	r4, r7, r5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	0011      	movs	r1, r2
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7ff f9b4 	bl	80051b0 <move_window>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8005e4c:	0029      	movs	r1, r5
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d136      	bne.n	8005ec4 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1a      	ldr	r2, [r3, #32]
 8005e5a:	200f      	movs	r0, #15
 8005e5c:	183b      	adds	r3, r7, r0
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e62:	183b      	adds	r3, r7, r0
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <dir_find+0x6a>
 8005e6a:	187b      	adds	r3, r7, r1
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e02b      	b.n	8005eca <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	330b      	adds	r3, #11
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	223f      	movs	r2, #63	; 0x3f
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	330b      	adds	r3, #11
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	001a      	movs	r2, r3
 8005e8e:	2308      	movs	r3, #8
 8005e90:	4013      	ands	r3, r2
 8005e92:	d109      	bne.n	8005ea8 <dir_find+0xa0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a18      	ldr	r0, [r3, #32]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3324      	adds	r3, #36	; 0x24
 8005e9c:	220b      	movs	r2, #11
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	f7fe ff96 	bl	8004dd0 <mem_cmp>
 8005ea4:	1e03      	subs	r3, r0, #0
 8005ea6:	d00f      	beq.n	8005ec8 <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005ea8:	2517      	movs	r5, #23
 8005eaa:	197c      	adds	r4, r7, r5
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2100      	movs	r1, #0
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7ff fe36 	bl	8005b22 <dir_next>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8005eba:	197b      	adds	r3, r7, r5
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0b9      	beq.n	8005e36 <dir_find+0x2e>
 8005ec2:	e002      	b.n	8005eca <dir_find+0xc2>
		if (res != FR_OK) break;
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	e000      	b.n	8005eca <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005ec8:	46c0      	nop			; (mov r8, r8)

	return res;
 8005eca:	2317      	movs	r3, #23
 8005ecc:	18fb      	adds	r3, r7, r3
 8005ece:	781b      	ldrb	r3, [r3, #0]
}
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b006      	add	sp, #24
 8005ed6:	bdb0      	pop	{r4, r5, r7, pc}

08005ed8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005ed8:	b5b0      	push	{r4, r5, r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005ee6:	250f      	movs	r5, #15
 8005ee8:	197c      	adds	r4, r7, r5
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2101      	movs	r1, #1
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f7ff fef3 	bl	8005cda <dir_alloc>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005ef8:	197b      	adds	r3, r7, r5
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d11f      	bne.n	8005f40 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	197c      	adds	r4, r7, r5
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0011      	movs	r1, r2
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7ff f950 	bl	80051b0 <move_window>
 8005f10:	0003      	movs	r3, r0
 8005f12:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005f14:	197b      	adds	r3, r7, r5
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d111      	bne.n	8005f40 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	2220      	movs	r2, #32
 8005f22:	2100      	movs	r1, #0
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fe ff3a 	bl	8004d9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a18      	ldr	r0, [r3, #32]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	220b      	movs	r2, #11
 8005f34:	0019      	movs	r1, r3
 8005f36:	f7fe ff13 	bl	8004d60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005f40:	230f      	movs	r3, #15
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	781b      	ldrb	r3, [r3, #0]
}
 8005f46:	0018      	movs	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b004      	add	sp, #16
 8005f4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f50 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3324      	adds	r3, #36	; 0x24
 8005f64:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	220b      	movs	r2, #11
 8005f6a:	2120      	movs	r1, #32
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7fe ff16 	bl	8004d9e <mem_set>
	si = i = 0; ni = 8;
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	61fa      	str	r2, [r7, #28]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	18d2      	adds	r2, r2, r3
 8005f88:	211b      	movs	r1, #27
 8005f8a:	187b      	adds	r3, r7, r1
 8005f8c:	7812      	ldrb	r2, [r2, #0]
 8005f8e:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f90:	000a      	movs	r2, r1
 8005f92:	18bb      	adds	r3, r7, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d800      	bhi.n	8005f9c <create_name+0x4c>
 8005f9a:	e062      	b.n	8006062 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005f9c:	18bb      	adds	r3, r7, r2
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b2f      	cmp	r3, #47	; 0x2f
 8005fa2:	d007      	beq.n	8005fb4 <create_name+0x64>
 8005fa4:	18bb      	adds	r3, r7, r2
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b5c      	cmp	r3, #92	; 0x5c
 8005faa:	d110      	bne.n	8005fce <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005fac:	e002      	b.n	8005fb4 <create_name+0x64>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	18d3      	adds	r3, r2, r3
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b2f      	cmp	r3, #47	; 0x2f
 8005fbe:	d0f6      	beq.n	8005fae <create_name+0x5e>
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b5c      	cmp	r3, #92	; 0x5c
 8005fca:	d0f0      	beq.n	8005fae <create_name+0x5e>
			break;
 8005fcc:	e04a      	b.n	8006064 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005fce:	231b      	movs	r3, #27
 8005fd0:	18fb      	adds	r3, r7, r3
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fd6:	d003      	beq.n	8005fe0 <create_name+0x90>
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d30e      	bcc.n	8005ffe <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b0b      	cmp	r3, #11
 8005fe4:	d004      	beq.n	8005ff0 <create_name+0xa0>
 8005fe6:	231b      	movs	r3, #27
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b2e      	cmp	r3, #46	; 0x2e
 8005fee:	d001      	beq.n	8005ff4 <create_name+0xa4>
 8005ff0:	2306      	movs	r3, #6
 8005ff2:	e054      	b.n	800609e <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	613b      	str	r3, [r7, #16]
 8005ff8:	230b      	movs	r3, #11
 8005ffa:	617b      	str	r3, [r7, #20]
			continue;
 8005ffc:	e030      	b.n	8006060 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005ffe:	211b      	movs	r1, #27
 8006000:	187b      	adds	r3, r7, r1
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	b25b      	sxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	da07      	bge.n	800601a <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800600a:	187b      	adds	r3, r7, r1
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	3b80      	subs	r3, #128	; 0x80
 8006010:	001a      	movs	r2, r3
 8006012:	187b      	adds	r3, r7, r1
 8006014:	4924      	ldr	r1, [pc, #144]	; (80060a8 <create_name+0x158>)
 8006016:	5c8a      	ldrb	r2, [r1, r2]
 8006018:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800601a:	231b      	movs	r3, #27
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	4b22      	ldr	r3, [pc, #136]	; (80060ac <create_name+0x15c>)
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f7fe fef8 	bl	8004e1a <chk_chr>
 800602a:	1e03      	subs	r3, r0, #0
 800602c:	d001      	beq.n	8006032 <create_name+0xe2>
 800602e:	2306      	movs	r3, #6
 8006030:	e035      	b.n	800609e <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006032:	221b      	movs	r2, #27
 8006034:	18bb      	adds	r3, r7, r2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b60      	cmp	r3, #96	; 0x60
 800603a:	d908      	bls.n	800604e <create_name+0xfe>
 800603c:	18bb      	adds	r3, r7, r2
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b7a      	cmp	r3, #122	; 0x7a
 8006042:	d804      	bhi.n	800604e <create_name+0xfe>
 8006044:	18bb      	adds	r3, r7, r2
 8006046:	18ba      	adds	r2, r7, r2
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	3a20      	subs	r2, #32
 800604c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	613a      	str	r2, [r7, #16]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	18d3      	adds	r3, r2, r3
 8006058:	221b      	movs	r2, #27
 800605a:	18ba      	adds	r2, r7, r2
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006060:	e78d      	b.n	8005f7e <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006062:	46c0      	nop			; (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	18d2      	adds	r2, r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <create_name+0x128>
 8006074:	2306      	movs	r3, #6
 8006076:	e012      	b.n	800609e <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2be5      	cmp	r3, #229	; 0xe5
 800607e:	d102      	bne.n	8006086 <create_name+0x136>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2205      	movs	r2, #5
 8006084:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006086:	231b      	movs	r3, #27
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b20      	cmp	r3, #32
 800608e:	d801      	bhi.n	8006094 <create_name+0x144>
 8006090:	2204      	movs	r2, #4
 8006092:	e000      	b.n	8006096 <create_name+0x146>
 8006094:	2200      	movs	r2, #0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	330b      	adds	r3, #11
 800609a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800609c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800609e:	0018      	movs	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b008      	add	sp, #32
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	0800a114 	.word	0x0800a114
 80060ac:	08009f34 	.word	0x08009f34

080060b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80060b0:	b5b0      	push	{r4, r5, r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80060c4:	e002      	b.n	80060cc <follow_path+0x1c>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b2f      	cmp	r3, #47	; 0x2f
 80060d2:	d0f8      	beq.n	80060c6 <follow_path+0x16>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b5c      	cmp	r3, #92	; 0x5c
 80060da:	d0f4      	beq.n	80060c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2200      	movs	r2, #0
 80060e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b1f      	cmp	r3, #31
 80060e8:	d80d      	bhi.n	8006106 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	222f      	movs	r2, #47	; 0x2f
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80060f2:	2317      	movs	r3, #23
 80060f4:	18fc      	adds	r4, r7, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2100      	movs	r1, #0
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff fc85 	bl	8005a0a <dir_sdi>
 8006100:	0003      	movs	r3, r0
 8006102:	7023      	strb	r3, [r4, #0]
 8006104:	e057      	b.n	80061b6 <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006106:	2517      	movs	r5, #23
 8006108:	197c      	adds	r4, r7, r5
 800610a:	003a      	movs	r2, r7
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	0011      	movs	r1, r2
 8006110:	0018      	movs	r0, r3
 8006112:	f7ff ff1d 	bl	8005f50 <create_name>
 8006116:	0003      	movs	r3, r0
 8006118:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800611a:	197b      	adds	r3, r7, r5
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d144      	bne.n	80061ac <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006122:	197c      	adds	r4, r7, r5
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0018      	movs	r0, r3
 8006128:	f7ff fe6e 	bl	8005e08 <dir_find>
 800612c:	0003      	movs	r3, r0
 800612e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8006130:	200b      	movs	r0, #11
 8006132:	183b      	adds	r3, r7, r0
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	212f      	movs	r1, #47	; 0x2f
 8006138:	5c52      	ldrb	r2, [r2, r1]
 800613a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800613c:	197b      	adds	r3, r7, r5
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00c      	beq.n	800615e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006144:	197b      	adds	r3, r7, r5
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b04      	cmp	r3, #4
 800614a:	d131      	bne.n	80061b0 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800614c:	183b      	adds	r3, r7, r0
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2204      	movs	r2, #4
 8006152:	4013      	ands	r3, r2
 8006154:	d12c      	bne.n	80061b0 <follow_path+0x100>
 8006156:	197b      	adds	r3, r7, r5
 8006158:	2205      	movs	r2, #5
 800615a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800615c:	e028      	b.n	80061b0 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800615e:	230b      	movs	r3, #11
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2204      	movs	r2, #4
 8006166:	4013      	ands	r3, r2
 8006168:	d124      	bne.n	80061b4 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	799b      	ldrb	r3, [r3, #6]
 800616e:	001a      	movs	r2, r3
 8006170:	2310      	movs	r3, #16
 8006172:	4013      	ands	r3, r2
 8006174:	d104      	bne.n	8006180 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8006176:	2317      	movs	r3, #23
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2205      	movs	r2, #5
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e01a      	b.n	80061b6 <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3334      	adds	r3, #52	; 0x34
 8006184:	001c      	movs	r4, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	899b      	ldrh	r3, [r3, #12]
 800618e:	0019      	movs	r1, r3
 8006190:	0010      	movs	r0, r2
 8006192:	f7fa f851 	bl	8000238 <__aeabi_uidivmod>
 8006196:	000b      	movs	r3, r1
 8006198:	18e2      	adds	r2, r4, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	0011      	movs	r1, r2
 800619e:	0018      	movs	r0, r3
 80061a0:	f7ff fdf3 	bl	8005d8a <ld_clust>
 80061a4:	0002      	movs	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061aa:	e7ac      	b.n	8006106 <follow_path+0x56>
			if (res != FR_OK) break;
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	e002      	b.n	80061b6 <follow_path+0x106>
				break;
 80061b0:	46c0      	nop			; (mov r8, r8)
 80061b2:	e000      	b.n	80061b6 <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80061b4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 80061b6:	2317      	movs	r3, #23
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	781b      	ldrb	r3, [r3, #0]
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b006      	add	sp, #24
 80061c2:	bdb0      	pop	{r4, r5, r7, pc}

080061c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80061cc:	2301      	movs	r3, #1
 80061ce:	425b      	negs	r3, r3
 80061d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d031      	beq.n	800623e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	e002      	b.n	80061e8 <get_ldnumber+0x24>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	3301      	adds	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d903      	bls.n	80061f8 <get_ldnumber+0x34>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b3a      	cmp	r3, #58	; 0x3a
 80061f6:	d1f4      	bne.n	80061e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b3a      	cmp	r3, #58	; 0x3a
 80061fe:	d11c      	bne.n	800623a <get_ldnumber+0x76>
			tp = *path;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	60fa      	str	r2, [r7, #12]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	3b30      	subs	r3, #48	; 0x30
 8006210:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b09      	cmp	r3, #9
 8006216:	d80e      	bhi.n	8006236 <get_ldnumber+0x72>
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	429a      	cmp	r2, r3
 800621e:	d10a      	bne.n	8006236 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d807      	bhi.n	8006236 <get_ldnumber+0x72>
					vol = (int)i;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	3301      	adds	r3, #1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	e002      	b.n	8006240 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800623e:	693b      	ldr	r3, [r7, #16]
}
 8006240:	0018      	movs	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	b006      	add	sp, #24
 8006246:	bd80      	pop	{r7, pc}

08006248 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	70da      	strb	r2, [r3, #3]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	4252      	negs	r2, r2
 800625e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0011      	movs	r1, r2
 8006266:	0018      	movs	r0, r3
 8006268:	f7fe ffa2 	bl	80051b0 <move_window>
 800626c:	1e03      	subs	r3, r0, #0
 800626e:	d001      	beq.n	8006274 <check_fs+0x2c>
 8006270:	2304      	movs	r3, #4
 8006272:	e037      	b.n	80062e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3334      	adds	r3, #52	; 0x34
 8006278:	33ff      	adds	r3, #255	; 0xff
 800627a:	33ff      	adds	r3, #255	; 0xff
 800627c:	0018      	movs	r0, r3
 800627e:	f7fe fceb 	bl	8004c58 <ld_word>
 8006282:	0003      	movs	r3, r0
 8006284:	001a      	movs	r2, r3
 8006286:	4b19      	ldr	r3, [pc, #100]	; (80062ec <check_fs+0xa4>)
 8006288:	429a      	cmp	r2, r3
 800628a:	d001      	beq.n	8006290 <check_fs+0x48>
 800628c:	2303      	movs	r3, #3
 800628e:	e029      	b.n	80062e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2234      	movs	r2, #52	; 0x34
 8006294:	5c9b      	ldrb	r3, [r3, r2]
 8006296:	2be9      	cmp	r3, #233	; 0xe9
 8006298:	d009      	beq.n	80062ae <check_fs+0x66>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2234      	movs	r2, #52	; 0x34
 800629e:	5c9b      	ldrb	r3, [r3, r2]
 80062a0:	2beb      	cmp	r3, #235	; 0xeb
 80062a2:	d11e      	bne.n	80062e2 <check_fs+0x9a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2236      	movs	r2, #54	; 0x36
 80062a8:	5c9b      	ldrb	r3, [r3, r2]
 80062aa:	2b90      	cmp	r3, #144	; 0x90
 80062ac:	d119      	bne.n	80062e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3334      	adds	r3, #52	; 0x34
 80062b2:	3336      	adds	r3, #54	; 0x36
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7fe fcea 	bl	8004c8e <ld_dword>
 80062ba:	0003      	movs	r3, r0
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	4a0b      	ldr	r2, [pc, #44]	; (80062f0 <check_fs+0xa8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d101      	bne.n	80062ca <check_fs+0x82>
 80062c6:	2300      	movs	r3, #0
 80062c8:	e00c      	b.n	80062e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3334      	adds	r3, #52	; 0x34
 80062ce:	3352      	adds	r3, #82	; 0x52
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fe fcdc 	bl	8004c8e <ld_dword>
 80062d6:	0003      	movs	r3, r0
 80062d8:	4a06      	ldr	r2, [pc, #24]	; (80062f4 <check_fs+0xac>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d101      	bne.n	80062e2 <check_fs+0x9a>
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80062e2:	2302      	movs	r3, #2
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b002      	add	sp, #8
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	0000aa55 	.word	0x0000aa55
 80062f0:	00544146 	.word	0x00544146
 80062f4:	33544146 	.word	0x33544146

080062f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80062f8:	b5b0      	push	{r4, r5, r7, lr}
 80062fa:	b096      	sub	sp, #88	; 0x58
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	1dfb      	adds	r3, r7, #7
 8006304:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	0018      	movs	r0, r3
 8006310:	f7ff ff58 	bl	80061c4 <get_ldnumber>
 8006314:	0003      	movs	r3, r0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631a:	2b00      	cmp	r3, #0
 800631c:	da01      	bge.n	8006322 <find_volume+0x2a>
 800631e:	230b      	movs	r3, #11
 8006320:	e280      	b.n	8006824 <find_volume+0x52c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006322:	4bc2      	ldr	r3, [pc, #776]	; (800662c <find_volume+0x334>)
 8006324:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006326:	0092      	lsls	r2, r2, #2
 8006328:	58d3      	ldr	r3, [r2, r3]
 800632a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800632c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <find_volume+0x3e>
 8006332:	230c      	movs	r3, #12
 8006334:	e276      	b.n	8006824 <find_volume+0x52c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800633a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800633c:	1dfb      	adds	r3, r7, #7
 800633e:	1dfa      	adds	r2, r7, #7
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	2101      	movs	r1, #1
 8006344:	438a      	bics	r2, r1
 8006346:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01b      	beq.n	8006388 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2537      	movs	r5, #55	; 0x37
 8006356:	197c      	adds	r4, r7, r5
 8006358:	0018      	movs	r0, r3
 800635a:	f7fe fbb3 	bl	8004ac4 <disk_status>
 800635e:	0003      	movs	r3, r0
 8006360:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006362:	0029      	movs	r1, r5
 8006364:	187b      	adds	r3, r7, r1
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	4013      	ands	r3, r2
 800636c:	d10c      	bne.n	8006388 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800636e:	1dfb      	adds	r3, r7, #7
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d006      	beq.n	8006384 <find_volume+0x8c>
 8006376:	187b      	adds	r3, r7, r1
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2204      	movs	r2, #4
 800637c:	4013      	ands	r3, r2
 800637e:	d001      	beq.n	8006384 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8006380:	230a      	movs	r3, #10
 8006382:	e24f      	b.n	8006824 <find_volume+0x52c>
			}
			return FR_OK;				/* The file system object is valid */
 8006384:	2300      	movs	r3, #0
 8006386:	e24d      	b.n	8006824 <find_volume+0x52c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006390:	b2da      	uxtb	r2, r3
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2537      	movs	r5, #55	; 0x37
 800639c:	197c      	adds	r4, r7, r5
 800639e:	0018      	movs	r0, r3
 80063a0:	f7fe fbb2 	bl	8004b08 <disk_initialize>
 80063a4:	0003      	movs	r3, r0
 80063a6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80063a8:	197b      	adds	r3, r7, r5
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2201      	movs	r2, #1
 80063ae:	4013      	ands	r3, r2
 80063b0:	d001      	beq.n	80063b6 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80063b2:	2303      	movs	r3, #3
 80063b4:	e236      	b.n	8006824 <find_volume+0x52c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80063b6:	1dfb      	adds	r3, r7, #7
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <find_volume+0xd6>
 80063be:	2337      	movs	r3, #55	; 0x37
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2204      	movs	r2, #4
 80063c6:	4013      	ands	r3, r2
 80063c8:	d001      	beq.n	80063ce <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 80063ca:	230a      	movs	r3, #10
 80063cc:	e22a      	b.n	8006824 <find_volume+0x52c>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	7858      	ldrb	r0, [r3, #1]
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	330c      	adds	r3, #12
 80063d6:	001a      	movs	r2, r3
 80063d8:	2102      	movs	r1, #2
 80063da:	f7fe fc15 	bl	8004c08 <disk_ioctl>
 80063de:	1e03      	subs	r3, r0, #0
 80063e0:	d001      	beq.n	80063e6 <find_volume+0xee>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e21e      	b.n	8006824 <find_volume+0x52c>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	899a      	ldrh	r2, [r3, #12]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d80d      	bhi.n	800640e <find_volume+0x116>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	899a      	ldrh	r2, [r3, #12]
 80063f6:	2380      	movs	r3, #128	; 0x80
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d307      	bcc.n	800640e <find_volume+0x116>
 80063fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006400:	899b      	ldrh	r3, [r3, #12]
 8006402:	001a      	movs	r2, r3
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	899b      	ldrh	r3, [r3, #12]
 8006408:	3b01      	subs	r3, #1
 800640a:	4013      	ands	r3, r2
 800640c:	d001      	beq.n	8006412 <find_volume+0x11a>
 800640e:	2301      	movs	r3, #1
 8006410:	e208      	b.n	8006824 <find_volume+0x52c>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006416:	2557      	movs	r5, #87	; 0x57
 8006418:	197c      	adds	r4, r7, r5
 800641a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	0011      	movs	r1, r2
 8006420:	0018      	movs	r0, r3
 8006422:	f7ff ff11 	bl	8006248 <check_fs>
 8006426:	0003      	movs	r3, r0
 8006428:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800642a:	197b      	adds	r3, r7, r5
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d14b      	bne.n	80064ca <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006432:	2300      	movs	r3, #0
 8006434:	643b      	str	r3, [r7, #64]	; 0x40
 8006436:	e01d      	b.n	8006474 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	3334      	adds	r3, #52	; 0x34
 800643c:	001a      	movs	r2, r3
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	33bf      	adds	r3, #191	; 0xbf
 8006444:	33ff      	adds	r3, #255	; 0xff
 8006446:	18d3      	adds	r3, r2, r3
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	3304      	adds	r3, #4
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <find_volume+0x16a>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	3308      	adds	r3, #8
 8006458:	0018      	movs	r0, r3
 800645a:	f7fe fc18 	bl	8004c8e <ld_dword>
 800645e:	0003      	movs	r3, r0
 8006460:	e000      	b.n	8006464 <find_volume+0x16c>
 8006462:	2300      	movs	r3, #0
 8006464:	2214      	movs	r2, #20
 8006466:	18ba      	adds	r2, r7, r2
 8006468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800646a:	0089      	lsls	r1, r1, #2
 800646c:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800646e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006470:	3301      	adds	r3, #1
 8006472:	643b      	str	r3, [r7, #64]	; 0x40
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	2b03      	cmp	r3, #3
 8006478:	d9de      	bls.n	8006438 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800647a:	2300      	movs	r3, #0
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800647e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <find_volume+0x192>
 8006484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006486:	3b01      	subs	r3, #1
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800648a:	2314      	movs	r3, #20
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	58d3      	ldr	r3, [r2, r3]
 8006494:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <find_volume+0x1b6>
 800649c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	0011      	movs	r1, r2
 80064a2:	0018      	movs	r0, r3
 80064a4:	f7ff fed0 	bl	8006248 <check_fs>
 80064a8:	0003      	movs	r3, r0
 80064aa:	001a      	movs	r2, r3
 80064ac:	e000      	b.n	80064b0 <find_volume+0x1b8>
 80064ae:	2203      	movs	r2, #3
 80064b0:	2157      	movs	r1, #87	; 0x57
 80064b2:	187b      	adds	r3, r7, r1
 80064b4:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80064b6:	187b      	adds	r3, r7, r1
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d905      	bls.n	80064ca <find_volume+0x1d2>
 80064be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c0:	3301      	adds	r3, #1
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d9df      	bls.n	800648a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80064ca:	2357      	movs	r3, #87	; 0x57
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d101      	bne.n	80064d8 <find_volume+0x1e0>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e1a5      	b.n	8006824 <find_volume+0x52c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80064d8:	2357      	movs	r3, #87	; 0x57
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d901      	bls.n	80064e6 <find_volume+0x1ee>
 80064e2:	230d      	movs	r3, #13
 80064e4:	e19e      	b.n	8006824 <find_volume+0x52c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	3334      	adds	r3, #52	; 0x34
 80064ea:	330b      	adds	r3, #11
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7fe fbb3 	bl	8004c58 <ld_word>
 80064f2:	0003      	movs	r3, r0
 80064f4:	001a      	movs	r2, r3
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	899b      	ldrh	r3, [r3, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d001      	beq.n	8006502 <find_volume+0x20a>
 80064fe:	230d      	movs	r3, #13
 8006500:	e190      	b.n	8006824 <find_volume+0x52c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	3334      	adds	r3, #52	; 0x34
 8006506:	3316      	adds	r3, #22
 8006508:	0018      	movs	r0, r3
 800650a:	f7fe fba5 	bl	8004c58 <ld_word>
 800650e:	0003      	movs	r3, r0
 8006510:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <find_volume+0x230>
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	3334      	adds	r3, #52	; 0x34
 800651c:	3324      	adds	r3, #36	; 0x24
 800651e:	0018      	movs	r0, r3
 8006520:	f7fe fbb5 	bl	8004c8e <ld_dword>
 8006524:	0003      	movs	r3, r0
 8006526:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	2244      	movs	r2, #68	; 0x44
 8006532:	5c9a      	ldrb	r2, [r3, r2]
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	789b      	ldrb	r3, [r3, #2]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d005      	beq.n	800654c <find_volume+0x254>
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	789b      	ldrb	r3, [r3, #2]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d001      	beq.n	800654c <find_volume+0x254>
 8006548:	230d      	movs	r3, #13
 800654a:	e16b      	b.n	8006824 <find_volume+0x52c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	001a      	movs	r2, r3
 8006552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006554:	4353      	muls	r3, r2
 8006556:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2241      	movs	r2, #65	; 0x41
 800655c:	5c9b      	ldrb	r3, [r3, r2]
 800655e:	b29a      	uxth	r2, r3
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006566:	895b      	ldrh	r3, [r3, #10]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <find_volume+0x284>
 800656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656e:	895b      	ldrh	r3, [r3, #10]
 8006570:	001a      	movs	r2, r3
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	895b      	ldrh	r3, [r3, #10]
 8006576:	3b01      	subs	r3, #1
 8006578:	4013      	ands	r3, r2
 800657a:	d001      	beq.n	8006580 <find_volume+0x288>
 800657c:	230d      	movs	r3, #13
 800657e:	e151      	b.n	8006824 <find_volume+0x52c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	3334      	adds	r3, #52	; 0x34
 8006584:	3311      	adds	r3, #17
 8006586:	0018      	movs	r0, r3
 8006588:	f7fe fb66 	bl	8004c58 <ld_word>
 800658c:	0003      	movs	r3, r0
 800658e:	001a      	movs	r2, r3
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	891a      	ldrh	r2, [r3, #8]
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	899b      	ldrh	r3, [r3, #12]
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	b29b      	uxth	r3, r3
 80065a0:	0019      	movs	r1, r3
 80065a2:	0010      	movs	r0, r2
 80065a4:	f7f9 fe48 	bl	8000238 <__aeabi_uidivmod>
 80065a8:	000b      	movs	r3, r1
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <find_volume+0x2bc>
 80065b0:	230d      	movs	r3, #13
 80065b2:	e137      	b.n	8006824 <find_volume+0x52c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	3334      	adds	r3, #52	; 0x34
 80065b8:	3313      	adds	r3, #19
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fe fb4c 	bl	8004c58 <ld_word>
 80065c0:	0003      	movs	r3, r0
 80065c2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80065c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <find_volume+0x2e2>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	3334      	adds	r3, #52	; 0x34
 80065ce:	3320      	adds	r3, #32
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7fe fb5c 	bl	8004c8e <ld_dword>
 80065d6:	0003      	movs	r3, r0
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	3334      	adds	r3, #52	; 0x34
 80065de:	330e      	adds	r3, #14
 80065e0:	252e      	movs	r5, #46	; 0x2e
 80065e2:	197c      	adds	r4, r7, r5
 80065e4:	0018      	movs	r0, r3
 80065e6:	f7fe fb37 	bl	8004c58 <ld_word>
 80065ea:	0003      	movs	r3, r0
 80065ec:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80065ee:	197b      	adds	r3, r7, r5
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <find_volume+0x302>
 80065f6:	230d      	movs	r3, #13
 80065f8:	e114      	b.n	8006824 <find_volume+0x52c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80065fa:	232e      	movs	r3, #46	; 0x2e
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	881a      	ldrh	r2, [r3, #0]
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	18d4      	adds	r4, r2, r3
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	891a      	ldrh	r2, [r3, #8]
 8006608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660a:	899b      	ldrh	r3, [r3, #12]
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	b29b      	uxth	r3, r3
 8006610:	0019      	movs	r1, r3
 8006612:	0010      	movs	r0, r2
 8006614:	f7f9 fd8a 	bl	800012c <__udivsi3>
 8006618:	0003      	movs	r3, r0
 800661a:	b29b      	uxth	r3, r3
 800661c:	18e3      	adds	r3, r4, r3
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	429a      	cmp	r2, r3
 8006626:	d203      	bcs.n	8006630 <find_volume+0x338>
 8006628:	230d      	movs	r3, #13
 800662a:	e0fb      	b.n	8006824 <find_volume+0x52c>
 800662c:	20000290 	.word	0x20000290
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	895b      	ldrh	r3, [r3, #10]
 800663a:	0019      	movs	r1, r3
 800663c:	0010      	movs	r0, r2
 800663e:	f7f9 fd75 	bl	800012c <__udivsi3>
 8006642:	0003      	movs	r3, r0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <find_volume+0x358>
 800664c:	230d      	movs	r3, #13
 800664e:	e0e9      	b.n	8006824 <find_volume+0x52c>
		fmt = FS_FAT32;
 8006650:	2157      	movs	r1, #87	; 0x57
 8006652:	187b      	adds	r3, r7, r1
 8006654:	2203      	movs	r2, #3
 8006656:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	4a74      	ldr	r2, [pc, #464]	; (800682c <find_volume+0x534>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d802      	bhi.n	8006666 <find_volume+0x36e>
 8006660:	187b      	adds	r3, r7, r1
 8006662:	2202      	movs	r2, #2
 8006664:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	4a71      	ldr	r2, [pc, #452]	; (8006830 <find_volume+0x538>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d803      	bhi.n	8006676 <find_volume+0x37e>
 800666e:	2357      	movs	r3, #87	; 0x57
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	1c9a      	adds	r2, r3, #2
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006682:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006684:	232e      	movs	r3, #46	; 0x2e
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	881a      	ldrh	r2, [r3, #0]
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	18d2      	adds	r2, r2, r3
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	18d2      	adds	r2, r2, r3
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800669c:	2357      	movs	r3, #87	; 0x57
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d11d      	bne.n	80066e2 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	3334      	adds	r3, #52	; 0x34
 80066aa:	332a      	adds	r3, #42	; 0x2a
 80066ac:	0018      	movs	r0, r3
 80066ae:	f7fe fad3 	bl	8004c58 <ld_word>
 80066b2:	1e03      	subs	r3, r0, #0
 80066b4:	d001      	beq.n	80066ba <find_volume+0x3c2>
 80066b6:	230d      	movs	r3, #13
 80066b8:	e0b4      	b.n	8006824 <find_volume+0x52c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	891b      	ldrh	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <find_volume+0x3ce>
 80066c2:	230d      	movs	r3, #13
 80066c4:	e0ae      	b.n	8006824 <find_volume+0x52c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	3334      	adds	r3, #52	; 0x34
 80066ca:	332c      	adds	r3, #44	; 0x2c
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7fe fade 	bl	8004c8e <ld_dword>
 80066d2:	0002      	movs	r2, r0
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80066d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	647b      	str	r3, [r7, #68]	; 0x44
 80066e0:	e020      	b.n	8006724 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	891b      	ldrh	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <find_volume+0x3f6>
 80066ea:	230d      	movs	r3, #13
 80066ec:	e09a      	b.n	8006824 <find_volume+0x52c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f4:	18d2      	adds	r2, r2, r3
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80066fa:	2357      	movs	r3, #87	; 0x57
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d103      	bne.n	800670c <find_volume+0x414>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	e00a      	b.n	8006722 <find_volume+0x42a>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	0013      	movs	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	189b      	adds	r3, r3, r2
 8006716:	085a      	lsrs	r2, r3, #1
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2101      	movs	r1, #1
 800671e:	400b      	ands	r3, r1
 8006720:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006722:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	69dc      	ldr	r4, [r3, #28]
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	899b      	ldrh	r3, [r3, #12]
 800672c:	001a      	movs	r2, r3
 800672e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006730:	18d3      	adds	r3, r2, r3
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	899b      	ldrh	r3, [r3, #12]
 8006738:	0019      	movs	r1, r3
 800673a:	0010      	movs	r0, r2
 800673c:	f7f9 fcf6 	bl	800012c <__udivsi3>
 8006740:	0003      	movs	r3, r0
 8006742:	429c      	cmp	r4, r3
 8006744:	d201      	bcs.n	800674a <find_volume+0x452>
 8006746:	230d      	movs	r3, #13
 8006748:	e06c      	b.n	8006824 <find_volume+0x52c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2201      	movs	r2, #1
 800674e:	4252      	negs	r2, r2
 8006750:	615a      	str	r2, [r3, #20]
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	2280      	movs	r2, #128	; 0x80
 800675e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006760:	2357      	movs	r3, #87	; 0x57
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d148      	bne.n	80067fc <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	3334      	adds	r3, #52	; 0x34
 800676e:	3330      	adds	r3, #48	; 0x30
 8006770:	0018      	movs	r0, r3
 8006772:	f7fe fa71 	bl	8004c58 <ld_word>
 8006776:	0003      	movs	r3, r0
 8006778:	2b01      	cmp	r3, #1
 800677a:	d13f      	bne.n	80067fc <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 800677c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	0011      	movs	r1, r2
 8006784:	0018      	movs	r0, r3
 8006786:	f7fe fd13 	bl	80051b0 <move_window>
 800678a:	1e03      	subs	r3, r0, #0
 800678c:	d136      	bne.n	80067fc <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	2200      	movs	r2, #0
 8006792:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	3334      	adds	r3, #52	; 0x34
 8006798:	33ff      	adds	r3, #255	; 0xff
 800679a:	33ff      	adds	r3, #255	; 0xff
 800679c:	0018      	movs	r0, r3
 800679e:	f7fe fa5b 	bl	8004c58 <ld_word>
 80067a2:	0003      	movs	r3, r0
 80067a4:	001a      	movs	r2, r3
 80067a6:	4b23      	ldr	r3, [pc, #140]	; (8006834 <find_volume+0x53c>)
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d127      	bne.n	80067fc <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80067ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ae:	3334      	adds	r3, #52	; 0x34
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fe fa6c 	bl	8004c8e <ld_dword>
 80067b6:	0003      	movs	r3, r0
 80067b8:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <find_volume+0x540>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d11e      	bne.n	80067fc <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	3334      	adds	r3, #52	; 0x34
 80067c2:	33e5      	adds	r3, #229	; 0xe5
 80067c4:	33ff      	adds	r3, #255	; 0xff
 80067c6:	0018      	movs	r0, r3
 80067c8:	f7fe fa61 	bl	8004c8e <ld_dword>
 80067cc:	0003      	movs	r3, r0
 80067ce:	4a1b      	ldr	r2, [pc, #108]	; (800683c <find_volume+0x544>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d113      	bne.n	80067fc <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	3334      	adds	r3, #52	; 0x34
 80067d8:	33e9      	adds	r3, #233	; 0xe9
 80067da:	33ff      	adds	r3, #255	; 0xff
 80067dc:	0018      	movs	r0, r3
 80067de:	f7fe fa56 	bl	8004c8e <ld_dword>
 80067e2:	0002      	movs	r2, r0
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	3334      	adds	r3, #52	; 0x34
 80067ec:	33ed      	adds	r3, #237	; 0xed
 80067ee:	33ff      	adds	r3, #255	; 0xff
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7fe fa4c 	bl	8004c8e <ld_dword>
 80067f6:	0002      	movs	r2, r0
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2257      	movs	r2, #87	; 0x57
 8006800:	18ba      	adds	r2, r7, r2
 8006802:	7812      	ldrb	r2, [r2, #0]
 8006804:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006806:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <find_volume+0x548>)
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <find_volume+0x548>)
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <find_volume+0x548>)
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	0018      	movs	r0, r3
 800681e:	f7fe fc5f 	bl	80050e0 <clear_lock>
#endif
	return FR_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b016      	add	sp, #88	; 0x58
 800682a:	bdb0      	pop	{r4, r5, r7, pc}
 800682c:	0000fff5 	.word	0x0000fff5
 8006830:	00000ff5 	.word	0x00000ff5
 8006834:	0000aa55 	.word	0x0000aa55
 8006838:	41615252 	.word	0x41615252
 800683c:	61417272 	.word	0x61417272
 8006840:	20000298 	.word	0x20000298

08006844 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006844:	b590      	push	{r4, r7, lr}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800684e:	240f      	movs	r4, #15
 8006850:	193b      	adds	r3, r7, r4
 8006852:	2209      	movs	r2, #9
 8006854:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01d      	beq.n	8006898 <validate+0x54>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d019      	beq.n	8006898 <validate+0x54>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d014      	beq.n	8006898 <validate+0x54>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	889a      	ldrh	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	88db      	ldrh	r3, [r3, #6]
 8006878:	429a      	cmp	r2, r3
 800687a:	d10d      	bne.n	8006898 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	0018      	movs	r0, r3
 8006884:	f7fe f91e 	bl	8004ac4 <disk_status>
 8006888:	0003      	movs	r3, r0
 800688a:	001a      	movs	r2, r3
 800688c:	2301      	movs	r3, #1
 800688e:	4013      	ands	r3, r2
 8006890:	d102      	bne.n	8006898 <validate+0x54>
			res = FR_OK;
 8006892:	193b      	adds	r3, r7, r4
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006898:	230f      	movs	r3, #15
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <validate+0x64>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	e000      	b.n	80068aa <validate+0x66>
 80068a8:	2200      	movs	r2, #0
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	601a      	str	r2, [r3, #0]
	return res;
 80068ae:	230f      	movs	r3, #15
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	781b      	ldrb	r3, [r3, #0]
}
 80068b4:	0018      	movs	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b005      	add	sp, #20
 80068ba:	bd90      	pop	{r4, r7, pc}

080068bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80068bc:	b5b0      	push	{r4, r5, r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	1dfb      	adds	r3, r7, #7
 80068c8:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80068ce:	2310      	movs	r3, #16
 80068d0:	18fb      	adds	r3, r7, r3
 80068d2:	0018      	movs	r0, r3
 80068d4:	f7ff fc76 	bl	80061c4 <get_ldnumber>
 80068d8:	0003      	movs	r3, r0
 80068da:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da01      	bge.n	80068e6 <f_mount+0x2a>
 80068e2:	230b      	movs	r3, #11
 80068e4:	e030      	b.n	8006948 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80068e6:	4b1a      	ldr	r3, [pc, #104]	; (8006950 <f_mount+0x94>)
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	0092      	lsls	r2, r2, #2
 80068ec:	58d3      	ldr	r3, [r2, r3]
 80068ee:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7fe fbf1 	bl	80050e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <f_mount+0x94>)
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	0092      	lsls	r2, r2, #2
 8006918:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <f_mount+0x6c>
 8006920:	1dfb      	adds	r3, r7, #7
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d001      	beq.n	800692c <f_mount+0x70>
 8006928:	2300      	movs	r3, #0
 800692a:	e00d      	b.n	8006948 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800692c:	2517      	movs	r5, #23
 800692e:	197c      	adds	r4, r7, r5
 8006930:	230c      	movs	r3, #12
 8006932:	18f9      	adds	r1, r7, r3
 8006934:	2308      	movs	r3, #8
 8006936:	18fb      	adds	r3, r7, r3
 8006938:	2200      	movs	r2, #0
 800693a:	0018      	movs	r0, r3
 800693c:	f7ff fcdc 	bl	80062f8 <find_volume>
 8006940:	0003      	movs	r3, r0
 8006942:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8006944:	197b      	adds	r3, r7, r5
 8006946:	781b      	ldrb	r3, [r3, #0]
}
 8006948:	0018      	movs	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	b008      	add	sp, #32
 800694e:	bdb0      	pop	{r4, r5, r7, pc}
 8006950:	20000290 	.word	0x20000290

08006954 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006956:	b099      	sub	sp, #100	; 0x64
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	1dfb      	adds	r3, r7, #7
 8006960:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <f_open+0x18>
 8006968:	2309      	movs	r3, #9
 800696a:	e1f4      	b.n	8006d56 <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800696c:	1dfb      	adds	r3, r7, #7
 800696e:	1dfa      	adds	r2, r7, #7
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	213f      	movs	r1, #63	; 0x3f
 8006974:	400a      	ands	r2, r1
 8006976:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8006978:	255f      	movs	r5, #95	; 0x5f
 800697a:	197c      	adds	r4, r7, r5
 800697c:	1dfb      	adds	r3, r7, #7
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	2310      	movs	r3, #16
 8006982:	18f9      	adds	r1, r7, r3
 8006984:	2308      	movs	r3, #8
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	0018      	movs	r0, r3
 800698a:	f7ff fcb5 	bl	80062f8 <find_volume>
 800698e:	0003      	movs	r3, r0
 8006990:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006992:	197b      	adds	r3, r7, r5
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d000      	beq.n	800699c <f_open+0x48>
 800699a:	e1d1      	b.n	8006d40 <f_open+0x3ec>
		dj.obj.fs = fs;
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	2614      	movs	r6, #20
 80069a0:	19bb      	adds	r3, r7, r6
 80069a2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	197c      	adds	r4, r7, r5
 80069a8:	19bb      	adds	r3, r7, r6
 80069aa:	0011      	movs	r1, r2
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff fb7f 	bl	80060b0 <follow_path>
 80069b2:	0003      	movs	r3, r0
 80069b4:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80069b6:	0029      	movs	r1, r5
 80069b8:	197b      	adds	r3, r7, r5
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d11b      	bne.n	80069f8 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80069c0:	19bb      	adds	r3, r7, r6
 80069c2:	222f      	movs	r2, #47	; 0x2f
 80069c4:	5c9b      	ldrb	r3, [r3, r2]
 80069c6:	b25b      	sxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da03      	bge.n	80069d4 <f_open+0x80>
				res = FR_INVALID_NAME;
 80069cc:	187b      	adds	r3, r7, r1
 80069ce:	2206      	movs	r2, #6
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	e011      	b.n	80069f8 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2201      	movs	r2, #1
 80069da:	4393      	bics	r3, r2
 80069dc:	1e5a      	subs	r2, r3, #1
 80069de:	4193      	sbcs	r3, r2
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	001a      	movs	r2, r3
 80069e4:	235f      	movs	r3, #95	; 0x5f
 80069e6:	18fc      	adds	r4, r7, r3
 80069e8:	2314      	movs	r3, #20
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	0011      	movs	r1, r2
 80069ee:	0018      	movs	r0, r3
 80069f0:	f7fe fa2c 	bl	8004e4c <chk_lock>
 80069f4:	0003      	movs	r3, r0
 80069f6:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	221c      	movs	r2, #28
 80069fe:	4013      	ands	r3, r2
 8006a00:	d100      	bne.n	8006a04 <f_open+0xb0>
 8006a02:	e096      	b.n	8006b32 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8006a04:	225f      	movs	r2, #95	; 0x5f
 8006a06:	18bb      	adds	r3, r7, r2
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01a      	beq.n	8006a44 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006a0e:	18bb      	adds	r3, r7, r2
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d10f      	bne.n	8006a36 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006a16:	f7fe fa71 	bl	8004efc <enq_lock>
 8006a1a:	1e03      	subs	r3, r0, #0
 8006a1c:	d007      	beq.n	8006a2e <f_open+0xda>
 8006a1e:	2314      	movs	r3, #20
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7ff fa58 	bl	8005ed8 <dir_register>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	001a      	movs	r2, r3
 8006a2c:	e000      	b.n	8006a30 <f_open+0xdc>
 8006a2e:	2212      	movs	r2, #18
 8006a30:	235f      	movs	r3, #95	; 0x5f
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006a36:	1dfb      	adds	r3, r7, #7
 8006a38:	1dfa      	adds	r2, r7, #7
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	2108      	movs	r1, #8
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e014      	b.n	8006a6e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006a44:	2314      	movs	r3, #20
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	799b      	ldrb	r3, [r3, #6]
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	2311      	movs	r3, #17
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d004      	beq.n	8006a5c <f_open+0x108>
					res = FR_DENIED;
 8006a52:	235f      	movs	r3, #95	; 0x5f
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	2207      	movs	r2, #7
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	e008      	b.n	8006a6e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006a5c:	1dfb      	adds	r3, r7, #7
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2204      	movs	r2, #4
 8006a62:	4013      	ands	r3, r2
 8006a64:	d003      	beq.n	8006a6e <f_open+0x11a>
 8006a66:	235f      	movs	r3, #95	; 0x5f
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a6e:	245f      	movs	r4, #95	; 0x5f
 8006a70:	193b      	adds	r3, r7, r4
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d000      	beq.n	8006a7a <f_open+0x126>
 8006a78:	e07b      	b.n	8006b72 <f_open+0x21e>
 8006a7a:	1dfb      	adds	r3, r7, #7
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2208      	movs	r2, #8
 8006a80:	4013      	ands	r3, r2
 8006a82:	d100      	bne.n	8006a86 <f_open+0x132>
 8006a84:	e075      	b.n	8006b72 <f_open+0x21e>
				dw = GET_FATTIME();
 8006a86:	f7fd ff19 	bl	80048bc <get_fattime>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006a8e:	2514      	movs	r5, #20
 8006a90:	197b      	adds	r3, r7, r5
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	330e      	adds	r3, #14
 8006a96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a98:	0011      	movs	r1, r2
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	f7fe f936 	bl	8004d0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006aa0:	197b      	adds	r3, r7, r5
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	3316      	adds	r3, #22
 8006aa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aa8:	0011      	movs	r1, r2
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f7fe f92e 	bl	8004d0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006ab0:	197b      	adds	r3, r7, r5
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	330b      	adds	r3, #11
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	197b      	adds	r3, r7, r5
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	0010      	movs	r0, r2
 8006ac4:	f7ff f961 	bl	8005d8a <ld_clust>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006acc:	6938      	ldr	r0, [r7, #16]
 8006ace:	197b      	adds	r3, r7, r5
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	0019      	movs	r1, r3
 8006ad6:	f7ff f977 	bl	8005dc8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006ada:	197b      	adds	r3, r7, r5
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	331c      	adds	r3, #28
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f7fe f912 	bl	8004d0c <st_dword>
					fs->wflag = 1;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2201      	movs	r2, #1
 8006aec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03e      	beq.n	8006b72 <f_open+0x21e>
						dw = fs->winsect;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006afa:	0026      	movs	r6, r4
 8006afc:	193c      	adds	r4, r7, r4
 8006afe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006b00:	197b      	adds	r3, r7, r5
 8006b02:	2200      	movs	r2, #0
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7fe fe2c 	bl	8005762 <remove_chain>
 8006b0a:	0003      	movs	r3, r0
 8006b0c:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8006b0e:	19bb      	adds	r3, r7, r6
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d12d      	bne.n	8006b72 <f_open+0x21e>
							res = move_window(fs, dw);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	19bc      	adds	r4, r7, r6
 8006b1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fe fb46 	bl	80051b0 <move_window>
 8006b24:	0003      	movs	r3, r0
 8006b26:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b2c:	3a01      	subs	r2, #1
 8006b2e:	611a      	str	r2, [r3, #16]
 8006b30:	e01f      	b.n	8006b72 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006b32:	215f      	movs	r1, #95	; 0x5f
 8006b34:	187b      	adds	r3, r7, r1
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d11a      	bne.n	8006b72 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006b3c:	2314      	movs	r3, #20
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	799b      	ldrb	r3, [r3, #6]
 8006b42:	001a      	movs	r2, r3
 8006b44:	2310      	movs	r3, #16
 8006b46:	4013      	ands	r3, r2
 8006b48:	d003      	beq.n	8006b52 <f_open+0x1fe>
					res = FR_NO_FILE;
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	e00f      	b.n	8006b72 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006b52:	1dfb      	adds	r3, r7, #7
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2202      	movs	r2, #2
 8006b58:	4013      	ands	r3, r2
 8006b5a:	d00a      	beq.n	8006b72 <f_open+0x21e>
 8006b5c:	2314      	movs	r3, #20
 8006b5e:	18fb      	adds	r3, r7, r3
 8006b60:	799b      	ldrb	r3, [r3, #6]
 8006b62:	001a      	movs	r2, r3
 8006b64:	2301      	movs	r3, #1
 8006b66:	4013      	ands	r3, r2
 8006b68:	d003      	beq.n	8006b72 <f_open+0x21e>
						res = FR_DENIED;
 8006b6a:	235f      	movs	r3, #95	; 0x5f
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	2207      	movs	r2, #7
 8006b70:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8006b72:	235f      	movs	r3, #95	; 0x5f
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d12b      	bne.n	8006bd4 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006b7c:	1dfb      	adds	r3, r7, #7
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	4013      	ands	r3, r2
 8006b84:	d005      	beq.n	8006b92 <f_open+0x23e>
				mode |= FA_MODIFIED;
 8006b86:	1dfb      	adds	r3, r7, #7
 8006b88:	1dfa      	adds	r2, r7, #7
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006b9a:	2114      	movs	r1, #20
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	6a1a      	ldr	r2, [r3, #32]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ba4:	1dfb      	adds	r3, r7, #7
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4393      	bics	r3, r2
 8006bac:	1e5a      	subs	r2, r3, #1
 8006bae:	4193      	sbcs	r3, r2
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	187b      	adds	r3, r7, r1
 8006bb6:	0011      	movs	r1, r2
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f7fe f9bd 	bl	8004f38 <inc_lock>
 8006bbe:	0002      	movs	r2, r0
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <f_open+0x280>
 8006bcc:	235f      	movs	r3, #95	; 0x5f
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006bd4:	235f      	movs	r3, #95	; 0x5f
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d000      	beq.n	8006be0 <f_open+0x28c>
 8006bde:	e0af      	b.n	8006d40 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	2414      	movs	r4, #20
 8006be4:	193b      	adds	r3, r7, r4
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	0019      	movs	r1, r3
 8006bea:	0010      	movs	r0, r2
 8006bec:	f7ff f8cd 	bl	8005d8a <ld_clust>
 8006bf0:	0002      	movs	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006bf6:	193b      	adds	r3, r7, r4
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	331c      	adds	r3, #28
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7fe f846 	bl	8004c8e <ld_dword>
 8006c02:	0002      	movs	r2, r0
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	88da      	ldrh	r2, [r3, #6]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	1dfa      	adds	r2, r7, #7
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3330      	adds	r3, #48	; 0x30
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	0152      	lsls	r2, r2, #5
 8006c3e:	2100      	movs	r1, #0
 8006c40:	0018      	movs	r0, r3
 8006c42:	f7fe f8ac 	bl	8004d9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006c46:	1dfb      	adds	r3, r7, #7
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d100      	bne.n	8006c52 <f_open+0x2fe>
 8006c50:	e076      	b.n	8006d40 <f_open+0x3ec>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d100      	bne.n	8006c5c <f_open+0x308>
 8006c5a:	e071      	b.n	8006d40 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	895b      	ldrh	r3, [r3, #10]
 8006c68:	001a      	movs	r2, r3
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	899b      	ldrh	r3, [r3, #12]
 8006c6e:	4353      	muls	r3, r2
 8006c70:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	657b      	str	r3, [r7, #84]	; 0x54
 8006c7e:	e019      	b.n	8006cb4 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c84:	0011      	movs	r1, r2
 8006c86:	0018      	movs	r0, r3
 8006c88:	f7fe fb60 	bl	800534c <get_fat>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	65bb      	str	r3, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d803      	bhi.n	8006c9e <f_open+0x34a>
 8006c96:	235f      	movs	r3, #95	; 0x5f
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	d103      	bne.n	8006cac <f_open+0x358>
 8006ca4:	235f      	movs	r3, #95	; 0x5f
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	2201      	movs	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006cac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8006cb4:	235f      	movs	r3, #95	; 0x5f
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d103      	bne.n	8006cc6 <f_open+0x372>
 8006cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d8dc      	bhi.n	8006c80 <f_open+0x32c>
				}
				fp->clust = clst;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cca:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006ccc:	245f      	movs	r4, #95	; 0x5f
 8006cce:	193b      	adds	r3, r7, r4
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d134      	bne.n	8006d40 <f_open+0x3ec>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	899b      	ldrh	r3, [r3, #12]
 8006cda:	001a      	movs	r2, r3
 8006cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cde:	0011      	movs	r1, r2
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7f9 faa9 	bl	8000238 <__aeabi_uidivmod>
 8006ce6:	1e0b      	subs	r3, r1, #0
 8006ce8:	d02a      	beq.n	8006d40 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cee:	0011      	movs	r1, r2
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7fe fb0f 	bl	8005314 <clust2sect>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <f_open+0x3b4>
						res = FR_INT_ERR;
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	2202      	movs	r2, #2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e01b      	b.n	8006d40 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	899b      	ldrh	r3, [r3, #12]
 8006d0c:	0019      	movs	r1, r3
 8006d0e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006d10:	f7f9 fa0c 	bl	800012c <__udivsi3>
 8006d14:	0003      	movs	r3, r0
 8006d16:	001a      	movs	r2, r3
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	18d2      	adds	r2, r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	7858      	ldrb	r0, [r3, #1]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3330      	adds	r3, #48	; 0x30
 8006d28:	0019      	movs	r1, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f7fd ff1a 	bl	8004b68 <disk_read>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d003      	beq.n	8006d40 <f_open+0x3ec>
 8006d38:	235f      	movs	r3, #95	; 0x5f
 8006d3a:	18fb      	adds	r3, r7, r3
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006d40:	235f      	movs	r3, #95	; 0x5f
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <f_open+0x3fc>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006d50:	235f      	movs	r3, #95	; 0x5f
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	781b      	ldrb	r3, [r3, #0]
}
 8006d56:	0018      	movs	r0, r3
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b019      	add	sp, #100	; 0x64
 8006d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d5e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006d5e:	b5b0      	push	{r4, r5, r7, lr}
 8006d60:	b08e      	sub	sp, #56	; 0x38
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2537      	movs	r5, #55	; 0x37
 8006d7a:	197c      	adds	r4, r7, r5
 8006d7c:	2214      	movs	r2, #20
 8006d7e:	18ba      	adds	r2, r7, r2
 8006d80:	0011      	movs	r1, r2
 8006d82:	0018      	movs	r0, r3
 8006d84:	f7ff fd5e 	bl	8006844 <validate>
 8006d88:	0003      	movs	r3, r0
 8006d8a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006d8c:	197b      	adds	r3, r7, r5
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d107      	bne.n	8006da4 <f_read+0x46>
 8006d94:	197b      	adds	r3, r7, r5
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	7d52      	ldrb	r2, [r2, #21]
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	197b      	adds	r3, r7, r5
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <f_read+0x4e>
 8006da4:	2337      	movs	r3, #55	; 0x37
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	e137      	b.n	800701c <f_read+0x2be>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
 8006db0:	001a      	movs	r2, r3
 8006db2:	2301      	movs	r3, #1
 8006db4:	4013      	ands	r3, r2
 8006db6:	d101      	bne.n	8006dbc <f_read+0x5e>
 8006db8:	2307      	movs	r3, #7
 8006dba:	e12f      	b.n	800701c <f_read+0x2be>
	remain = fp->obj.objsize - fp->fptr;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d800      	bhi.n	8006dd2 <f_read+0x74>
 8006dd0:	e11f      	b.n	8007012 <f_read+0x2b4>
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006dd6:	e11c      	b.n	8007012 <f_read+0x2b4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	899b      	ldrh	r3, [r3, #12]
 8006de0:	0019      	movs	r1, r3
 8006de2:	0010      	movs	r0, r2
 8006de4:	f7f9 fa28 	bl	8000238 <__aeabi_uidivmod>
 8006de8:	1e0b      	subs	r3, r1, #0
 8006dea:	d000      	beq.n	8006dee <f_read+0x90>
 8006dec:	e0d7      	b.n	8006f9e <f_read+0x240>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	899b      	ldrh	r3, [r3, #12]
 8006df6:	0019      	movs	r1, r3
 8006df8:	0010      	movs	r0, r2
 8006dfa:	f7f9 f997 	bl	800012c <__udivsi3>
 8006dfe:	0003      	movs	r3, r0
 8006e00:	001a      	movs	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	895b      	ldrh	r3, [r3, #10]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4013      	ands	r3, r2
 8006e0a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d131      	bne.n	8006e76 <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e20:	e016      	b.n	8006e50 <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	699a      	ldr	r2, [r3, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	0011      	movs	r1, r2
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7fe fdae 	bl	8005994 <clmt_clust>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3c:	e008      	b.n	8006e50 <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	0019      	movs	r1, r3
 8006e46:	0010      	movs	r0, r2
 8006e48:	f7fe fa80 	bl	800534c <get_fat>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d804      	bhi.n	8006e60 <f_read+0x102>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	755a      	strb	r2, [r3, #21]
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e0dd      	b.n	800701c <f_read+0x2be>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	3301      	adds	r3, #1
 8006e64:	d104      	bne.n	8006e70 <f_read+0x112>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	755a      	strb	r2, [r3, #21]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0d5      	b.n	800701c <f_read+0x2be>
				fp->clust = clst;				/* Update current cluster */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e74:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	0010      	movs	r0, r2
 8006e80:	f7fe fa48 	bl	8005314 <clust2sect>
 8006e84:	0003      	movs	r3, r0
 8006e86:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d104      	bne.n	8006e98 <f_read+0x13a>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2202      	movs	r2, #2
 8006e92:	755a      	strb	r2, [r3, #21]
 8006e94:	2302      	movs	r3, #2
 8006e96:	e0c1      	b.n	800701c <f_read+0x2be>
			sect += csect;
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	18d3      	adds	r3, r2, r3
 8006e9e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	899b      	ldrh	r3, [r3, #12]
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7f9 f940 	bl	800012c <__udivsi3>
 8006eac:	0003      	movs	r3, r0
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d03e      	beq.n	8006f34 <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	18d3      	adds	r3, r2, r3
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	8952      	ldrh	r2, [r2, #10]
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d905      	bls.n	8006ed0 <f_read+0x172>
					cc = fs->csize - csect;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	895b      	ldrh	r3, [r3, #10]
 8006ec8:	001a      	movs	r2, r3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	7858      	ldrb	r0, [r3, #1]
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eda:	f7fd fe45 	bl	8004b68 <disk_read>
 8006ede:	1e03      	subs	r3, r0, #0
 8006ee0:	d004      	beq.n	8006eec <f_read+0x18e>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	755a      	strb	r2, [r3, #21]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e097      	b.n	800701c <f_read+0x2be>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	7d1b      	ldrb	r3, [r3, #20]
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da17      	bge.n	8006f26 <f_read+0x1c8>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d910      	bls.n	8006f26 <f_read+0x1c8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1a      	ldr	r2, [r3, #32]
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	8992      	ldrh	r2, [r2, #12]
 8006f10:	4353      	muls	r3, r2
 8006f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f14:	18d0      	adds	r0, r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3330      	adds	r3, #48	; 0x30
 8006f1a:	0019      	movs	r1, r3
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	899b      	ldrh	r3, [r3, #12]
 8006f20:	001a      	movs	r2, r3
 8006f22:	f7fd ff1d 	bl	8004d60 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	899b      	ldrh	r3, [r3, #12]
 8006f2a:	001a      	movs	r2, r3
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	4353      	muls	r3, r2
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006f32:	e05a      	b.n	8006fea <f_read+0x28c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d02c      	beq.n	8006f98 <f_read+0x23a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	7d1b      	ldrb	r3, [r3, #20]
 8006f42:	b25b      	sxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	da17      	bge.n	8006f78 <f_read+0x21a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	7858      	ldrb	r0, [r3, #1]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3330      	adds	r3, #48	; 0x30
 8006f50:	0019      	movs	r1, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1a      	ldr	r2, [r3, #32]
 8006f56:	2301      	movs	r3, #1
 8006f58:	f7fd fe2e 	bl	8004bb8 <disk_write>
 8006f5c:	1e03      	subs	r3, r0, #0
 8006f5e:	d004      	beq.n	8006f6a <f_read+0x20c>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	755a      	strb	r2, [r3, #21]
 8006f66:	2301      	movs	r3, #1
 8006f68:	e058      	b.n	800701c <f_read+0x2be>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	7d1b      	ldrb	r3, [r3, #20]
 8006f6e:	227f      	movs	r2, #127	; 0x7f
 8006f70:	4013      	ands	r3, r2
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	7858      	ldrb	r0, [r3, #1]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3330      	adds	r3, #48	; 0x30
 8006f80:	0019      	movs	r1, r3
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	2301      	movs	r3, #1
 8006f86:	f7fd fdef 	bl	8004b68 <disk_read>
 8006f8a:	1e03      	subs	r3, r0, #0
 8006f8c:	d004      	beq.n	8006f98 <f_read+0x23a>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	755a      	strb	r2, [r3, #21]
 8006f94:	2301      	movs	r3, #1
 8006f96:	e041      	b.n	800701c <f_read+0x2be>
			}
#endif
			fp->sect = sect;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	899b      	ldrh	r3, [r3, #12]
 8006fa2:	001c      	movs	r4, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	699a      	ldr	r2, [r3, #24]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	899b      	ldrh	r3, [r3, #12]
 8006fac:	0019      	movs	r1, r3
 8006fae:	0010      	movs	r0, r2
 8006fb0:	f7f9 f942 	bl	8000238 <__aeabi_uidivmod>
 8006fb4:	000b      	movs	r3, r1
 8006fb6:	1ae3      	subs	r3, r4, r3
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d901      	bls.n	8006fc6 <f_read+0x268>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3330      	adds	r3, #48	; 0x30
 8006fca:	001c      	movs	r4, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	899b      	ldrh	r3, [r3, #12]
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	0010      	movs	r0, r2
 8006fd8:	f7f9 f92e 	bl	8000238 <__aeabi_uidivmod>
 8006fdc:	000b      	movs	r3, r1
 8006fde:	18e1      	adds	r1, r4, r3
 8006fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7fd febb 	bl	8004d60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	18d3      	adds	r3, r2, r3
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	18d2      	adds	r2, r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	619a      	str	r2, [r3, #24]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	18d2      	adds	r2, r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d000      	beq.n	800701a <f_read+0x2bc>
 8007018:	e6de      	b.n	8006dd8 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800701a:	2300      	movs	r3, #0
}
 800701c:	0018      	movs	r0, r3
 800701e:	46bd      	mov	sp, r7
 8007020:	b00e      	add	sp, #56	; 0x38
 8007022:	bdb0      	pop	{r4, r5, r7, pc}

08007024 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007024:	b5b0      	push	{r4, r5, r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2517      	movs	r5, #23
 8007030:	197c      	adds	r4, r7, r5
 8007032:	2208      	movs	r2, #8
 8007034:	18ba      	adds	r2, r7, r2
 8007036:	0011      	movs	r1, r2
 8007038:	0018      	movs	r0, r3
 800703a:	f7ff fc03 	bl	8006844 <validate>
 800703e:	0003      	movs	r3, r0
 8007040:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007042:	197b      	adds	r3, r7, r5
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d16e      	bne.n	8007128 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7d1b      	ldrb	r3, [r3, #20]
 800704e:	001a      	movs	r2, r3
 8007050:	2340      	movs	r3, #64	; 0x40
 8007052:	4013      	ands	r3, r2
 8007054:	d068      	beq.n	8007128 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	7d1b      	ldrb	r3, [r3, #20]
 800705a:	b25b      	sxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	da14      	bge.n	800708a <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	7858      	ldrb	r0, [r3, #1]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3330      	adds	r3, #48	; 0x30
 8007068:	0019      	movs	r1, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	2301      	movs	r3, #1
 8007070:	f7fd fda2 	bl	8004bb8 <disk_write>
 8007074:	1e03      	subs	r3, r0, #0
 8007076:	d001      	beq.n	800707c <f_sync+0x58>
 8007078:	2301      	movs	r3, #1
 800707a:	e058      	b.n	800712e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7d1b      	ldrb	r3, [r3, #20]
 8007080:	227f      	movs	r2, #127	; 0x7f
 8007082:	4013      	ands	r3, r2
 8007084:	b2da      	uxtb	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800708a:	f7fd fc17 	bl	80048bc <get_fattime>
 800708e:	0003      	movs	r3, r0
 8007090:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2517      	movs	r5, #23
 800709a:	197c      	adds	r4, r7, r5
 800709c:	0019      	movs	r1, r3
 800709e:	0010      	movs	r0, r2
 80070a0:	f7fe f886 	bl	80051b0 <move_window>
 80070a4:	0003      	movs	r3, r0
 80070a6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80070a8:	002c      	movs	r4, r5
 80070aa:	193b      	adds	r3, r7, r4
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d13a      	bne.n	8007128 <f_sync+0x104>
					dir = fp->dir_ptr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	330b      	adds	r3, #11
 80070bc:	781a      	ldrb	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	330b      	adds	r3, #11
 80070c2:	2120      	movs	r1, #32
 80070c4:	430a      	orrs	r2, r1
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	0019      	movs	r1, r3
 80070d6:	f7fe fe77 	bl	8005dc8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	331c      	adds	r3, #28
 80070de:	001a      	movs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	0019      	movs	r1, r3
 80070e6:	0010      	movs	r0, r2
 80070e8:	f7fd fe10 	bl	8004d0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3316      	adds	r3, #22
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	0011      	movs	r1, r2
 80070f4:	0018      	movs	r0, r3
 80070f6:	f7fd fe09 	bl	8004d0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3312      	adds	r3, #18
 80070fe:	2100      	movs	r1, #0
 8007100:	0018      	movs	r0, r3
 8007102:	f7fd fde5 	bl	8004cd0 <st_word>
					fs->wflag = 1;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2201      	movs	r2, #1
 800710a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	193c      	adds	r4, r7, r4
 8007110:	0018      	movs	r0, r3
 8007112:	f7fe f883 	bl	800521c <sync_fs>
 8007116:	0003      	movs	r3, r0
 8007118:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7d1b      	ldrb	r3, [r3, #20]
 800711e:	2240      	movs	r2, #64	; 0x40
 8007120:	4393      	bics	r3, r2
 8007122:	b2da      	uxtb	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007128:	2317      	movs	r3, #23
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	781b      	ldrb	r3, [r3, #0]
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b006      	add	sp, #24
 8007134:	bdb0      	pop	{r4, r5, r7, pc}

08007136 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007136:	b5b0      	push	{r4, r5, r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800713e:	250f      	movs	r5, #15
 8007140:	197c      	adds	r4, r7, r5
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f7ff ff6d 	bl	8007024 <f_sync>
 800714a:	0003      	movs	r3, r0
 800714c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800714e:	197b      	adds	r3, r7, r5
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11c      	bne.n	8007190 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	197c      	adds	r4, r7, r5
 800715a:	2208      	movs	r2, #8
 800715c:	18ba      	adds	r2, r7, r2
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f7ff fb6f 	bl	8006844 <validate>
 8007166:	0003      	movs	r3, r0
 8007168:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800716a:	197b      	adds	r3, r7, r5
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10e      	bne.n	8007190 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	197c      	adds	r4, r7, r5
 8007178:	0018      	movs	r0, r3
 800717a:	f7fd ff67 	bl	800504c <dec_lock>
 800717e:	0003      	movs	r3, r0
 8007180:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8007182:	197b      	adds	r3, r7, r5
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d102      	bne.n	8007190 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007190:	230f      	movs	r3, #15
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	781b      	ldrb	r3, [r3, #0]
}
 8007196:	0018      	movs	r0, r3
 8007198:	46bd      	mov	sp, r7
 800719a:	b004      	add	sp, #16
 800719c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080071a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	1dfb      	adds	r3, r7, #7
 80071ac:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80071ae:	2417      	movs	r4, #23
 80071b0:	193b      	adds	r3, r7, r4
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80071b6:	2016      	movs	r0, #22
 80071b8:	183b      	adds	r3, r7, r0
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 80071be:	4b21      	ldr	r3, [pc, #132]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071c0:	7b9b      	ldrb	r3, [r3, #14]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d836      	bhi.n	8007236 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80071c8:	4b1e      	ldr	r3, [pc, #120]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071ca:	7b9b      	ldrb	r3, [r3, #14]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	001a      	movs	r2, r3
 80071d0:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071d2:	2100      	movs	r1, #0
 80071d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80071d6:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071d8:	7b9b      	ldrb	r3, [r3, #14]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4a19      	ldr	r2, [pc, #100]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	18d3      	adds	r3, r2, r3
 80071e2:	3304      	adds	r3, #4
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 80071e8:	4b16      	ldr	r3, [pc, #88]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071ea:	7b9b      	ldrb	r3, [r3, #14]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	001a      	movs	r2, r3
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	1dfa      	adds	r2, r7, #7
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80071fa:	4b12      	ldr	r3, [pc, #72]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 80071fc:	7b9b      	ldrb	r3, [r3, #14]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	b2d1      	uxtb	r1, r2
 8007204:	4a0f      	ldr	r2, [pc, #60]	; (8007244 <FATFS_LinkDriverEx+0xa4>)
 8007206:	7391      	strb	r1, [r2, #14]
 8007208:	183a      	adds	r2, r7, r0
 800720a:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800720c:	183b      	adds	r3, r7, r0
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	3330      	adds	r3, #48	; 0x30
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	3301      	adds	r3, #1
 800721c:	223a      	movs	r2, #58	; 0x3a
 800721e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3302      	adds	r3, #2
 8007224:	222f      	movs	r2, #47	; 0x2f
 8007226:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	3303      	adds	r3, #3
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007230:	193b      	adds	r3, r7, r4
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007236:	2317      	movs	r3, #23
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	781b      	ldrb	r3, [r3, #0]
}
 800723c:	0018      	movs	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	b007      	add	sp, #28
 8007242:	bd90      	pop	{r4, r7, pc}
 8007244:	200002bc 	.word	0x200002bc

08007248 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	0018      	movs	r0, r3
 800725a:	f7ff ffa1 	bl	80071a0 <FATFS_LinkDriverEx>
 800725e:	0003      	movs	r3, r0
}
 8007260:	0018      	movs	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}

08007268 <LED_G_WritePin>:
#include "../../app/Bsp/Bsp.h"

void LED_G_WritePin(GPIO_PinState State)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	0002      	movs	r2, r0
 8007270:	1dfb      	adds	r3, r7, #7
 8007272:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin,State);
 8007274:	1dfb      	adds	r3, r7, #7
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	4804      	ldr	r0, [pc, #16]	; (800728c <LED_G_WritePin+0x24>)
 800727a:	001a      	movs	r2, r3
 800727c:	2120      	movs	r1, #32
 800727e:	f7fa fc7e 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	46bd      	mov	sp, r7
 8007286:	b002      	add	sp, #8
 8007288:	bd80      	pop	{r7, pc}
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	50000400 	.word	0x50000400

08007290 <LED_G_TogglePin>:

void LED_G_TogglePin(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8007294:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <LED_G_TogglePin+0x14>)
 8007296:	2120      	movs	r1, #32
 8007298:	0018      	movs	r0, r3
 800729a:	f7fa fc8d 	bl	8001bb8 <HAL_GPIO_TogglePin>
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	50000400 	.word	0x50000400

080072a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a04      	ldr	r2, [pc, #16]	; (80072c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		LED_G_TogglePin();
 80072ba:	f7ff ffe9 	bl	8007290 <LED_G_TogglePin>
	}
}
 80072be:	46c0      	nop			; (mov r8, r8)
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b002      	add	sp, #8
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	40000400 	.word	0x40000400

080072cc <TIM_SetTime>:

void TIM_SetTime(uint8_t delay_ms)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	0002      	movs	r2, r0
 80072d4:	1dfb      	adds	r3, r7, #7
 80072d6:	701a      	strb	r2, [r3, #0]
	htim3.Instance = TIM3;
 80072d8:	4b12      	ldr	r3, [pc, #72]	; (8007324 <TIM_SetTime+0x58>)
 80072da:	4a13      	ldr	r2, [pc, #76]	; (8007328 <TIM_SetTime+0x5c>)
 80072dc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 6399;
 80072de:	4b11      	ldr	r3, [pc, #68]	; (8007324 <TIM_SetTime+0x58>)
 80072e0:	4a12      	ldr	r2, [pc, #72]	; (800732c <TIM_SetTime+0x60>)
 80072e2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <TIM_SetTime+0x58>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = delay_ms*10-1;
 80072ea:	1dfb      	adds	r3, r7, #7
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	0013      	movs	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	3b01      	subs	r3, #1
 80072f8:	001a      	movs	r2, r3
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <TIM_SetTime+0x58>)
 80072fc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <TIM_SetTime+0x58>)
 8007300:	2200      	movs	r2, #0
 8007302:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <TIM_SetTime+0x58>)
 8007306:	2200      	movs	r2, #0
 8007308:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <TIM_SetTime+0x58>)
 800730c:	0018      	movs	r0, r3
 800730e:	f7fb fe75 	bl	8002ffc <HAL_TIM_Base_Init>
 8007312:	1e03      	subs	r3, r0, #0
 8007314:	d001      	beq.n	800731a <TIM_SetTime+0x4e>
	{
	Error_Handler();
 8007316:	f7f9 fbc7 	bl	8000aa8 <Error_Handler>
	}
}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	46bd      	mov	sp, r7
 800731e:	b002      	add	sp, #8
 8007320:	bd80      	pop	{r7, pc}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	20000188 	.word	0x20000188
 8007328:	40000400 	.word	0x40000400
 800732c:	000018ff 	.word	0x000018ff

08007330 <TIM_Start>:

void TIM_Start(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <TIM_Start+0x24>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2200      	movs	r2, #0
 800733a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <TIM_Start+0x24>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2202      	movs	r2, #2
 8007342:	4252      	negs	r2, r2
 8007344:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim3);
 8007346:	4b03      	ldr	r3, [pc, #12]	; (8007354 <TIM_Start+0x24>)
 8007348:	0018      	movs	r0, r3
 800734a:	f7fb feaf 	bl	80030ac <HAL_TIM_Base_Start_IT>
}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000188 	.word	0x20000188

08007358 <TIM_Stop>:

void TIM_Stop(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800735c:	4b07      	ldr	r3, [pc, #28]	; (800737c <TIM_Stop+0x24>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2200      	movs	r2, #0
 8007362:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8007364:	4b05      	ldr	r3, [pc, #20]	; (800737c <TIM_Stop+0x24>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2202      	movs	r2, #2
 800736a:	4252      	negs	r2, r2
 800736c:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Stop_IT(&htim3);
 800736e:	4b03      	ldr	r3, [pc, #12]	; (800737c <TIM_Stop+0x24>)
 8007370:	0018      	movs	r0, r3
 8007372:	f7fb fefd 	bl	8003170 <HAL_TIM_Base_Stop_IT>
}
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000188 	.word	0x20000188

08007380 <InternalFlashFilter>:
 * internalFlash升级滤波器
 * @param pupdatecfg
 * @return 成功返回0
 */
static int InternalFlashFilter(struct UpdateCfgEntry *pupdatecfg)
{
 8007380:	b5b0      	push	{r4, r5, r7, lr}
 8007382:	4c25      	ldr	r4, [pc, #148]	; (8007418 <InternalFlashFilter+0x98>)
 8007384:	44a5      	add	sp, r4
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
	//FATFS fs;
	FRESULT res;
	FIL file;
	u8 buffer[16];
	u32 len = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
	int ret = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	4a22      	ldr	r2, [pc, #136]	; (800741c <InternalFlashFilter+0x9c>)
 8007392:	18ba      	adds	r2, r7, r2
 8007394:	6013      	str	r3, [r2, #0]
	/* Check Image Now */
	//res = f_mount(0, &fs);
	res = f_open(&file, (char const *)pupdatecfg->fileName, FA_OPEN_EXISTING | FA_READ);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1d59      	adds	r1, r3, #5
 800739a:	4d21      	ldr	r5, [pc, #132]	; (8007420 <InternalFlashFilter+0xa0>)
 800739c:	197c      	adds	r4, r7, r5
 800739e:	2320      	movs	r3, #32
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	2201      	movs	r2, #1
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7ff fad5 	bl	8006954 <f_open>
 80073aa:	0003      	movs	r3, r0
 80073ac:	7023      	strb	r3, [r4, #0]
	if(res != FR_OK) {
 80073ae:	197b      	adds	r3, r7, r5
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <InternalFlashFilter+0x4a>
		printf("Open failed: %s\r\n", pupdatecfg->fileName);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	1d5a      	adds	r2, r3, #5
 80073ba:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <InternalFlashFilter+0xa4>)
 80073bc:	0011      	movs	r1, r2
 80073be:	0018      	movs	r0, r3
 80073c0:	f001 f936 	bl	8008630 <iprintf>
		return -1;
 80073c4:	2301      	movs	r3, #1
 80073c6:	425b      	negs	r3, r3
 80073c8:	e020      	b.n	800740c <InternalFlashFilter+0x8c>
	}
	res = f_read(&file,(char *)&buffer, PAGE_SIZE, &len);
 80073ca:	4d15      	ldr	r5, [pc, #84]	; (8007420 <InternalFlashFilter+0xa0>)
 80073cc:	197c      	adds	r4, r7, r5
 80073ce:	230c      	movs	r3, #12
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	2280      	movs	r2, #128	; 0x80
 80073d4:	0112      	lsls	r2, r2, #4
 80073d6:	2110      	movs	r1, #16
 80073d8:	1879      	adds	r1, r7, r1
 80073da:	2020      	movs	r0, #32
 80073dc:	1838      	adds	r0, r7, r0
 80073de:	f7ff fcbe 	bl	8006d5e <f_read>
 80073e2:	0003      	movs	r3, r0
 80073e4:	7023      	strb	r3, [r4, #0]
	if(res != FR_OK) {
 80073e6:	197b      	adds	r3, r7, r5
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <InternalFlashFilter+0x7c>
		printf("Read failed\r\n");
 80073ee:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <InternalFlashFilter+0xa8>)
 80073f0:	0018      	movs	r0, r3
 80073f2:	f001 f983 	bl	80086fc <puts>
		return -1;
 80073f6:	2301      	movs	r3, #1
 80073f8:	425b      	negs	r3, r3
 80073fa:	e007      	b.n	800740c <InternalFlashFilter+0x8c>
	}
	f_close(&file);
 80073fc:	2320      	movs	r3, #32
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	0018      	movs	r0, r3
 8007402:	f7ff fe98 	bl	8007136 <f_close>

	return ret;
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <InternalFlashFilter+0x9c>)
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	681b      	ldr	r3, [r3, #0]
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	4b06      	ldr	r3, [pc, #24]	; (800742c <InternalFlashFilter+0xac>)
 8007412:	449d      	add	sp, r3
 8007414:	bdb0      	pop	{r4, r5, r7, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	ffffefa8 	.word	0xffffefa8
 800741c:	00001054 	.word	0x00001054
 8007420:	00001053 	.word	0x00001053
 8007424:	08009f78 	.word	0x08009f78
 8007428:	08009f8c 	.word	0x08009f8c
 800742c:	00001058 	.word	0x00001058

08007430 <InternalFlashUpdate>:
 * internalFlash升级
 * @param pupdatecfg struct UpdateCfgEntr结构体指针
 * @return 成功返回0 不成功返回非0值
 */
int InternalFlashUpdate(struct UpdateCfgEntry *pupdatecfg)
{
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	4c85      	ldr	r4, [pc, #532]	; (8007648 <InternalFlashUpdate+0x218>)
 8007434:	44a5      	add	sp, r4
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
	int ret = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	4c83      	ldr	r4, [pc, #524]	; (800764c <InternalFlashUpdate+0x21c>)
 800743e:	193a      	adds	r2, r7, r4
 8007440:	6013      	str	r3, [r2, #0]
	ret = InternalFlashFilter(pupdatecfg);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0018      	movs	r0, r3
 8007446:	f7ff ff9b 	bl	8007380 <InternalFlashFilter>
 800744a:	0003      	movs	r3, r0
 800744c:	0022      	movs	r2, r4
 800744e:	18b9      	adds	r1, r7, r2
 8007450:	600b      	str	r3, [r1, #0]
	if(ret) {
 8007452:	18bb      	adds	r3, r7, r2
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <InternalFlashUpdate+0x30>
		return ret;
 800745a:	18bb      	adds	r3, r7, r2
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	e0ed      	b.n	800763c <InternalFlashUpdate+0x20c>
	}
	//FATFS fs;
	FRESULT res;
	FIL file;
	u32 len = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	4a7b      	ldr	r2, [pc, #492]	; (8007650 <InternalFlashUpdate+0x220>)
 8007464:	18ba      	adds	r2, r7, r2
 8007466:	6013      	str	r3, [r2, #0]
	u32 index = 0, offset = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	4d7a      	ldr	r5, [pc, #488]	; (8007654 <InternalFlashUpdate+0x224>)
 800746c:	197a      	adds	r2, r7, r5
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	2300      	movs	r3, #0
 8007472:	4a79      	ldr	r2, [pc, #484]	; (8007658 <InternalFlashUpdate+0x228>)
 8007474:	18ba      	adds	r2, r7, r2
 8007476:	6013      	str	r3, [r2, #0]
	u32 a[2] = {0,2};
 8007478:	4b78      	ldr	r3, [pc, #480]	; (800765c <InternalFlashUpdate+0x22c>)
 800747a:	4979      	ldr	r1, [pc, #484]	; (8007660 <InternalFlashUpdate+0x230>)
 800747c:	185b      	adds	r3, r3, r1
 800747e:	19db      	adds	r3, r3, r7
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	4b75      	ldr	r3, [pc, #468]	; (800765c <InternalFlashUpdate+0x22c>)
 8007486:	185b      	adds	r3, r3, r1
 8007488:	19db      	adds	r3, r3, r7
 800748a:	2202      	movs	r2, #2
 800748c:	605a      	str	r2, [r3, #4]

	uint32_t status;
	FLASH_EraseInitTypeDef pEraseInit;

	uint32_t PageError = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	4a74      	ldr	r2, [pc, #464]	; (8007664 <InternalFlashUpdate+0x234>)
 8007492:	18ba      	adds	r2, r7, r2
 8007494:	6013      	str	r3, [r2, #0]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8007496:	4b74      	ldr	r3, [pc, #464]	; (8007668 <InternalFlashUpdate+0x238>)
 8007498:	185b      	adds	r3, r3, r1
 800749a:	19db      	adds	r3, r3, r7
 800749c:	2202      	movs	r2, #2
 800749e:	601a      	str	r2, [r3, #0]
	pEraseInit.Banks = FLASH_BANK_1;
 80074a0:	4b71      	ldr	r3, [pc, #452]	; (8007668 <InternalFlashUpdate+0x238>)
 80074a2:	185b      	adds	r3, r3, r1
 80074a4:	19db      	adds	r3, r3, r7
 80074a6:	2204      	movs	r2, #4
 80074a8:	605a      	str	r2, [r3, #4]
	pEraseInit.NbPages = 1;
 80074aa:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <InternalFlashUpdate+0x238>)
 80074ac:	185b      	adds	r3, r3, r1
 80074ae:	19db      	adds	r3, r3, r7
 80074b0:	2201      	movs	r2, #1
 80074b2:	60da      	str	r2, [r3, #12]

	u32 page_address = pupdatecfg->addr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	22c3      	movs	r2, #195	; 0xc3
 80074ba:	0152      	lsls	r2, r2, #5
 80074bc:	18ba      	adds	r2, r7, r2
 80074be:	6013      	str	r3, [r2, #0]
	uint8_t image_buffer[PAGE_SIZE];

	/* Unlock Flash */
	HAL_FLASH_Unlock();
 80074c0:	f7fa f870 	bl	80015a4 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80074c4:	4b69      	ldr	r3, [pc, #420]	; (800766c <InternalFlashUpdate+0x23c>)
 80074c6:	2280      	movs	r2, #128	; 0x80
 80074c8:	0612      	lsls	r2, r2, #24
 80074ca:	611a      	str	r2, [r3, #16]

	/* Mount File System */
	//res = f_mount(0, &fs);
	res = f_open(&file, (char const *)pupdatecfg->fileName, FA_OPEN_EXISTING | FA_READ);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1d59      	adds	r1, r3, #5
 80074d0:	4e67      	ldr	r6, [pc, #412]	; (8007670 <InternalFlashUpdate+0x240>)
 80074d2:	19bc      	adds	r4, r7, r6
 80074d4:	4b67      	ldr	r3, [pc, #412]	; (8007674 <InternalFlashUpdate+0x244>)
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	2201      	movs	r2, #1
 80074da:	0018      	movs	r0, r3
 80074dc:	f7ff fa3a 	bl	8006954 <f_open>
 80074e0:	0003      	movs	r3, r0
 80074e2:	7023      	strb	r3, [r4, #0]
	if(res == FR_OK) {
 80074e4:	19bb      	adds	r3, r7, r6
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d000      	beq.n	80074ee <InternalFlashUpdate+0xbe>
 80074ec:	e09b      	b.n	8007626 <InternalFlashUpdate+0x1f6>
		index = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	197a      	adds	r2, r7, r5
 80074f2:	6013      	str	r3, [r2, #0]
		while(1)
		{
			page_address = pupdatecfg->addr + index;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a56      	ldr	r2, [pc, #344]	; (8007654 <InternalFlashUpdate+0x224>)
 80074fa:	18ba      	adds	r2, r7, r2
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	18d3      	adds	r3, r2, r3
 8007500:	25c3      	movs	r5, #195	; 0xc3
 8007502:	016d      	lsls	r5, r5, #5
 8007504:	197a      	adds	r2, r7, r5
 8007506:	6013      	str	r3, [r2, #0]
			/* read one page */
			res = f_read(&file,(char *)&image_buffer, PAGE_SIZE, &len);
 8007508:	4b59      	ldr	r3, [pc, #356]	; (8007670 <InternalFlashUpdate+0x240>)
 800750a:	18fc      	adds	r4, r7, r3
 800750c:	4e50      	ldr	r6, [pc, #320]	; (8007650 <InternalFlashUpdate+0x220>)
 800750e:	19bb      	adds	r3, r7, r6
 8007510:	2280      	movs	r2, #128	; 0x80
 8007512:	0112      	lsls	r2, r2, #4
 8007514:	2108      	movs	r1, #8
 8007516:	1879      	adds	r1, r7, r1
 8007518:	4856      	ldr	r0, [pc, #344]	; (8007674 <InternalFlashUpdate+0x244>)
 800751a:	1838      	adds	r0, r7, r0
 800751c:	f7ff fc1f 	bl	8006d5e <f_read>
 8007520:	0003      	movs	r3, r0
 8007522:	7023      	strb	r3, [r4, #0]
//			printf("res:%d\n",res);

			if (len == 0)
 8007524:	19bb      	adds	r3, r7, r6
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d072      	beq.n	8007612 <InternalFlashUpdate+0x1e2>
				break;

			/* Erase one page */
			pEraseInit.Page = ((page_address - 0x08000000) / PAGE_SIZE);
 800752c:	002c      	movs	r4, r5
 800752e:	193b      	adds	r3, r7, r4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	22f8      	movs	r2, #248	; 0xf8
 8007534:	0612      	lsls	r2, r2, #24
 8007536:	4694      	mov	ip, r2
 8007538:	4463      	add	r3, ip
 800753a:	0ada      	lsrs	r2, r3, #11
 800753c:	4b4a      	ldr	r3, [pc, #296]	; (8007668 <InternalFlashUpdate+0x238>)
 800753e:	4948      	ldr	r1, [pc, #288]	; (8007660 <InternalFlashUpdate+0x230>)
 8007540:	185b      	adds	r3, r3, r1
 8007542:	19db      	adds	r3, r3, r7
 8007544:	609a      	str	r2, [r3, #8]
			printf("Page:%d\n",pEraseInit.Page);
 8007546:	4b48      	ldr	r3, [pc, #288]	; (8007668 <InternalFlashUpdate+0x238>)
 8007548:	185b      	adds	r3, r3, r1
 800754a:	19db      	adds	r3, r3, r7
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	4b4a      	ldr	r3, [pc, #296]	; (8007678 <InternalFlashUpdate+0x248>)
 8007550:	0011      	movs	r1, r2
 8007552:	0018      	movs	r0, r3
 8007554:	f001 f86c 	bl	8008630 <iprintf>
			status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8007558:	4b42      	ldr	r3, [pc, #264]	; (8007664 <InternalFlashUpdate+0x234>)
 800755a:	18fa      	adds	r2, r7, r3
 800755c:	4b47      	ldr	r3, [pc, #284]	; (800767c <InternalFlashUpdate+0x24c>)
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	0011      	movs	r1, r2
 8007562:	0018      	movs	r0, r3
 8007564:	f7fa f8d2 	bl	800170c <HAL_FLASHEx_Erase>
 8007568:	0003      	movs	r3, r0
 800756a:	4a45      	ldr	r2, [pc, #276]	; (8007680 <InternalFlashUpdate+0x250>)
 800756c:	18b9      	adds	r1, r7, r2
 800756e:	600b      	str	r3, [r1, #0]

			if (status != HAL_OK) {
 8007570:	18bb      	adds	r3, r7, r2
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <InternalFlashUpdate+0x162>
				printf("Erase int %d falled.\n",page_address);
 8007578:	193b      	adds	r3, r7, r4
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b41      	ldr	r3, [pc, #260]	; (8007684 <InternalFlashUpdate+0x254>)
 800757e:	0011      	movs	r1, r2
 8007580:	0018      	movs	r0, r3
 8007582:	f001 f855 	bl	8008630 <iprintf>
				ret = -1;
 8007586:	2301      	movs	r3, #1
 8007588:	425b      	negs	r3, r3
 800758a:	4a30      	ldr	r2, [pc, #192]	; (800764c <InternalFlashUpdate+0x21c>)
 800758c:	18ba      	adds	r2, r7, r2
 800758e:	6013      	str	r3, [r2, #0]
				goto exit;
 8007590:	e04a      	b.n	8007628 <InternalFlashUpdate+0x1f8>
			}
			/* Program one page */
			for (offset = 0; offset < PAGE_SIZE; offset+=8) {
 8007592:	2300      	movs	r3, #0
 8007594:	4a30      	ldr	r2, [pc, #192]	; (8007658 <InternalFlashUpdate+0x228>)
 8007596:	18ba      	adds	r2, r7, r2
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e029      	b.n	80075f0 <InternalFlashUpdate+0x1c0>
				status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, page_address+offset, *(uint64_t *)(&image_buffer[offset]));
 800759c:	23c3      	movs	r3, #195	; 0xc3
 800759e:	015b      	lsls	r3, r3, #5
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	482c      	ldr	r0, [pc, #176]	; (8007658 <InternalFlashUpdate+0x228>)
 80075a6:	183b      	adds	r3, r7, r0
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	18d1      	adds	r1, r2, r3
 80075ac:	2308      	movs	r3, #8
 80075ae:	18fa      	adds	r2, r7, r3
 80075b0:	183b      	adds	r3, r7, r0
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	18d3      	adds	r3, r2, r3
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2001      	movs	r0, #1
 80075bc:	f7f9 ffa4 	bl	8001508 <HAL_FLASH_Program>
 80075c0:	0003      	movs	r3, r0
 80075c2:	4a2f      	ldr	r2, [pc, #188]	; (8007680 <InternalFlashUpdate+0x250>)
 80075c4:	18b9      	adds	r1, r7, r2
 80075c6:	600b      	str	r3, [r1, #0]
				if (status != HAL_OK) {
 80075c8:	18bb      	adds	r3, r7, r2
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <InternalFlashUpdate+0x1b4>
					printf("Program int falled.\n");
 80075d0:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <InternalFlashUpdate+0x258>)
 80075d2:	0018      	movs	r0, r3
 80075d4:	f001 f892 	bl	80086fc <puts>
					ret = -2;
 80075d8:	2302      	movs	r3, #2
 80075da:	425b      	negs	r3, r3
 80075dc:	4a1b      	ldr	r2, [pc, #108]	; (800764c <InternalFlashUpdate+0x21c>)
 80075de:	18ba      	adds	r2, r7, r2
 80075e0:	6013      	str	r3, [r2, #0]
					goto exit;
 80075e2:	e021      	b.n	8007628 <InternalFlashUpdate+0x1f8>
			for (offset = 0; offset < PAGE_SIZE; offset+=8) {
 80075e4:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <InternalFlashUpdate+0x228>)
 80075e6:	18bb      	adds	r3, r7, r2
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3308      	adds	r3, #8
 80075ec:	18ba      	adds	r2, r7, r2
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4b19      	ldr	r3, [pc, #100]	; (8007658 <InternalFlashUpdate+0x228>)
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d3ce      	bcc.n	800759c <InternalFlashUpdate+0x16c>
				}
			}
			/* update address offset */
			index += FLASH_PAGE_SIZE;
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <InternalFlashUpdate+0x224>)
 8007600:	18bb      	adds	r3, r7, r2
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2180      	movs	r1, #128	; 0x80
 8007606:	0109      	lsls	r1, r1, #4
 8007608:	468c      	mov	ip, r1
 800760a:	4463      	add	r3, ip
 800760c:	18ba      	adds	r2, r7, r2
 800760e:	6013      	str	r3, [r2, #0]
		{
 8007610:	e770      	b.n	80074f4 <InternalFlashUpdate+0xc4>
				break;
 8007612:	46c0      	nop			; (mov r8, r8)
		}
		printf("SUCCESS.\r\n");
 8007614:	4b1d      	ldr	r3, [pc, #116]	; (800768c <InternalFlashUpdate+0x25c>)
 8007616:	0018      	movs	r0, r3
 8007618:	f001 f870 	bl	80086fc <puts>
		ret =0;
 800761c:	2300      	movs	r3, #0
 800761e:	4a0b      	ldr	r2, [pc, #44]	; (800764c <InternalFlashUpdate+0x21c>)
 8007620:	18ba      	adds	r2, r7, r2
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	e000      	b.n	8007628 <InternalFlashUpdate+0x1f8>
	}
	exit:
 8007626:	46c0      	nop			; (mov r8, r8)
	f_close(&file);
 8007628:	4b12      	ldr	r3, [pc, #72]	; (8007674 <InternalFlashUpdate+0x244>)
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	0018      	movs	r0, r3
 800762e:	f7ff fd82 	bl	8007136 <f_close>
	HAL_FLASH_Lock();
 8007632:	f7f9 ffdb 	bl	80015ec <HAL_FLASH_Lock>
	return ret;
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <InternalFlashUpdate+0x21c>)
 8007638:	18fb      	adds	r3, r7, r3
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	0018      	movs	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	4b13      	ldr	r3, [pc, #76]	; (8007690 <InternalFlashUpdate+0x260>)
 8007642:	449d      	add	sp, r3
 8007644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	ffffe78c 	.word	0xffffe78c
 800764c:	0000186c 	.word	0x0000186c
 8007650:	00000824 	.word	0x00000824
 8007654:	00001868 	.word	0x00001868
 8007658:	00001864 	.word	0x00001864
 800765c:	ffffefac 	.word	0xffffefac
 8007660:	00001870 	.word	0x00001870
 8007664:	00000808 	.word	0x00000808
 8007668:	ffffef9c 	.word	0xffffef9c
 800766c:	40022000 	.word	0x40022000
 8007670:	0000185f 	.word	0x0000185f
 8007674:	00000828 	.word	0x00000828
 8007678:	08009f9c 	.word	0x08009f9c
 800767c:	0000080c 	.word	0x0000080c
 8007680:	00001858 	.word	0x00001858
 8007684:	08009fa8 	.word	0x08009fa8
 8007688:	08009fc0 	.word	0x08009fc0
 800768c:	08009fd4 	.word	0x08009fd4
 8007690:	00001874 	.word	0x00001874

08007694 <UpdateCfgParser>:
 * @param len 升级描述字符串的长度
 * @param pupdateCfg 待升级的文件的描述结构体数组
 * @return 待升级的文件数量
 */
u8 UpdateCfgParser(char *update_buf,u32 len,struct UpdateCfgEntry* pupdateCfg)
{
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	b095      	sub	sp, #84	; 0x54
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
	unsigned mark = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	unsigned state = 0;  
 80076a4:	2300      	movs	r3, #0
 80076a6:	64bb      	str	r3, [r7, #72]	; 0x48
        unsigned i = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	647b      	str	r3, [r7, #68]	; 0x44
	unsigned j = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned k=0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c

	u8 image_flashaddr[MAX_FLASHADDR_LEN];
	u8 image_flashkind[MAX_FLASHKIND_LEN];
	u8  cfg_num = 0;
 80076b4:	233b      	movs	r3, #59	; 0x3b
 80076b6:	18fb      	adds	r3, r7, r3
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
	for(k=0;k<len+1;k++) {
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076c0:	e1c4      	b.n	8007a4c <UpdateCfgParser+0x3b8>
		if(k==len) update_buf[k] = 0x0d;
 80076c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d104      	bne.n	80076d4 <UpdateCfgParser+0x40>
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ce:	18d3      	adds	r3, r2, r3
 80076d0:	220d      	movs	r2, #13
 80076d2:	701a      	strb	r2, [r3, #0]
		if( (update_buf[k] == '@') && (state ==0)) {
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	18d3      	adds	r3, r2, r3
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d153      	bne.n	8007788 <UpdateCfgParser+0xf4>
 80076e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d150      	bne.n	8007788 <UpdateCfgParser+0xf4>
			unsigned i=0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	637b      	str	r3, [r7, #52]	; 0x34
			for(j=0;j<(k-mark);j++) {
 80076ea:	2300      	movs	r3, #0
 80076ec:	643b      	str	r3, [r7, #64]	; 0x40
 80076ee:	e030      	b.n	8007752 <UpdateCfgParser+0xbe>
				if( (update_buf[mark+j]!= 0x20) && (update_buf[mark+j] != 0x0a) &&(update_buf[mark+j] != 0x0d))
 80076f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f4:	18d3      	adds	r3, r2, r3
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	18d3      	adds	r3, r2, r3
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d025      	beq.n	800774c <UpdateCfgParser+0xb8>
 8007700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007704:	18d3      	adds	r3, r2, r3
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	18d3      	adds	r3, r2, r3
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b0a      	cmp	r3, #10
 800770e:	d01d      	beq.n	800774c <UpdateCfgParser+0xb8>
 8007710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007714:	18d3      	adds	r3, r2, r3
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	18d3      	adds	r3, r2, r3
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b0d      	cmp	r3, #13
 800771e:	d015      	beq.n	800774c <UpdateCfgParser+0xb8>
					pupdateCfg[cfg_num].fileName[i++] = update_buf[mark+j];
 8007720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007724:	18d3      	adds	r3, r2, r3
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	18d1      	adds	r1, r2, r3
 800772a:	233b      	movs	r3, #59	; 0x3b
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	0013      	movs	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	189b      	adds	r3, r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	001a      	movs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	189a      	adds	r2, r3, r2
 800773e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007740:	1c58      	adds	r0, r3, #1
 8007742:	6378      	str	r0, [r7, #52]	; 0x34
 8007744:	7809      	ldrb	r1, [r1, #0]
 8007746:	18d3      	adds	r3, r2, r3
 8007748:	1c0a      	adds	r2, r1, #0
 800774a:	715a      	strb	r2, [r3, #5]
			for(j=0;j<(k-mark);j++) {
 800774c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800774e:	3301      	adds	r3, #1
 8007750:	643b      	str	r3, [r7, #64]	; 0x40
 8007752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800775a:	429a      	cmp	r2, r3
 800775c:	d3c8      	bcc.n	80076f0 <UpdateCfgParser+0x5c>
			}
			pupdateCfg[cfg_num].fileName[i] = 0x00;
 800775e:	233b      	movs	r3, #59	; 0x3b
 8007760:	18fb      	adds	r3, r7, r3
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	0013      	movs	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	189b      	adds	r3, r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	001a      	movs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	189a      	adds	r2, r3, r2
 8007772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007774:	18d3      	adds	r3, r2, r3
 8007776:	3305      	adds	r3, #5
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]
			mark = k+1;
 800777c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777e:	3301      	adds	r3, #1
 8007780:	64fb      	str	r3, [r7, #76]	; 0x4c
			state = 1;
 8007782:	2301      	movs	r3, #1
 8007784:	64bb      	str	r3, [r7, #72]	; 0x48
		if( (update_buf[k] == '@') && (state ==0)) {
 8007786:	e15e      	b.n	8007a46 <UpdateCfgParser+0x3b2>
		} else if( (update_buf[k] == '.') && (state ==1)) {
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778c:	18d3      	adds	r3, r2, r3
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b2e      	cmp	r3, #46	; 0x2e
 8007792:	d136      	bne.n	8007802 <UpdateCfgParser+0x16e>
 8007794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007796:	2b01      	cmp	r3, #1
 8007798:	d133      	bne.n	8007802 <UpdateCfgParser+0x16e>
			for(j=0;j<(k-mark);j++) {
 800779a:	2300      	movs	r3, #0
 800779c:	643b      	str	r3, [r7, #64]	; 0x40
 800779e:	e01e      	b.n	80077de <UpdateCfgParser+0x14a>
				if( (update_buf[mark+j]!= 0x20) && (update_buf[mark+j] != 0x0a))
 80077a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077a4:	18d3      	adds	r3, r2, r3
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	18d3      	adds	r3, r2, r3
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d013      	beq.n	80077d8 <UpdateCfgParser+0x144>
 80077b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	18d3      	adds	r3, r2, r3
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b0a      	cmp	r3, #10
 80077be:	d00b      	beq.n	80077d8 <UpdateCfgParser+0x144>
					image_flashkind[i++] = update_buf[mark+j];
 80077c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c4:	18d3      	adds	r3, r2, r3
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	18d2      	adds	r2, r2, r3
 80077ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077cc:	1c59      	adds	r1, r3, #1
 80077ce:	6479      	str	r1, [r7, #68]	; 0x44
 80077d0:	7811      	ldrb	r1, [r2, #0]
 80077d2:	2210      	movs	r2, #16
 80077d4:	18ba      	adds	r2, r7, r2
 80077d6:	54d1      	strb	r1, [r2, r3]
			for(j=0;j<(k-mark);j++) {
 80077d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077da:	3301      	adds	r3, #1
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
 80077de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d3da      	bcc.n	80077a0 <UpdateCfgParser+0x10c>
			}
			image_flashkind[i] = 0x00;
 80077ea:	2310      	movs	r3, #16
 80077ec:	18fa      	adds	r2, r7, r3
 80077ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f0:	18d3      	adds	r3, r2, r3
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
			mark = k+1;
 80077f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f8:	3301      	adds	r3, #1
 80077fa:	64fb      	str	r3, [r7, #76]	; 0x4c
			state = 2;
 80077fc:	2302      	movs	r3, #2
 80077fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007800:	e121      	b.n	8007a46 <UpdateCfgParser+0x3b2>
		} else if((update_buf[k] == 0x0d) && (state==2) ) {
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007806:	18d3      	adds	r3, r2, r3
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b0d      	cmp	r3, #13
 800780c:	d000      	beq.n	8007810 <UpdateCfgParser+0x17c>
 800780e:	e11a      	b.n	8007a46 <UpdateCfgParser+0x3b2>
 8007810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007812:	2b02      	cmp	r3, #2
 8007814:	d000      	beq.n	8007818 <UpdateCfgParser+0x184>
 8007816:	e116      	b.n	8007a46 <UpdateCfgParser+0x3b2>
			unsigned i=0;
 8007818:	2300      	movs	r3, #0
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
			for(j=0;j<(k-mark);j++) {
 800781c:	2300      	movs	r3, #0
 800781e:	643b      	str	r3, [r7, #64]	; 0x40
 8007820:	e01e      	b.n	8007860 <UpdateCfgParser+0x1cc>
				if( (update_buf[mark+j]!= 0x20) && (update_buf[mark+j] != 0x0a))
 8007822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007826:	18d3      	adds	r3, r2, r3
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	18d3      	adds	r3, r2, r3
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b20      	cmp	r3, #32
 8007830:	d013      	beq.n	800785a <UpdateCfgParser+0x1c6>
 8007832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007836:	18d3      	adds	r3, r2, r3
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	18d3      	adds	r3, r2, r3
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b0a      	cmp	r3, #10
 8007840:	d00b      	beq.n	800785a <UpdateCfgParser+0x1c6>
					image_flashaddr[i++] = update_buf[mark+j];
 8007842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007846:	18d3      	adds	r3, r2, r3
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	18d2      	adds	r2, r2, r3
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	1c59      	adds	r1, r3, #1
 8007850:	6339      	str	r1, [r7, #48]	; 0x30
 8007852:	7811      	ldrb	r1, [r2, #0]
 8007854:	2220      	movs	r2, #32
 8007856:	18ba      	adds	r2, r7, r2
 8007858:	54d1      	strb	r1, [r2, r3]
			for(j=0;j<(k-mark);j++) {
 800785a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800785c:	3301      	adds	r3, #1
 800785e:	643b      	str	r3, [r7, #64]	; 0x40
 8007860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007868:	429a      	cmp	r2, r3
 800786a:	d3da      	bcc.n	8007822 <UpdateCfgParser+0x18e>
			}
			image_flashaddr[i] = 0x00;
 800786c:	2020      	movs	r0, #32
 800786e:	183a      	adds	r2, r7, r0
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	2200      	movs	r2, #0
 8007876:	701a      	strb	r2, [r3, #0]
			sscanf((const char*)image_flashaddr,"0x%x",&pupdateCfg[cfg_num].addr);
 8007878:	243b      	movs	r4, #59	; 0x3b
 800787a:	193b      	adds	r3, r7, r4
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	0013      	movs	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	189b      	adds	r3, r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	001a      	movs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	189b      	adds	r3, r3, r2
 800788c:	001a      	movs	r2, r3
 800788e:	4979      	ldr	r1, [pc, #484]	; (8007a74 <UpdateCfgParser+0x3e0>)
 8007890:	183b      	adds	r3, r7, r0
 8007892:	0018      	movs	r0, r3
 8007894:	f000 ff3c 	bl	8008710 <siscanf>

			if(strncmp("INTERNAL",image_flashkind,8) ==0)
 8007898:	2310      	movs	r3, #16
 800789a:	18f9      	adds	r1, r7, r3
 800789c:	4b76      	ldr	r3, [pc, #472]	; (8007a78 <UpdateCfgParser+0x3e4>)
 800789e:	2208      	movs	r2, #8
 80078a0:	0018      	movs	r0, r3
 80078a2:	f001 f859 	bl	8008958 <strncmp>
 80078a6:	1e03      	subs	r3, r0, #0
 80078a8:	d10b      	bne.n	80078c2 <UpdateCfgParser+0x22e>
				pupdateCfg[cfg_num].type = INTERNAL;
 80078aa:	193b      	adds	r3, r7, r4
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	0013      	movs	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	189b      	adds	r3, r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	001a      	movs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	2202      	movs	r2, #2
 80078be:	711a      	strb	r2, [r3, #4]
 80078c0:	e079      	b.n	80079b6 <UpdateCfgParser+0x322>
			else if(strncmp("SPI",image_flashkind,3) ==0 )
 80078c2:	2310      	movs	r3, #16
 80078c4:	18f9      	adds	r1, r7, r3
 80078c6:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <UpdateCfgParser+0x3e8>)
 80078c8:	2203      	movs	r2, #3
 80078ca:	0018      	movs	r0, r3
 80078cc:	f001 f844 	bl	8008958 <strncmp>
 80078d0:	1e03      	subs	r3, r0, #0
 80078d2:	d10c      	bne.n	80078ee <UpdateCfgParser+0x25a>
				pupdateCfg[cfg_num].type =  SPI;
 80078d4:	233b      	movs	r3, #59	; 0x3b
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	0013      	movs	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	189b      	adds	r3, r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	001a      	movs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	189b      	adds	r3, r3, r2
 80078e8:	2201      	movs	r2, #1
 80078ea:	711a      	strb	r2, [r3, #4]
 80078ec:	e063      	b.n	80079b6 <UpdateCfgParser+0x322>
			else if(strncmp("USART",image_flashkind,5) ==0 )
 80078ee:	2310      	movs	r3, #16
 80078f0:	18f9      	adds	r1, r7, r3
 80078f2:	4b63      	ldr	r3, [pc, #396]	; (8007a80 <UpdateCfgParser+0x3ec>)
 80078f4:	2205      	movs	r2, #5
 80078f6:	0018      	movs	r0, r3
 80078f8:	f001 f82e 	bl	8008958 <strncmp>
 80078fc:	1e03      	subs	r3, r0, #0
 80078fe:	d10c      	bne.n	800791a <UpdateCfgParser+0x286>
				pupdateCfg[cfg_num].type =  USART;
 8007900:	233b      	movs	r3, #59	; 0x3b
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	781a      	ldrb	r2, [r3, #0]
 8007906:	0013      	movs	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	189b      	adds	r3, r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	001a      	movs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	189b      	adds	r3, r3, r2
 8007914:	2203      	movs	r2, #3
 8007916:	711a      	strb	r2, [r3, #4]
 8007918:	e04d      	b.n	80079b6 <UpdateCfgParser+0x322>
			else if(strncmp("PASSWORD",image_flashkind,8) ==0)
 800791a:	2310      	movs	r3, #16
 800791c:	18f9      	adds	r1, r7, r3
 800791e:	4b59      	ldr	r3, [pc, #356]	; (8007a84 <UpdateCfgParser+0x3f0>)
 8007920:	2208      	movs	r2, #8
 8007922:	0018      	movs	r0, r3
 8007924:	f001 f818 	bl	8008958 <strncmp>
 8007928:	1e03      	subs	r3, r0, #0
 800792a:	d10c      	bne.n	8007946 <UpdateCfgParser+0x2b2>
				pupdateCfg[cfg_num].type =  PASSWORD;
 800792c:	233b      	movs	r3, #59	; 0x3b
 800792e:	18fb      	adds	r3, r7, r3
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	0013      	movs	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	189b      	adds	r3, r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	001a      	movs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	189b      	adds	r3, r3, r2
 8007940:	2204      	movs	r2, #4
 8007942:	711a      	strb	r2, [r3, #4]
 8007944:	e037      	b.n	80079b6 <UpdateCfgParser+0x322>
			else if(strncmp("CAN",image_flashkind,3) ==0 )
 8007946:	2310      	movs	r3, #16
 8007948:	18f9      	adds	r1, r7, r3
 800794a:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <UpdateCfgParser+0x3f4>)
 800794c:	2203      	movs	r2, #3
 800794e:	0018      	movs	r0, r3
 8007950:	f001 f802 	bl	8008958 <strncmp>
 8007954:	1e03      	subs	r3, r0, #0
 8007956:	d10c      	bne.n	8007972 <UpdateCfgParser+0x2de>
				pupdateCfg[cfg_num].type =  CAN;
 8007958:	233b      	movs	r3, #59	; 0x3b
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	781a      	ldrb	r2, [r3, #0]
 800795e:	0013      	movs	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	189b      	adds	r3, r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	001a      	movs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	189b      	adds	r3, r3, r2
 800796c:	2205      	movs	r2, #5
 800796e:	711a      	strb	r2, [r3, #4]
 8007970:	e021      	b.n	80079b6 <UpdateCfgParser+0x322>
                        else if(strncmp("TP6806",image_flashkind,6) ==0 )
 8007972:	2310      	movs	r3, #16
 8007974:	18f9      	adds	r1, r7, r3
 8007976:	4b45      	ldr	r3, [pc, #276]	; (8007a8c <UpdateCfgParser+0x3f8>)
 8007978:	2206      	movs	r2, #6
 800797a:	0018      	movs	r0, r3
 800797c:	f000 ffec 	bl	8008958 <strncmp>
 8007980:	1e03      	subs	r3, r0, #0
 8007982:	d10c      	bne.n	800799e <UpdateCfgParser+0x30a>
				 pupdateCfg[cfg_num].type = TP6806;
 8007984:	233b      	movs	r3, #59	; 0x3b
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	781a      	ldrb	r2, [r3, #0]
 800798a:	0013      	movs	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	189b      	adds	r3, r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	001a      	movs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	189b      	adds	r3, r3, r2
 8007998:	2206      	movs	r2, #6
 800799a:	711a      	strb	r2, [r3, #4]
 800799c:	e00b      	b.n	80079b6 <UpdateCfgParser+0x322>
			else pupdateCfg[cfg_num].type = UNKNOW;
 800799e:	233b      	movs	r3, #59	; 0x3b
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	0013      	movs	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	189b      	adds	r3, r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	001a      	movs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	189b      	adds	r3, r3, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	711a      	strb	r2, [r3, #4]

			if(strncmp("//",pupdateCfg[cfg_num].fileName,2)==0) {
 80079b6:	233b      	movs	r3, #59	; 0x3b
 80079b8:	18fb      	adds	r3, r7, r3
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	0013      	movs	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	189b      	adds	r3, r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	001a      	movs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	189b      	adds	r3, r3, r2
 80079ca:	1d59      	adds	r1, r3, #5
 80079cc:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <UpdateCfgParser+0x3fc>)
 80079ce:	2202      	movs	r2, #2
 80079d0:	0018      	movs	r0, r3
 80079d2:	f000 ffc1 	bl	8008958 <strncmp>
 80079d6:	1e03      	subs	r3, r0, #0
 80079d8:	d104      	bne.n	80079e4 <UpdateCfgParser+0x350>
				printf("Pass OneLine...\r\n");
 80079da:	4b2e      	ldr	r3, [pc, #184]	; (8007a94 <UpdateCfgParser+0x400>)
 80079dc:	0018      	movs	r0, r3
 80079de:	f000 fe8d 	bl	80086fc <puts>
 80079e2:	e02b      	b.n	8007a3c <UpdateCfgParser+0x3a8>
			} else {
				printf("Name: %s \r\n", pupdateCfg[cfg_num].fileName);
 80079e4:	243b      	movs	r4, #59	; 0x3b
 80079e6:	193b      	adds	r3, r7, r4
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	0013      	movs	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	189b      	adds	r3, r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	001a      	movs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	189b      	adds	r3, r3, r2
 80079f8:	1d5a      	adds	r2, r3, #5
 80079fa:	4b27      	ldr	r3, [pc, #156]	; (8007a98 <UpdateCfgParser+0x404>)
 80079fc:	0011      	movs	r1, r2
 80079fe:	0018      	movs	r0, r3
 8007a00:	f000 fe16 	bl	8008630 <iprintf>
				printf("Kind: %s \r\n", image_flashkind);
 8007a04:	2310      	movs	r3, #16
 8007a06:	18fa      	adds	r2, r7, r3
 8007a08:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <UpdateCfgParser+0x408>)
 8007a0a:	0011      	movs	r1, r2
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	f000 fe0f 	bl	8008630 <iprintf>
				printf("Addr: %s = %d \r\n",image_flashaddr,pupdateCfg[cfg_num].addr);
 8007a12:	193b      	adds	r3, r7, r4
 8007a14:	781a      	ldrb	r2, [r3, #0]
 8007a16:	0013      	movs	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	001a      	movs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	189b      	adds	r3, r3, r2
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	2320      	movs	r3, #32
 8007a28:	18f9      	adds	r1, r7, r3
 8007a2a:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <UpdateCfgParser+0x40c>)
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	f000 fdff 	bl	8008630 <iprintf>

				cfg_num++;
 8007a32:	193b      	adds	r3, r7, r4
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	193b      	adds	r3, r7, r4
 8007a38:	3201      	adds	r2, #1
 8007a3a:	701a      	strb	r2, [r3, #0]
			}
			mark = k+1;
 8007a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3e:	3301      	adds	r3, #1
 8007a40:	64fb      	str	r3, [r7, #76]	; 0x4c
			state = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	64bb      	str	r3, [r7, #72]	; 0x48
	for(k=0;k<len+1;k++) {
 8007a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a48:	3301      	adds	r3, #1
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d200      	bcs.n	8007a58 <UpdateCfgParser+0x3c4>
 8007a56:	e634      	b.n	80076c2 <UpdateCfgParser+0x2e>
		}
	}
	printf("%d files got !!.\r\n",cfg_num);
 8007a58:	243b      	movs	r4, #59	; 0x3b
 8007a5a:	193b      	adds	r3, r7, r4
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <UpdateCfgParser+0x410>)
 8007a60:	0011      	movs	r1, r2
 8007a62:	0018      	movs	r0, r3
 8007a64:	f000 fde4 	bl	8008630 <iprintf>
	return cfg_num;
 8007a68:	193b      	adds	r3, r7, r4
 8007a6a:	781b      	ldrb	r3, [r3, #0]
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b015      	add	sp, #84	; 0x54
 8007a72:	bd90      	pop	{r4, r7, pc}
 8007a74:	08009fe0 	.word	0x08009fe0
 8007a78:	08009fe8 	.word	0x08009fe8
 8007a7c:	08009ff4 	.word	0x08009ff4
 8007a80:	08009ff8 	.word	0x08009ff8
 8007a84:	0800a000 	.word	0x0800a000
 8007a88:	0800a00c 	.word	0x0800a00c
 8007a8c:	0800a010 	.word	0x0800a010
 8007a90:	0800a018 	.word	0x0800a018
 8007a94:	0800a01c 	.word	0x0800a01c
 8007a98:	0800a030 	.word	0x0800a030
 8007a9c:	0800a03c 	.word	0x0800a03c
 8007aa0:	0800a048 	.word	0x0800a048
 8007aa4:	0800a05c 	.word	0x0800a05c

08007aa8 <SPI_SD_Release>:
#include <diskio.h>

static u8  SD_Type=0;

void SPI_SD_Release(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007aae:	1d3b      	adds	r3, r7, #4
 8007ab0:	22f0      	movs	r2, #240	; 0xf0
 8007ab2:	601a      	str	r2, [r3, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8007ab4:	1d3b      	adds	r3, r7, #4
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	605a      	str	r2, [r3, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	2200      	movs	r2, #0
 8007abe:	609a      	str	r2, [r3, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007ac6:	1d3a      	adds	r2, r7, #4
 8007ac8:	23a0      	movs	r3, #160	; 0xa0
 8007aca:	05db      	lsls	r3, r3, #23
 8007acc:	0011      	movs	r1, r2
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7f9 fecc 	bl	800186c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_15;
 8007ad4:	1d3b      	adds	r3, r7, #4
 8007ad6:	2280      	movs	r2, #128	; 0x80
 8007ad8:	0212      	lsls	r2, r2, #8
 8007ada:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007adc:	1d3b      	adds	r3, r7, #4
 8007ade:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <SPI_SD_Release+0x48>)
 8007ae0:	0019      	movs	r1, r3
 8007ae2:	0010      	movs	r0, r2
 8007ae4:	f7f9 fec2 	bl	800186c <HAL_GPIO_Init>

}
 8007ae8:	46c0      	nop			; (mov r8, r8)
 8007aea:	46bd      	mov	sp, r7
 8007aec:	b006      	add	sp, #24
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	50000400 	.word	0x50000400

08007af4 <SPI_SD_EnableSelect>:
void SPI_SD_EnableSelect(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8007af8:	23a0      	movs	r3, #160	; 0xa0
 8007afa:	05db      	lsls	r3, r3, #23
 8007afc:	2200      	movs	r2, #0
 8007afe:	2110      	movs	r1, #16
 8007b00:	0018      	movs	r0, r3
 8007b02:	f7fa f83c 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <SPI_SD_DisableSelect>:

void SPI_SD_DisableSelect(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8007b10:	23a0      	movs	r3, #160	; 0xa0
 8007b12:	05db      	lsls	r3, r3, #23
 8007b14:	2201      	movs	r2, #1
 8007b16:	2110      	movs	r1, #16
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f7fa f830 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8007b1e:	46c0      	nop			; (mov r8, r8)
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <SPI_SD_GetSDCard>:

uint8_t SPI_SD_GetSDCard(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(SD_CD_GPIO_Port, SD_CD_Pin);
 8007b28:	2380      	movs	r3, #128	; 0x80
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	4a05      	ldr	r2, [pc, #20]	; (8007b44 <SPI_SD_GetSDCard+0x20>)
 8007b2e:	0019      	movs	r1, r3
 8007b30:	0010      	movs	r0, r2
 8007b32:	f7fa f807 	bl	8001b44 <HAL_GPIO_ReadPin>
 8007b36:	0003      	movs	r3, r0
 8007b38:	425a      	negs	r2, r3
 8007b3a:	4153      	adcs	r3, r2
 8007b3c:	b2db      	uxtb	r3, r3
}
 8007b3e:	0018      	movs	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	50000400 	.word	0x50000400

08007b48 <SPI_SetSpeed>:

void SPI_SetSpeed(uint8_t SpeedSet)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	0002      	movs	r2, r0
 8007b50:	1dfb      	adds	r3, r7, #7
 8007b52:	701a      	strb	r2, [r3, #0]
	//如果速度设置输入0，则低速模式，非0则高速模式
	if(SpeedSet==SPI_SPEED_LOW) {
 8007b54:	1dfb      	adds	r3, r7, #7
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <SPI_SetSpeed+0x1c>
		hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <SPI_SetSpeed+0x3c>)
 8007b5e:	2228      	movs	r2, #40	; 0x28
 8007b60:	61da      	str	r2, [r3, #28]
 8007b62:	e002      	b.n	8007b6a <SPI_SetSpeed+0x22>
	} else{
		hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007b64:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <SPI_SetSpeed+0x3c>)
 8007b66:	2208      	movs	r2, #8
 8007b68:	61da      	str	r2, [r3, #28]
	}
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <SPI_SetSpeed+0x3c>)
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f7fb f885 	bl	8002c7c <HAL_SPI_Init>
 8007b72:	1e03      	subs	r3, r0, #0
 8007b74:	d002      	beq.n	8007b7c <SPI_SetSpeed+0x34>
	{
		Error_Handler();
 8007b76:	f7f8 ff97 	bl	8000aa8 <Error_Handler>
	}
	return;
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46c0      	nop			; (mov r8, r8)
}
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b002      	add	sp, #8
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000120 	.word	0x20000120

08007b88 <SPI_ReadWriteByte>:
* Input          : u8 TxData 待发送的数
* Output         : None
* Return         : u8 RxData 收到的数
*******************************************************************************/
u8 SPI_ReadWriteByte(u8 TxData)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	0002      	movs	r2, r0
 8007b90:	1dfb      	adds	r3, r7, #7
 8007b92:	701a      	strb	r2, [r3, #0]
    uint8_t Rxdata;
//	HAL_SPI_TransmitReceive(&hspi1,&TxData,&Rxdata,sizeof(TxData),100);
//	printf("trx:%d\n",Rxdata);
//	return Rxdata;
	/* 等待发送缓冲区为空，TXE事件 */
	while (__HAL_SPI_GET_FLAG( &hspi1, SPI_FLAG_TXE ) == RESET);
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <SPI_ReadWriteByte+0x4c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d1f8      	bne.n	8007b96 <SPI_ReadWriteByte+0xe>

	/* 写入数据寄存器，把要写入的数据写入发送缓冲区 */
	*((__IO uint8_t *)&SPI1->DR) = TxData;
 8007ba4:	4a0c      	ldr	r2, [pc, #48]	; (8007bd8 <SPI_ReadWriteByte+0x50>)
 8007ba6:	1dfb      	adds	r3, r7, #7
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	7013      	strb	r3, [r2, #0]

	/* 等待接收缓冲区非空，RXNE事件 */
	while (__HAL_SPI_GET_FLAG( &hspi1, SPI_FLAG_RXNE ) == RESET);
 8007bac:	46c0      	nop			; (mov r8, r8)
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <SPI_ReadWriteByte+0x4c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d1f8      	bne.n	8007bae <SPI_ReadWriteByte+0x26>

	/* 读取数据寄存器，获取接收缓冲区数据 */
	Rxdata = *(__IO uint8_t *)&SPI1->DR;
 8007bbc:	4a06      	ldr	r2, [pc, #24]	; (8007bd8 <SPI_ReadWriteByte+0x50>)
 8007bbe:	210f      	movs	r1, #15
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	701a      	strb	r2, [r3, #0]
	return Rxdata;
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	781b      	ldrb	r3, [r3, #0]
}
 8007bca:	0018      	movs	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	b004      	add	sp, #16
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	20000120 	.word	0x20000120
 8007bd8:	4001300c 	.word	0x4001300c

08007bdc <SD_WaitReady>:
* Return         : u8
*                   0： 成功
*                   other：失败
*******************************************************************************/
u8 SD_WaitReady(void)
{
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
    u8 r1;
    u16 retry;
    retry = 0;
 8007be2:	1dbb      	adds	r3, r7, #6
 8007be4:	2200      	movs	r2, #0
 8007be6:	801a      	strh	r2, [r3, #0]
    do
    {
        r1 = SPI_ReadWriteByte(0xFF);
 8007be8:	1d7c      	adds	r4, r7, #5
 8007bea:	20ff      	movs	r0, #255	; 0xff
 8007bec:	f7ff ffcc 	bl	8007b88 <SPI_ReadWriteByte>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	7023      	strb	r3, [r4, #0]
        if(retry==0xfffe){
 8007bf4:	1dbb      	adds	r3, r7, #6
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	4a06      	ldr	r2, [pc, #24]	; (8007c14 <SD_WaitReady+0x38>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d101      	bne.n	8007c02 <SD_WaitReady+0x26>
            return 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e004      	b.n	8007c0c <SD_WaitReady+0x30>
        }
    }while(r1!=0xFF);
 8007c02:	1d7b      	adds	r3, r7, #5
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2bff      	cmp	r3, #255	; 0xff
 8007c08:	d1ee      	bne.n	8007be8 <SD_WaitReady+0xc>

    return 0;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b003      	add	sp, #12
 8007c12:	bd90      	pop	{r4, r7, pc}
 8007c14:	0000fffe 	.word	0x0000fffe

08007c18 <SD_SendCommand>:
*                  u8 crc   crc校验值
* Output         : None
* Return         : u8 r1 SD卡返回的响应
*******************************************************************************/
u8 SD_SendCommand(u8 cmd, u32 arg, u8 crc)
{
 8007c18:	b5b0      	push	{r4, r5, r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6039      	str	r1, [r7, #0]
 8007c20:	0011      	movs	r1, r2
 8007c22:	1dfb      	adds	r3, r7, #7
 8007c24:	1c02      	adds	r2, r0, #0
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	1dbb      	adds	r3, r7, #6
 8007c2a:	1c0a      	adds	r2, r1, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
    unsigned char r1;
    unsigned char Retry = 0;
 8007c2e:	230f      	movs	r3, #15
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]

    SPI_SD_DisableSelect();
 8007c36:	f7ff ff69 	bl	8007b0c <SPI_SD_DisableSelect>
    SPI_ReadWriteByte(0xff);
 8007c3a:	20ff      	movs	r0, #255	; 0xff
 8007c3c:	f7ff ffa4 	bl	8007b88 <SPI_ReadWriteByte>
    //片选端置低，选中SD卡
    SPI_SD_EnableSelect();
 8007c40:	f7ff ff58 	bl	8007af4 <SPI_SD_EnableSelect>
 //   delay_ms(10);
    //发送
    SPI_ReadWriteByte(cmd | 0x40);                         //分别写入命令
 8007c44:	1dfb      	adds	r3, r7, #7
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2240      	movs	r2, #64	; 0x40
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f7ff ff9a 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg >> 24);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	0e1b      	lsrs	r3, r3, #24
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f7ff ff94 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg >> 16);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	0c1b      	lsrs	r3, r3, #16
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	0018      	movs	r0, r3
 8007c68:	f7ff ff8e 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg >> 8);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7ff ff88 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7ff ff83 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(crc);
 8007c82:	1dbb      	adds	r3, r7, #6
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7ff ff7e 	bl	8007b88 <SPI_ReadWriteByte>

    //等待响应，或超时退出
    while((r1 = SPI_ReadWriteByte(0xFF))==0xFF)
 8007c8c:	e009      	b.n	8007ca2 <SD_SendCommand+0x8a>
    {
        Retry++;
 8007c8e:	210f      	movs	r1, #15
 8007c90:	187b      	adds	r3, r7, r1
 8007c92:	781a      	ldrb	r2, [r3, #0]
 8007c94:	187b      	adds	r3, r7, r1
 8007c96:	3201      	adds	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
        if(Retry > 200)
 8007c9a:	187b      	adds	r3, r7, r1
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2bc8      	cmp	r3, #200	; 0xc8
 8007ca0:	d80b      	bhi.n	8007cba <SD_SendCommand+0xa2>
    while((r1 = SPI_ReadWriteByte(0xFF))==0xFF)
 8007ca2:	250e      	movs	r5, #14
 8007ca4:	197c      	adds	r4, r7, r5
 8007ca6:	20ff      	movs	r0, #255	; 0xff
 8007ca8:	f7ff ff6e 	bl	8007b88 <SPI_ReadWriteByte>
 8007cac:	0003      	movs	r3, r0
 8007cae:	7023      	strb	r3, [r4, #0]
 8007cb0:	197b      	adds	r3, r7, r5
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2bff      	cmp	r3, #255	; 0xff
 8007cb6:	d0ea      	beq.n	8007c8e <SD_SendCommand+0x76>
 8007cb8:	e000      	b.n	8007cbc <SD_SendCommand+0xa4>
        {
            break;
 8007cba:	46c0      	nop			; (mov r8, r8)
        }
    }


    //关闭片选
    SPI_SD_DisableSelect();
 8007cbc:	f7ff ff26 	bl	8007b0c <SPI_SD_DisableSelect>
    //在总线上额外增加8个时钟，让SD卡完成剩下的工作
    SPI_ReadWriteByte(0xFF);
 8007cc0:	20ff      	movs	r0, #255	; 0xff
 8007cc2:	f7ff ff61 	bl	8007b88 <SPI_ReadWriteByte>

    //返回状态值
    return r1;
 8007cc6:	230e      	movs	r3, #14
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	781b      	ldrb	r3, [r3, #0]
}
 8007ccc:	0018      	movs	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b004      	add	sp, #16
 8007cd2:	bdb0      	pop	{r4, r5, r7, pc}

08007cd4 <SD_SendCommand_NoDeassert>:
*                  u8 crc   crc校验值
* Output         : None
* Return         : u8 r1 SD卡返回的响应
*******************************************************************************/
u8 SD_SendCommand_NoDeassert(u8 cmd, u32 arg, u8 crc)
{
 8007cd4:	b5b0      	push	{r4, r5, r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6039      	str	r1, [r7, #0]
 8007cdc:	0011      	movs	r1, r2
 8007cde:	1dfb      	adds	r3, r7, #7
 8007ce0:	1c02      	adds	r2, r0, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	1dbb      	adds	r3, r7, #6
 8007ce6:	1c0a      	adds	r2, r1, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
    unsigned char r1;
    unsigned char Retry = 0;
 8007cea:	230f      	movs	r3, #15
 8007cec:	18fb      	adds	r3, r7, r3
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]

    SPI_ReadWriteByte(0xff);
 8007cf2:	20ff      	movs	r0, #255	; 0xff
 8007cf4:	f7ff ff48 	bl	8007b88 <SPI_ReadWriteByte>
    //片选端置低，选中SD卡
    SPI_SD_EnableSelect();
 8007cf8:	f7ff fefc 	bl	8007af4 <SPI_SD_EnableSelect>

    //发送
    SPI_ReadWriteByte(cmd | 0x40);                         //分别写入命令
 8007cfc:	1dfb      	adds	r3, r7, #7
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2240      	movs	r2, #64	; 0x40
 8007d02:	4313      	orrs	r3, r2
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	0018      	movs	r0, r3
 8007d08:	f7ff ff3e 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg >> 24);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	0e1b      	lsrs	r3, r3, #24
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	0018      	movs	r0, r3
 8007d14:	f7ff ff38 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg >> 16);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	0c1b      	lsrs	r3, r3, #16
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f7ff ff32 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg >> 8);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f7ff ff2c 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(arg);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	0018      	movs	r0, r3
 8007d36:	f7ff ff27 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(crc);
 8007d3a:	1dbb      	adds	r3, r7, #6
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7ff ff22 	bl	8007b88 <SPI_ReadWriteByte>

    //等待响应，或超时退出
    while((r1 = SPI_ReadWriteByte(0xFF))==0xFF)
 8007d44:	e009      	b.n	8007d5a <SD_SendCommand_NoDeassert+0x86>
    {
        Retry++;
 8007d46:	210f      	movs	r1, #15
 8007d48:	187b      	adds	r3, r7, r1
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	187b      	adds	r3, r7, r1
 8007d4e:	3201      	adds	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
        if(Retry > 200)
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2bc8      	cmp	r3, #200	; 0xc8
 8007d58:	d80b      	bhi.n	8007d72 <SD_SendCommand_NoDeassert+0x9e>
    while((r1 = SPI_ReadWriteByte(0xFF))==0xFF)
 8007d5a:	250e      	movs	r5, #14
 8007d5c:	197c      	adds	r4, r7, r5
 8007d5e:	20ff      	movs	r0, #255	; 0xff
 8007d60:	f7ff ff12 	bl	8007b88 <SPI_ReadWriteByte>
 8007d64:	0003      	movs	r3, r0
 8007d66:	7023      	strb	r3, [r4, #0]
 8007d68:	197b      	adds	r3, r7, r5
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2bff      	cmp	r3, #255	; 0xff
 8007d6e:	d0ea      	beq.n	8007d46 <SD_SendCommand_NoDeassert+0x72>
 8007d70:	e000      	b.n	8007d74 <SD_SendCommand_NoDeassert+0xa0>
        {
        	break;
 8007d72:	46c0      	nop			; (mov r8, r8)
        }
    }
    //返回响应值
    return r1;
 8007d74:	230e      	movs	r3, #14
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	781b      	ldrb	r3, [r3, #0]
}
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b004      	add	sp, #16
 8007d80:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d84 <SD_Init>:
*                  0：NO_ERR
*                  1：TIME_OUT
*                  99：NO_CARD
*******************************************************************************/
u8 SD_Init(void)
{
 8007d84:	b5b0      	push	{r4, r5, r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
    u16 i;      // 用来循环计数
    u8 r1;      // 存放SD卡的返回值
    u16 retry;  // 用来进行超时计数
    u8 buff[6];
    //如果没有检测到卡插入，直接退出，返回错误标志
    if(!SPI_SD_GetSDCard())
 8007d8a:	f7ff fecb 	bl	8007b24 <SPI_SD_GetSDCard>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d101      	bne.n	8007d96 <SD_Init+0x12>
    {
        return STA_NODISK;  //  FatFS错误标志：没有插入磁盘
 8007d92:	2302      	movs	r3, #2
 8007d94:	e178      	b.n	8008088 <SD_Init+0x304>
    }
    //SD卡上电
   // SD_PWR_ON();
    // 纯延时，等待SD卡上电完成
    for(i=0;i<0xf00;i++);
 8007d96:	230e      	movs	r3, #14
 8007d98:	18fb      	adds	r3, r7, r3
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	e005      	b.n	8007dac <SD_Init+0x28>
 8007da0:	210e      	movs	r1, #14
 8007da2:	187b      	adds	r3, r7, r1
 8007da4:	881a      	ldrh	r2, [r3, #0]
 8007da6:	187b      	adds	r3, r7, r1
 8007da8:	3201      	adds	r2, #1
 8007daa:	801a      	strh	r2, [r3, #0]
 8007dac:	210e      	movs	r1, #14
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	23f0      	movs	r3, #240	; 0xf0
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d3f2      	bcc.n	8007da0 <SD_Init+0x1c>
    //先产生>74个脉冲，让SD卡自己初始化完成
    for(i=0;i<10;i++)
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	801a      	strh	r2, [r3, #0]
 8007dc0:	e008      	b.n	8007dd4 <SD_Init+0x50>
    {
       SPI_ReadWriteByte(0xFF);
 8007dc2:	20ff      	movs	r0, #255	; 0xff
 8007dc4:	f7ff fee0 	bl	8007b88 <SPI_ReadWriteByte>
    for(i=0;i<10;i++)
 8007dc8:	210e      	movs	r1, #14
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	881a      	ldrh	r2, [r3, #0]
 8007dce:	187b      	adds	r3, r7, r1
 8007dd0:	3201      	adds	r2, #1
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	230e      	movs	r3, #14
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d9f1      	bls.n	8007dc2 <SD_Init+0x3e>
    }

    //-----------------SD卡复位到idle开始-----------------
    //循环连续发送CMD0，直到SD卡返回0x01,进入IDLE状态
    //超时则直接退出
    retry = 0;
 8007dde:	230a      	movs	r3, #10
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	2200      	movs	r2, #0
 8007de4:	801a      	strh	r2, [r3, #0]
    do
    {
        //发送CMD0，让SD卡进入IDLE状态
        r1 = SD_SendCommand(CMD0, 0, 0x95);
 8007de6:	250d      	movs	r5, #13
 8007de8:	197c      	adds	r4, r7, r5
 8007dea:	2295      	movs	r2, #149	; 0x95
 8007dec:	2100      	movs	r1, #0
 8007dee:	2000      	movs	r0, #0
 8007df0:	f7ff ff12 	bl	8007c18 <SD_SendCommand>
 8007df4:	0003      	movs	r3, r0
 8007df6:	7023      	strb	r3, [r4, #0]
        retry++;
 8007df8:	210a      	movs	r1, #10
 8007dfa:	187b      	adds	r3, r7, r1
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	187b      	adds	r3, r7, r1
 8007e00:	3201      	adds	r2, #1
 8007e02:	801a      	strh	r2, [r3, #0]
    }while((r1 != 0x01) && (retry<200));
 8007e04:	197b      	adds	r3, r7, r5
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d003      	beq.n	8007e14 <SD_Init+0x90>
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	2bc7      	cmp	r3, #199	; 0xc7
 8007e12:	d9e8      	bls.n	8007de6 <SD_Init+0x62>
    //跳出循环后，检查原因：初始化成功？or 重试超时？
    if(retry>=200)
 8007e14:	230a      	movs	r3, #10
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	2bc7      	cmp	r3, #199	; 0xc7
 8007e1c:	d901      	bls.n	8007e22 <SD_Init+0x9e>
    {
    	return STA_NOINIT;   //超时返回1
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e132      	b.n	8008088 <SD_Init+0x304>
    //获取卡片的SD版本信息
//    GPIO_Init(SD_DET_GPIO_PORT, &GPIO_InitStructure);
  //  SPI_SD_EnableSelect(SD_DET_GPIO_PORT, GPIO_Pin_0);
 //   delay_ms(1000);
//    GPIO_SetBits(SD_DET_GPIO_PORT, GPIO_Pin_0);
    SPI_SD_EnableSelect();
 8007e22:	f7ff fe67 	bl	8007af4 <SPI_SD_EnableSelect>
    r1 = SD_SendCommand_NoDeassert(COM8, 0x1aa, 0x87);
 8007e26:	250d      	movs	r5, #13
 8007e28:	197c      	adds	r4, r7, r5
 8007e2a:	23d5      	movs	r3, #213	; 0xd5
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	2287      	movs	r2, #135	; 0x87
 8007e30:	0019      	movs	r1, r3
 8007e32:	2008      	movs	r0, #8
 8007e34:	f7ff ff4e 	bl	8007cd4 <SD_SendCommand_NoDeassert>
 8007e38:	0003      	movs	r3, r0
 8007e3a:	7023      	strb	r3, [r4, #0]
    //如果卡片版本信息是v1.0版本的，即r1=0x05，则进行以下初始化
    if(r1 == 0x05)
 8007e3c:	197b      	adds	r3, r7, r5
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d000      	beq.n	8007e46 <SD_Init+0xc2>
 8007e44:	e07e      	b.n	8007f44 <SD_Init+0x1c0>
    {
    	printf("v1.0\n");
 8007e46:	4b92      	ldr	r3, [pc, #584]	; (8008090 <SD_Init+0x30c>)
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f000 fc57 	bl	80086fc <puts>
    	//设置卡类型为SDV1.0，如果后面检测到为MMC卡，再修改为MMC
        SD_Type = SD_TYPE_V1;
 8007e4e:	4b91      	ldr	r3, [pc, #580]	; (8008094 <SD_Init+0x310>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]

        //如果是V1.0卡，CMD8指令后没有后续数据
        //片选置高，结束本次命令
        SPI_SD_DisableSelect();
 8007e54:	f7ff fe5a 	bl	8007b0c <SPI_SD_DisableSelect>
        //多发8个CLK，让SD结束后续操作
        SPI_ReadWriteByte(0xFF);
 8007e58:	20ff      	movs	r0, #255	; 0xff
 8007e5a:	f7ff fe95 	bl	8007b88 <SPI_ReadWriteByte>
        //-----------------SD卡、MMC卡初始化开始-----------------

        //发卡初始化指令CMD55+ACMD41
        // 如果有应答，说明是SD卡，且初始化完成
        // 没有回应，说明是MMC卡，额外进行相应初始化
        retry = 0;
 8007e5e:	230a      	movs	r3, #10
 8007e60:	18fb      	adds	r3, r7, r3
 8007e62:	2200      	movs	r2, #0
 8007e64:	801a      	strh	r2, [r3, #0]
        do
        {
            //先发CMD55，应返回0x01；否则出错
            r1 = SD_SendCommand(CMD55, 0, 0);
 8007e66:	250d      	movs	r5, #13
 8007e68:	197c      	adds	r4, r7, r5
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	2037      	movs	r0, #55	; 0x37
 8007e70:	f7ff fed2 	bl	8007c18 <SD_SendCommand>
 8007e74:	0003      	movs	r3, r0
 8007e76:	7023      	strb	r3, [r4, #0]
            if(r1 != 0x01)
 8007e78:	002a      	movs	r2, r5
 8007e7a:	18bb      	adds	r3, r7, r2
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d002      	beq.n	8007e88 <SD_Init+0x104>
            {
                return r1;
 8007e82:	18bb      	adds	r3, r7, r2
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	e0ff      	b.n	8008088 <SD_Init+0x304>
            }
            //得到正确响应后，发ACMD41，应得到返回值0x00，否则重试200次
            r1 = SD_SendCommand(ACMD41, 0, 0);
 8007e88:	250d      	movs	r5, #13
 8007e8a:	197c      	adds	r4, r7, r5
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	2029      	movs	r0, #41	; 0x29
 8007e92:	f7ff fec1 	bl	8007c18 <SD_SendCommand>
 8007e96:	0003      	movs	r3, r0
 8007e98:	7023      	strb	r3, [r4, #0]
            retry++;
 8007e9a:	210a      	movs	r1, #10
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	881a      	ldrh	r2, [r3, #0]
 8007ea0:	187b      	adds	r3, r7, r1
 8007ea2:	3201      	adds	r2, #1
 8007ea4:	801a      	strh	r2, [r3, #0]
        }while((r1!=0x00) && (retry<400));
 8007ea6:	197b      	adds	r3, r7, r5
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <SD_Init+0x136>
 8007eae:	187b      	adds	r3, r7, r1
 8007eb0:	881a      	ldrh	r2, [r3, #0]
 8007eb2:	23c8      	movs	r3, #200	; 0xc8
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d3d5      	bcc.n	8007e66 <SD_Init+0xe2>
        // 判断是超时还是得到正确回应
        // 若有回应：是SD卡；没有回应：是MMC卡

        //----------MMC卡额外初始化操作开始------------
        if(retry==400)
 8007eba:	210a      	movs	r1, #10
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	881a      	ldrh	r2, [r3, #0]
 8007ec0:	23c8      	movs	r3, #200	; 0xc8
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d127      	bne.n	8007f18 <SD_Init+0x194>
        {
            retry = 0;
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	2200      	movs	r2, #0
 8007ecc:	801a      	strh	r2, [r3, #0]
            //发送MMC卡初始化命令（没有测试）
            do
            {
                r1 = SD_SendCommand(1, 0, 0);
 8007ece:	250d      	movs	r5, #13
 8007ed0:	197c      	adds	r4, r7, r5
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f7ff fe9e 	bl	8007c18 <SD_SendCommand>
 8007edc:	0003      	movs	r3, r0
 8007ede:	7023      	strb	r3, [r4, #0]
                retry++;
 8007ee0:	210a      	movs	r1, #10
 8007ee2:	187b      	adds	r3, r7, r1
 8007ee4:	881a      	ldrh	r2, [r3, #0]
 8007ee6:	187b      	adds	r3, r7, r1
 8007ee8:	3201      	adds	r2, #1
 8007eea:	801a      	strh	r2, [r3, #0]
            }while((r1!=0x00)&& (retry<400));
 8007eec:	197b      	adds	r3, r7, r5
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <SD_Init+0x17c>
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	881a      	ldrh	r2, [r3, #0]
 8007ef8:	23c8      	movs	r3, #200	; 0xc8
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d3e6      	bcc.n	8007ece <SD_Init+0x14a>
            if(retry==400)
 8007f00:	230a      	movs	r3, #10
 8007f02:	18fb      	adds	r3, r7, r3
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	23c8      	movs	r3, #200	; 0xc8
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d101      	bne.n	8007f12 <SD_Init+0x18e>
            {
                return 1;   //MMC卡初始化超时
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e0ba      	b.n	8008088 <SD_Init+0x304>
            }
            //写入卡类型
            SD_Type = SD_TYPE_MMC;
 8007f12:	4b60      	ldr	r3, [pc, #384]	; (8008094 <SD_Init+0x310>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
        //----------MMC卡额外初始化操作结束------------

        //设置SPI为高速模式
   //     SPI_SetSpeed(1);

        SPI_ReadWriteByte(0xFF);
 8007f18:	20ff      	movs	r0, #255	; 0xff
 8007f1a:	f7ff fe35 	bl	8007b88 <SPI_ReadWriteByte>
        {
        return r1;  //命令错误，返回r1
    }
        */
        //设置Sector Size
        r1 = SD_SendCommand(CMD16, 512, 0xff);
 8007f1e:	250d      	movs	r5, #13
 8007f20:	197c      	adds	r4, r7, r5
 8007f22:	2380      	movs	r3, #128	; 0x80
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	22ff      	movs	r2, #255	; 0xff
 8007f28:	0019      	movs	r1, r3
 8007f2a:	2010      	movs	r0, #16
 8007f2c:	f7ff fe74 	bl	8007c18 <SD_SendCommand>
 8007f30:	0003      	movs	r3, r0
 8007f32:	7023      	strb	r3, [r4, #0]
        if(r1 != 0x00)
 8007f34:	197b      	adds	r3, r7, r5
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d100      	bne.n	8007f3e <SD_Init+0x1ba>
 8007f3c:	e0a1      	b.n	8008082 <SD_Init+0x2fe>
        {
        	return r1;  //命令错误，返回r1
 8007f3e:	197b      	adds	r3, r7, r5
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	e0a1      	b.n	8008088 <SD_Init+0x304>
    }//SD卡为V1.0版本的初始化结束


    //下面是V2.0卡的初始化
    //其中需要读取OCR数据，判断是SD2.0还是SD2.0HC卡
    else if(r1 == 0x01)
 8007f44:	230d      	movs	r3, #13
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d000      	beq.n	8007f50 <SD_Init+0x1cc>
 8007f4e:	e098      	b.n	8008082 <SD_Init+0x2fe>
    {
    	printf("v2.0\n");
 8007f50:	4b51      	ldr	r3, [pc, #324]	; (8008098 <SD_Init+0x314>)
 8007f52:	0018      	movs	r0, r3
 8007f54:	f000 fbd2 	bl	80086fc <puts>
    	//V2.0的卡，CMD8命令后会传回4字节的数据，要跳过再结束本命令
        buff[0] = SPI_ReadWriteByte(0xFF);  //should be 0x00
 8007f58:	20ff      	movs	r0, #255	; 0xff
 8007f5a:	f7ff fe15 	bl	8007b88 <SPI_ReadWriteByte>
 8007f5e:	0003      	movs	r3, r0
 8007f60:	001a      	movs	r2, r3
 8007f62:	1d3b      	adds	r3, r7, #4
 8007f64:	701a      	strb	r2, [r3, #0]
        buff[1] = SPI_ReadWriteByte(0xFF);  //should be 0x00
 8007f66:	20ff      	movs	r0, #255	; 0xff
 8007f68:	f7ff fe0e 	bl	8007b88 <SPI_ReadWriteByte>
 8007f6c:	0003      	movs	r3, r0
 8007f6e:	001a      	movs	r2, r3
 8007f70:	1d3b      	adds	r3, r7, #4
 8007f72:	705a      	strb	r2, [r3, #1]
        buff[2] = SPI_ReadWriteByte(0xFF);  //should be 0x01
 8007f74:	20ff      	movs	r0, #255	; 0xff
 8007f76:	f7ff fe07 	bl	8007b88 <SPI_ReadWriteByte>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	1d3b      	adds	r3, r7, #4
 8007f80:	709a      	strb	r2, [r3, #2]
        buff[3] = SPI_ReadWriteByte(0xFF);  //should be 0xAA
 8007f82:	20ff      	movs	r0, #255	; 0xff
 8007f84:	f7ff fe00 	bl	8007b88 <SPI_ReadWriteByte>
 8007f88:	0003      	movs	r3, r0
 8007f8a:	001a      	movs	r2, r3
 8007f8c:	1d3b      	adds	r3, r7, #4
 8007f8e:	70da      	strb	r2, [r3, #3]

        SPI_SD_DisableSelect();
 8007f90:	f7ff fdbc 	bl	8007b0c <SPI_SD_DisableSelect>
        //the next 8 clocks
        SPI_ReadWriteByte(0xFF);
 8007f94:	20ff      	movs	r0, #255	; 0xff
 8007f96:	f7ff fdf7 	bl	8007b88 <SPI_ReadWriteByte>
        //判断该卡是否支持2.7V-3.6V的电压范围
        if(buff[2]==0x01 && buff[3]==0xAA)
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	789b      	ldrb	r3, [r3, #2]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d000      	beq.n	8007fa4 <SD_Init+0x220>
 8007fa2:	e06e      	b.n	8008082 <SD_Init+0x2fe>
 8007fa4:	1d3b      	adds	r3, r7, #4
 8007fa6:	78db      	ldrb	r3, [r3, #3]
 8007fa8:	2baa      	cmp	r3, #170	; 0xaa
 8007faa:	d16a      	bne.n	8008082 <SD_Init+0x2fe>
        {
            //支持电压范围，可以操作
            retry = 0;
 8007fac:	230a      	movs	r3, #10
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	801a      	strh	r2, [r3, #0]
            //发卡初始化指令CMD55+ACMD41
            do
            {
                r1 = SD_SendCommand(CMD55, 0, 0);
 8007fb4:	250d      	movs	r5, #13
 8007fb6:	197c      	adds	r4, r7, r5
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2100      	movs	r1, #0
 8007fbc:	2037      	movs	r0, #55	; 0x37
 8007fbe:	f7ff fe2b 	bl	8007c18 <SD_SendCommand>
 8007fc2:	0003      	movs	r3, r0
 8007fc4:	7023      	strb	r3, [r4, #0]
                if(r1!=0x01)
 8007fc6:	002a      	movs	r2, r5
 8007fc8:	18bb      	adds	r3, r7, r2
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d002      	beq.n	8007fd6 <SD_Init+0x252>
                {
                	return r1;
 8007fd0:	18bb      	adds	r3, r7, r2
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	e058      	b.n	8008088 <SD_Init+0x304>
                }
                r1 = SD_SendCommand(ACMD41, 0x40000000, 0);
 8007fd6:	250d      	movs	r5, #13
 8007fd8:	197c      	adds	r4, r7, r5
 8007fda:	2380      	movs	r3, #128	; 0x80
 8007fdc:	05db      	lsls	r3, r3, #23
 8007fde:	2200      	movs	r2, #0
 8007fe0:	0019      	movs	r1, r3
 8007fe2:	2029      	movs	r0, #41	; 0x29
 8007fe4:	f7ff fe18 	bl	8007c18 <SD_SendCommand>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	7023      	strb	r3, [r4, #0]
                if(retry>200)
 8007fec:	230a      	movs	r3, #10
 8007fee:	18fb      	adds	r3, r7, r3
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	2bc8      	cmp	r3, #200	; 0xc8
 8007ff4:	d902      	bls.n	8007ffc <SD_Init+0x278>
                {
                	return r1;  //超时则返回r1状态
 8007ff6:	197b      	adds	r3, r7, r5
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	e045      	b.n	8008088 <SD_Init+0x304>
                }
            }while(r1!=0);
 8007ffc:	250d      	movs	r5, #13
 8007ffe:	197b      	adds	r3, r7, r5
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1d6      	bne.n	8007fb4 <SD_Init+0x230>

            //初始化指令发送完成，接下来获取OCR信息

            //-----------鉴别SD2.0卡版本开始-----------
            r1 = SD_SendCommand_NoDeassert(CMD58, 0, 0);
 8008006:	197c      	adds	r4, r7, r5
 8008008:	2200      	movs	r2, #0
 800800a:	2100      	movs	r1, #0
 800800c:	203a      	movs	r0, #58	; 0x3a
 800800e:	f7ff fe61 	bl	8007cd4 <SD_SendCommand_NoDeassert>
 8008012:	0003      	movs	r3, r0
 8008014:	7023      	strb	r3, [r4, #0]
            if(r1!=0x00)
 8008016:	002a      	movs	r2, r5
 8008018:	18bb      	adds	r3, r7, r2
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <SD_Init+0x2a2>
            {
                return r1;  //如果命令没有返回正确应答，直接退出，返回应答
 8008020:	18bb      	adds	r3, r7, r2
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	e030      	b.n	8008088 <SD_Init+0x304>
            }
            //读OCR指令发出后，紧接着是4字节的OCR信息
            buff[0] = SPI_ReadWriteByte(0xFF);
 8008026:	20ff      	movs	r0, #255	; 0xff
 8008028:	f7ff fdae 	bl	8007b88 <SPI_ReadWriteByte>
 800802c:	0003      	movs	r3, r0
 800802e:	001a      	movs	r2, r3
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	701a      	strb	r2, [r3, #0]
            buff[1] = SPI_ReadWriteByte(0xFF);
 8008034:	20ff      	movs	r0, #255	; 0xff
 8008036:	f7ff fda7 	bl	8007b88 <SPI_ReadWriteByte>
 800803a:	0003      	movs	r3, r0
 800803c:	001a      	movs	r2, r3
 800803e:	1d3b      	adds	r3, r7, #4
 8008040:	705a      	strb	r2, [r3, #1]
            buff[2] = SPI_ReadWriteByte(0xFF);
 8008042:	20ff      	movs	r0, #255	; 0xff
 8008044:	f7ff fda0 	bl	8007b88 <SPI_ReadWriteByte>
 8008048:	0003      	movs	r3, r0
 800804a:	001a      	movs	r2, r3
 800804c:	1d3b      	adds	r3, r7, #4
 800804e:	709a      	strb	r2, [r3, #2]
            buff[3] = SPI_ReadWriteByte(0xFF);
 8008050:	20ff      	movs	r0, #255	; 0xff
 8008052:	f7ff fd99 	bl	8007b88 <SPI_ReadWriteByte>
 8008056:	0003      	movs	r3, r0
 8008058:	001a      	movs	r2, r3
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	70da      	strb	r2, [r3, #3]

            //OCR接收完成，片选置高
            SPI_SD_DisableSelect();
 800805e:	f7ff fd55 	bl	8007b0c <SPI_SD_DisableSelect>
            SPI_ReadWriteByte(0xFF);
 8008062:	20ff      	movs	r0, #255	; 0xff
 8008064:	f7ff fd90 	bl	8007b88 <SPI_ReadWriteByte>
            //检查接收到的OCR中的bit30位（CCS），确定其为SD2.0还是SDHC
            //如果CCS=1：SDHC   CCS=0：SD2.0
            if((buff[0]&0x40)!=0)    //检查CCS
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	001a      	movs	r2, r3
 800806e:	2340      	movs	r3, #64	; 0x40
 8008070:	4013      	ands	r3, r2
 8008072:	d003      	beq.n	800807c <SD_Init+0x2f8>
            {
                SD_Type = SD_TYPE_V2HC;
 8008074:	4b07      	ldr	r3, [pc, #28]	; (8008094 <SD_Init+0x310>)
 8008076:	2204      	movs	r2, #4
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	e002      	b.n	8008082 <SD_Init+0x2fe>
            }
            else
            {
                SD_Type = SD_TYPE_V2;
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <SD_Init+0x310>)
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]

    }

//    SPI_SetSpeed(SPI_SPEED_HIGH);

    return r1;
 8008082:	230d      	movs	r3, #13
 8008084:	18fb      	adds	r3, r7, r3
 8008086:	781b      	ldrb	r3, [r3, #0]
}
 8008088:	0018      	movs	r0, r3
 800808a:	46bd      	mov	sp, r7
 800808c:	b004      	add	sp, #16
 800808e:	bdb0      	pop	{r4, r5, r7, pc}
 8008090:	0800a070 	.word	0x0800a070
 8008094:	200002cc 	.word	0x200002cc
 8008098:	0800a078 	.word	0x0800a078

0800809c <SD_ReceiveData>:
* Return         : u8
*                  0：NO_ERR
*                  other：错误信息
*******************************************************************************/
u8 SD_ReceiveData(u8 *data, u16 len, u8 release)
{
 800809c:	b590      	push	{r4, r7, lr}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	0008      	movs	r0, r1
 80080a6:	0011      	movs	r1, r2
 80080a8:	1cbb      	adds	r3, r7, #2
 80080aa:	1c02      	adds	r2, r0, #0
 80080ac:	801a      	strh	r2, [r3, #0]
 80080ae:	1c7b      	adds	r3, r7, #1
 80080b0:	1c0a      	adds	r2, r1, #0
 80080b2:	701a      	strb	r2, [r3, #0]
    u16 retry;
    u8 r1;

    // 启动一次传输
    SPI_SD_EnableSelect();
 80080b4:	f7ff fd1e 	bl	8007af4 <SPI_SD_EnableSelect>
    //等待SD卡发回数据起始令牌0xFE
    retry = 0;
 80080b8:	230e      	movs	r3, #14
 80080ba:	18fb      	adds	r3, r7, r3
 80080bc:	2200      	movs	r2, #0
 80080be:	801a      	strh	r2, [r3, #0]
    do
    {
        r1 = SPI_ReadWriteByte(0xFF);
 80080c0:	230d      	movs	r3, #13
 80080c2:	18fc      	adds	r4, r7, r3
 80080c4:	20ff      	movs	r0, #255	; 0xff
 80080c6:	f7ff fd5f 	bl	8007b88 <SPI_ReadWriteByte>
 80080ca:	0003      	movs	r3, r0
 80080cc:	7023      	strb	r3, [r4, #0]
        retry++;
 80080ce:	210e      	movs	r1, #14
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	3201      	adds	r2, #1
 80080d8:	801a      	strh	r2, [r3, #0]
        if(retry>2000)  //2000次等待后没有应答，退出报错
 80080da:	187b      	adds	r3, r7, r1
 80080dc:	881a      	ldrh	r2, [r3, #0]
 80080de:	23fa      	movs	r3, #250	; 0xfa
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d903      	bls.n	80080ee <SD_ReceiveData+0x52>
        {
            SPI_SD_DisableSelect();
 80080e6:	f7ff fd11 	bl	8007b0c <SPI_SD_DisableSelect>
            return 1;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e026      	b.n	800813c <SD_ReceiveData+0xa0>
        }
    }while(r1 != 0xFE);
 80080ee:	230d      	movs	r3, #13
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2bfe      	cmp	r3, #254	; 0xfe
 80080f6:	d1e3      	bne.n	80080c0 <SD_ReceiveData+0x24>
    //开始接收数据
    while(len--)
 80080f8:	e009      	b.n	800810e <SD_ReceiveData+0x72>
    {
        *data = SPI_ReadWriteByte(0xFF);
 80080fa:	20ff      	movs	r0, #255	; 0xff
 80080fc:	f7ff fd44 	bl	8007b88 <SPI_ReadWriteByte>
 8008100:	0003      	movs	r3, r0
 8008102:	001a      	movs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	701a      	strb	r2, [r3, #0]
        data++;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3301      	adds	r3, #1
 800810c:	607b      	str	r3, [r7, #4]
    while(len--)
 800810e:	1cbb      	adds	r3, r7, #2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	1cba      	adds	r2, r7, #2
 8008114:	1e59      	subs	r1, r3, #1
 8008116:	8011      	strh	r1, [r2, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1ee      	bne.n	80080fa <SD_ReceiveData+0x5e>
    }
    //下面是2个伪CRC（dummy CRC）
    SPI_ReadWriteByte(0xFF);
 800811c:	20ff      	movs	r0, #255	; 0xff
 800811e:	f7ff fd33 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(0xFF);
 8008122:	20ff      	movs	r0, #255	; 0xff
 8008124:	f7ff fd30 	bl	8007b88 <SPI_ReadWriteByte>
    //按需释放总线，将CS置高
    if(release == RELEASE)
 8008128:	1c7b      	adds	r3, r7, #1
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d104      	bne.n	800813a <SD_ReceiveData+0x9e>
    {
        //传输结束
        SPI_SD_DisableSelect();
 8008130:	f7ff fcec 	bl	8007b0c <SPI_SD_DisableSelect>
        SPI_ReadWriteByte(0xFF);
 8008134:	20ff      	movs	r0, #255	; 0xff
 8008136:	f7ff fd27 	bl	8007b88 <SPI_ReadWriteByte>
    }

    return 0;
 800813a:	2300      	movs	r3, #0
}
 800813c:	0018      	movs	r0, r3
 800813e:	46bd      	mov	sp, r7
 8008140:	b005      	add	sp, #20
 8008142:	bd90      	pop	{r4, r7, pc}

08008144 <SD_GetCSD>:
*                  0：NO_ERR
*                  1：TIME_OUT
*                  other：错误信息
*******************************************************************************/
u8 SD_GetCSD(u8 *csd_data)
{
 8008144:	b5b0      	push	{r4, r5, r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
    u8 r1;

    //发CMD9命令，读CSD
    r1 = SD_SendCommand(CMD9, 0, 0xFF);
 800814c:	250f      	movs	r5, #15
 800814e:	197c      	adds	r4, r7, r5
 8008150:	22ff      	movs	r2, #255	; 0xff
 8008152:	2100      	movs	r1, #0
 8008154:	2009      	movs	r0, #9
 8008156:	f7ff fd5f 	bl	8007c18 <SD_SendCommand>
 800815a:	0003      	movs	r3, r0
 800815c:	7023      	strb	r3, [r4, #0]
    if(r1 != 0x00)
 800815e:	002a      	movs	r2, r5
 8008160:	18bb      	adds	r3, r7, r2
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <SD_GetCSD+0x2a>
    {
        return r1;  //没返回正确应答，则退出，报错
 8008168:	18bb      	adds	r3, r7, r2
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	e006      	b.n	800817c <SD_GetCSD+0x38>
    }
    //接收16个字节的数据
    SD_ReceiveData(csd_data, 16, RELEASE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	2110      	movs	r1, #16
 8008174:	0018      	movs	r0, r3
 8008176:	f7ff ff91 	bl	800809c <SD_ReceiveData>

    return 0;
 800817a:	2300      	movs	r3, #0
}
 800817c:	0018      	movs	r0, r3
 800817e:	46bd      	mov	sp, r7
 8008180:	b004      	add	sp, #16
 8008182:	bdb0      	pop	{r4, r5, r7, pc}

08008184 <SD_GetCapacity>:
* Output         : None
* Return         : u32 capacity
*                   0： 取容量出错
*******************************************************************************/
u32 SD_GetCapacity(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
    u8 r1;
    u16 i;
    u16 temp;

    //取CSD信息，如果期间出错，返回0
    if(SD_GetCSD(csd)!=0)
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	0018      	movs	r0, r3
 800818e:	f7ff ffd9 	bl	8008144 <SD_GetCSD>
 8008192:	1e03      	subs	r3, r0, #0
 8008194:	d001      	beq.n	800819a <SD_GetCapacity+0x16>
    {
        return 0;
 8008196:	2300      	movs	r3, #0
 8008198:	e092      	b.n	80082c0 <SD_GetCapacity+0x13c>
    }

    //如果为SDHC卡，按照下面方式计算
    if((csd[0]&0xC0)==0x40)
 800819a:	1d3b      	adds	r3, r7, #4
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	001a      	movs	r2, r3
 80081a0:	23c0      	movs	r3, #192	; 0xc0
 80081a2:	4013      	ands	r3, r2
 80081a4:	2b40      	cmp	r3, #64	; 0x40
 80081a6:	d10a      	bne.n	80081be <SD_GetCapacity+0x3a>
    {
        Capacity =  (((u32)csd[8])<<8 + (u32)csd[9] +1)*(u32)1024;
 80081a8:	1d3b      	adds	r3, r7, #4
 80081aa:	7a1b      	ldrb	r3, [r3, #8]
 80081ac:	001a      	movs	r2, r3
 80081ae:	1d3b      	adds	r3, r7, #4
 80081b0:	7a5b      	ldrb	r3, [r3, #9]
 80081b2:	3309      	adds	r3, #9
 80081b4:	409a      	lsls	r2, r3
 80081b6:	0013      	movs	r3, r2
 80081b8:	029b      	lsls	r3, r3, #10
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e07f      	b.n	80082be <SD_GetCapacity+0x13a>
        //
        //               READ_BL_LEN
        //	BLOCK_LEN = 2
        /**********************************************/
        //C_SIZE
    	i = csd[6]&0x03;
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	799b      	ldrb	r3, [r3, #6]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	2018      	movs	r0, #24
 80081c6:	183b      	adds	r3, r7, r0
 80081c8:	2103      	movs	r1, #3
 80081ca:	400a      	ands	r2, r1
 80081cc:	801a      	strh	r2, [r3, #0]
    	i<<=8;
 80081ce:	183b      	adds	r3, r7, r0
 80081d0:	183a      	adds	r2, r7, r0
 80081d2:	8812      	ldrh	r2, [r2, #0]
 80081d4:	0212      	lsls	r2, r2, #8
 80081d6:	801a      	strh	r2, [r3, #0]
    	i += csd[7];
 80081d8:	1d3b      	adds	r3, r7, #4
 80081da:	79db      	ldrb	r3, [r3, #7]
 80081dc:	b299      	uxth	r1, r3
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	183a      	adds	r2, r7, r0
 80081e2:	8812      	ldrh	r2, [r2, #0]
 80081e4:	188a      	adds	r2, r1, r2
 80081e6:	801a      	strh	r2, [r3, #0]
    	i<<=2;
 80081e8:	183b      	adds	r3, r7, r0
 80081ea:	183a      	adds	r2, r7, r0
 80081ec:	8812      	ldrh	r2, [r2, #0]
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	801a      	strh	r2, [r3, #0]
    	i += ((csd[8]&0xc0)>>6);
 80081f2:	1d3b      	adds	r3, r7, #4
 80081f4:	7a1b      	ldrb	r3, [r3, #8]
 80081f6:	099b      	lsrs	r3, r3, #6
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	b299      	uxth	r1, r3
 80081fc:	183b      	adds	r3, r7, r0
 80081fe:	183a      	adds	r2, r7, r0
 8008200:	8812      	ldrh	r2, [r2, #0]
 8008202:	188a      	adds	r2, r1, r2
 8008204:	801a      	strh	r2, [r3, #0]

        //C_SIZE_MULT
    	r1 = csd[9]&0x03;
 8008206:	1d3b      	adds	r3, r7, #4
 8008208:	7a5a      	ldrb	r2, [r3, #9]
 800820a:	201b      	movs	r0, #27
 800820c:	183b      	adds	r3, r7, r0
 800820e:	2103      	movs	r1, #3
 8008210:	400a      	ands	r2, r1
 8008212:	701a      	strb	r2, [r3, #0]
    	r1<<=1;
 8008214:	183a      	adds	r2, r7, r0
 8008216:	183b      	adds	r3, r7, r0
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	18db      	adds	r3, r3, r3
 800821c:	7013      	strb	r3, [r2, #0]
    	r1 += ((csd[10]&0x80)>>7);
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	7a9b      	ldrb	r3, [r3, #10]
 8008222:	09db      	lsrs	r3, r3, #7
 8008224:	b2d9      	uxtb	r1, r3
 8008226:	183b      	adds	r3, r7, r0
 8008228:	183a      	adds	r2, r7, r0
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	188a      	adds	r2, r1, r2
 800822e:	701a      	strb	r2, [r3, #0]

        //BLOCKNR
    	r1+=2;
 8008230:	183b      	adds	r3, r7, r0
 8008232:	183a      	adds	r2, r7, r0
 8008234:	7812      	ldrb	r2, [r2, #0]
 8008236:	3202      	adds	r2, #2
 8008238:	701a      	strb	r2, [r3, #0]
    	temp = 1;
 800823a:	2316      	movs	r3, #22
 800823c:	18fb      	adds	r3, r7, r3
 800823e:	2201      	movs	r2, #1
 8008240:	801a      	strh	r2, [r3, #0]
    	while(r1)
 8008242:	e00b      	b.n	800825c <SD_GetCapacity+0xd8>
    	{
            temp*=2;
 8008244:	2316      	movs	r3, #22
 8008246:	18fa      	adds	r2, r7, r3
 8008248:	18fb      	adds	r3, r7, r3
 800824a:	881b      	ldrh	r3, [r3, #0]
 800824c:	18db      	adds	r3, r3, r3
 800824e:	8013      	strh	r3, [r2, #0]
            r1--;
 8008250:	211b      	movs	r1, #27
 8008252:	187b      	adds	r3, r7, r1
 8008254:	781a      	ldrb	r2, [r3, #0]
 8008256:	187b      	adds	r3, r7, r1
 8008258:	3a01      	subs	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
    	while(r1)
 800825c:	231b      	movs	r3, #27
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1ee      	bne.n	8008244 <SD_GetCapacity+0xc0>
    	}
    	Capacity = ((u32)(i+1))*((u32)temp);
 8008266:	2118      	movs	r1, #24
 8008268:	187b      	adds	r3, r7, r1
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	3301      	adds	r3, #1
 800826e:	001a      	movs	r2, r3
 8008270:	2016      	movs	r0, #22
 8008272:	183b      	adds	r3, r7, r0
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	4353      	muls	r3, r2
 8008278:	61fb      	str	r3, [r7, #28]

        // READ_BL_LEN
    	i = csd[5]&0x0f;
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	795b      	ldrb	r3, [r3, #5]
 800827e:	b29a      	uxth	r2, r3
 8008280:	187b      	adds	r3, r7, r1
 8008282:	210f      	movs	r1, #15
 8008284:	400a      	ands	r2, r1
 8008286:	801a      	strh	r2, [r3, #0]
        //BLOCK_LEN
    	temp = 1;
 8008288:	183b      	adds	r3, r7, r0
 800828a:	2201      	movs	r2, #1
 800828c:	801a      	strh	r2, [r3, #0]
    	while(i)
 800828e:	e00b      	b.n	80082a8 <SD_GetCapacity+0x124>
    	{
            temp*=2;
 8008290:	2316      	movs	r3, #22
 8008292:	18fa      	adds	r2, r7, r3
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	18db      	adds	r3, r3, r3
 800829a:	8013      	strh	r3, [r2, #0]
            i--;
 800829c:	2118      	movs	r1, #24
 800829e:	187b      	adds	r3, r7, r1
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	187b      	adds	r3, r7, r1
 80082a4:	3a01      	subs	r2, #1
 80082a6:	801a      	strh	r2, [r3, #0]
    	while(i)
 80082a8:	2318      	movs	r3, #24
 80082aa:	18fb      	adds	r3, r7, r3
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1ee      	bne.n	8008290 <SD_GetCapacity+0x10c>
    	}
        //The final result
    	Capacity *= (u32)temp;
 80082b2:	2316      	movs	r3, #22
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	881a      	ldrh	r2, [r3, #0]
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	4353      	muls	r3, r2
 80082bc:	61fb      	str	r3, [r7, #28]
    	//Capacity /= 512;
    }
    return (u32)Capacity;
 80082be:	69fb      	ldr	r3, [r7, #28]
}
 80082c0:	0018      	movs	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b008      	add	sp, #32
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SD_ReadMultiBlock>:
* Return         : u8 r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
u8 SD_ReadMultiBlock(u32 sector, u8 *buffer, u8 count)
{
 80082c8:	b5b0      	push	{r4, r5, r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	1dfb      	adds	r3, r7, #7
 80082d4:	701a      	strb	r2, [r3, #0]
    //设置为高速模式
//    SPI_SetSpeed(SPI_SPEED_HIGH);

    //如果不是SDHC，将sector地址转成byte地址
    //sector = sector<<9;
    if(SD_Type!=SD_TYPE_V2HC)
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <SD_ReadMultiBlock+0xa0>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d002      	beq.n	80082e4 <SD_ReadMultiBlock+0x1c>
    {
    	sector = sector<<9;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	025b      	lsls	r3, r3, #9
 80082e2:	60fb      	str	r3, [r7, #12]
    }
//    SD_WaitReady();
    //发读多块命令
    r1 = SD_SendCommand(CMD18, sector, 0);//读命令
 80082e4:	2517      	movs	r5, #23
 80082e6:	197c      	adds	r4, r7, r5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	0019      	movs	r1, r3
 80082ee:	2012      	movs	r0, #18
 80082f0:	f7ff fc92 	bl	8007c18 <SD_SendCommand>
 80082f4:	0003      	movs	r3, r0
 80082f6:	7023      	strb	r3, [r4, #0]
    if(r1 != 0x00)
 80082f8:	197b      	adds	r3, r7, r5
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <SD_ReadMultiBlock+0x3e>
    {
        return r1;
 8008300:	197b      	adds	r3, r7, r5
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	e02b      	b.n	800835e <SD_ReadMultiBlock+0x96>
    }
    //开始接收数据
    do
    {
        if(SD_ReceiveData(buffer, 512, NO_RELEASE) != 0x00)
 8008306:	2380      	movs	r3, #128	; 0x80
 8008308:	0099      	lsls	r1, r3, #2
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2200      	movs	r2, #0
 800830e:	0018      	movs	r0, r3
 8008310:	f7ff fec4 	bl	800809c <SD_ReceiveData>
 8008314:	1e03      	subs	r3, r0, #0
 8008316:	d10f      	bne.n	8008338 <SD_ReadMultiBlock+0x70>
        {
            break;
        }
        buffer += 512;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2280      	movs	r2, #128	; 0x80
 800831c:	0092      	lsls	r2, r2, #2
 800831e:	4694      	mov	ip, r2
 8008320:	4463      	add	r3, ip
 8008322:	60bb      	str	r3, [r7, #8]
    } while(--count);
 8008324:	1dfb      	adds	r3, r7, #7
 8008326:	1dfa      	adds	r2, r7, #7
 8008328:	7812      	ldrb	r2, [r2, #0]
 800832a:	3a01      	subs	r2, #1
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	1dfb      	adds	r3, r7, #7
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e7      	bne.n	8008306 <SD_ReadMultiBlock+0x3e>
 8008336:	e000      	b.n	800833a <SD_ReadMultiBlock+0x72>
            break;
 8008338:	46c0      	nop			; (mov r8, r8)

    //全部传输完毕，发送停止命令
    SD_SendCommand(CMD12, 0, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	200c      	movs	r0, #12
 8008340:	f7ff fc6a 	bl	8007c18 <SD_SendCommand>
    //释放总线
    SPI_SD_DisableSelect();
 8008344:	f7ff fbe2 	bl	8007b0c <SPI_SD_DisableSelect>
    SPI_ReadWriteByte(0xFF);
 8008348:	20ff      	movs	r0, #255	; 0xff
 800834a:	f7ff fc1d 	bl	8007b88 <SPI_ReadWriteByte>

    if(count != 0)
 800834e:	1dfb      	adds	r3, r7, #7
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <SD_ReadMultiBlock+0x94>
    {
        return count;   //如果没有传完，返回剩余个数
 8008356:	1dfb      	adds	r3, r7, #7
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	e000      	b.n	800835e <SD_ReadMultiBlock+0x96>
    }
    else
    {
//    	SPI_SetSpeed(SPI_SPEED_HIGH);
        return 0;
 800835c:	2300      	movs	r3, #0
    }
}
 800835e:	0018      	movs	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	b006      	add	sp, #24
 8008364:	bdb0      	pop	{r4, r5, r7, pc}
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	200002cc 	.word	0x200002cc

0800836c <SD_WriteMultiBlock>:
* Return         : u8 r1
*                   0： 成功
*                   other：失败
*******************************************************************************/
u8 SD_WriteMultiBlock(u32 sector, const u8 *data, u8 count)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	1dfb      	adds	r3, r7, #7
 8008378:	701a      	strb	r2, [r3, #0]

    //设置为高速模式
//    SPI_SetSpeed(SPI_SPEED_LOW);

    //如果不是SDHC，给定的是sector地址，将其转换成byte地址
    if(SD_Type != SD_TYPE_V2HC)
 800837a:	4b4a      	ldr	r3, [pc, #296]	; (80084a4 <SD_WriteMultiBlock+0x138>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d002      	beq.n	8008388 <SD_WriteMultiBlock+0x1c>
    {
        sector = sector<<9;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	025b      	lsls	r3, r3, #9
 8008386:	60fb      	str	r3, [r7, #12]
    }
    //如果目标卡不是MMC卡，启用ACMD23指令使能预擦除
    if(SD_Type != SD_TYPE_MMC)
 8008388:	4b46      	ldr	r3, [pc, #280]	; (80084a4 <SD_WriteMultiBlock+0x138>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <SD_WriteMultiBlock+0x3a>
    {
        r1 = SD_SendCommand(ACMD23, count, 0x00);
 8008390:	1dfb      	adds	r3, r7, #7
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2215      	movs	r2, #21
 8008396:	18bc      	adds	r4, r7, r2
 8008398:	2200      	movs	r2, #0
 800839a:	0019      	movs	r1, r3
 800839c:	2017      	movs	r0, #23
 800839e:	f7ff fc3b 	bl	8007c18 <SD_SendCommand>
 80083a2:	0003      	movs	r3, r0
 80083a4:	7023      	strb	r3, [r4, #0]
    }
    //发多块写入指令
    r1 = SD_SendCommand(CMD25, sector, 0x00);
 80083a6:	2515      	movs	r5, #21
 80083a8:	197c      	adds	r4, r7, r5
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	0019      	movs	r1, r3
 80083b0:	2019      	movs	r0, #25
 80083b2:	f7ff fc31 	bl	8007c18 <SD_SendCommand>
 80083b6:	0003      	movs	r3, r0
 80083b8:	7023      	strb	r3, [r4, #0]
    if(r1 != 0x00)
 80083ba:	197b      	adds	r3, r7, r5
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <SD_WriteMultiBlock+0x5c>
    {
        return r1;  //应答不正确，直接返回
 80083c2:	197b      	adds	r3, r7, r5
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	e068      	b.n	800849a <SD_WriteMultiBlock+0x12e>
    }

    //开始准备数据传输
    SPI_SD_EnableSelect();
 80083c8:	f7ff fb94 	bl	8007af4 <SPI_SD_EnableSelect>
    //先放3个空数据，等待SD卡准备好
    SPI_ReadWriteByte(0xff);
 80083cc:	20ff      	movs	r0, #255	; 0xff
 80083ce:	f7ff fbdb 	bl	8007b88 <SPI_ReadWriteByte>
    SPI_ReadWriteByte(0xff);
 80083d2:	20ff      	movs	r0, #255	; 0xff
 80083d4:	f7ff fbd8 	bl	8007b88 <SPI_ReadWriteByte>

    //--------下面是N个sector写入的循环部分
    do
    {
        //放起始令牌0xFC 表明是多块写入
        SPI_ReadWriteByte(0xFC);
 80083d8:	20fc      	movs	r0, #252	; 0xfc
 80083da:	f7ff fbd5 	bl	8007b88 <SPI_ReadWriteByte>

        //放一个sector的数据
        for(i=0;i<512;i++)
 80083de:	2316      	movs	r3, #22
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	2200      	movs	r2, #0
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	e00c      	b.n	8008402 <SD_WriteMultiBlock+0x96>
        {
            SPI_ReadWriteByte(*data++);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	60ba      	str	r2, [r7, #8]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	0018      	movs	r0, r3
 80083f2:	f7ff fbc9 	bl	8007b88 <SPI_ReadWriteByte>
        for(i=0;i<512;i++)
 80083f6:	2116      	movs	r1, #22
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	881a      	ldrh	r2, [r3, #0]
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	3201      	adds	r2, #1
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	2316      	movs	r3, #22
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	881a      	ldrh	r2, [r3, #0]
 8008408:	2380      	movs	r3, #128	; 0x80
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	429a      	cmp	r2, r3
 800840e:	d3eb      	bcc.n	80083e8 <SD_WriteMultiBlock+0x7c>
        }
        //发2个Byte的dummy CRC
        SPI_ReadWriteByte(0xff);
 8008410:	20ff      	movs	r0, #255	; 0xff
 8008412:	f7ff fbb9 	bl	8007b88 <SPI_ReadWriteByte>
        SPI_ReadWriteByte(0xff);
 8008416:	20ff      	movs	r0, #255	; 0xff
 8008418:	f7ff fbb6 	bl	8007b88 <SPI_ReadWriteByte>

        //等待SD卡应答
        r1 = SPI_ReadWriteByte(0xff);
 800841c:	2515      	movs	r5, #21
 800841e:	197c      	adds	r4, r7, r5
 8008420:	20ff      	movs	r0, #255	; 0xff
 8008422:	f7ff fbb1 	bl	8007b88 <SPI_ReadWriteByte>
 8008426:	0003      	movs	r3, r0
 8008428:	7023      	strb	r3, [r4, #0]
        if((r1&0x1F)!=0x05)
 800842a:	002c      	movs	r4, r5
 800842c:	193b      	adds	r3, r7, r4
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	221f      	movs	r2, #31
 8008432:	4013      	ands	r3, r2
 8008434:	2b05      	cmp	r3, #5
 8008436:	d004      	beq.n	8008442 <SD_WriteMultiBlock+0xd6>
        {
            SPI_SD_DisableSelect();    //如果应答为报错，则带错误代码直接退出
 8008438:	f7ff fb68 	bl	8007b0c <SPI_SD_DisableSelect>
            return r1;
 800843c:	193b      	adds	r3, r7, r4
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	e02b      	b.n	800849a <SD_WriteMultiBlock+0x12e>
        }

        //等待SD卡写入完成
        if(SD_WaitReady()==1)
 8008442:	f7ff fbcb 	bl	8007bdc <SD_WaitReady>
 8008446:	0003      	movs	r3, r0
 8008448:	2b01      	cmp	r3, #1
 800844a:	d103      	bne.n	8008454 <SD_WriteMultiBlock+0xe8>
        {
            SPI_SD_DisableSelect();    //等待SD卡写入完成超时，直接退出报错
 800844c:	f7ff fb5e 	bl	8007b0c <SPI_SD_DisableSelect>
            return 1;
 8008450:	2301      	movs	r3, #1
 8008452:	e022      	b.n	800849a <SD_WriteMultiBlock+0x12e>
        }

        //本sector数据传输完成
    }while(--count);
 8008454:	1dfb      	adds	r3, r7, #7
 8008456:	1dfa      	adds	r2, r7, #7
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	3a01      	subs	r2, #1
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	1dfb      	adds	r3, r7, #7
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1b8      	bne.n	80083d8 <SD_WriteMultiBlock+0x6c>

    //发结束传输令牌0xFD
    r1 = SPI_ReadWriteByte(0xFD);
 8008466:	2515      	movs	r5, #21
 8008468:	197c      	adds	r4, r7, r5
 800846a:	20fd      	movs	r0, #253	; 0xfd
 800846c:	f7ff fb8c 	bl	8007b88 <SPI_ReadWriteByte>
 8008470:	0003      	movs	r3, r0
 8008472:	7023      	strb	r3, [r4, #0]
    if(r1==0x00)
 8008474:	197b      	adds	r3, r7, r5
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <SD_WriteMultiBlock+0x116>
    {
        count =  0xfe;
 800847c:	1dfb      	adds	r3, r7, #7
 800847e:	22fe      	movs	r2, #254	; 0xfe
 8008480:	701a      	strb	r2, [r3, #0]
    }

    if(SD_WaitReady())
 8008482:	f7ff fbab 	bl	8007bdc <SD_WaitReady>
 8008486:	1e03      	subs	r3, r0, #0
 8008488:	d000      	beq.n	800848c <SD_WriteMultiBlock+0x120>
    {
        while(1)
 800848a:	e7fe      	b.n	800848a <SD_WriteMultiBlock+0x11e>
        {
        }
    }

    //写入完成，片选置1
    SPI_SD_DisableSelect();
 800848c:	f7ff fb3e 	bl	8007b0c <SPI_SD_DisableSelect>
    SPI_ReadWriteByte(0xff);
 8008490:	20ff      	movs	r0, #255	; 0xff
 8008492:	f7ff fb79 	bl	8007b88 <SPI_ReadWriteByte>
//    SPI_SetSpeed(SPI_SPEED_HIGH);
    return count;   //返回count值，如果写完则count=0，否则count=1
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	781b      	ldrb	r3, [r3, #0]
}
 800849a:	0018      	movs	r0, r3
 800849c:	46bd      	mov	sp, r7
 800849e:	b006      	add	sp, #24
 80084a0:	bdb0      	pop	{r4, r5, r7, pc}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	200002cc 	.word	0x200002cc

080084a8 <std>:
 80084a8:	2300      	movs	r3, #0
 80084aa:	b510      	push	{r4, lr}
 80084ac:	0004      	movs	r4, r0
 80084ae:	6003      	str	r3, [r0, #0]
 80084b0:	6043      	str	r3, [r0, #4]
 80084b2:	6083      	str	r3, [r0, #8]
 80084b4:	8181      	strh	r1, [r0, #12]
 80084b6:	6643      	str	r3, [r0, #100]	; 0x64
 80084b8:	81c2      	strh	r2, [r0, #14]
 80084ba:	6103      	str	r3, [r0, #16]
 80084bc:	6143      	str	r3, [r0, #20]
 80084be:	6183      	str	r3, [r0, #24]
 80084c0:	0019      	movs	r1, r3
 80084c2:	2208      	movs	r2, #8
 80084c4:	305c      	adds	r0, #92	; 0x5c
 80084c6:	f000 fa3f 	bl	8008948 <memset>
 80084ca:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <std+0x50>)
 80084cc:	6224      	str	r4, [r4, #32]
 80084ce:	6263      	str	r3, [r4, #36]	; 0x24
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <std+0x54>)
 80084d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <std+0x58>)
 80084d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <std+0x5c>)
 80084da:	6323      	str	r3, [r4, #48]	; 0x30
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <std+0x60>)
 80084de:	429c      	cmp	r4, r3
 80084e0:	d005      	beq.n	80084ee <std+0x46>
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <std+0x64>)
 80084e4:	429c      	cmp	r4, r3
 80084e6:	d002      	beq.n	80084ee <std+0x46>
 80084e8:	4b09      	ldr	r3, [pc, #36]	; (8008510 <std+0x68>)
 80084ea:	429c      	cmp	r4, r3
 80084ec:	d103      	bne.n	80084f6 <std+0x4e>
 80084ee:	0020      	movs	r0, r4
 80084f0:	3058      	adds	r0, #88	; 0x58
 80084f2:	f000 fabb 	bl	8008a6c <__retarget_lock_init_recursive>
 80084f6:	bd10      	pop	{r4, pc}
 80084f8:	08008761 	.word	0x08008761
 80084fc:	0800878d 	.word	0x0800878d
 8008500:	080087c5 	.word	0x080087c5
 8008504:	080087f1 	.word	0x080087f1
 8008508:	200002d0 	.word	0x200002d0
 800850c:	20000338 	.word	0x20000338
 8008510:	200003a0 	.word	0x200003a0

08008514 <stdio_exit_handler>:
 8008514:	b510      	push	{r4, lr}
 8008516:	4a03      	ldr	r2, [pc, #12]	; (8008524 <stdio_exit_handler+0x10>)
 8008518:	4903      	ldr	r1, [pc, #12]	; (8008528 <stdio_exit_handler+0x14>)
 800851a:	4804      	ldr	r0, [pc, #16]	; (800852c <stdio_exit_handler+0x18>)
 800851c:	f000 f86c 	bl	80085f8 <_fwalk_sglue>
 8008520:	bd10      	pop	{r4, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	20000020 	.word	0x20000020
 8008528:	0800995d 	.word	0x0800995d
 800852c:	2000002c 	.word	0x2000002c

08008530 <cleanup_stdio>:
 8008530:	6841      	ldr	r1, [r0, #4]
 8008532:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <cleanup_stdio+0x30>)
 8008534:	b510      	push	{r4, lr}
 8008536:	0004      	movs	r4, r0
 8008538:	4299      	cmp	r1, r3
 800853a:	d001      	beq.n	8008540 <cleanup_stdio+0x10>
 800853c:	f001 fa0e 	bl	800995c <_fflush_r>
 8008540:	68a1      	ldr	r1, [r4, #8]
 8008542:	4b08      	ldr	r3, [pc, #32]	; (8008564 <cleanup_stdio+0x34>)
 8008544:	4299      	cmp	r1, r3
 8008546:	d002      	beq.n	800854e <cleanup_stdio+0x1e>
 8008548:	0020      	movs	r0, r4
 800854a:	f001 fa07 	bl	800995c <_fflush_r>
 800854e:	68e1      	ldr	r1, [r4, #12]
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <cleanup_stdio+0x38>)
 8008552:	4299      	cmp	r1, r3
 8008554:	d002      	beq.n	800855c <cleanup_stdio+0x2c>
 8008556:	0020      	movs	r0, r4
 8008558:	f001 fa00 	bl	800995c <_fflush_r>
 800855c:	bd10      	pop	{r4, pc}
 800855e:	46c0      	nop			; (mov r8, r8)
 8008560:	200002d0 	.word	0x200002d0
 8008564:	20000338 	.word	0x20000338
 8008568:	200003a0 	.word	0x200003a0

0800856c <global_stdio_init.part.0>:
 800856c:	b510      	push	{r4, lr}
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <global_stdio_init.part.0+0x28>)
 8008570:	4a09      	ldr	r2, [pc, #36]	; (8008598 <global_stdio_init.part.0+0x2c>)
 8008572:	2104      	movs	r1, #4
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	4809      	ldr	r0, [pc, #36]	; (800859c <global_stdio_init.part.0+0x30>)
 8008578:	2200      	movs	r2, #0
 800857a:	f7ff ff95 	bl	80084a8 <std>
 800857e:	2201      	movs	r2, #1
 8008580:	2109      	movs	r1, #9
 8008582:	4807      	ldr	r0, [pc, #28]	; (80085a0 <global_stdio_init.part.0+0x34>)
 8008584:	f7ff ff90 	bl	80084a8 <std>
 8008588:	2202      	movs	r2, #2
 800858a:	2112      	movs	r1, #18
 800858c:	4805      	ldr	r0, [pc, #20]	; (80085a4 <global_stdio_init.part.0+0x38>)
 800858e:	f7ff ff8b 	bl	80084a8 <std>
 8008592:	bd10      	pop	{r4, pc}
 8008594:	20000408 	.word	0x20000408
 8008598:	08008515 	.word	0x08008515
 800859c:	200002d0 	.word	0x200002d0
 80085a0:	20000338 	.word	0x20000338
 80085a4:	200003a0 	.word	0x200003a0

080085a8 <__sfp_lock_acquire>:
 80085a8:	b510      	push	{r4, lr}
 80085aa:	4802      	ldr	r0, [pc, #8]	; (80085b4 <__sfp_lock_acquire+0xc>)
 80085ac:	f000 fa5f 	bl	8008a6e <__retarget_lock_acquire_recursive>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	46c0      	nop			; (mov r8, r8)
 80085b4:	20000411 	.word	0x20000411

080085b8 <__sfp_lock_release>:
 80085b8:	b510      	push	{r4, lr}
 80085ba:	4802      	ldr	r0, [pc, #8]	; (80085c4 <__sfp_lock_release+0xc>)
 80085bc:	f000 fa58 	bl	8008a70 <__retarget_lock_release_recursive>
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	20000411 	.word	0x20000411

080085c8 <__sinit>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	0004      	movs	r4, r0
 80085cc:	f7ff ffec 	bl	80085a8 <__sfp_lock_acquire>
 80085d0:	6a23      	ldr	r3, [r4, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <__sinit+0x14>
 80085d6:	f7ff ffef 	bl	80085b8 <__sfp_lock_release>
 80085da:	bd10      	pop	{r4, pc}
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <__sinit+0x28>)
 80085de:	6223      	str	r3, [r4, #32]
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <__sinit+0x2c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1f6      	bne.n	80085d6 <__sinit+0xe>
 80085e8:	f7ff ffc0 	bl	800856c <global_stdio_init.part.0>
 80085ec:	e7f3      	b.n	80085d6 <__sinit+0xe>
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	08008531 	.word	0x08008531
 80085f4:	20000408 	.word	0x20000408

080085f8 <_fwalk_sglue>:
 80085f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085fa:	0014      	movs	r4, r2
 80085fc:	2600      	movs	r6, #0
 80085fe:	9000      	str	r0, [sp, #0]
 8008600:	9101      	str	r1, [sp, #4]
 8008602:	68a5      	ldr	r5, [r4, #8]
 8008604:	6867      	ldr	r7, [r4, #4]
 8008606:	3f01      	subs	r7, #1
 8008608:	d504      	bpl.n	8008614 <_fwalk_sglue+0x1c>
 800860a:	6824      	ldr	r4, [r4, #0]
 800860c:	2c00      	cmp	r4, #0
 800860e:	d1f8      	bne.n	8008602 <_fwalk_sglue+0xa>
 8008610:	0030      	movs	r0, r6
 8008612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008614:	89ab      	ldrh	r3, [r5, #12]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d908      	bls.n	800862c <_fwalk_sglue+0x34>
 800861a:	220e      	movs	r2, #14
 800861c:	5eab      	ldrsh	r3, [r5, r2]
 800861e:	3301      	adds	r3, #1
 8008620:	d004      	beq.n	800862c <_fwalk_sglue+0x34>
 8008622:	0029      	movs	r1, r5
 8008624:	9800      	ldr	r0, [sp, #0]
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	4798      	blx	r3
 800862a:	4306      	orrs	r6, r0
 800862c:	3568      	adds	r5, #104	; 0x68
 800862e:	e7ea      	b.n	8008606 <_fwalk_sglue+0xe>

08008630 <iprintf>:
 8008630:	b40f      	push	{r0, r1, r2, r3}
 8008632:	b507      	push	{r0, r1, r2, lr}
 8008634:	4905      	ldr	r1, [pc, #20]	; (800864c <iprintf+0x1c>)
 8008636:	ab04      	add	r3, sp, #16
 8008638:	6808      	ldr	r0, [r1, #0]
 800863a:	cb04      	ldmia	r3!, {r2}
 800863c:	6881      	ldr	r1, [r0, #8]
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	f000 fd04 	bl	800904c <_vfiprintf_r>
 8008644:	b003      	add	sp, #12
 8008646:	bc08      	pop	{r3}
 8008648:	b004      	add	sp, #16
 800864a:	4718      	bx	r3
 800864c:	20000078 	.word	0x20000078

08008650 <_puts_r>:
 8008650:	6a03      	ldr	r3, [r0, #32]
 8008652:	b570      	push	{r4, r5, r6, lr}
 8008654:	0005      	movs	r5, r0
 8008656:	000e      	movs	r6, r1
 8008658:	6884      	ldr	r4, [r0, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <_puts_r+0x12>
 800865e:	f7ff ffb3 	bl	80085c8 <__sinit>
 8008662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008664:	07db      	lsls	r3, r3, #31
 8008666:	d405      	bmi.n	8008674 <_puts_r+0x24>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	059b      	lsls	r3, r3, #22
 800866c:	d402      	bmi.n	8008674 <_puts_r+0x24>
 800866e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008670:	f000 f9fd 	bl	8008a6e <__retarget_lock_acquire_recursive>
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	071b      	lsls	r3, r3, #28
 8008678:	d502      	bpl.n	8008680 <_puts_r+0x30>
 800867a:	6923      	ldr	r3, [r4, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d11f      	bne.n	80086c0 <_puts_r+0x70>
 8008680:	0021      	movs	r1, r4
 8008682:	0028      	movs	r0, r5
 8008684:	f000 f8fc 	bl	8008880 <__swsetup_r>
 8008688:	2800      	cmp	r0, #0
 800868a:	d019      	beq.n	80086c0 <_puts_r+0x70>
 800868c:	2501      	movs	r5, #1
 800868e:	426d      	negs	r5, r5
 8008690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008692:	07db      	lsls	r3, r3, #31
 8008694:	d405      	bmi.n	80086a2 <_puts_r+0x52>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	059b      	lsls	r3, r3, #22
 800869a:	d402      	bmi.n	80086a2 <_puts_r+0x52>
 800869c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800869e:	f000 f9e7 	bl	8008a70 <__retarget_lock_release_recursive>
 80086a2:	0028      	movs	r0, r5
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	3601      	adds	r6, #1
 80086a8:	60a3      	str	r3, [r4, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da04      	bge.n	80086b8 <_puts_r+0x68>
 80086ae:	69a2      	ldr	r2, [r4, #24]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	dc16      	bgt.n	80086e2 <_puts_r+0x92>
 80086b4:	290a      	cmp	r1, #10
 80086b6:	d014      	beq.n	80086e2 <_puts_r+0x92>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	7019      	strb	r1, [r3, #0]
 80086c0:	68a3      	ldr	r3, [r4, #8]
 80086c2:	7831      	ldrb	r1, [r6, #0]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	2900      	cmp	r1, #0
 80086c8:	d1ed      	bne.n	80086a6 <_puts_r+0x56>
 80086ca:	60a3      	str	r3, [r4, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da0f      	bge.n	80086f0 <_puts_r+0xa0>
 80086d0:	0028      	movs	r0, r5
 80086d2:	0022      	movs	r2, r4
 80086d4:	310a      	adds	r1, #10
 80086d6:	f000 f891 	bl	80087fc <__swbuf_r>
 80086da:	250a      	movs	r5, #10
 80086dc:	3001      	adds	r0, #1
 80086de:	d1d7      	bne.n	8008690 <_puts_r+0x40>
 80086e0:	e7d4      	b.n	800868c <_puts_r+0x3c>
 80086e2:	0022      	movs	r2, r4
 80086e4:	0028      	movs	r0, r5
 80086e6:	f000 f889 	bl	80087fc <__swbuf_r>
 80086ea:	3001      	adds	r0, #1
 80086ec:	d1e8      	bne.n	80086c0 <_puts_r+0x70>
 80086ee:	e7cd      	b.n	800868c <_puts_r+0x3c>
 80086f0:	250a      	movs	r5, #10
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	6022      	str	r2, [r4, #0]
 80086f8:	701d      	strb	r5, [r3, #0]
 80086fa:	e7c9      	b.n	8008690 <_puts_r+0x40>

080086fc <puts>:
 80086fc:	b510      	push	{r4, lr}
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <puts+0x10>)
 8008700:	0001      	movs	r1, r0
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	f7ff ffa4 	bl	8008650 <_puts_r>
 8008708:	bd10      	pop	{r4, pc}
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	20000078 	.word	0x20000078

08008710 <siscanf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b530      	push	{r4, r5, lr}
 8008714:	2381      	movs	r3, #129	; 0x81
 8008716:	b09c      	sub	sp, #112	; 0x70
 8008718:	466a      	mov	r2, sp
 800871a:	ac1f      	add	r4, sp, #124	; 0x7c
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	cc20      	ldmia	r4!, {r5}
 8008720:	8293      	strh	r3, [r2, #20]
 8008722:	9002      	str	r0, [sp, #8]
 8008724:	9006      	str	r0, [sp, #24]
 8008726:	f7f7 fcef 	bl	8000108 <strlen>
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <siscanf+0x48>)
 800872c:	466a      	mov	r2, sp
 800872e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008730:	2300      	movs	r3, #0
 8008732:	9003      	str	r0, [sp, #12]
 8008734:	9007      	str	r0, [sp, #28]
 8008736:	4809      	ldr	r0, [pc, #36]	; (800875c <siscanf+0x4c>)
 8008738:	930f      	str	r3, [sp, #60]	; 0x3c
 800873a:	9314      	str	r3, [sp, #80]	; 0x50
 800873c:	3b01      	subs	r3, #1
 800873e:	82d3      	strh	r3, [r2, #22]
 8008740:	a902      	add	r1, sp, #8
 8008742:	0023      	movs	r3, r4
 8008744:	002a      	movs	r2, r5
 8008746:	6800      	ldr	r0, [r0, #0]
 8008748:	9401      	str	r4, [sp, #4]
 800874a:	f000 faed 	bl	8008d28 <__ssvfiscanf_r>
 800874e:	b01c      	add	sp, #112	; 0x70
 8008750:	bc30      	pop	{r4, r5}
 8008752:	bc08      	pop	{r3}
 8008754:	b003      	add	sp, #12
 8008756:	4718      	bx	r3
 8008758:	08008789 	.word	0x08008789
 800875c:	20000078 	.word	0x20000078

08008760 <__sread>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	000c      	movs	r4, r1
 8008764:	250e      	movs	r5, #14
 8008766:	5f49      	ldrsh	r1, [r1, r5]
 8008768:	f000 f92e 	bl	80089c8 <_read_r>
 800876c:	2800      	cmp	r0, #0
 800876e:	db03      	blt.n	8008778 <__sread+0x18>
 8008770:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008772:	181b      	adds	r3, r3, r0
 8008774:	6563      	str	r3, [r4, #84]	; 0x54
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	4a02      	ldr	r2, [pc, #8]	; (8008784 <__sread+0x24>)
 800877c:	4013      	ands	r3, r2
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	e7f9      	b.n	8008776 <__sread+0x16>
 8008782:	46c0      	nop			; (mov r8, r8)
 8008784:	ffffefff 	.word	0xffffefff

08008788 <__seofread>:
 8008788:	2000      	movs	r0, #0
 800878a:	4770      	bx	lr

0800878c <__swrite>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	001f      	movs	r7, r3
 8008790:	898b      	ldrh	r3, [r1, #12]
 8008792:	0005      	movs	r5, r0
 8008794:	000c      	movs	r4, r1
 8008796:	0016      	movs	r6, r2
 8008798:	05db      	lsls	r3, r3, #23
 800879a:	d505      	bpl.n	80087a8 <__swrite+0x1c>
 800879c:	230e      	movs	r3, #14
 800879e:	5ec9      	ldrsh	r1, [r1, r3]
 80087a0:	2200      	movs	r2, #0
 80087a2:	2302      	movs	r3, #2
 80087a4:	f000 f8fc 	bl	80089a0 <_lseek_r>
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	4a05      	ldr	r2, [pc, #20]	; (80087c0 <__swrite+0x34>)
 80087ac:	0028      	movs	r0, r5
 80087ae:	4013      	ands	r3, r2
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	0032      	movs	r2, r6
 80087b4:	230e      	movs	r3, #14
 80087b6:	5ee1      	ldrsh	r1, [r4, r3]
 80087b8:	003b      	movs	r3, r7
 80087ba:	f000 f919 	bl	80089f0 <_write_r>
 80087be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c0:	ffffefff 	.word	0xffffefff

080087c4 <__sseek>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	000c      	movs	r4, r1
 80087c8:	250e      	movs	r5, #14
 80087ca:	5f49      	ldrsh	r1, [r1, r5]
 80087cc:	f000 f8e8 	bl	80089a0 <_lseek_r>
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	1c42      	adds	r2, r0, #1
 80087d4:	d103      	bne.n	80087de <__sseek+0x1a>
 80087d6:	4a05      	ldr	r2, [pc, #20]	; (80087ec <__sseek+0x28>)
 80087d8:	4013      	ands	r3, r2
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	2280      	movs	r2, #128	; 0x80
 80087e0:	0152      	lsls	r2, r2, #5
 80087e2:	4313      	orrs	r3, r2
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	6560      	str	r0, [r4, #84]	; 0x54
 80087e8:	e7f8      	b.n	80087dc <__sseek+0x18>
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	ffffefff 	.word	0xffffefff

080087f0 <__sclose>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	230e      	movs	r3, #14
 80087f4:	5ec9      	ldrsh	r1, [r1, r3]
 80087f6:	f000 f8c1 	bl	800897c <_close_r>
 80087fa:	bd10      	pop	{r4, pc}

080087fc <__swbuf_r>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	0006      	movs	r6, r0
 8008800:	000d      	movs	r5, r1
 8008802:	0014      	movs	r4, r2
 8008804:	2800      	cmp	r0, #0
 8008806:	d004      	beq.n	8008812 <__swbuf_r+0x16>
 8008808:	6a03      	ldr	r3, [r0, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <__swbuf_r+0x16>
 800880e:	f7ff fedb 	bl	80085c8 <__sinit>
 8008812:	69a3      	ldr	r3, [r4, #24]
 8008814:	60a3      	str	r3, [r4, #8]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	071b      	lsls	r3, r3, #28
 800881a:	d528      	bpl.n	800886e <__swbuf_r+0x72>
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d025      	beq.n	800886e <__swbuf_r+0x72>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	b2ef      	uxtb	r7, r5
 8008828:	1ac0      	subs	r0, r0, r3
 800882a:	6963      	ldr	r3, [r4, #20]
 800882c:	b2ed      	uxtb	r5, r5
 800882e:	4283      	cmp	r3, r0
 8008830:	dc05      	bgt.n	800883e <__swbuf_r+0x42>
 8008832:	0021      	movs	r1, r4
 8008834:	0030      	movs	r0, r6
 8008836:	f001 f891 	bl	800995c <_fflush_r>
 800883a:	2800      	cmp	r0, #0
 800883c:	d11d      	bne.n	800887a <__swbuf_r+0x7e>
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	3001      	adds	r0, #1
 8008842:	3b01      	subs	r3, #1
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	6022      	str	r2, [r4, #0]
 800884c:	701f      	strb	r7, [r3, #0]
 800884e:	6963      	ldr	r3, [r4, #20]
 8008850:	4283      	cmp	r3, r0
 8008852:	d004      	beq.n	800885e <__swbuf_r+0x62>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	07db      	lsls	r3, r3, #31
 8008858:	d507      	bpl.n	800886a <__swbuf_r+0x6e>
 800885a:	2d0a      	cmp	r5, #10
 800885c:	d105      	bne.n	800886a <__swbuf_r+0x6e>
 800885e:	0021      	movs	r1, r4
 8008860:	0030      	movs	r0, r6
 8008862:	f001 f87b 	bl	800995c <_fflush_r>
 8008866:	2800      	cmp	r0, #0
 8008868:	d107      	bne.n	800887a <__swbuf_r+0x7e>
 800886a:	0028      	movs	r0, r5
 800886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800886e:	0021      	movs	r1, r4
 8008870:	0030      	movs	r0, r6
 8008872:	f000 f805 	bl	8008880 <__swsetup_r>
 8008876:	2800      	cmp	r0, #0
 8008878:	d0d3      	beq.n	8008822 <__swbuf_r+0x26>
 800887a:	2501      	movs	r5, #1
 800887c:	426d      	negs	r5, r5
 800887e:	e7f4      	b.n	800886a <__swbuf_r+0x6e>

08008880 <__swsetup_r>:
 8008880:	4b30      	ldr	r3, [pc, #192]	; (8008944 <__swsetup_r+0xc4>)
 8008882:	b570      	push	{r4, r5, r6, lr}
 8008884:	0005      	movs	r5, r0
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	000c      	movs	r4, r1
 800888a:	2800      	cmp	r0, #0
 800888c:	d004      	beq.n	8008898 <__swsetup_r+0x18>
 800888e:	6a03      	ldr	r3, [r0, #32]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <__swsetup_r+0x18>
 8008894:	f7ff fe98 	bl	80085c8 <__sinit>
 8008898:	230c      	movs	r3, #12
 800889a:	5ee2      	ldrsh	r2, [r4, r3]
 800889c:	b293      	uxth	r3, r2
 800889e:	0711      	lsls	r1, r2, #28
 80088a0:	d423      	bmi.n	80088ea <__swsetup_r+0x6a>
 80088a2:	06d9      	lsls	r1, r3, #27
 80088a4:	d407      	bmi.n	80088b6 <__swsetup_r+0x36>
 80088a6:	2309      	movs	r3, #9
 80088a8:	2001      	movs	r0, #1
 80088aa:	602b      	str	r3, [r5, #0]
 80088ac:	3337      	adds	r3, #55	; 0x37
 80088ae:	4313      	orrs	r3, r2
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	4240      	negs	r0, r0
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
 80088b6:	075b      	lsls	r3, r3, #29
 80088b8:	d513      	bpl.n	80088e2 <__swsetup_r+0x62>
 80088ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088bc:	2900      	cmp	r1, #0
 80088be:	d008      	beq.n	80088d2 <__swsetup_r+0x52>
 80088c0:	0023      	movs	r3, r4
 80088c2:	3344      	adds	r3, #68	; 0x44
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <__swsetup_r+0x4e>
 80088c8:	0028      	movs	r0, r5
 80088ca:	f000 f8d3 	bl	8008a74 <_free_r>
 80088ce:	2300      	movs	r3, #0
 80088d0:	6363      	str	r3, [r4, #52]	; 0x34
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	4393      	bics	r3, r2
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	2300      	movs	r3, #0
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2308      	movs	r3, #8
 80088e4:	89a2      	ldrh	r2, [r4, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <__swsetup_r+0x88>
 80088f0:	21a0      	movs	r1, #160	; 0xa0
 80088f2:	2280      	movs	r2, #128	; 0x80
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	0089      	lsls	r1, r1, #2
 80088f8:	0092      	lsls	r2, r2, #2
 80088fa:	400b      	ands	r3, r1
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <__swsetup_r+0x88>
 8008900:	0021      	movs	r1, r4
 8008902:	0028      	movs	r0, r5
 8008904:	f001 f87e 	bl	8009a04 <__smakebuf_r>
 8008908:	220c      	movs	r2, #12
 800890a:	5ea3      	ldrsh	r3, [r4, r2]
 800890c:	2001      	movs	r0, #1
 800890e:	001a      	movs	r2, r3
 8008910:	b299      	uxth	r1, r3
 8008912:	4002      	ands	r2, r0
 8008914:	4203      	tst	r3, r0
 8008916:	d00f      	beq.n	8008938 <__swsetup_r+0xb8>
 8008918:	2200      	movs	r2, #0
 800891a:	60a2      	str	r2, [r4, #8]
 800891c:	6962      	ldr	r2, [r4, #20]
 800891e:	4252      	negs	r2, r2
 8008920:	61a2      	str	r2, [r4, #24]
 8008922:	2000      	movs	r0, #0
 8008924:	6922      	ldr	r2, [r4, #16]
 8008926:	4282      	cmp	r2, r0
 8008928:	d1c4      	bne.n	80088b4 <__swsetup_r+0x34>
 800892a:	0609      	lsls	r1, r1, #24
 800892c:	d5c2      	bpl.n	80088b4 <__swsetup_r+0x34>
 800892e:	2240      	movs	r2, #64	; 0x40
 8008930:	4313      	orrs	r3, r2
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	3801      	subs	r0, #1
 8008936:	e7bd      	b.n	80088b4 <__swsetup_r+0x34>
 8008938:	0788      	lsls	r0, r1, #30
 800893a:	d400      	bmi.n	800893e <__swsetup_r+0xbe>
 800893c:	6962      	ldr	r2, [r4, #20]
 800893e:	60a2      	str	r2, [r4, #8]
 8008940:	e7ef      	b.n	8008922 <__swsetup_r+0xa2>
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	20000078 	.word	0x20000078

08008948 <memset>:
 8008948:	0003      	movs	r3, r0
 800894a:	1882      	adds	r2, r0, r2
 800894c:	4293      	cmp	r3, r2
 800894e:	d100      	bne.n	8008952 <memset+0xa>
 8008950:	4770      	bx	lr
 8008952:	7019      	strb	r1, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	e7f9      	b.n	800894c <memset+0x4>

08008958 <strncmp>:
 8008958:	b530      	push	{r4, r5, lr}
 800895a:	0005      	movs	r5, r0
 800895c:	1e10      	subs	r0, r2, #0
 800895e:	d00b      	beq.n	8008978 <strncmp+0x20>
 8008960:	2400      	movs	r4, #0
 8008962:	3a01      	subs	r2, #1
 8008964:	5d2b      	ldrb	r3, [r5, r4]
 8008966:	5d08      	ldrb	r0, [r1, r4]
 8008968:	4283      	cmp	r3, r0
 800896a:	d104      	bne.n	8008976 <strncmp+0x1e>
 800896c:	42a2      	cmp	r2, r4
 800896e:	d002      	beq.n	8008976 <strncmp+0x1e>
 8008970:	3401      	adds	r4, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1f6      	bne.n	8008964 <strncmp+0xc>
 8008976:	1a18      	subs	r0, r3, r0
 8008978:	bd30      	pop	{r4, r5, pc}
	...

0800897c <_close_r>:
 800897c:	2300      	movs	r3, #0
 800897e:	b570      	push	{r4, r5, r6, lr}
 8008980:	4d06      	ldr	r5, [pc, #24]	; (800899c <_close_r+0x20>)
 8008982:	0004      	movs	r4, r0
 8008984:	0008      	movs	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7f8 f9bf 	bl	8000d0a <_close>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d103      	bne.n	8008998 <_close_r+0x1c>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d000      	beq.n	8008998 <_close_r+0x1c>
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	bd70      	pop	{r4, r5, r6, pc}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	2000040c 	.word	0x2000040c

080089a0 <_lseek_r>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	0004      	movs	r4, r0
 80089a4:	0008      	movs	r0, r1
 80089a6:	0011      	movs	r1, r2
 80089a8:	001a      	movs	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	4d05      	ldr	r5, [pc, #20]	; (80089c4 <_lseek_r+0x24>)
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7f8 f9cc 	bl	8000d4c <_lseek>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d103      	bne.n	80089c0 <_lseek_r+0x20>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d000      	beq.n	80089c0 <_lseek_r+0x20>
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	2000040c 	.word	0x2000040c

080089c8 <_read_r>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	0004      	movs	r4, r0
 80089cc:	0008      	movs	r0, r1
 80089ce:	0011      	movs	r1, r2
 80089d0:	001a      	movs	r2, r3
 80089d2:	2300      	movs	r3, #0
 80089d4:	4d05      	ldr	r5, [pc, #20]	; (80089ec <_read_r+0x24>)
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	f7f8 f95e 	bl	8000c98 <_read>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d103      	bne.n	80089e8 <_read_r+0x20>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d000      	beq.n	80089e8 <_read_r+0x20>
 80089e6:	6023      	str	r3, [r4, #0]
 80089e8:	bd70      	pop	{r4, r5, r6, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	2000040c 	.word	0x2000040c

080089f0 <_write_r>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	0004      	movs	r4, r0
 80089f4:	0008      	movs	r0, r1
 80089f6:	0011      	movs	r1, r2
 80089f8:	001a      	movs	r2, r3
 80089fa:	2300      	movs	r3, #0
 80089fc:	4d05      	ldr	r5, [pc, #20]	; (8008a14 <_write_r+0x24>)
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	f7f8 f967 	bl	8000cd2 <_write>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d103      	bne.n	8008a10 <_write_r+0x20>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d000      	beq.n	8008a10 <_write_r+0x20>
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	2000040c 	.word	0x2000040c

08008a18 <__errno>:
 8008a18:	4b01      	ldr	r3, [pc, #4]	; (8008a20 <__errno+0x8>)
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	4770      	bx	lr
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	20000078 	.word	0x20000078

08008a24 <__libc_init_array>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	2600      	movs	r6, #0
 8008a28:	4c0c      	ldr	r4, [pc, #48]	; (8008a5c <__libc_init_array+0x38>)
 8008a2a:	4d0d      	ldr	r5, [pc, #52]	; (8008a60 <__libc_init_array+0x3c>)
 8008a2c:	1b64      	subs	r4, r4, r5
 8008a2e:	10a4      	asrs	r4, r4, #2
 8008a30:	42a6      	cmp	r6, r4
 8008a32:	d109      	bne.n	8008a48 <__libc_init_array+0x24>
 8008a34:	2600      	movs	r6, #0
 8008a36:	f001 fa2f 	bl	8009e98 <_init>
 8008a3a:	4c0a      	ldr	r4, [pc, #40]	; (8008a64 <__libc_init_array+0x40>)
 8008a3c:	4d0a      	ldr	r5, [pc, #40]	; (8008a68 <__libc_init_array+0x44>)
 8008a3e:	1b64      	subs	r4, r4, r5
 8008a40:	10a4      	asrs	r4, r4, #2
 8008a42:	42a6      	cmp	r6, r4
 8008a44:	d105      	bne.n	8008a52 <__libc_init_array+0x2e>
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	00b3      	lsls	r3, r6, #2
 8008a4a:	58eb      	ldr	r3, [r5, r3]
 8008a4c:	4798      	blx	r3
 8008a4e:	3601      	adds	r6, #1
 8008a50:	e7ee      	b.n	8008a30 <__libc_init_array+0xc>
 8008a52:	00b3      	lsls	r3, r6, #2
 8008a54:	58eb      	ldr	r3, [r5, r3]
 8008a56:	4798      	blx	r3
 8008a58:	3601      	adds	r6, #1
 8008a5a:	e7f2      	b.n	8008a42 <__libc_init_array+0x1e>
 8008a5c:	0800a2ec 	.word	0x0800a2ec
 8008a60:	0800a2ec 	.word	0x0800a2ec
 8008a64:	0800a2f0 	.word	0x0800a2f0
 8008a68:	0800a2ec 	.word	0x0800a2ec

08008a6c <__retarget_lock_init_recursive>:
 8008a6c:	4770      	bx	lr

08008a6e <__retarget_lock_acquire_recursive>:
 8008a6e:	4770      	bx	lr

08008a70 <__retarget_lock_release_recursive>:
 8008a70:	4770      	bx	lr
	...

08008a74 <_free_r>:
 8008a74:	b570      	push	{r4, r5, r6, lr}
 8008a76:	0005      	movs	r5, r0
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d010      	beq.n	8008a9e <_free_r+0x2a>
 8008a7c:	1f0c      	subs	r4, r1, #4
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	da00      	bge.n	8008a86 <_free_r+0x12>
 8008a84:	18e4      	adds	r4, r4, r3
 8008a86:	0028      	movs	r0, r5
 8008a88:	f000 f8e2 	bl	8008c50 <__malloc_lock>
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <_free_r+0x90>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <_free_r+0x2c>
 8008a94:	6063      	str	r3, [r4, #4]
 8008a96:	6014      	str	r4, [r2, #0]
 8008a98:	0028      	movs	r0, r5
 8008a9a:	f000 f8e1 	bl	8008c60 <__malloc_unlock>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d908      	bls.n	8008ab6 <_free_r+0x42>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	1821      	adds	r1, r4, r0
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	d1f3      	bne.n	8008a94 <_free_r+0x20>
 8008aac:	6819      	ldr	r1, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	1809      	adds	r1, r1, r0
 8008ab2:	6021      	str	r1, [r4, #0]
 8008ab4:	e7ee      	b.n	8008a94 <_free_r+0x20>
 8008ab6:	001a      	movs	r2, r3
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <_free_r+0x4e>
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	d9f9      	bls.n	8008ab6 <_free_r+0x42>
 8008ac2:	6811      	ldr	r1, [r2, #0]
 8008ac4:	1850      	adds	r0, r2, r1
 8008ac6:	42a0      	cmp	r0, r4
 8008ac8:	d10b      	bne.n	8008ae2 <_free_r+0x6e>
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	1809      	adds	r1, r1, r0
 8008ace:	1850      	adds	r0, r2, r1
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	4283      	cmp	r3, r0
 8008ad4:	d1e0      	bne.n	8008a98 <_free_r+0x24>
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	1841      	adds	r1, r0, r1
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	6053      	str	r3, [r2, #4]
 8008ae0:	e7da      	b.n	8008a98 <_free_r+0x24>
 8008ae2:	42a0      	cmp	r0, r4
 8008ae4:	d902      	bls.n	8008aec <_free_r+0x78>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	602b      	str	r3, [r5, #0]
 8008aea:	e7d5      	b.n	8008a98 <_free_r+0x24>
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	1821      	adds	r1, r4, r0
 8008af0:	428b      	cmp	r3, r1
 8008af2:	d103      	bne.n	8008afc <_free_r+0x88>
 8008af4:	6819      	ldr	r1, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	1809      	adds	r1, r1, r0
 8008afa:	6021      	str	r1, [r4, #0]
 8008afc:	6063      	str	r3, [r4, #4]
 8008afe:	6054      	str	r4, [r2, #4]
 8008b00:	e7ca      	b.n	8008a98 <_free_r+0x24>
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	20000414 	.word	0x20000414

08008b08 <sbrk_aligned>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	4e0f      	ldr	r6, [pc, #60]	; (8008b48 <sbrk_aligned+0x40>)
 8008b0c:	000d      	movs	r5, r1
 8008b0e:	6831      	ldr	r1, [r6, #0]
 8008b10:	0004      	movs	r4, r0
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d102      	bne.n	8008b1c <sbrk_aligned+0x14>
 8008b16:	f001 f851 	bl	8009bbc <_sbrk_r>
 8008b1a:	6030      	str	r0, [r6, #0]
 8008b1c:	0029      	movs	r1, r5
 8008b1e:	0020      	movs	r0, r4
 8008b20:	f001 f84c 	bl	8009bbc <_sbrk_r>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d00a      	beq.n	8008b3e <sbrk_aligned+0x36>
 8008b28:	2303      	movs	r3, #3
 8008b2a:	1cc5      	adds	r5, r0, #3
 8008b2c:	439d      	bics	r5, r3
 8008b2e:	42a8      	cmp	r0, r5
 8008b30:	d007      	beq.n	8008b42 <sbrk_aligned+0x3a>
 8008b32:	1a29      	subs	r1, r5, r0
 8008b34:	0020      	movs	r0, r4
 8008b36:	f001 f841 	bl	8009bbc <_sbrk_r>
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d101      	bne.n	8008b42 <sbrk_aligned+0x3a>
 8008b3e:	2501      	movs	r5, #1
 8008b40:	426d      	negs	r5, r5
 8008b42:	0028      	movs	r0, r5
 8008b44:	bd70      	pop	{r4, r5, r6, pc}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	20000418 	.word	0x20000418

08008b4c <_malloc_r>:
 8008b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b4e:	2203      	movs	r2, #3
 8008b50:	1ccb      	adds	r3, r1, #3
 8008b52:	4393      	bics	r3, r2
 8008b54:	3308      	adds	r3, #8
 8008b56:	0006      	movs	r6, r0
 8008b58:	001f      	movs	r7, r3
 8008b5a:	2b0c      	cmp	r3, #12
 8008b5c:	d238      	bcs.n	8008bd0 <_malloc_r+0x84>
 8008b5e:	270c      	movs	r7, #12
 8008b60:	42b9      	cmp	r1, r7
 8008b62:	d837      	bhi.n	8008bd4 <_malloc_r+0x88>
 8008b64:	0030      	movs	r0, r6
 8008b66:	f000 f873 	bl	8008c50 <__malloc_lock>
 8008b6a:	4b38      	ldr	r3, [pc, #224]	; (8008c4c <_malloc_r+0x100>)
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	001c      	movs	r4, r3
 8008b72:	2c00      	cmp	r4, #0
 8008b74:	d133      	bne.n	8008bde <_malloc_r+0x92>
 8008b76:	0039      	movs	r1, r7
 8008b78:	0030      	movs	r0, r6
 8008b7a:	f7ff ffc5 	bl	8008b08 <sbrk_aligned>
 8008b7e:	0004      	movs	r4, r0
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d15e      	bne.n	8008c42 <_malloc_r+0xf6>
 8008b84:	9b00      	ldr	r3, [sp, #0]
 8008b86:	681c      	ldr	r4, [r3, #0]
 8008b88:	0025      	movs	r5, r4
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	d14e      	bne.n	8008c2c <_malloc_r+0xe0>
 8008b8e:	2c00      	cmp	r4, #0
 8008b90:	d051      	beq.n	8008c36 <_malloc_r+0xea>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	0029      	movs	r1, r5
 8008b96:	18e3      	adds	r3, r4, r3
 8008b98:	0030      	movs	r0, r6
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	f001 f80e 	bl	8009bbc <_sbrk_r>
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	4283      	cmp	r3, r0
 8008ba4:	d147      	bne.n	8008c36 <_malloc_r+0xea>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	0030      	movs	r0, r6
 8008baa:	1aff      	subs	r7, r7, r3
 8008bac:	0039      	movs	r1, r7
 8008bae:	f7ff ffab 	bl	8008b08 <sbrk_aligned>
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d03f      	beq.n	8008c36 <_malloc_r+0xea>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	19db      	adds	r3, r3, r7
 8008bba:	6023      	str	r3, [r4, #0]
 8008bbc:	9b00      	ldr	r3, [sp, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d040      	beq.n	8008c46 <_malloc_r+0xfa>
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	42a2      	cmp	r2, r4
 8008bc8:	d133      	bne.n	8008c32 <_malloc_r+0xe6>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
 8008bce:	e014      	b.n	8008bfa <_malloc_r+0xae>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dac5      	bge.n	8008b60 <_malloc_r+0x14>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	2500      	movs	r5, #0
 8008bd8:	6033      	str	r3, [r6, #0]
 8008bda:	0028      	movs	r0, r5
 8008bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bde:	6821      	ldr	r1, [r4, #0]
 8008be0:	1bc9      	subs	r1, r1, r7
 8008be2:	d420      	bmi.n	8008c26 <_malloc_r+0xda>
 8008be4:	290b      	cmp	r1, #11
 8008be6:	d918      	bls.n	8008c1a <_malloc_r+0xce>
 8008be8:	19e2      	adds	r2, r4, r7
 8008bea:	6027      	str	r7, [r4, #0]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	d112      	bne.n	8008c16 <_malloc_r+0xca>
 8008bf0:	9b00      	ldr	r3, [sp, #0]
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	6011      	str	r1, [r2, #0]
 8008bf8:	6053      	str	r3, [r2, #4]
 8008bfa:	0030      	movs	r0, r6
 8008bfc:	0025      	movs	r5, r4
 8008bfe:	f000 f82f 	bl	8008c60 <__malloc_unlock>
 8008c02:	2207      	movs	r2, #7
 8008c04:	350b      	adds	r5, #11
 8008c06:	1d23      	adds	r3, r4, #4
 8008c08:	4395      	bics	r5, r2
 8008c0a:	1aea      	subs	r2, r5, r3
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	d0e4      	beq.n	8008bda <_malloc_r+0x8e>
 8008c10:	1b5b      	subs	r3, r3, r5
 8008c12:	50a3      	str	r3, [r4, r2]
 8008c14:	e7e1      	b.n	8008bda <_malloc_r+0x8e>
 8008c16:	605a      	str	r2, [r3, #4]
 8008c18:	e7ec      	b.n	8008bf4 <_malloc_r+0xa8>
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d1d5      	bne.n	8008bcc <_malloc_r+0x80>
 8008c20:	9b00      	ldr	r3, [sp, #0]
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e7e9      	b.n	8008bfa <_malloc_r+0xae>
 8008c26:	0023      	movs	r3, r4
 8008c28:	6864      	ldr	r4, [r4, #4]
 8008c2a:	e7a2      	b.n	8008b72 <_malloc_r+0x26>
 8008c2c:	002c      	movs	r4, r5
 8008c2e:	686d      	ldr	r5, [r5, #4]
 8008c30:	e7ab      	b.n	8008b8a <_malloc_r+0x3e>
 8008c32:	0013      	movs	r3, r2
 8008c34:	e7c4      	b.n	8008bc0 <_malloc_r+0x74>
 8008c36:	230c      	movs	r3, #12
 8008c38:	0030      	movs	r0, r6
 8008c3a:	6033      	str	r3, [r6, #0]
 8008c3c:	f000 f810 	bl	8008c60 <__malloc_unlock>
 8008c40:	e7cb      	b.n	8008bda <_malloc_r+0x8e>
 8008c42:	6027      	str	r7, [r4, #0]
 8008c44:	e7d9      	b.n	8008bfa <_malloc_r+0xae>
 8008c46:	605b      	str	r3, [r3, #4]
 8008c48:	deff      	udf	#255	; 0xff
 8008c4a:	46c0      	nop			; (mov r8, r8)
 8008c4c:	20000414 	.word	0x20000414

08008c50 <__malloc_lock>:
 8008c50:	b510      	push	{r4, lr}
 8008c52:	4802      	ldr	r0, [pc, #8]	; (8008c5c <__malloc_lock+0xc>)
 8008c54:	f7ff ff0b 	bl	8008a6e <__retarget_lock_acquire_recursive>
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	20000410 	.word	0x20000410

08008c60 <__malloc_unlock>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	4802      	ldr	r0, [pc, #8]	; (8008c6c <__malloc_unlock+0xc>)
 8008c64:	f7ff ff04 	bl	8008a70 <__retarget_lock_release_recursive>
 8008c68:	bd10      	pop	{r4, pc}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	20000410 	.word	0x20000410

08008c70 <_sungetc_r>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	0014      	movs	r4, r2
 8008c74:	1c4b      	adds	r3, r1, #1
 8008c76:	d103      	bne.n	8008c80 <_sungetc_r+0x10>
 8008c78:	2501      	movs	r5, #1
 8008c7a:	426d      	negs	r5, r5
 8008c7c:	0028      	movs	r0, r5
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	8993      	ldrh	r3, [r2, #12]
 8008c82:	2220      	movs	r2, #32
 8008c84:	4393      	bics	r3, r2
 8008c86:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	b2ce      	uxtb	r6, r1
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	b2cd      	uxtb	r5, r1
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	d010      	beq.n	8008cb6 <_sungetc_r+0x46>
 8008c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c96:	429a      	cmp	r2, r3
 8008c98:	dd07      	ble.n	8008caa <_sungetc_r+0x3a>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	701e      	strb	r6, [r3, #0]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	6063      	str	r3, [r4, #4]
 8008ca8:	e7e8      	b.n	8008c7c <_sungetc_r+0xc>
 8008caa:	0021      	movs	r1, r4
 8008cac:	f000 ff24 	bl	8009af8 <__submore>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d0f2      	beq.n	8008c9a <_sungetc_r+0x2a>
 8008cb4:	e7e0      	b.n	8008c78 <_sungetc_r+0x8>
 8008cb6:	6921      	ldr	r1, [r4, #16]
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d007      	beq.n	8008cce <_sungetc_r+0x5e>
 8008cbe:	4291      	cmp	r1, r2
 8008cc0:	d205      	bcs.n	8008cce <_sungetc_r+0x5e>
 8008cc2:	1e51      	subs	r1, r2, #1
 8008cc4:	7808      	ldrb	r0, [r1, #0]
 8008cc6:	42a8      	cmp	r0, r5
 8008cc8:	d101      	bne.n	8008cce <_sungetc_r+0x5e>
 8008cca:	6021      	str	r1, [r4, #0]
 8008ccc:	e7ea      	b.n	8008ca4 <_sungetc_r+0x34>
 8008cce:	6423      	str	r3, [r4, #64]	; 0x40
 8008cd0:	0023      	movs	r3, r4
 8008cd2:	3344      	adds	r3, #68	; 0x44
 8008cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cda:	0023      	movs	r3, r4
 8008cdc:	3346      	adds	r3, #70	; 0x46
 8008cde:	63e2      	str	r2, [r4, #60]	; 0x3c
 8008ce0:	701e      	strb	r6, [r3, #0]
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e7de      	b.n	8008ca6 <_sungetc_r+0x36>

08008ce8 <__ssrefill_r>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	000c      	movs	r4, r1
 8008cec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008cee:	2900      	cmp	r1, #0
 8008cf0:	d00e      	beq.n	8008d10 <__ssrefill_r+0x28>
 8008cf2:	0023      	movs	r3, r4
 8008cf4:	3344      	adds	r3, #68	; 0x44
 8008cf6:	4299      	cmp	r1, r3
 8008cf8:	d001      	beq.n	8008cfe <__ssrefill_r+0x16>
 8008cfa:	f7ff febb 	bl	8008a74 <_free_r>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d02:	6360      	str	r0, [r4, #52]	; 0x34
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	4283      	cmp	r3, r0
 8008d08:	d002      	beq.n	8008d10 <__ssrefill_r+0x28>
 8008d0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	2001      	movs	r0, #1
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	89a2      	ldrh	r2, [r4, #12]
 8008d1a:	6063      	str	r3, [r4, #4]
 8008d1c:	3320      	adds	r3, #32
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	4240      	negs	r0, r0
 8008d24:	e7f3      	b.n	8008d0e <__ssrefill_r+0x26>
	...

08008d28 <__ssvfiscanf_r>:
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	4cae      	ldr	r4, [pc, #696]	; (8008fe4 <__ssvfiscanf_r+0x2bc>)
 8008d2c:	0006      	movs	r6, r0
 8008d2e:	44a5      	add	sp, r4
 8008d30:	000c      	movs	r4, r1
 8008d32:	2100      	movs	r1, #0
 8008d34:	20be      	movs	r0, #190	; 0xbe
 8008d36:	9146      	str	r1, [sp, #280]	; 0x118
 8008d38:	9147      	str	r1, [sp, #284]	; 0x11c
 8008d3a:	a903      	add	r1, sp, #12
 8008d3c:	9148      	str	r1, [sp, #288]	; 0x120
 8008d3e:	49aa      	ldr	r1, [pc, #680]	; (8008fe8 <__ssvfiscanf_r+0x2c0>)
 8008d40:	0040      	lsls	r0, r0, #1
 8008d42:	ad43      	add	r5, sp, #268	; 0x10c
 8008d44:	5029      	str	r1, [r5, r0]
 8008d46:	25c0      	movs	r5, #192	; 0xc0
 8008d48:	49a8      	ldr	r1, [pc, #672]	; (8008fec <__ssvfiscanf_r+0x2c4>)
 8008d4a:	006d      	lsls	r5, r5, #1
 8008d4c:	a843      	add	r0, sp, #268	; 0x10c
 8008d4e:	5141      	str	r1, [r0, r5]
 8008d50:	9302      	str	r3, [sp, #8]
 8008d52:	7815      	ldrb	r5, [r2, #0]
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	d100      	bne.n	8008d5a <__ssvfiscanf_r+0x32>
 8008d58:	e141      	b.n	8008fde <__ssvfiscanf_r+0x2b6>
 8008d5a:	4ba5      	ldr	r3, [pc, #660]	; (8008ff0 <__ssvfiscanf_r+0x2c8>)
 8008d5c:	2008      	movs	r0, #8
 8008d5e:	5d59      	ldrb	r1, [r3, r5]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	2308      	movs	r3, #8
 8008d64:	1c57      	adds	r7, r2, #1
 8008d66:	400b      	ands	r3, r1
 8008d68:	4201      	tst	r1, r0
 8008d6a:	d01e      	beq.n	8008daa <__ssvfiscanf_r+0x82>
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	dd11      	ble.n	8008d96 <__ssvfiscanf_r+0x6e>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	9900      	ldr	r1, [sp, #0]
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	5c8a      	ldrb	r2, [r1, r2]
 8008d7a:	2108      	movs	r1, #8
 8008d7c:	420a      	tst	r2, r1
 8008d7e:	d101      	bne.n	8008d84 <__ssvfiscanf_r+0x5c>
 8008d80:	003a      	movs	r2, r7
 8008d82:	e7e6      	b.n	8008d52 <__ssvfiscanf_r+0x2a>
 8008d84:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008d86:	3301      	adds	r3, #1
 8008d88:	3201      	adds	r2, #1
 8008d8a:	9247      	str	r2, [sp, #284]	; 0x11c
 8008d8c:	6862      	ldr	r2, [r4, #4]
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	3a01      	subs	r2, #1
 8008d92:	6062      	str	r2, [r4, #4]
 8008d94:	e7ea      	b.n	8008d6c <__ssvfiscanf_r+0x44>
 8008d96:	22c0      	movs	r2, #192	; 0xc0
 8008d98:	ab43      	add	r3, sp, #268	; 0x10c
 8008d9a:	0052      	lsls	r2, r2, #1
 8008d9c:	0021      	movs	r1, r4
 8008d9e:	0030      	movs	r0, r6
 8008da0:	589b      	ldr	r3, [r3, r2]
 8008da2:	4798      	blx	r3
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d0e4      	beq.n	8008d72 <__ssvfiscanf_r+0x4a>
 8008da8:	e7ea      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008daa:	2d25      	cmp	r5, #37	; 0x25
 8008dac:	d162      	bne.n	8008e74 <__ssvfiscanf_r+0x14c>
 8008dae:	9345      	str	r3, [sp, #276]	; 0x114
 8008db0:	9343      	str	r3, [sp, #268]	; 0x10c
 8008db2:	7853      	ldrb	r3, [r2, #1]
 8008db4:	2b2a      	cmp	r3, #42	; 0x2a
 8008db6:	d102      	bne.n	8008dbe <__ssvfiscanf_r+0x96>
 8008db8:	3b1a      	subs	r3, #26
 8008dba:	9343      	str	r3, [sp, #268]	; 0x10c
 8008dbc:	1c97      	adds	r7, r2, #2
 8008dbe:	003d      	movs	r5, r7
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	7829      	ldrb	r1, [r5, #0]
 8008dc4:	1c6b      	adds	r3, r5, #1
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	000b      	movs	r3, r1
 8008dca:	3b30      	subs	r3, #48	; 0x30
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d91e      	bls.n	8008e0e <__ssvfiscanf_r+0xe6>
 8008dd0:	4f88      	ldr	r7, [pc, #544]	; (8008ff4 <__ssvfiscanf_r+0x2cc>)
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	0038      	movs	r0, r7
 8008dd6:	f000 ff03 	bl	8009be0 <memchr>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d006      	beq.n	8008dec <__ssvfiscanf_r+0xc4>
 8008dde:	2301      	movs	r3, #1
 8008de0:	1bc0      	subs	r0, r0, r7
 8008de2:	4083      	lsls	r3, r0
 8008de4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008de6:	9d01      	ldr	r5, [sp, #4]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	9343      	str	r3, [sp, #268]	; 0x10c
 8008dec:	1c6f      	adds	r7, r5, #1
 8008dee:	782d      	ldrb	r5, [r5, #0]
 8008df0:	2d78      	cmp	r5, #120	; 0x78
 8008df2:	d807      	bhi.n	8008e04 <__ssvfiscanf_r+0xdc>
 8008df4:	2d57      	cmp	r5, #87	; 0x57
 8008df6:	d811      	bhi.n	8008e1c <__ssvfiscanf_r+0xf4>
 8008df8:	2d25      	cmp	r5, #37	; 0x25
 8008dfa:	d03b      	beq.n	8008e74 <__ssvfiscanf_r+0x14c>
 8008dfc:	d835      	bhi.n	8008e6a <__ssvfiscanf_r+0x142>
 8008dfe:	2d00      	cmp	r5, #0
 8008e00:	d100      	bne.n	8008e04 <__ssvfiscanf_r+0xdc>
 8008e02:	e0e9      	b.n	8008fd8 <__ssvfiscanf_r+0x2b0>
 8008e04:	2303      	movs	r3, #3
 8008e06:	9349      	str	r3, [sp, #292]	; 0x124
 8008e08:	3307      	adds	r3, #7
 8008e0a:	9344      	str	r3, [sp, #272]	; 0x110
 8008e0c:	e06d      	b.n	8008eea <__ssvfiscanf_r+0x1c2>
 8008e0e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008e10:	9d01      	ldr	r5, [sp, #4]
 8008e12:	4353      	muls	r3, r2
 8008e14:	3b30      	subs	r3, #48	; 0x30
 8008e16:	185b      	adds	r3, r3, r1
 8008e18:	9345      	str	r3, [sp, #276]	; 0x114
 8008e1a:	e7d2      	b.n	8008dc2 <__ssvfiscanf_r+0x9a>
 8008e1c:	0028      	movs	r0, r5
 8008e1e:	3858      	subs	r0, #88	; 0x58
 8008e20:	2820      	cmp	r0, #32
 8008e22:	d8ef      	bhi.n	8008e04 <__ssvfiscanf_r+0xdc>
 8008e24:	f7f7 f978 	bl	8000118 <__gnu_thumb1_case_shi>
 8008e28:	ffee004d 	.word	0xffee004d
 8008e2c:	007fffee 	.word	0x007fffee
 8008e30:	ffeeffee 	.word	0xffeeffee
 8008e34:	ffeeffee 	.word	0xffeeffee
 8008e38:	ffeeffee 	.word	0xffeeffee
 8008e3c:	008affee 	.word	0x008affee
 8008e40:	0024007d 	.word	0x0024007d
 8008e44:	00240024 	.word	0x00240024
 8008e48:	0059ffee 	.word	0x0059ffee
 8008e4c:	ffeeffee 	.word	0xffeeffee
 8008e50:	ffeeffee 	.word	0xffeeffee
 8008e54:	005d0092 	.word	0x005d0092
 8008e58:	ffee0049 	.word	0xffee0049
 8008e5c:	0090ffee 	.word	0x0090ffee
 8008e60:	007dffee 	.word	0x007dffee
 8008e64:	ffeeffee 	.word	0xffeeffee
 8008e68:	004d      	.short	0x004d
 8008e6a:	3d45      	subs	r5, #69	; 0x45
 8008e6c:	2d02      	cmp	r5, #2
 8008e6e:	d8c9      	bhi.n	8008e04 <__ssvfiscanf_r+0xdc>
 8008e70:	2305      	movs	r3, #5
 8008e72:	e039      	b.n	8008ee8 <__ssvfiscanf_r+0x1c0>
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	dd0d      	ble.n	8008e96 <__ssvfiscanf_r+0x16e>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	781a      	ldrb	r2, [r3, #0]
 8008e7e:	42aa      	cmp	r2, r5
 8008e80:	d000      	beq.n	8008e84 <__ssvfiscanf_r+0x15c>
 8008e82:	e0ac      	b.n	8008fde <__ssvfiscanf_r+0x2b6>
 8008e84:	3301      	adds	r3, #1
 8008e86:	6862      	ldr	r2, [r4, #4]
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008e8c:	3a01      	subs	r2, #1
 8008e8e:	3301      	adds	r3, #1
 8008e90:	6062      	str	r2, [r4, #4]
 8008e92:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e94:	e774      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008e96:	22c0      	movs	r2, #192	; 0xc0
 8008e98:	ab43      	add	r3, sp, #268	; 0x10c
 8008e9a:	0052      	lsls	r2, r2, #1
 8008e9c:	0021      	movs	r1, r4
 8008e9e:	0030      	movs	r0, r6
 8008ea0:	589b      	ldr	r3, [r3, r2]
 8008ea2:	4798      	blx	r3
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d0e8      	beq.n	8008e7a <__ssvfiscanf_r+0x152>
 8008ea8:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d000      	beq.n	8008eb0 <__ssvfiscanf_r+0x188>
 8008eae:	e08f      	b.n	8008fd0 <__ssvfiscanf_r+0x2a8>
 8008eb0:	3801      	subs	r0, #1
 8008eb2:	23a5      	movs	r3, #165	; 0xa5
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	449d      	add	sp, r3
 8008eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eba:	2320      	movs	r3, #32
 8008ebc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	9343      	str	r3, [sp, #268]	; 0x10c
 8008ec2:	2380      	movs	r3, #128	; 0x80
 8008ec4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	9343      	str	r3, [sp, #268]	; 0x10c
 8008ecc:	2310      	movs	r3, #16
 8008ece:	9344      	str	r3, [sp, #272]	; 0x110
 8008ed0:	236e      	movs	r3, #110	; 0x6e
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	419b      	sbcs	r3, r3
 8008ed6:	425b      	negs	r3, r3
 8008ed8:	e001      	b.n	8008ede <__ssvfiscanf_r+0x1b6>
 8008eda:	2300      	movs	r3, #0
 8008edc:	9344      	str	r3, [sp, #272]	; 0x110
 8008ede:	3303      	adds	r3, #3
 8008ee0:	e002      	b.n	8008ee8 <__ssvfiscanf_r+0x1c0>
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	9344      	str	r3, [sp, #272]	; 0x110
 8008ee6:	3b04      	subs	r3, #4
 8008ee8:	9349      	str	r3, [sp, #292]	; 0x124
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dd3c      	ble.n	8008f6a <__ssvfiscanf_r+0x242>
 8008ef0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008ef2:	065b      	lsls	r3, r3, #25
 8008ef4:	d406      	bmi.n	8008f04 <__ssvfiscanf_r+0x1dc>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	9900      	ldr	r1, [sp, #0]
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	5c8a      	ldrb	r2, [r1, r2]
 8008efe:	2108      	movs	r1, #8
 8008f00:	420a      	tst	r2, r1
 8008f02:	d13c      	bne.n	8008f7e <__ssvfiscanf_r+0x256>
 8008f04:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	dc4e      	bgt.n	8008fa8 <__ssvfiscanf_r+0x280>
 8008f0a:	0022      	movs	r2, r4
 8008f0c:	0030      	movs	r0, r6
 8008f0e:	ab02      	add	r3, sp, #8
 8008f10:	a943      	add	r1, sp, #268	; 0x10c
 8008f12:	f000 fb37 	bl	8009584 <_scanf_chars>
 8008f16:	2801      	cmp	r0, #1
 8008f18:	d061      	beq.n	8008fde <__ssvfiscanf_r+0x2b6>
 8008f1a:	2802      	cmp	r0, #2
 8008f1c:	d000      	beq.n	8008f20 <__ssvfiscanf_r+0x1f8>
 8008f1e:	e72f      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008f20:	e7c2      	b.n	8008ea8 <__ssvfiscanf_r+0x180>
 8008f22:	230a      	movs	r3, #10
 8008f24:	e7d3      	b.n	8008ece <__ssvfiscanf_r+0x1a6>
 8008f26:	0039      	movs	r1, r7
 8008f28:	a803      	add	r0, sp, #12
 8008f2a:	f000 fda9 	bl	8009a80 <__sccl>
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008f32:	0007      	movs	r7, r0
 8008f34:	4313      	orrs	r3, r2
 8008f36:	9343      	str	r3, [sp, #268]	; 0x10c
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7d5      	b.n	8008ee8 <__ssvfiscanf_r+0x1c0>
 8008f3c:	2340      	movs	r3, #64	; 0x40
 8008f3e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008f40:	4313      	orrs	r3, r2
 8008f42:	9343      	str	r3, [sp, #268]	; 0x10c
 8008f44:	2300      	movs	r3, #0
 8008f46:	e7cf      	b.n	8008ee8 <__ssvfiscanf_r+0x1c0>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e7cd      	b.n	8008ee8 <__ssvfiscanf_r+0x1c0>
 8008f4c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008f4e:	06d3      	lsls	r3, r2, #27
 8008f50:	d500      	bpl.n	8008f54 <__ssvfiscanf_r+0x22c>
 8008f52:	e715      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008f54:	9b02      	ldr	r3, [sp, #8]
 8008f56:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8008f58:	1d18      	adds	r0, r3, #4
 8008f5a:	9002      	str	r0, [sp, #8]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	07d5      	lsls	r5, r2, #31
 8008f60:	d501      	bpl.n	8008f66 <__ssvfiscanf_r+0x23e>
 8008f62:	8019      	strh	r1, [r3, #0]
 8008f64:	e70c      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008f66:	6019      	str	r1, [r3, #0]
 8008f68:	e70a      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008f6a:	22c0      	movs	r2, #192	; 0xc0
 8008f6c:	ab43      	add	r3, sp, #268	; 0x10c
 8008f6e:	0052      	lsls	r2, r2, #1
 8008f70:	0021      	movs	r1, r4
 8008f72:	0030      	movs	r0, r6
 8008f74:	589b      	ldr	r3, [r3, r2]
 8008f76:	4798      	blx	r3
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d0b9      	beq.n	8008ef0 <__ssvfiscanf_r+0x1c8>
 8008f7c:	e794      	b.n	8008ea8 <__ssvfiscanf_r+0x180>
 8008f7e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008f80:	3201      	adds	r2, #1
 8008f82:	9247      	str	r2, [sp, #284]	; 0x11c
 8008f84:	6862      	ldr	r2, [r4, #4]
 8008f86:	3a01      	subs	r2, #1
 8008f88:	6062      	str	r2, [r4, #4]
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	dd02      	ble.n	8008f94 <__ssvfiscanf_r+0x26c>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	e7b0      	b.n	8008ef6 <__ssvfiscanf_r+0x1ce>
 8008f94:	22c0      	movs	r2, #192	; 0xc0
 8008f96:	ab43      	add	r3, sp, #268	; 0x10c
 8008f98:	0052      	lsls	r2, r2, #1
 8008f9a:	0021      	movs	r1, r4
 8008f9c:	0030      	movs	r0, r6
 8008f9e:	589b      	ldr	r3, [r3, r2]
 8008fa0:	4798      	blx	r3
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d0a7      	beq.n	8008ef6 <__ssvfiscanf_r+0x1ce>
 8008fa6:	e77f      	b.n	8008ea8 <__ssvfiscanf_r+0x180>
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	dc06      	bgt.n	8008fba <__ssvfiscanf_r+0x292>
 8008fac:	0022      	movs	r2, r4
 8008fae:	0030      	movs	r0, r6
 8008fb0:	ab02      	add	r3, sp, #8
 8008fb2:	a943      	add	r1, sp, #268	; 0x10c
 8008fb4:	f000 fb44 	bl	8009640 <_scanf_i>
 8008fb8:	e7ad      	b.n	8008f16 <__ssvfiscanf_r+0x1ee>
 8008fba:	4b0f      	ldr	r3, [pc, #60]	; (8008ff8 <__ssvfiscanf_r+0x2d0>)
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d100      	bne.n	8008fc2 <__ssvfiscanf_r+0x29a>
 8008fc0:	e6de      	b.n	8008d80 <__ssvfiscanf_r+0x58>
 8008fc2:	0022      	movs	r2, r4
 8008fc4:	0030      	movs	r0, r6
 8008fc6:	ab02      	add	r3, sp, #8
 8008fc8:	a943      	add	r1, sp, #268	; 0x10c
 8008fca:	e000      	b.n	8008fce <__ssvfiscanf_r+0x2a6>
 8008fcc:	bf00      	nop
 8008fce:	e7a2      	b.n	8008f16 <__ssvfiscanf_r+0x1ee>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	065b      	lsls	r3, r3, #25
 8008fd4:	d400      	bmi.n	8008fd8 <__ssvfiscanf_r+0x2b0>
 8008fd6:	e76c      	b.n	8008eb2 <__ssvfiscanf_r+0x18a>
 8008fd8:	2001      	movs	r0, #1
 8008fda:	4240      	negs	r0, r0
 8008fdc:	e769      	b.n	8008eb2 <__ssvfiscanf_r+0x18a>
 8008fde:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008fe0:	e767      	b.n	8008eb2 <__ssvfiscanf_r+0x18a>
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	fffffd6c 	.word	0xfffffd6c
 8008fe8:	08008c71 	.word	0x08008c71
 8008fec:	08008ce9 	.word	0x08008ce9
 8008ff0:	0800a1e3 	.word	0x0800a1e3
 8008ff4:	0800a194 	.word	0x0800a194
 8008ff8:	00000000 	.word	0x00000000

08008ffc <__sfputc_r>:
 8008ffc:	6893      	ldr	r3, [r2, #8]
 8008ffe:	b510      	push	{r4, lr}
 8009000:	3b01      	subs	r3, #1
 8009002:	6093      	str	r3, [r2, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	da04      	bge.n	8009012 <__sfputc_r+0x16>
 8009008:	6994      	ldr	r4, [r2, #24]
 800900a:	42a3      	cmp	r3, r4
 800900c:	db07      	blt.n	800901e <__sfputc_r+0x22>
 800900e:	290a      	cmp	r1, #10
 8009010:	d005      	beq.n	800901e <__sfputc_r+0x22>
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	1c58      	adds	r0, r3, #1
 8009016:	6010      	str	r0, [r2, #0]
 8009018:	7019      	strb	r1, [r3, #0]
 800901a:	0008      	movs	r0, r1
 800901c:	bd10      	pop	{r4, pc}
 800901e:	f7ff fbed 	bl	80087fc <__swbuf_r>
 8009022:	0001      	movs	r1, r0
 8009024:	e7f9      	b.n	800901a <__sfputc_r+0x1e>

08009026 <__sfputs_r>:
 8009026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009028:	0006      	movs	r6, r0
 800902a:	000f      	movs	r7, r1
 800902c:	0014      	movs	r4, r2
 800902e:	18d5      	adds	r5, r2, r3
 8009030:	42ac      	cmp	r4, r5
 8009032:	d101      	bne.n	8009038 <__sfputs_r+0x12>
 8009034:	2000      	movs	r0, #0
 8009036:	e007      	b.n	8009048 <__sfputs_r+0x22>
 8009038:	7821      	ldrb	r1, [r4, #0]
 800903a:	003a      	movs	r2, r7
 800903c:	0030      	movs	r0, r6
 800903e:	f7ff ffdd 	bl	8008ffc <__sfputc_r>
 8009042:	3401      	adds	r4, #1
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d1f3      	bne.n	8009030 <__sfputs_r+0xa>
 8009048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800904c <_vfiprintf_r>:
 800904c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904e:	b0a1      	sub	sp, #132	; 0x84
 8009050:	000f      	movs	r7, r1
 8009052:	0015      	movs	r5, r2
 8009054:	001e      	movs	r6, r3
 8009056:	9003      	str	r0, [sp, #12]
 8009058:	2800      	cmp	r0, #0
 800905a:	d004      	beq.n	8009066 <_vfiprintf_r+0x1a>
 800905c:	6a03      	ldr	r3, [r0, #32]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <_vfiprintf_r+0x1a>
 8009062:	f7ff fab1 	bl	80085c8 <__sinit>
 8009066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009068:	07db      	lsls	r3, r3, #31
 800906a:	d405      	bmi.n	8009078 <_vfiprintf_r+0x2c>
 800906c:	89bb      	ldrh	r3, [r7, #12]
 800906e:	059b      	lsls	r3, r3, #22
 8009070:	d402      	bmi.n	8009078 <_vfiprintf_r+0x2c>
 8009072:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009074:	f7ff fcfb 	bl	8008a6e <__retarget_lock_acquire_recursive>
 8009078:	89bb      	ldrh	r3, [r7, #12]
 800907a:	071b      	lsls	r3, r3, #28
 800907c:	d502      	bpl.n	8009084 <_vfiprintf_r+0x38>
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d113      	bne.n	80090ac <_vfiprintf_r+0x60>
 8009084:	0039      	movs	r1, r7
 8009086:	9803      	ldr	r0, [sp, #12]
 8009088:	f7ff fbfa 	bl	8008880 <__swsetup_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	d00d      	beq.n	80090ac <_vfiprintf_r+0x60>
 8009090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009092:	07db      	lsls	r3, r3, #31
 8009094:	d503      	bpl.n	800909e <_vfiprintf_r+0x52>
 8009096:	2001      	movs	r0, #1
 8009098:	4240      	negs	r0, r0
 800909a:	b021      	add	sp, #132	; 0x84
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909e:	89bb      	ldrh	r3, [r7, #12]
 80090a0:	059b      	lsls	r3, r3, #22
 80090a2:	d4f8      	bmi.n	8009096 <_vfiprintf_r+0x4a>
 80090a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80090a6:	f7ff fce3 	bl	8008a70 <__retarget_lock_release_recursive>
 80090aa:	e7f4      	b.n	8009096 <_vfiprintf_r+0x4a>
 80090ac:	2300      	movs	r3, #0
 80090ae:	ac08      	add	r4, sp, #32
 80090b0:	6163      	str	r3, [r4, #20]
 80090b2:	3320      	adds	r3, #32
 80090b4:	7663      	strb	r3, [r4, #25]
 80090b6:	3310      	adds	r3, #16
 80090b8:	76a3      	strb	r3, [r4, #26]
 80090ba:	9607      	str	r6, [sp, #28]
 80090bc:	002e      	movs	r6, r5
 80090be:	7833      	ldrb	r3, [r6, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <_vfiprintf_r+0x7c>
 80090c4:	2b25      	cmp	r3, #37	; 0x25
 80090c6:	d148      	bne.n	800915a <_vfiprintf_r+0x10e>
 80090c8:	1b73      	subs	r3, r6, r5
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	42ae      	cmp	r6, r5
 80090ce:	d00b      	beq.n	80090e8 <_vfiprintf_r+0x9c>
 80090d0:	002a      	movs	r2, r5
 80090d2:	0039      	movs	r1, r7
 80090d4:	9803      	ldr	r0, [sp, #12]
 80090d6:	f7ff ffa6 	bl	8009026 <__sfputs_r>
 80090da:	3001      	adds	r0, #1
 80090dc:	d100      	bne.n	80090e0 <_vfiprintf_r+0x94>
 80090de:	e0af      	b.n	8009240 <_vfiprintf_r+0x1f4>
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	9a05      	ldr	r2, [sp, #20]
 80090e4:	189b      	adds	r3, r3, r2
 80090e6:	6163      	str	r3, [r4, #20]
 80090e8:	7833      	ldrb	r3, [r6, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d100      	bne.n	80090f0 <_vfiprintf_r+0xa4>
 80090ee:	e0a7      	b.n	8009240 <_vfiprintf_r+0x1f4>
 80090f0:	2201      	movs	r2, #1
 80090f2:	2300      	movs	r3, #0
 80090f4:	4252      	negs	r2, r2
 80090f6:	6062      	str	r2, [r4, #4]
 80090f8:	a904      	add	r1, sp, #16
 80090fa:	3254      	adds	r2, #84	; 0x54
 80090fc:	1852      	adds	r2, r2, r1
 80090fe:	1c75      	adds	r5, r6, #1
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	60e3      	str	r3, [r4, #12]
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	7013      	strb	r3, [r2, #0]
 8009108:	65a3      	str	r3, [r4, #88]	; 0x58
 800910a:	4b59      	ldr	r3, [pc, #356]	; (8009270 <_vfiprintf_r+0x224>)
 800910c:	2205      	movs	r2, #5
 800910e:	0018      	movs	r0, r3
 8009110:	7829      	ldrb	r1, [r5, #0]
 8009112:	9305      	str	r3, [sp, #20]
 8009114:	f000 fd64 	bl	8009be0 <memchr>
 8009118:	1c6e      	adds	r6, r5, #1
 800911a:	2800      	cmp	r0, #0
 800911c:	d11f      	bne.n	800915e <_vfiprintf_r+0x112>
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	06d3      	lsls	r3, r2, #27
 8009122:	d504      	bpl.n	800912e <_vfiprintf_r+0xe2>
 8009124:	2353      	movs	r3, #83	; 0x53
 8009126:	a904      	add	r1, sp, #16
 8009128:	185b      	adds	r3, r3, r1
 800912a:	2120      	movs	r1, #32
 800912c:	7019      	strb	r1, [r3, #0]
 800912e:	0713      	lsls	r3, r2, #28
 8009130:	d504      	bpl.n	800913c <_vfiprintf_r+0xf0>
 8009132:	2353      	movs	r3, #83	; 0x53
 8009134:	a904      	add	r1, sp, #16
 8009136:	185b      	adds	r3, r3, r1
 8009138:	212b      	movs	r1, #43	; 0x2b
 800913a:	7019      	strb	r1, [r3, #0]
 800913c:	782b      	ldrb	r3, [r5, #0]
 800913e:	2b2a      	cmp	r3, #42	; 0x2a
 8009140:	d016      	beq.n	8009170 <_vfiprintf_r+0x124>
 8009142:	002e      	movs	r6, r5
 8009144:	2100      	movs	r1, #0
 8009146:	200a      	movs	r0, #10
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	7832      	ldrb	r2, [r6, #0]
 800914c:	1c75      	adds	r5, r6, #1
 800914e:	3a30      	subs	r2, #48	; 0x30
 8009150:	2a09      	cmp	r2, #9
 8009152:	d94e      	bls.n	80091f2 <_vfiprintf_r+0x1a6>
 8009154:	2900      	cmp	r1, #0
 8009156:	d111      	bne.n	800917c <_vfiprintf_r+0x130>
 8009158:	e017      	b.n	800918a <_vfiprintf_r+0x13e>
 800915a:	3601      	adds	r6, #1
 800915c:	e7af      	b.n	80090be <_vfiprintf_r+0x72>
 800915e:	9b05      	ldr	r3, [sp, #20]
 8009160:	6822      	ldr	r2, [r4, #0]
 8009162:	1ac0      	subs	r0, r0, r3
 8009164:	2301      	movs	r3, #1
 8009166:	4083      	lsls	r3, r0
 8009168:	4313      	orrs	r3, r2
 800916a:	0035      	movs	r5, r6
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	e7cc      	b.n	800910a <_vfiprintf_r+0xbe>
 8009170:	9b07      	ldr	r3, [sp, #28]
 8009172:	1d19      	adds	r1, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	9107      	str	r1, [sp, #28]
 8009178:	2b00      	cmp	r3, #0
 800917a:	db01      	blt.n	8009180 <_vfiprintf_r+0x134>
 800917c:	930b      	str	r3, [sp, #44]	; 0x2c
 800917e:	e004      	b.n	800918a <_vfiprintf_r+0x13e>
 8009180:	425b      	negs	r3, r3
 8009182:	60e3      	str	r3, [r4, #12]
 8009184:	2302      	movs	r3, #2
 8009186:	4313      	orrs	r3, r2
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	7833      	ldrb	r3, [r6, #0]
 800918c:	2b2e      	cmp	r3, #46	; 0x2e
 800918e:	d10a      	bne.n	80091a6 <_vfiprintf_r+0x15a>
 8009190:	7873      	ldrb	r3, [r6, #1]
 8009192:	2b2a      	cmp	r3, #42	; 0x2a
 8009194:	d135      	bne.n	8009202 <_vfiprintf_r+0x1b6>
 8009196:	9b07      	ldr	r3, [sp, #28]
 8009198:	3602      	adds	r6, #2
 800919a:	1d1a      	adds	r2, r3, #4
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	9207      	str	r2, [sp, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	db2b      	blt.n	80091fc <_vfiprintf_r+0x1b0>
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	4d33      	ldr	r5, [pc, #204]	; (8009274 <_vfiprintf_r+0x228>)
 80091a8:	2203      	movs	r2, #3
 80091aa:	0028      	movs	r0, r5
 80091ac:	7831      	ldrb	r1, [r6, #0]
 80091ae:	f000 fd17 	bl	8009be0 <memchr>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d006      	beq.n	80091c4 <_vfiprintf_r+0x178>
 80091b6:	2340      	movs	r3, #64	; 0x40
 80091b8:	1b40      	subs	r0, r0, r5
 80091ba:	4083      	lsls	r3, r0
 80091bc:	6822      	ldr	r2, [r4, #0]
 80091be:	3601      	adds	r6, #1
 80091c0:	4313      	orrs	r3, r2
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	7831      	ldrb	r1, [r6, #0]
 80091c6:	2206      	movs	r2, #6
 80091c8:	482b      	ldr	r0, [pc, #172]	; (8009278 <_vfiprintf_r+0x22c>)
 80091ca:	1c75      	adds	r5, r6, #1
 80091cc:	7621      	strb	r1, [r4, #24]
 80091ce:	f000 fd07 	bl	8009be0 <memchr>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d043      	beq.n	800925e <_vfiprintf_r+0x212>
 80091d6:	4b29      	ldr	r3, [pc, #164]	; (800927c <_vfiprintf_r+0x230>)
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d125      	bne.n	8009228 <_vfiprintf_r+0x1dc>
 80091dc:	2207      	movs	r2, #7
 80091de:	9b07      	ldr	r3, [sp, #28]
 80091e0:	3307      	adds	r3, #7
 80091e2:	4393      	bics	r3, r2
 80091e4:	3308      	adds	r3, #8
 80091e6:	9307      	str	r3, [sp, #28]
 80091e8:	6963      	ldr	r3, [r4, #20]
 80091ea:	9a04      	ldr	r2, [sp, #16]
 80091ec:	189b      	adds	r3, r3, r2
 80091ee:	6163      	str	r3, [r4, #20]
 80091f0:	e764      	b.n	80090bc <_vfiprintf_r+0x70>
 80091f2:	4343      	muls	r3, r0
 80091f4:	002e      	movs	r6, r5
 80091f6:	2101      	movs	r1, #1
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	e7a6      	b.n	800914a <_vfiprintf_r+0xfe>
 80091fc:	2301      	movs	r3, #1
 80091fe:	425b      	negs	r3, r3
 8009200:	e7d0      	b.n	80091a4 <_vfiprintf_r+0x158>
 8009202:	2300      	movs	r3, #0
 8009204:	200a      	movs	r0, #10
 8009206:	001a      	movs	r2, r3
 8009208:	3601      	adds	r6, #1
 800920a:	6063      	str	r3, [r4, #4]
 800920c:	7831      	ldrb	r1, [r6, #0]
 800920e:	1c75      	adds	r5, r6, #1
 8009210:	3930      	subs	r1, #48	; 0x30
 8009212:	2909      	cmp	r1, #9
 8009214:	d903      	bls.n	800921e <_vfiprintf_r+0x1d2>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0c5      	beq.n	80091a6 <_vfiprintf_r+0x15a>
 800921a:	9209      	str	r2, [sp, #36]	; 0x24
 800921c:	e7c3      	b.n	80091a6 <_vfiprintf_r+0x15a>
 800921e:	4342      	muls	r2, r0
 8009220:	002e      	movs	r6, r5
 8009222:	2301      	movs	r3, #1
 8009224:	1852      	adds	r2, r2, r1
 8009226:	e7f1      	b.n	800920c <_vfiprintf_r+0x1c0>
 8009228:	aa07      	add	r2, sp, #28
 800922a:	9200      	str	r2, [sp, #0]
 800922c:	0021      	movs	r1, r4
 800922e:	003a      	movs	r2, r7
 8009230:	4b13      	ldr	r3, [pc, #76]	; (8009280 <_vfiprintf_r+0x234>)
 8009232:	9803      	ldr	r0, [sp, #12]
 8009234:	e000      	b.n	8009238 <_vfiprintf_r+0x1ec>
 8009236:	bf00      	nop
 8009238:	9004      	str	r0, [sp, #16]
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	3301      	adds	r3, #1
 800923e:	d1d3      	bne.n	80091e8 <_vfiprintf_r+0x19c>
 8009240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009242:	07db      	lsls	r3, r3, #31
 8009244:	d405      	bmi.n	8009252 <_vfiprintf_r+0x206>
 8009246:	89bb      	ldrh	r3, [r7, #12]
 8009248:	059b      	lsls	r3, r3, #22
 800924a:	d402      	bmi.n	8009252 <_vfiprintf_r+0x206>
 800924c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800924e:	f7ff fc0f 	bl	8008a70 <__retarget_lock_release_recursive>
 8009252:	89bb      	ldrh	r3, [r7, #12]
 8009254:	065b      	lsls	r3, r3, #25
 8009256:	d500      	bpl.n	800925a <_vfiprintf_r+0x20e>
 8009258:	e71d      	b.n	8009096 <_vfiprintf_r+0x4a>
 800925a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800925c:	e71d      	b.n	800909a <_vfiprintf_r+0x4e>
 800925e:	aa07      	add	r2, sp, #28
 8009260:	9200      	str	r2, [sp, #0]
 8009262:	0021      	movs	r1, r4
 8009264:	003a      	movs	r2, r7
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <_vfiprintf_r+0x234>)
 8009268:	9803      	ldr	r0, [sp, #12]
 800926a:	f000 f87b 	bl	8009364 <_printf_i>
 800926e:	e7e3      	b.n	8009238 <_vfiprintf_r+0x1ec>
 8009270:	0800a198 	.word	0x0800a198
 8009274:	0800a194 	.word	0x0800a194
 8009278:	0800a19e 	.word	0x0800a19e
 800927c:	00000000 	.word	0x00000000
 8009280:	08009027 	.word	0x08009027

08009284 <_printf_common>:
 8009284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009286:	0016      	movs	r6, r2
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	688a      	ldr	r2, [r1, #8]
 800928c:	690b      	ldr	r3, [r1, #16]
 800928e:	000c      	movs	r4, r1
 8009290:	9000      	str	r0, [sp, #0]
 8009292:	4293      	cmp	r3, r2
 8009294:	da00      	bge.n	8009298 <_printf_common+0x14>
 8009296:	0013      	movs	r3, r2
 8009298:	0022      	movs	r2, r4
 800929a:	6033      	str	r3, [r6, #0]
 800929c:	3243      	adds	r2, #67	; 0x43
 800929e:	7812      	ldrb	r2, [r2, #0]
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	d001      	beq.n	80092a8 <_printf_common+0x24>
 80092a4:	3301      	adds	r3, #1
 80092a6:	6033      	str	r3, [r6, #0]
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	069b      	lsls	r3, r3, #26
 80092ac:	d502      	bpl.n	80092b4 <_printf_common+0x30>
 80092ae:	6833      	ldr	r3, [r6, #0]
 80092b0:	3302      	adds	r3, #2
 80092b2:	6033      	str	r3, [r6, #0]
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	2306      	movs	r3, #6
 80092b8:	0015      	movs	r5, r2
 80092ba:	401d      	ands	r5, r3
 80092bc:	421a      	tst	r2, r3
 80092be:	d027      	beq.n	8009310 <_printf_common+0x8c>
 80092c0:	0023      	movs	r3, r4
 80092c2:	3343      	adds	r3, #67	; 0x43
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	1e5a      	subs	r2, r3, #1
 80092c8:	4193      	sbcs	r3, r2
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	0692      	lsls	r2, r2, #26
 80092ce:	d430      	bmi.n	8009332 <_printf_common+0xae>
 80092d0:	0022      	movs	r2, r4
 80092d2:	9901      	ldr	r1, [sp, #4]
 80092d4:	9800      	ldr	r0, [sp, #0]
 80092d6:	9d08      	ldr	r5, [sp, #32]
 80092d8:	3243      	adds	r2, #67	; 0x43
 80092da:	47a8      	blx	r5
 80092dc:	3001      	adds	r0, #1
 80092de:	d025      	beq.n	800932c <_printf_common+0xa8>
 80092e0:	2206      	movs	r2, #6
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	2500      	movs	r5, #0
 80092e6:	4013      	ands	r3, r2
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d105      	bne.n	80092f8 <_printf_common+0x74>
 80092ec:	6833      	ldr	r3, [r6, #0]
 80092ee:	68e5      	ldr	r5, [r4, #12]
 80092f0:	1aed      	subs	r5, r5, r3
 80092f2:	43eb      	mvns	r3, r5
 80092f4:	17db      	asrs	r3, r3, #31
 80092f6:	401d      	ands	r5, r3
 80092f8:	68a3      	ldr	r3, [r4, #8]
 80092fa:	6922      	ldr	r2, [r4, #16]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	dd01      	ble.n	8009304 <_printf_common+0x80>
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	18ed      	adds	r5, r5, r3
 8009304:	2600      	movs	r6, #0
 8009306:	42b5      	cmp	r5, r6
 8009308:	d120      	bne.n	800934c <_printf_common+0xc8>
 800930a:	2000      	movs	r0, #0
 800930c:	e010      	b.n	8009330 <_printf_common+0xac>
 800930e:	3501      	adds	r5, #1
 8009310:	68e3      	ldr	r3, [r4, #12]
 8009312:	6832      	ldr	r2, [r6, #0]
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	42ab      	cmp	r3, r5
 8009318:	ddd2      	ble.n	80092c0 <_printf_common+0x3c>
 800931a:	0022      	movs	r2, r4
 800931c:	2301      	movs	r3, #1
 800931e:	9901      	ldr	r1, [sp, #4]
 8009320:	9800      	ldr	r0, [sp, #0]
 8009322:	9f08      	ldr	r7, [sp, #32]
 8009324:	3219      	adds	r2, #25
 8009326:	47b8      	blx	r7
 8009328:	3001      	adds	r0, #1
 800932a:	d1f0      	bne.n	800930e <_printf_common+0x8a>
 800932c:	2001      	movs	r0, #1
 800932e:	4240      	negs	r0, r0
 8009330:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009332:	2030      	movs	r0, #48	; 0x30
 8009334:	18e1      	adds	r1, r4, r3
 8009336:	3143      	adds	r1, #67	; 0x43
 8009338:	7008      	strb	r0, [r1, #0]
 800933a:	0021      	movs	r1, r4
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	3145      	adds	r1, #69	; 0x45
 8009340:	7809      	ldrb	r1, [r1, #0]
 8009342:	18a2      	adds	r2, r4, r2
 8009344:	3243      	adds	r2, #67	; 0x43
 8009346:	3302      	adds	r3, #2
 8009348:	7011      	strb	r1, [r2, #0]
 800934a:	e7c1      	b.n	80092d0 <_printf_common+0x4c>
 800934c:	0022      	movs	r2, r4
 800934e:	2301      	movs	r3, #1
 8009350:	9901      	ldr	r1, [sp, #4]
 8009352:	9800      	ldr	r0, [sp, #0]
 8009354:	9f08      	ldr	r7, [sp, #32]
 8009356:	321a      	adds	r2, #26
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	d0e6      	beq.n	800932c <_printf_common+0xa8>
 800935e:	3601      	adds	r6, #1
 8009360:	e7d1      	b.n	8009306 <_printf_common+0x82>
	...

08009364 <_printf_i>:
 8009364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009366:	b08b      	sub	sp, #44	; 0x2c
 8009368:	9206      	str	r2, [sp, #24]
 800936a:	000a      	movs	r2, r1
 800936c:	3243      	adds	r2, #67	; 0x43
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	9005      	str	r0, [sp, #20]
 8009372:	9204      	str	r2, [sp, #16]
 8009374:	7e0a      	ldrb	r2, [r1, #24]
 8009376:	000c      	movs	r4, r1
 8009378:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800937a:	2a78      	cmp	r2, #120	; 0x78
 800937c:	d809      	bhi.n	8009392 <_printf_i+0x2e>
 800937e:	2a62      	cmp	r2, #98	; 0x62
 8009380:	d80b      	bhi.n	800939a <_printf_i+0x36>
 8009382:	2a00      	cmp	r2, #0
 8009384:	d100      	bne.n	8009388 <_printf_i+0x24>
 8009386:	e0be      	b.n	8009506 <_printf_i+0x1a2>
 8009388:	497c      	ldr	r1, [pc, #496]	; (800957c <_printf_i+0x218>)
 800938a:	9103      	str	r1, [sp, #12]
 800938c:	2a58      	cmp	r2, #88	; 0x58
 800938e:	d100      	bne.n	8009392 <_printf_i+0x2e>
 8009390:	e093      	b.n	80094ba <_printf_i+0x156>
 8009392:	0026      	movs	r6, r4
 8009394:	3642      	adds	r6, #66	; 0x42
 8009396:	7032      	strb	r2, [r6, #0]
 8009398:	e022      	b.n	80093e0 <_printf_i+0x7c>
 800939a:	0010      	movs	r0, r2
 800939c:	3863      	subs	r0, #99	; 0x63
 800939e:	2815      	cmp	r0, #21
 80093a0:	d8f7      	bhi.n	8009392 <_printf_i+0x2e>
 80093a2:	f7f6 feb9 	bl	8000118 <__gnu_thumb1_case_shi>
 80093a6:	0016      	.short	0x0016
 80093a8:	fff6001f 	.word	0xfff6001f
 80093ac:	fff6fff6 	.word	0xfff6fff6
 80093b0:	001ffff6 	.word	0x001ffff6
 80093b4:	fff6fff6 	.word	0xfff6fff6
 80093b8:	fff6fff6 	.word	0xfff6fff6
 80093bc:	003600a3 	.word	0x003600a3
 80093c0:	fff60083 	.word	0xfff60083
 80093c4:	00b4fff6 	.word	0x00b4fff6
 80093c8:	0036fff6 	.word	0x0036fff6
 80093cc:	fff6fff6 	.word	0xfff6fff6
 80093d0:	0087      	.short	0x0087
 80093d2:	0026      	movs	r6, r4
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	3642      	adds	r6, #66	; 0x42
 80093d8:	1d11      	adds	r1, r2, #4
 80093da:	6019      	str	r1, [r3, #0]
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	7033      	strb	r3, [r6, #0]
 80093e0:	2301      	movs	r3, #1
 80093e2:	e0a2      	b.n	800952a <_printf_i+0x1c6>
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	6809      	ldr	r1, [r1, #0]
 80093e8:	1d02      	adds	r2, r0, #4
 80093ea:	060d      	lsls	r5, r1, #24
 80093ec:	d50b      	bpl.n	8009406 <_printf_i+0xa2>
 80093ee:	6805      	ldr	r5, [r0, #0]
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	da03      	bge.n	80093fe <_printf_i+0x9a>
 80093f6:	232d      	movs	r3, #45	; 0x2d
 80093f8:	9a04      	ldr	r2, [sp, #16]
 80093fa:	426d      	negs	r5, r5
 80093fc:	7013      	strb	r3, [r2, #0]
 80093fe:	4b5f      	ldr	r3, [pc, #380]	; (800957c <_printf_i+0x218>)
 8009400:	270a      	movs	r7, #10
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	e01b      	b.n	800943e <_printf_i+0xda>
 8009406:	6805      	ldr	r5, [r0, #0]
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	0649      	lsls	r1, r1, #25
 800940c:	d5f1      	bpl.n	80093f2 <_printf_i+0x8e>
 800940e:	b22d      	sxth	r5, r5
 8009410:	e7ef      	b.n	80093f2 <_printf_i+0x8e>
 8009412:	680d      	ldr	r5, [r1, #0]
 8009414:	6819      	ldr	r1, [r3, #0]
 8009416:	1d08      	adds	r0, r1, #4
 8009418:	6018      	str	r0, [r3, #0]
 800941a:	062e      	lsls	r6, r5, #24
 800941c:	d501      	bpl.n	8009422 <_printf_i+0xbe>
 800941e:	680d      	ldr	r5, [r1, #0]
 8009420:	e003      	b.n	800942a <_printf_i+0xc6>
 8009422:	066d      	lsls	r5, r5, #25
 8009424:	d5fb      	bpl.n	800941e <_printf_i+0xba>
 8009426:	680d      	ldr	r5, [r1, #0]
 8009428:	b2ad      	uxth	r5, r5
 800942a:	4b54      	ldr	r3, [pc, #336]	; (800957c <_printf_i+0x218>)
 800942c:	2708      	movs	r7, #8
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	2a6f      	cmp	r2, #111	; 0x6f
 8009432:	d000      	beq.n	8009436 <_printf_i+0xd2>
 8009434:	3702      	adds	r7, #2
 8009436:	0023      	movs	r3, r4
 8009438:	2200      	movs	r2, #0
 800943a:	3343      	adds	r3, #67	; 0x43
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	db03      	blt.n	800944e <_printf_i+0xea>
 8009446:	2104      	movs	r1, #4
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	438a      	bics	r2, r1
 800944c:	6022      	str	r2, [r4, #0]
 800944e:	2d00      	cmp	r5, #0
 8009450:	d102      	bne.n	8009458 <_printf_i+0xf4>
 8009452:	9e04      	ldr	r6, [sp, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00c      	beq.n	8009472 <_printf_i+0x10e>
 8009458:	9e04      	ldr	r6, [sp, #16]
 800945a:	0028      	movs	r0, r5
 800945c:	0039      	movs	r1, r7
 800945e:	f7f6 feeb 	bl	8000238 <__aeabi_uidivmod>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	3e01      	subs	r6, #1
 8009466:	5c5b      	ldrb	r3, [r3, r1]
 8009468:	7033      	strb	r3, [r6, #0]
 800946a:	002b      	movs	r3, r5
 800946c:	0005      	movs	r5, r0
 800946e:	429f      	cmp	r7, r3
 8009470:	d9f3      	bls.n	800945a <_printf_i+0xf6>
 8009472:	2f08      	cmp	r7, #8
 8009474:	d109      	bne.n	800948a <_printf_i+0x126>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	07db      	lsls	r3, r3, #31
 800947a:	d506      	bpl.n	800948a <_printf_i+0x126>
 800947c:	6862      	ldr	r2, [r4, #4]
 800947e:	6923      	ldr	r3, [r4, #16]
 8009480:	429a      	cmp	r2, r3
 8009482:	dc02      	bgt.n	800948a <_printf_i+0x126>
 8009484:	2330      	movs	r3, #48	; 0x30
 8009486:	3e01      	subs	r6, #1
 8009488:	7033      	strb	r3, [r6, #0]
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	1b9b      	subs	r3, r3, r6
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	0021      	movs	r1, r4
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	9805      	ldr	r0, [sp, #20]
 8009498:	9b06      	ldr	r3, [sp, #24]
 800949a:	aa09      	add	r2, sp, #36	; 0x24
 800949c:	f7ff fef2 	bl	8009284 <_printf_common>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d147      	bne.n	8009534 <_printf_i+0x1d0>
 80094a4:	2001      	movs	r0, #1
 80094a6:	4240      	negs	r0, r0
 80094a8:	b00b      	add	sp, #44	; 0x2c
 80094aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ac:	2220      	movs	r2, #32
 80094ae:	6809      	ldr	r1, [r1, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	2278      	movs	r2, #120	; 0x78
 80094b6:	4932      	ldr	r1, [pc, #200]	; (8009580 <_printf_i+0x21c>)
 80094b8:	9103      	str	r1, [sp, #12]
 80094ba:	0021      	movs	r1, r4
 80094bc:	3145      	adds	r1, #69	; 0x45
 80094be:	700a      	strb	r2, [r1, #0]
 80094c0:	6819      	ldr	r1, [r3, #0]
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	c920      	ldmia	r1!, {r5}
 80094c6:	0610      	lsls	r0, r2, #24
 80094c8:	d402      	bmi.n	80094d0 <_printf_i+0x16c>
 80094ca:	0650      	lsls	r0, r2, #25
 80094cc:	d500      	bpl.n	80094d0 <_printf_i+0x16c>
 80094ce:	b2ad      	uxth	r5, r5
 80094d0:	6019      	str	r1, [r3, #0]
 80094d2:	07d3      	lsls	r3, r2, #31
 80094d4:	d502      	bpl.n	80094dc <_printf_i+0x178>
 80094d6:	2320      	movs	r3, #32
 80094d8:	4313      	orrs	r3, r2
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	2710      	movs	r7, #16
 80094de:	2d00      	cmp	r5, #0
 80094e0:	d1a9      	bne.n	8009436 <_printf_i+0xd2>
 80094e2:	2220      	movs	r2, #32
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	4393      	bics	r3, r2
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	e7a4      	b.n	8009436 <_printf_i+0xd2>
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	680d      	ldr	r5, [r1, #0]
 80094f0:	1d10      	adds	r0, r2, #4
 80094f2:	6949      	ldr	r1, [r1, #20]
 80094f4:	6018      	str	r0, [r3, #0]
 80094f6:	6813      	ldr	r3, [r2, #0]
 80094f8:	062e      	lsls	r6, r5, #24
 80094fa:	d501      	bpl.n	8009500 <_printf_i+0x19c>
 80094fc:	6019      	str	r1, [r3, #0]
 80094fe:	e002      	b.n	8009506 <_printf_i+0x1a2>
 8009500:	066d      	lsls	r5, r5, #25
 8009502:	d5fb      	bpl.n	80094fc <_printf_i+0x198>
 8009504:	8019      	strh	r1, [r3, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	9e04      	ldr	r6, [sp, #16]
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	e7c0      	b.n	8009490 <_printf_i+0x12c>
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	1d11      	adds	r1, r2, #4
 8009512:	6019      	str	r1, [r3, #0]
 8009514:	6816      	ldr	r6, [r2, #0]
 8009516:	2100      	movs	r1, #0
 8009518:	0030      	movs	r0, r6
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	f000 fb60 	bl	8009be0 <memchr>
 8009520:	2800      	cmp	r0, #0
 8009522:	d001      	beq.n	8009528 <_printf_i+0x1c4>
 8009524:	1b80      	subs	r0, r0, r6
 8009526:	6060      	str	r0, [r4, #4]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	2300      	movs	r3, #0
 800952e:	9a04      	ldr	r2, [sp, #16]
 8009530:	7013      	strb	r3, [r2, #0]
 8009532:	e7ad      	b.n	8009490 <_printf_i+0x12c>
 8009534:	0032      	movs	r2, r6
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	9906      	ldr	r1, [sp, #24]
 800953a:	9805      	ldr	r0, [sp, #20]
 800953c:	9d07      	ldr	r5, [sp, #28]
 800953e:	47a8      	blx	r5
 8009540:	3001      	adds	r0, #1
 8009542:	d0af      	beq.n	80094a4 <_printf_i+0x140>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	079b      	lsls	r3, r3, #30
 8009548:	d415      	bmi.n	8009576 <_printf_i+0x212>
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	68e0      	ldr	r0, [r4, #12]
 800954e:	4298      	cmp	r0, r3
 8009550:	daaa      	bge.n	80094a8 <_printf_i+0x144>
 8009552:	0018      	movs	r0, r3
 8009554:	e7a8      	b.n	80094a8 <_printf_i+0x144>
 8009556:	0022      	movs	r2, r4
 8009558:	2301      	movs	r3, #1
 800955a:	9906      	ldr	r1, [sp, #24]
 800955c:	9805      	ldr	r0, [sp, #20]
 800955e:	9e07      	ldr	r6, [sp, #28]
 8009560:	3219      	adds	r2, #25
 8009562:	47b0      	blx	r6
 8009564:	3001      	adds	r0, #1
 8009566:	d09d      	beq.n	80094a4 <_printf_i+0x140>
 8009568:	3501      	adds	r5, #1
 800956a:	68e3      	ldr	r3, [r4, #12]
 800956c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	42ab      	cmp	r3, r5
 8009572:	dcf0      	bgt.n	8009556 <_printf_i+0x1f2>
 8009574:	e7e9      	b.n	800954a <_printf_i+0x1e6>
 8009576:	2500      	movs	r5, #0
 8009578:	e7f7      	b.n	800956a <_printf_i+0x206>
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	0800a1a5 	.word	0x0800a1a5
 8009580:	0800a1b6 	.word	0x0800a1b6

08009584 <_scanf_chars>:
 8009584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009586:	0015      	movs	r5, r2
 8009588:	688a      	ldr	r2, [r1, #8]
 800958a:	000c      	movs	r4, r1
 800958c:	9001      	str	r0, [sp, #4]
 800958e:	2a00      	cmp	r2, #0
 8009590:	d105      	bne.n	800959e <_scanf_chars+0x1a>
 8009592:	6989      	ldr	r1, [r1, #24]
 8009594:	3201      	adds	r2, #1
 8009596:	2900      	cmp	r1, #0
 8009598:	d000      	beq.n	800959c <_scanf_chars+0x18>
 800959a:	3a02      	subs	r2, #2
 800959c:	60a2      	str	r2, [r4, #8]
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	06d2      	lsls	r2, r2, #27
 80095a2:	d403      	bmi.n	80095ac <_scanf_chars+0x28>
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	1d11      	adds	r1, r2, #4
 80095a8:	6019      	str	r1, [r3, #0]
 80095aa:	6817      	ldr	r7, [r2, #0]
 80095ac:	2600      	movs	r6, #0
 80095ae:	69a0      	ldr	r0, [r4, #24]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d013      	beq.n	80095dc <_scanf_chars+0x58>
 80095b4:	2801      	cmp	r0, #1
 80095b6:	d108      	bne.n	80095ca <_scanf_chars+0x46>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	6962      	ldr	r2, [r4, #20]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	5cd3      	ldrb	r3, [r2, r3]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10b      	bne.n	80095dc <_scanf_chars+0x58>
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	d038      	beq.n	800963a <_scanf_chars+0xb6>
 80095c8:	e026      	b.n	8009618 <_scanf_chars+0x94>
 80095ca:	2802      	cmp	r0, #2
 80095cc:	d124      	bne.n	8009618 <_scanf_chars+0x94>
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	4a1a      	ldr	r2, [pc, #104]	; (800963c <_scanf_chars+0xb8>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	5cd3      	ldrb	r3, [r2, r3]
 80095d6:	2208      	movs	r2, #8
 80095d8:	4213      	tst	r3, r2
 80095da:	d11d      	bne.n	8009618 <_scanf_chars+0x94>
 80095dc:	2210      	movs	r2, #16
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	3601      	adds	r6, #1
 80095e2:	4213      	tst	r3, r2
 80095e4:	d103      	bne.n	80095ee <_scanf_chars+0x6a>
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	703b      	strb	r3, [r7, #0]
 80095ec:	3701      	adds	r7, #1
 80095ee:	682a      	ldr	r2, [r5, #0]
 80095f0:	686b      	ldr	r3, [r5, #4]
 80095f2:	3201      	adds	r2, #1
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	68a2      	ldr	r2, [r4, #8]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	3a01      	subs	r2, #1
 80095fc:	606b      	str	r3, [r5, #4]
 80095fe:	60a2      	str	r2, [r4, #8]
 8009600:	2a00      	cmp	r2, #0
 8009602:	d009      	beq.n	8009618 <_scanf_chars+0x94>
 8009604:	2b00      	cmp	r3, #0
 8009606:	dcd2      	bgt.n	80095ae <_scanf_chars+0x2a>
 8009608:	23c0      	movs	r3, #192	; 0xc0
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	0029      	movs	r1, r5
 800960e:	58e3      	ldr	r3, [r4, r3]
 8009610:	9801      	ldr	r0, [sp, #4]
 8009612:	4798      	blx	r3
 8009614:	2800      	cmp	r0, #0
 8009616:	d0ca      	beq.n	80095ae <_scanf_chars+0x2a>
 8009618:	6822      	ldr	r2, [r4, #0]
 800961a:	2310      	movs	r3, #16
 800961c:	0011      	movs	r1, r2
 800961e:	4019      	ands	r1, r3
 8009620:	421a      	tst	r2, r3
 8009622:	d106      	bne.n	8009632 <_scanf_chars+0xae>
 8009624:	68e3      	ldr	r3, [r4, #12]
 8009626:	3301      	adds	r3, #1
 8009628:	60e3      	str	r3, [r4, #12]
 800962a:	69a3      	ldr	r3, [r4, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d000      	beq.n	8009632 <_scanf_chars+0xae>
 8009630:	7039      	strb	r1, [r7, #0]
 8009632:	2000      	movs	r0, #0
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	199b      	adds	r3, r3, r6
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800963c:	0800a1e3 	.word	0x0800a1e3

08009640 <_scanf_i>:
 8009640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009642:	b08b      	sub	sp, #44	; 0x2c
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	4b7a      	ldr	r3, [pc, #488]	; (8009830 <_scanf_i+0x1f0>)
 8009648:	0016      	movs	r6, r2
 800964a:	9004      	str	r0, [sp, #16]
 800964c:	aa07      	add	r2, sp, #28
 800964e:	cba1      	ldmia	r3!, {r0, r5, r7}
 8009650:	c2a1      	stmia	r2!, {r0, r5, r7}
 8009652:	4a78      	ldr	r2, [pc, #480]	; (8009834 <_scanf_i+0x1f4>)
 8009654:	698b      	ldr	r3, [r1, #24]
 8009656:	000c      	movs	r4, r1
 8009658:	9205      	str	r2, [sp, #20]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d001      	beq.n	8009662 <_scanf_i+0x22>
 800965e:	4b76      	ldr	r3, [pc, #472]	; (8009838 <_scanf_i+0x1f8>)
 8009660:	9305      	str	r3, [sp, #20]
 8009662:	22ae      	movs	r2, #174	; 0xae
 8009664:	2000      	movs	r0, #0
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	0052      	lsls	r2, r2, #1
 800966a:	1e59      	subs	r1, r3, #1
 800966c:	9003      	str	r0, [sp, #12]
 800966e:	4291      	cmp	r1, r2
 8009670:	d905      	bls.n	800967e <_scanf_i+0x3e>
 8009672:	3b5e      	subs	r3, #94	; 0x5e
 8009674:	3bff      	subs	r3, #255	; 0xff
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	235e      	movs	r3, #94	; 0x5e
 800967a:	33ff      	adds	r3, #255	; 0xff
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	0023      	movs	r3, r4
 8009680:	331c      	adds	r3, #28
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	23d0      	movs	r3, #208	; 0xd0
 8009686:	2700      	movs	r7, #0
 8009688:	6822      	ldr	r2, [r4, #0]
 800968a:	011b      	lsls	r3, r3, #4
 800968c:	4313      	orrs	r3, r2
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	9b00      	ldr	r3, [sp, #0]
 8009692:	9302      	str	r3, [sp, #8]
 8009694:	6833      	ldr	r3, [r6, #0]
 8009696:	a807      	add	r0, sp, #28
 8009698:	7819      	ldrb	r1, [r3, #0]
 800969a:	00bb      	lsls	r3, r7, #2
 800969c:	2202      	movs	r2, #2
 800969e:	5818      	ldr	r0, [r3, r0]
 80096a0:	f000 fa9e 	bl	8009be0 <memchr>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d02a      	beq.n	80096fe <_scanf_i+0xbe>
 80096a8:	2f01      	cmp	r7, #1
 80096aa:	d161      	bne.n	8009770 <_scanf_i+0x130>
 80096ac:	6863      	ldr	r3, [r4, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <_scanf_i+0x80>
 80096b2:	3308      	adds	r3, #8
 80096b4:	6822      	ldr	r2, [r4, #0]
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	33f9      	adds	r3, #249	; 0xf9
 80096ba:	33ff      	adds	r3, #255	; 0xff
 80096bc:	4313      	orrs	r3, r2
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	4a5e      	ldr	r2, [pc, #376]	; (800983c <_scanf_i+0x1fc>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	1e5a      	subs	r2, r3, #1
 80096cc:	60a2      	str	r2, [r4, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d015      	beq.n	80096fe <_scanf_i+0xbe>
 80096d2:	6833      	ldr	r3, [r6, #0]
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	6032      	str	r2, [r6, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	9a02      	ldr	r2, [sp, #8]
 80096dc:	7013      	strb	r3, [r2, #0]
 80096de:	6873      	ldr	r3, [r6, #4]
 80096e0:	1c55      	adds	r5, r2, #1
 80096e2:	3b01      	subs	r3, #1
 80096e4:	6073      	str	r3, [r6, #4]
 80096e6:	9502      	str	r5, [sp, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	dc08      	bgt.n	80096fe <_scanf_i+0xbe>
 80096ec:	23c0      	movs	r3, #192	; 0xc0
 80096ee:	005b      	lsls	r3, r3, #1
 80096f0:	0031      	movs	r1, r6
 80096f2:	58e3      	ldr	r3, [r4, r3]
 80096f4:	9804      	ldr	r0, [sp, #16]
 80096f6:	4798      	blx	r3
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d000      	beq.n	80096fe <_scanf_i+0xbe>
 80096fc:	e080      	b.n	8009800 <_scanf_i+0x1c0>
 80096fe:	3701      	adds	r7, #1
 8009700:	2f03      	cmp	r7, #3
 8009702:	d1c7      	bne.n	8009694 <_scanf_i+0x54>
 8009704:	6863      	ldr	r3, [r4, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <_scanf_i+0xce>
 800970a:	330a      	adds	r3, #10
 800970c:	6063      	str	r3, [r4, #4]
 800970e:	2110      	movs	r1, #16
 8009710:	2700      	movs	r7, #0
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	6960      	ldr	r0, [r4, #20]
 8009716:	1ac9      	subs	r1, r1, r3
 8009718:	4b49      	ldr	r3, [pc, #292]	; (8009840 <_scanf_i+0x200>)
 800971a:	18c9      	adds	r1, r1, r3
 800971c:	f000 f9b0 	bl	8009a80 <__sccl>
 8009720:	9d02      	ldr	r5, [sp, #8]
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	6820      	ldr	r0, [r4, #0]
 8009726:	9302      	str	r3, [sp, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d040      	beq.n	80097ae <_scanf_i+0x16e>
 800972c:	6831      	ldr	r1, [r6, #0]
 800972e:	6963      	ldr	r3, [r4, #20]
 8009730:	780a      	ldrb	r2, [r1, #0]
 8009732:	5c9b      	ldrb	r3, [r3, r2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d03a      	beq.n	80097ae <_scanf_i+0x16e>
 8009738:	2a30      	cmp	r2, #48	; 0x30
 800973a:	d129      	bne.n	8009790 <_scanf_i+0x150>
 800973c:	2380      	movs	r3, #128	; 0x80
 800973e:	011b      	lsls	r3, r3, #4
 8009740:	4218      	tst	r0, r3
 8009742:	d025      	beq.n	8009790 <_scanf_i+0x150>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	3701      	adds	r7, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <_scanf_i+0x118>
 800974c:	001a      	movs	r2, r3
 800974e:	9b02      	ldr	r3, [sp, #8]
 8009750:	3a01      	subs	r2, #1
 8009752:	3301      	adds	r3, #1
 8009754:	9203      	str	r2, [sp, #12]
 8009756:	60a3      	str	r3, [r4, #8]
 8009758:	6873      	ldr	r3, [r6, #4]
 800975a:	3b01      	subs	r3, #1
 800975c:	6073      	str	r3, [r6, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	dd1d      	ble.n	800979e <_scanf_i+0x15e>
 8009762:	6833      	ldr	r3, [r6, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	6033      	str	r3, [r6, #0]
 8009768:	68a3      	ldr	r3, [r4, #8]
 800976a:	3b01      	subs	r3, #1
 800976c:	60a3      	str	r3, [r4, #8]
 800976e:	e7d8      	b.n	8009722 <_scanf_i+0xe2>
 8009770:	2f02      	cmp	r7, #2
 8009772:	d1a9      	bne.n	80096c8 <_scanf_i+0x88>
 8009774:	21c0      	movs	r1, #192	; 0xc0
 8009776:	2380      	movs	r3, #128	; 0x80
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	00c9      	lsls	r1, r1, #3
 800977c:	4011      	ands	r1, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4299      	cmp	r1, r3
 8009782:	d1bf      	bne.n	8009704 <_scanf_i+0xc4>
 8009784:	3bf1      	subs	r3, #241	; 0xf1
 8009786:	3bff      	subs	r3, #255	; 0xff
 8009788:	6063      	str	r3, [r4, #4]
 800978a:	33f0      	adds	r3, #240	; 0xf0
 800978c:	4313      	orrs	r3, r2
 800978e:	e79a      	b.n	80096c6 <_scanf_i+0x86>
 8009790:	4b2c      	ldr	r3, [pc, #176]	; (8009844 <_scanf_i+0x204>)
 8009792:	4003      	ands	r3, r0
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	780b      	ldrb	r3, [r1, #0]
 8009798:	702b      	strb	r3, [r5, #0]
 800979a:	3501      	adds	r5, #1
 800979c:	e7dc      	b.n	8009758 <_scanf_i+0x118>
 800979e:	23c0      	movs	r3, #192	; 0xc0
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	0031      	movs	r1, r6
 80097a4:	58e3      	ldr	r3, [r4, r3]
 80097a6:	9804      	ldr	r0, [sp, #16]
 80097a8:	4798      	blx	r3
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d0dc      	beq.n	8009768 <_scanf_i+0x128>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	05db      	lsls	r3, r3, #23
 80097b2:	d50e      	bpl.n	80097d2 <_scanf_i+0x192>
 80097b4:	9b00      	ldr	r3, [sp, #0]
 80097b6:	429d      	cmp	r5, r3
 80097b8:	d907      	bls.n	80097ca <_scanf_i+0x18a>
 80097ba:	23be      	movs	r3, #190	; 0xbe
 80097bc:	3d01      	subs	r5, #1
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	0032      	movs	r2, r6
 80097c2:	7829      	ldrb	r1, [r5, #0]
 80097c4:	58e3      	ldr	r3, [r4, r3]
 80097c6:	9804      	ldr	r0, [sp, #16]
 80097c8:	4798      	blx	r3
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	2001      	movs	r0, #1
 80097ce:	429d      	cmp	r5, r3
 80097d0:	d029      	beq.n	8009826 <_scanf_i+0x1e6>
 80097d2:	6821      	ldr	r1, [r4, #0]
 80097d4:	2310      	movs	r3, #16
 80097d6:	000a      	movs	r2, r1
 80097d8:	401a      	ands	r2, r3
 80097da:	4219      	tst	r1, r3
 80097dc:	d11c      	bne.n	8009818 <_scanf_i+0x1d8>
 80097de:	702a      	strb	r2, [r5, #0]
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	9900      	ldr	r1, [sp, #0]
 80097e4:	9804      	ldr	r0, [sp, #16]
 80097e6:	9e05      	ldr	r6, [sp, #20]
 80097e8:	47b0      	blx	r6
 80097ea:	9b01      	ldr	r3, [sp, #4]
 80097ec:	6822      	ldr	r2, [r4, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	0691      	lsls	r1, r2, #26
 80097f2:	d507      	bpl.n	8009804 <_scanf_i+0x1c4>
 80097f4:	9901      	ldr	r1, [sp, #4]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	600a      	str	r2, [r1, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6018      	str	r0, [r3, #0]
 80097fe:	e008      	b.n	8009812 <_scanf_i+0x1d2>
 8009800:	2700      	movs	r7, #0
 8009802:	e7d4      	b.n	80097ae <_scanf_i+0x16e>
 8009804:	1d19      	adds	r1, r3, #4
 8009806:	07d6      	lsls	r6, r2, #31
 8009808:	d50f      	bpl.n	800982a <_scanf_i+0x1ea>
 800980a:	9a01      	ldr	r2, [sp, #4]
 800980c:	6011      	str	r1, [r2, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	8018      	strh	r0, [r3, #0]
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60e3      	str	r3, [r4, #12]
 8009818:	2000      	movs	r0, #0
 800981a:	9b00      	ldr	r3, [sp, #0]
 800981c:	1aed      	subs	r5, r5, r3
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	19ed      	adds	r5, r5, r7
 8009822:	195b      	adds	r3, r3, r5
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	b00b      	add	sp, #44	; 0x2c
 8009828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800982a:	9a01      	ldr	r2, [sp, #4]
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	e7e4      	b.n	80097fa <_scanf_i+0x1ba>
 8009830:	0800a080 	.word	0x0800a080
 8009834:	08009d75 	.word	0x08009d75
 8009838:	08009e81 	.word	0x08009e81
 800983c:	fffffaff 	.word	0xfffffaff
 8009840:	0800a1c7 	.word	0x0800a1c7
 8009844:	fffff6ff 	.word	0xfffff6ff

08009848 <__sflush_r>:
 8009848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800984a:	898b      	ldrh	r3, [r1, #12]
 800984c:	0005      	movs	r5, r0
 800984e:	000c      	movs	r4, r1
 8009850:	071a      	lsls	r2, r3, #28
 8009852:	d45c      	bmi.n	800990e <__sflush_r+0xc6>
 8009854:	684a      	ldr	r2, [r1, #4]
 8009856:	2a00      	cmp	r2, #0
 8009858:	dc04      	bgt.n	8009864 <__sflush_r+0x1c>
 800985a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800985c:	2a00      	cmp	r2, #0
 800985e:	dc01      	bgt.n	8009864 <__sflush_r+0x1c>
 8009860:	2000      	movs	r0, #0
 8009862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009864:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009866:	2f00      	cmp	r7, #0
 8009868:	d0fa      	beq.n	8009860 <__sflush_r+0x18>
 800986a:	2200      	movs	r2, #0
 800986c:	2080      	movs	r0, #128	; 0x80
 800986e:	682e      	ldr	r6, [r5, #0]
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	001a      	movs	r2, r3
 8009874:	0140      	lsls	r0, r0, #5
 8009876:	6a21      	ldr	r1, [r4, #32]
 8009878:	4002      	ands	r2, r0
 800987a:	4203      	tst	r3, r0
 800987c:	d034      	beq.n	80098e8 <__sflush_r+0xa0>
 800987e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	075b      	lsls	r3, r3, #29
 8009884:	d506      	bpl.n	8009894 <__sflush_r+0x4c>
 8009886:	6863      	ldr	r3, [r4, #4]
 8009888:	1ac0      	subs	r0, r0, r3
 800988a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <__sflush_r+0x4c>
 8009890:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009892:	1ac0      	subs	r0, r0, r3
 8009894:	0002      	movs	r2, r0
 8009896:	2300      	movs	r3, #0
 8009898:	0028      	movs	r0, r5
 800989a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800989c:	6a21      	ldr	r1, [r4, #32]
 800989e:	47b8      	blx	r7
 80098a0:	89a2      	ldrh	r2, [r4, #12]
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d106      	bne.n	80098b4 <__sflush_r+0x6c>
 80098a6:	6829      	ldr	r1, [r5, #0]
 80098a8:	291d      	cmp	r1, #29
 80098aa:	d82c      	bhi.n	8009906 <__sflush_r+0xbe>
 80098ac:	4b2a      	ldr	r3, [pc, #168]	; (8009958 <__sflush_r+0x110>)
 80098ae:	410b      	asrs	r3, r1
 80098b0:	07db      	lsls	r3, r3, #31
 80098b2:	d428      	bmi.n	8009906 <__sflush_r+0xbe>
 80098b4:	2300      	movs	r3, #0
 80098b6:	6063      	str	r3, [r4, #4]
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	04d2      	lsls	r2, r2, #19
 80098be:	d505      	bpl.n	80098cc <__sflush_r+0x84>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <__sflush_r+0x82>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d100      	bne.n	80098cc <__sflush_r+0x84>
 80098ca:	6560      	str	r0, [r4, #84]	; 0x54
 80098cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ce:	602e      	str	r6, [r5, #0]
 80098d0:	2900      	cmp	r1, #0
 80098d2:	d0c5      	beq.n	8009860 <__sflush_r+0x18>
 80098d4:	0023      	movs	r3, r4
 80098d6:	3344      	adds	r3, #68	; 0x44
 80098d8:	4299      	cmp	r1, r3
 80098da:	d002      	beq.n	80098e2 <__sflush_r+0x9a>
 80098dc:	0028      	movs	r0, r5
 80098de:	f7ff f8c9 	bl	8008a74 <_free_r>
 80098e2:	2000      	movs	r0, #0
 80098e4:	6360      	str	r0, [r4, #52]	; 0x34
 80098e6:	e7bc      	b.n	8009862 <__sflush_r+0x1a>
 80098e8:	2301      	movs	r3, #1
 80098ea:	0028      	movs	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d1c6      	bne.n	8009880 <__sflush_r+0x38>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0c3      	beq.n	8009880 <__sflush_r+0x38>
 80098f8:	2b1d      	cmp	r3, #29
 80098fa:	d001      	beq.n	8009900 <__sflush_r+0xb8>
 80098fc:	2b16      	cmp	r3, #22
 80098fe:	d101      	bne.n	8009904 <__sflush_r+0xbc>
 8009900:	602e      	str	r6, [r5, #0]
 8009902:	e7ad      	b.n	8009860 <__sflush_r+0x18>
 8009904:	89a2      	ldrh	r2, [r4, #12]
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	4313      	orrs	r3, r2
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	e7a9      	b.n	8009862 <__sflush_r+0x1a>
 800990e:	690e      	ldr	r6, [r1, #16]
 8009910:	2e00      	cmp	r6, #0
 8009912:	d0a5      	beq.n	8009860 <__sflush_r+0x18>
 8009914:	680f      	ldr	r7, [r1, #0]
 8009916:	600e      	str	r6, [r1, #0]
 8009918:	1bba      	subs	r2, r7, r6
 800991a:	9201      	str	r2, [sp, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	079b      	lsls	r3, r3, #30
 8009920:	d100      	bne.n	8009924 <__sflush_r+0xdc>
 8009922:	694a      	ldr	r2, [r1, #20]
 8009924:	60a2      	str	r2, [r4, #8]
 8009926:	9b01      	ldr	r3, [sp, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	dd99      	ble.n	8009860 <__sflush_r+0x18>
 800992c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800992e:	0032      	movs	r2, r6
 8009930:	001f      	movs	r7, r3
 8009932:	0028      	movs	r0, r5
 8009934:	9b01      	ldr	r3, [sp, #4]
 8009936:	6a21      	ldr	r1, [r4, #32]
 8009938:	47b8      	blx	r7
 800993a:	2800      	cmp	r0, #0
 800993c:	dc06      	bgt.n	800994c <__sflush_r+0x104>
 800993e:	2340      	movs	r3, #64	; 0x40
 8009940:	2001      	movs	r0, #1
 8009942:	89a2      	ldrh	r2, [r4, #12]
 8009944:	4240      	negs	r0, r0
 8009946:	4313      	orrs	r3, r2
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	e78a      	b.n	8009862 <__sflush_r+0x1a>
 800994c:	9b01      	ldr	r3, [sp, #4]
 800994e:	1836      	adds	r6, r6, r0
 8009950:	1a1b      	subs	r3, r3, r0
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	e7e7      	b.n	8009926 <__sflush_r+0xde>
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	dfbffffe 	.word	0xdfbffffe

0800995c <_fflush_r>:
 800995c:	690b      	ldr	r3, [r1, #16]
 800995e:	b570      	push	{r4, r5, r6, lr}
 8009960:	0005      	movs	r5, r0
 8009962:	000c      	movs	r4, r1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <_fflush_r+0x12>
 8009968:	2500      	movs	r5, #0
 800996a:	0028      	movs	r0, r5
 800996c:	bd70      	pop	{r4, r5, r6, pc}
 800996e:	2800      	cmp	r0, #0
 8009970:	d004      	beq.n	800997c <_fflush_r+0x20>
 8009972:	6a03      	ldr	r3, [r0, #32]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <_fflush_r+0x20>
 8009978:	f7fe fe26 	bl	80085c8 <__sinit>
 800997c:	220c      	movs	r2, #12
 800997e:	5ea3      	ldrsh	r3, [r4, r2]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0f1      	beq.n	8009968 <_fflush_r+0xc>
 8009984:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009986:	07d2      	lsls	r2, r2, #31
 8009988:	d404      	bmi.n	8009994 <_fflush_r+0x38>
 800998a:	059b      	lsls	r3, r3, #22
 800998c:	d402      	bmi.n	8009994 <_fflush_r+0x38>
 800998e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009990:	f7ff f86d 	bl	8008a6e <__retarget_lock_acquire_recursive>
 8009994:	0028      	movs	r0, r5
 8009996:	0021      	movs	r1, r4
 8009998:	f7ff ff56 	bl	8009848 <__sflush_r>
 800999c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800999e:	0005      	movs	r5, r0
 80099a0:	07db      	lsls	r3, r3, #31
 80099a2:	d4e2      	bmi.n	800996a <_fflush_r+0xe>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	059b      	lsls	r3, r3, #22
 80099a8:	d4df      	bmi.n	800996a <_fflush_r+0xe>
 80099aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ac:	f7ff f860 	bl	8008a70 <__retarget_lock_release_recursive>
 80099b0:	e7db      	b.n	800996a <_fflush_r+0xe>
	...

080099b4 <__swhatbuf_r>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	000e      	movs	r6, r1
 80099b8:	001d      	movs	r5, r3
 80099ba:	230e      	movs	r3, #14
 80099bc:	5ec9      	ldrsh	r1, [r1, r3]
 80099be:	0014      	movs	r4, r2
 80099c0:	b096      	sub	sp, #88	; 0x58
 80099c2:	2900      	cmp	r1, #0
 80099c4:	da0c      	bge.n	80099e0 <__swhatbuf_r+0x2c>
 80099c6:	89b2      	ldrh	r2, [r6, #12]
 80099c8:	2380      	movs	r3, #128	; 0x80
 80099ca:	0011      	movs	r1, r2
 80099cc:	4019      	ands	r1, r3
 80099ce:	421a      	tst	r2, r3
 80099d0:	d013      	beq.n	80099fa <__swhatbuf_r+0x46>
 80099d2:	2100      	movs	r1, #0
 80099d4:	3b40      	subs	r3, #64	; 0x40
 80099d6:	2000      	movs	r0, #0
 80099d8:	6029      	str	r1, [r5, #0]
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	b016      	add	sp, #88	; 0x58
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	466a      	mov	r2, sp
 80099e2:	f000 f8c7 	bl	8009b74 <_fstat_r>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	dbed      	blt.n	80099c6 <__swhatbuf_r+0x12>
 80099ea:	23f0      	movs	r3, #240	; 0xf0
 80099ec:	9901      	ldr	r1, [sp, #4]
 80099ee:	021b      	lsls	r3, r3, #8
 80099f0:	4019      	ands	r1, r3
 80099f2:	4b03      	ldr	r3, [pc, #12]	; (8009a00 <__swhatbuf_r+0x4c>)
 80099f4:	18c9      	adds	r1, r1, r3
 80099f6:	424b      	negs	r3, r1
 80099f8:	4159      	adcs	r1, r3
 80099fa:	2380      	movs	r3, #128	; 0x80
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	e7ea      	b.n	80099d6 <__swhatbuf_r+0x22>
 8009a00:	ffffe000 	.word	0xffffe000

08009a04 <__smakebuf_r>:
 8009a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a06:	2602      	movs	r6, #2
 8009a08:	898b      	ldrh	r3, [r1, #12]
 8009a0a:	0005      	movs	r5, r0
 8009a0c:	000c      	movs	r4, r1
 8009a0e:	4233      	tst	r3, r6
 8009a10:	d006      	beq.n	8009a20 <__smakebuf_r+0x1c>
 8009a12:	0023      	movs	r3, r4
 8009a14:	3347      	adds	r3, #71	; 0x47
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	6123      	str	r3, [r4, #16]
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	6163      	str	r3, [r4, #20]
 8009a1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009a20:	466a      	mov	r2, sp
 8009a22:	ab01      	add	r3, sp, #4
 8009a24:	f7ff ffc6 	bl	80099b4 <__swhatbuf_r>
 8009a28:	9900      	ldr	r1, [sp, #0]
 8009a2a:	0007      	movs	r7, r0
 8009a2c:	0028      	movs	r0, r5
 8009a2e:	f7ff f88d 	bl	8008b4c <_malloc_r>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d108      	bne.n	8009a48 <__smakebuf_r+0x44>
 8009a36:	220c      	movs	r2, #12
 8009a38:	5ea3      	ldrsh	r3, [r4, r2]
 8009a3a:	059a      	lsls	r2, r3, #22
 8009a3c:	d4ef      	bmi.n	8009a1e <__smakebuf_r+0x1a>
 8009a3e:	2203      	movs	r2, #3
 8009a40:	4393      	bics	r3, r2
 8009a42:	431e      	orrs	r6, r3
 8009a44:	81a6      	strh	r6, [r4, #12]
 8009a46:	e7e4      	b.n	8009a12 <__smakebuf_r+0xe>
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	89a2      	ldrh	r2, [r4, #12]
 8009a4c:	6020      	str	r0, [r4, #0]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	81a3      	strh	r3, [r4, #12]
 8009a52:	9b00      	ldr	r3, [sp, #0]
 8009a54:	6120      	str	r0, [r4, #16]
 8009a56:	6163      	str	r3, [r4, #20]
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00c      	beq.n	8009a78 <__smakebuf_r+0x74>
 8009a5e:	0028      	movs	r0, r5
 8009a60:	230e      	movs	r3, #14
 8009a62:	5ee1      	ldrsh	r1, [r4, r3]
 8009a64:	f000 f898 	bl	8009b98 <_isatty_r>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	d005      	beq.n	8009a78 <__smakebuf_r+0x74>
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	89a2      	ldrh	r2, [r4, #12]
 8009a70:	439a      	bics	r2, r3
 8009a72:	3b02      	subs	r3, #2
 8009a74:	4313      	orrs	r3, r2
 8009a76:	81a3      	strh	r3, [r4, #12]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	433b      	orrs	r3, r7
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	e7ce      	b.n	8009a1e <__smakebuf_r+0x1a>

08009a80 <__sccl>:
 8009a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a82:	780b      	ldrb	r3, [r1, #0]
 8009a84:	0004      	movs	r4, r0
 8009a86:	2b5e      	cmp	r3, #94	; 0x5e
 8009a88:	d019      	beq.n	8009abe <__sccl+0x3e>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	1c4d      	adds	r5, r1, #1
 8009a8e:	0021      	movs	r1, r4
 8009a90:	1c60      	adds	r0, r4, #1
 8009a92:	30ff      	adds	r0, #255	; 0xff
 8009a94:	700a      	strb	r2, [r1, #0]
 8009a96:	3101      	adds	r1, #1
 8009a98:	4281      	cmp	r1, r0
 8009a9a:	d1fb      	bne.n	8009a94 <__sccl+0x14>
 8009a9c:	1e68      	subs	r0, r5, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00c      	beq.n	8009abc <__sccl+0x3c>
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	262d      	movs	r6, #45	; 0x2d
 8009aa6:	404a      	eors	r2, r1
 8009aa8:	0028      	movs	r0, r5
 8009aaa:	54e2      	strb	r2, [r4, r3]
 8009aac:	7801      	ldrb	r1, [r0, #0]
 8009aae:	1c45      	adds	r5, r0, #1
 8009ab0:	292d      	cmp	r1, #45	; 0x2d
 8009ab2:	d00c      	beq.n	8009ace <__sccl+0x4e>
 8009ab4:	295d      	cmp	r1, #93	; 0x5d
 8009ab6:	d01d      	beq.n	8009af4 <__sccl+0x74>
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	d104      	bne.n	8009ac6 <__sccl+0x46>
 8009abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abe:	2201      	movs	r2, #1
 8009ac0:	784b      	ldrb	r3, [r1, #1]
 8009ac2:	1c8d      	adds	r5, r1, #2
 8009ac4:	e7e3      	b.n	8009a8e <__sccl+0xe>
 8009ac6:	000b      	movs	r3, r1
 8009ac8:	e7ee      	b.n	8009aa8 <__sccl+0x28>
 8009aca:	0033      	movs	r3, r6
 8009acc:	e7ec      	b.n	8009aa8 <__sccl+0x28>
 8009ace:	7841      	ldrb	r1, [r0, #1]
 8009ad0:	295d      	cmp	r1, #93	; 0x5d
 8009ad2:	d0fa      	beq.n	8009aca <__sccl+0x4a>
 8009ad4:	428b      	cmp	r3, r1
 8009ad6:	dcf8      	bgt.n	8009aca <__sccl+0x4a>
 8009ad8:	001d      	movs	r5, r3
 8009ada:	3002      	adds	r0, #2
 8009adc:	3501      	adds	r5, #1
 8009ade:	5562      	strb	r2, [r4, r5]
 8009ae0:	42a9      	cmp	r1, r5
 8009ae2:	dcfb      	bgt.n	8009adc <__sccl+0x5c>
 8009ae4:	2500      	movs	r5, #0
 8009ae6:	1c5f      	adds	r7, r3, #1
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	da01      	bge.n	8009af0 <__sccl+0x70>
 8009aec:	1acd      	subs	r5, r1, r3
 8009aee:	3d01      	subs	r5, #1
 8009af0:	197b      	adds	r3, r7, r5
 8009af2:	e7db      	b.n	8009aac <__sccl+0x2c>
 8009af4:	0028      	movs	r0, r5
 8009af6:	e7e1      	b.n	8009abc <__sccl+0x3c>

08009af8 <__submore>:
 8009af8:	000b      	movs	r3, r1
 8009afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009afc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8009afe:	3344      	adds	r3, #68	; 0x44
 8009b00:	000c      	movs	r4, r1
 8009b02:	429d      	cmp	r5, r3
 8009b04:	d11c      	bne.n	8009b40 <__submore+0x48>
 8009b06:	2680      	movs	r6, #128	; 0x80
 8009b08:	00f6      	lsls	r6, r6, #3
 8009b0a:	0031      	movs	r1, r6
 8009b0c:	f7ff f81e 	bl	8008b4c <_malloc_r>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d102      	bne.n	8009b1a <__submore+0x22>
 8009b14:	2001      	movs	r0, #1
 8009b16:	4240      	negs	r0, r0
 8009b18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b1a:	0023      	movs	r3, r4
 8009b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8009b1e:	63a6      	str	r6, [r4, #56]	; 0x38
 8009b20:	3346      	adds	r3, #70	; 0x46
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	4b10      	ldr	r3, [pc, #64]	; (8009b68 <__submore+0x70>)
 8009b26:	54c2      	strb	r2, [r0, r3]
 8009b28:	0023      	movs	r3, r4
 8009b2a:	3345      	adds	r3, #69	; 0x45
 8009b2c:	781a      	ldrb	r2, [r3, #0]
 8009b2e:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <__submore+0x74>)
 8009b30:	54c2      	strb	r2, [r0, r3]
 8009b32:	782a      	ldrb	r2, [r5, #0]
 8009b34:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <__submore+0x78>)
 8009b36:	54c2      	strb	r2, [r0, r3]
 8009b38:	18c0      	adds	r0, r0, r3
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e7eb      	b.n	8009b18 <__submore+0x20>
 8009b40:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8009b42:	0029      	movs	r1, r5
 8009b44:	0073      	lsls	r3, r6, #1
 8009b46:	001a      	movs	r2, r3
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	f000 f85d 	bl	8009c08 <_realloc_r>
 8009b4e:	1e05      	subs	r5, r0, #0
 8009b50:	d0e0      	beq.n	8009b14 <__submore+0x1c>
 8009b52:	1987      	adds	r7, r0, r6
 8009b54:	0001      	movs	r1, r0
 8009b56:	0032      	movs	r2, r6
 8009b58:	0038      	movs	r0, r7
 8009b5a:	f000 f84c 	bl	8009bf6 <memcpy>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	6027      	str	r7, [r4, #0]
 8009b62:	6365      	str	r5, [r4, #52]	; 0x34
 8009b64:	63a3      	str	r3, [r4, #56]	; 0x38
 8009b66:	e7e9      	b.n	8009b3c <__submore+0x44>
 8009b68:	000003ff 	.word	0x000003ff
 8009b6c:	000003fe 	.word	0x000003fe
 8009b70:	000003fd 	.word	0x000003fd

08009b74 <_fstat_r>:
 8009b74:	2300      	movs	r3, #0
 8009b76:	b570      	push	{r4, r5, r6, lr}
 8009b78:	4d06      	ldr	r5, [pc, #24]	; (8009b94 <_fstat_r+0x20>)
 8009b7a:	0004      	movs	r4, r0
 8009b7c:	0008      	movs	r0, r1
 8009b7e:	0011      	movs	r1, r2
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	f7f7 f8cc 	bl	8000d1e <_fstat>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d103      	bne.n	8009b92 <_fstat_r+0x1e>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d000      	beq.n	8009b92 <_fstat_r+0x1e>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	2000040c 	.word	0x2000040c

08009b98 <_isatty_r>:
 8009b98:	2300      	movs	r3, #0
 8009b9a:	b570      	push	{r4, r5, r6, lr}
 8009b9c:	4d06      	ldr	r5, [pc, #24]	; (8009bb8 <_isatty_r+0x20>)
 8009b9e:	0004      	movs	r4, r0
 8009ba0:	0008      	movs	r0, r1
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	f7f7 f8c9 	bl	8000d3a <_isatty>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d103      	bne.n	8009bb4 <_isatty_r+0x1c>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d000      	beq.n	8009bb4 <_isatty_r+0x1c>
 8009bb2:	6023      	str	r3, [r4, #0]
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
 8009bb6:	46c0      	nop			; (mov r8, r8)
 8009bb8:	2000040c 	.word	0x2000040c

08009bbc <_sbrk_r>:
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	b570      	push	{r4, r5, r6, lr}
 8009bc0:	4d06      	ldr	r5, [pc, #24]	; (8009bdc <_sbrk_r+0x20>)
 8009bc2:	0004      	movs	r4, r0
 8009bc4:	0008      	movs	r0, r1
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	f7f7 f8cc 	bl	8000d64 <_sbrk>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	d103      	bne.n	8009bd8 <_sbrk_r+0x1c>
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d000      	beq.n	8009bd8 <_sbrk_r+0x1c>
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	2000040c 	.word	0x2000040c

08009be0 <memchr>:
 8009be0:	b2c9      	uxtb	r1, r1
 8009be2:	1882      	adds	r2, r0, r2
 8009be4:	4290      	cmp	r0, r2
 8009be6:	d101      	bne.n	8009bec <memchr+0xc>
 8009be8:	2000      	movs	r0, #0
 8009bea:	4770      	bx	lr
 8009bec:	7803      	ldrb	r3, [r0, #0]
 8009bee:	428b      	cmp	r3, r1
 8009bf0:	d0fb      	beq.n	8009bea <memchr+0xa>
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	e7f6      	b.n	8009be4 <memchr+0x4>

08009bf6 <memcpy>:
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d100      	bne.n	8009c00 <memcpy+0xa>
 8009bfe:	bd10      	pop	{r4, pc}
 8009c00:	5ccc      	ldrb	r4, [r1, r3]
 8009c02:	54c4      	strb	r4, [r0, r3]
 8009c04:	3301      	adds	r3, #1
 8009c06:	e7f8      	b.n	8009bfa <memcpy+0x4>

08009c08 <_realloc_r>:
 8009c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0a:	0007      	movs	r7, r0
 8009c0c:	000e      	movs	r6, r1
 8009c0e:	0014      	movs	r4, r2
 8009c10:	2900      	cmp	r1, #0
 8009c12:	d105      	bne.n	8009c20 <_realloc_r+0x18>
 8009c14:	0011      	movs	r1, r2
 8009c16:	f7fe ff99 	bl	8008b4c <_malloc_r>
 8009c1a:	0005      	movs	r5, r0
 8009c1c:	0028      	movs	r0, r5
 8009c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c20:	2a00      	cmp	r2, #0
 8009c22:	d103      	bne.n	8009c2c <_realloc_r+0x24>
 8009c24:	f7fe ff26 	bl	8008a74 <_free_r>
 8009c28:	0025      	movs	r5, r4
 8009c2a:	e7f7      	b.n	8009c1c <_realloc_r+0x14>
 8009c2c:	f000 f92c 	bl	8009e88 <_malloc_usable_size_r>
 8009c30:	9001      	str	r0, [sp, #4]
 8009c32:	4284      	cmp	r4, r0
 8009c34:	d803      	bhi.n	8009c3e <_realloc_r+0x36>
 8009c36:	0035      	movs	r5, r6
 8009c38:	0843      	lsrs	r3, r0, #1
 8009c3a:	42a3      	cmp	r3, r4
 8009c3c:	d3ee      	bcc.n	8009c1c <_realloc_r+0x14>
 8009c3e:	0021      	movs	r1, r4
 8009c40:	0038      	movs	r0, r7
 8009c42:	f7fe ff83 	bl	8008b4c <_malloc_r>
 8009c46:	1e05      	subs	r5, r0, #0
 8009c48:	d0e8      	beq.n	8009c1c <_realloc_r+0x14>
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	0022      	movs	r2, r4
 8009c4e:	429c      	cmp	r4, r3
 8009c50:	d900      	bls.n	8009c54 <_realloc_r+0x4c>
 8009c52:	001a      	movs	r2, r3
 8009c54:	0031      	movs	r1, r6
 8009c56:	0028      	movs	r0, r5
 8009c58:	f7ff ffcd 	bl	8009bf6 <memcpy>
 8009c5c:	0031      	movs	r1, r6
 8009c5e:	0038      	movs	r0, r7
 8009c60:	f7fe ff08 	bl	8008a74 <_free_r>
 8009c64:	e7da      	b.n	8009c1c <_realloc_r+0x14>
	...

08009c68 <_strtol_l.constprop.0>:
 8009c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	001e      	movs	r6, r3
 8009c6e:	9005      	str	r0, [sp, #20]
 8009c70:	9101      	str	r1, [sp, #4]
 8009c72:	9202      	str	r2, [sp, #8]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d048      	beq.n	8009d0a <_strtol_l.constprop.0+0xa2>
 8009c78:	000b      	movs	r3, r1
 8009c7a:	2e24      	cmp	r6, #36	; 0x24
 8009c7c:	d845      	bhi.n	8009d0a <_strtol_l.constprop.0+0xa2>
 8009c7e:	4a3b      	ldr	r2, [pc, #236]	; (8009d6c <_strtol_l.constprop.0+0x104>)
 8009c80:	2108      	movs	r1, #8
 8009c82:	4694      	mov	ip, r2
 8009c84:	001a      	movs	r2, r3
 8009c86:	4660      	mov	r0, ip
 8009c88:	7814      	ldrb	r4, [r2, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	5d00      	ldrb	r0, [r0, r4]
 8009c8e:	001d      	movs	r5, r3
 8009c90:	0007      	movs	r7, r0
 8009c92:	400f      	ands	r7, r1
 8009c94:	4208      	tst	r0, r1
 8009c96:	d1f5      	bne.n	8009c84 <_strtol_l.constprop.0+0x1c>
 8009c98:	2c2d      	cmp	r4, #45	; 0x2d
 8009c9a:	d13d      	bne.n	8009d18 <_strtol_l.constprop.0+0xb0>
 8009c9c:	2701      	movs	r7, #1
 8009c9e:	781c      	ldrb	r4, [r3, #0]
 8009ca0:	1c95      	adds	r5, r2, #2
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d05e      	beq.n	8009d64 <_strtol_l.constprop.0+0xfc>
 8009ca6:	2e10      	cmp	r6, #16
 8009ca8:	d109      	bne.n	8009cbe <_strtol_l.constprop.0+0x56>
 8009caa:	2c30      	cmp	r4, #48	; 0x30
 8009cac:	d107      	bne.n	8009cbe <_strtol_l.constprop.0+0x56>
 8009cae:	2220      	movs	r2, #32
 8009cb0:	782b      	ldrb	r3, [r5, #0]
 8009cb2:	4393      	bics	r3, r2
 8009cb4:	2b58      	cmp	r3, #88	; 0x58
 8009cb6:	d150      	bne.n	8009d5a <_strtol_l.constprop.0+0xf2>
 8009cb8:	2610      	movs	r6, #16
 8009cba:	786c      	ldrb	r4, [r5, #1]
 8009cbc:	3502      	adds	r5, #2
 8009cbe:	4b2c      	ldr	r3, [pc, #176]	; (8009d70 <_strtol_l.constprop.0+0x108>)
 8009cc0:	0031      	movs	r1, r6
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	9303      	str	r3, [sp, #12]
 8009cc8:	f7f6 fab6 	bl	8000238 <__aeabi_uidivmod>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	9104      	str	r1, [sp, #16]
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	4684      	mov	ip, r0
 8009cd4:	0010      	movs	r0, r2
 8009cd6:	4249      	negs	r1, r1
 8009cd8:	0023      	movs	r3, r4
 8009cda:	3b30      	subs	r3, #48	; 0x30
 8009cdc:	2b09      	cmp	r3, #9
 8009cde:	d903      	bls.n	8009ce8 <_strtol_l.constprop.0+0x80>
 8009ce0:	3b11      	subs	r3, #17
 8009ce2:	2b19      	cmp	r3, #25
 8009ce4:	d81d      	bhi.n	8009d22 <_strtol_l.constprop.0+0xba>
 8009ce6:	330a      	adds	r3, #10
 8009ce8:	429e      	cmp	r6, r3
 8009cea:	dd1e      	ble.n	8009d2a <_strtol_l.constprop.0+0xc2>
 8009cec:	1c54      	adds	r4, r2, #1
 8009cee:	d009      	beq.n	8009d04 <_strtol_l.constprop.0+0x9c>
 8009cf0:	000a      	movs	r2, r1
 8009cf2:	4584      	cmp	ip, r0
 8009cf4:	d306      	bcc.n	8009d04 <_strtol_l.constprop.0+0x9c>
 8009cf6:	d102      	bne.n	8009cfe <_strtol_l.constprop.0+0x96>
 8009cf8:	9c04      	ldr	r4, [sp, #16]
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	db02      	blt.n	8009d04 <_strtol_l.constprop.0+0x9c>
 8009cfe:	2201      	movs	r2, #1
 8009d00:	4370      	muls	r0, r6
 8009d02:	1818      	adds	r0, r3, r0
 8009d04:	782c      	ldrb	r4, [r5, #0]
 8009d06:	3501      	adds	r5, #1
 8009d08:	e7e6      	b.n	8009cd8 <_strtol_l.constprop.0+0x70>
 8009d0a:	f7fe fe85 	bl	8008a18 <__errno>
 8009d0e:	2316      	movs	r3, #22
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	2000      	movs	r0, #0
 8009d14:	b007      	add	sp, #28
 8009d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d18:	2c2b      	cmp	r4, #43	; 0x2b
 8009d1a:	d1c2      	bne.n	8009ca2 <_strtol_l.constprop.0+0x3a>
 8009d1c:	781c      	ldrb	r4, [r3, #0]
 8009d1e:	1c95      	adds	r5, r2, #2
 8009d20:	e7bf      	b.n	8009ca2 <_strtol_l.constprop.0+0x3a>
 8009d22:	0023      	movs	r3, r4
 8009d24:	3b61      	subs	r3, #97	; 0x61
 8009d26:	2b19      	cmp	r3, #25
 8009d28:	d9dd      	bls.n	8009ce6 <_strtol_l.constprop.0+0x7e>
 8009d2a:	1c53      	adds	r3, r2, #1
 8009d2c:	d109      	bne.n	8009d42 <_strtol_l.constprop.0+0xda>
 8009d2e:	2322      	movs	r3, #34	; 0x22
 8009d30:	9a05      	ldr	r2, [sp, #20]
 8009d32:	9803      	ldr	r0, [sp, #12]
 8009d34:	6013      	str	r3, [r2, #0]
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0eb      	beq.n	8009d14 <_strtol_l.constprop.0+0xac>
 8009d3c:	1e6b      	subs	r3, r5, #1
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	e007      	b.n	8009d52 <_strtol_l.constprop.0+0xea>
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d000      	beq.n	8009d48 <_strtol_l.constprop.0+0xe0>
 8009d46:	4240      	negs	r0, r0
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0e2      	beq.n	8009d14 <_strtol_l.constprop.0+0xac>
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	d1f4      	bne.n	8009d3c <_strtol_l.constprop.0+0xd4>
 8009d52:	9b02      	ldr	r3, [sp, #8]
 8009d54:	9a01      	ldr	r2, [sp, #4]
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	e7dc      	b.n	8009d14 <_strtol_l.constprop.0+0xac>
 8009d5a:	2430      	movs	r4, #48	; 0x30
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	d1ae      	bne.n	8009cbe <_strtol_l.constprop.0+0x56>
 8009d60:	3608      	adds	r6, #8
 8009d62:	e7ac      	b.n	8009cbe <_strtol_l.constprop.0+0x56>
 8009d64:	2c30      	cmp	r4, #48	; 0x30
 8009d66:	d0a2      	beq.n	8009cae <_strtol_l.constprop.0+0x46>
 8009d68:	260a      	movs	r6, #10
 8009d6a:	e7a8      	b.n	8009cbe <_strtol_l.constprop.0+0x56>
 8009d6c:	0800a1e3 	.word	0x0800a1e3
 8009d70:	7fffffff 	.word	0x7fffffff

08009d74 <_strtol_r>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	f7ff ff77 	bl	8009c68 <_strtol_l.constprop.0>
 8009d7a:	bd10      	pop	{r4, pc}

08009d7c <_strtoul_l.constprop.0>:
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	9202      	str	r2, [sp, #8]
 8009d82:	4a3e      	ldr	r2, [pc, #248]	; (8009e7c <_strtoul_l.constprop.0+0x100>)
 8009d84:	001e      	movs	r6, r3
 8009d86:	9101      	str	r1, [sp, #4]
 8009d88:	000b      	movs	r3, r1
 8009d8a:	4694      	mov	ip, r2
 8009d8c:	2108      	movs	r1, #8
 8009d8e:	9005      	str	r0, [sp, #20]
 8009d90:	001a      	movs	r2, r3
 8009d92:	4660      	mov	r0, ip
 8009d94:	7814      	ldrb	r4, [r2, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	5d00      	ldrb	r0, [r0, r4]
 8009d9a:	001d      	movs	r5, r3
 8009d9c:	0007      	movs	r7, r0
 8009d9e:	400f      	ands	r7, r1
 8009da0:	4208      	tst	r0, r1
 8009da2:	d1f5      	bne.n	8009d90 <_strtoul_l.constprop.0+0x14>
 8009da4:	2c2d      	cmp	r4, #45	; 0x2d
 8009da6:	d13d      	bne.n	8009e24 <_strtoul_l.constprop.0+0xa8>
 8009da8:	2701      	movs	r7, #1
 8009daa:	781c      	ldrb	r4, [r3, #0]
 8009dac:	1c95      	adds	r5, r2, #2
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	d05f      	beq.n	8009e72 <_strtoul_l.constprop.0+0xf6>
 8009db2:	2e10      	cmp	r6, #16
 8009db4:	d109      	bne.n	8009dca <_strtoul_l.constprop.0+0x4e>
 8009db6:	2c30      	cmp	r4, #48	; 0x30
 8009db8:	d107      	bne.n	8009dca <_strtoul_l.constprop.0+0x4e>
 8009dba:	2220      	movs	r2, #32
 8009dbc:	782b      	ldrb	r3, [r5, #0]
 8009dbe:	4393      	bics	r3, r2
 8009dc0:	2b58      	cmp	r3, #88	; 0x58
 8009dc2:	d151      	bne.n	8009e68 <_strtoul_l.constprop.0+0xec>
 8009dc4:	2610      	movs	r6, #16
 8009dc6:	786c      	ldrb	r4, [r5, #1]
 8009dc8:	3502      	adds	r5, #2
 8009dca:	2001      	movs	r0, #1
 8009dcc:	0031      	movs	r1, r6
 8009dce:	4240      	negs	r0, r0
 8009dd0:	f7f6 f9ac 	bl	800012c <__udivsi3>
 8009dd4:	9003      	str	r0, [sp, #12]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	0031      	movs	r1, r6
 8009dda:	4240      	negs	r0, r0
 8009ddc:	f7f6 fa2c 	bl	8000238 <__aeabi_uidivmod>
 8009de0:	2300      	movs	r3, #0
 8009de2:	2201      	movs	r2, #1
 8009de4:	9104      	str	r1, [sp, #16]
 8009de6:	2101      	movs	r1, #1
 8009de8:	0018      	movs	r0, r3
 8009dea:	4694      	mov	ip, r2
 8009dec:	4249      	negs	r1, r1
 8009dee:	0022      	movs	r2, r4
 8009df0:	3a30      	subs	r2, #48	; 0x30
 8009df2:	2a09      	cmp	r2, #9
 8009df4:	d903      	bls.n	8009dfe <_strtoul_l.constprop.0+0x82>
 8009df6:	3a11      	subs	r2, #17
 8009df8:	2a19      	cmp	r2, #25
 8009dfa:	d818      	bhi.n	8009e2e <_strtoul_l.constprop.0+0xb2>
 8009dfc:	320a      	adds	r2, #10
 8009dfe:	4296      	cmp	r6, r2
 8009e00:	dd19      	ble.n	8009e36 <_strtoul_l.constprop.0+0xba>
 8009e02:	1c5c      	adds	r4, r3, #1
 8009e04:	d00b      	beq.n	8009e1e <_strtoul_l.constprop.0+0xa2>
 8009e06:	9c03      	ldr	r4, [sp, #12]
 8009e08:	000b      	movs	r3, r1
 8009e0a:	4284      	cmp	r4, r0
 8009e0c:	d307      	bcc.n	8009e1e <_strtoul_l.constprop.0+0xa2>
 8009e0e:	d103      	bne.n	8009e18 <_strtoul_l.constprop.0+0x9c>
 8009e10:	9c04      	ldr	r4, [sp, #16]
 8009e12:	000b      	movs	r3, r1
 8009e14:	4294      	cmp	r4, r2
 8009e16:	db02      	blt.n	8009e1e <_strtoul_l.constprop.0+0xa2>
 8009e18:	4663      	mov	r3, ip
 8009e1a:	4370      	muls	r0, r6
 8009e1c:	1810      	adds	r0, r2, r0
 8009e1e:	782c      	ldrb	r4, [r5, #0]
 8009e20:	3501      	adds	r5, #1
 8009e22:	e7e4      	b.n	8009dee <_strtoul_l.constprop.0+0x72>
 8009e24:	2c2b      	cmp	r4, #43	; 0x2b
 8009e26:	d1c2      	bne.n	8009dae <_strtoul_l.constprop.0+0x32>
 8009e28:	781c      	ldrb	r4, [r3, #0]
 8009e2a:	1c95      	adds	r5, r2, #2
 8009e2c:	e7bf      	b.n	8009dae <_strtoul_l.constprop.0+0x32>
 8009e2e:	0022      	movs	r2, r4
 8009e30:	3a61      	subs	r2, #97	; 0x61
 8009e32:	2a19      	cmp	r2, #25
 8009e34:	d9e2      	bls.n	8009dfc <_strtoul_l.constprop.0+0x80>
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	d108      	bne.n	8009e4c <_strtoul_l.constprop.0+0xd0>
 8009e3a:	2222      	movs	r2, #34	; 0x22
 8009e3c:	9905      	ldr	r1, [sp, #20]
 8009e3e:	0018      	movs	r0, r3
 8009e40:	600a      	str	r2, [r1, #0]
 8009e42:	9a02      	ldr	r2, [sp, #8]
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d109      	bne.n	8009e5c <_strtoul_l.constprop.0+0xe0>
 8009e48:	b007      	add	sp, #28
 8009e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	d000      	beq.n	8009e52 <_strtoul_l.constprop.0+0xd6>
 8009e50:	4240      	negs	r0, r0
 8009e52:	9a02      	ldr	r2, [sp, #8]
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	d0f7      	beq.n	8009e48 <_strtoul_l.constprop.0+0xcc>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <_strtoul_l.constprop.0+0xe4>
 8009e5c:	1e6b      	subs	r3, r5, #1
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	9a01      	ldr	r2, [sp, #4]
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	e7ef      	b.n	8009e48 <_strtoul_l.constprop.0+0xcc>
 8009e68:	2430      	movs	r4, #48	; 0x30
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d1ad      	bne.n	8009dca <_strtoul_l.constprop.0+0x4e>
 8009e6e:	3608      	adds	r6, #8
 8009e70:	e7ab      	b.n	8009dca <_strtoul_l.constprop.0+0x4e>
 8009e72:	2c30      	cmp	r4, #48	; 0x30
 8009e74:	d0a1      	beq.n	8009dba <_strtoul_l.constprop.0+0x3e>
 8009e76:	260a      	movs	r6, #10
 8009e78:	e7a7      	b.n	8009dca <_strtoul_l.constprop.0+0x4e>
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	0800a1e3 	.word	0x0800a1e3

08009e80 <_strtoul_r>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	f7ff ff7b 	bl	8009d7c <_strtoul_l.constprop.0>
 8009e86:	bd10      	pop	{r4, pc}

08009e88 <_malloc_usable_size_r>:
 8009e88:	1f0b      	subs	r3, r1, #4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	1f18      	subs	r0, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da01      	bge.n	8009e96 <_malloc_usable_size_r+0xe>
 8009e92:	580b      	ldr	r3, [r1, r0]
 8009e94:	18c0      	adds	r0, r0, r3
 8009e96:	4770      	bx	lr

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr

08009eb0 <__FLASH_Program_Fast_veneer>:
 8009eb0:	b401      	push	{r0}
 8009eb2:	4802      	ldr	r0, [pc, #8]	; (8009ebc <__FLASH_Program_Fast_veneer+0xc>)
 8009eb4:	4684      	mov	ip, r0
 8009eb6:	bc01      	pop	{r0}
 8009eb8:	4760      	bx	ip
 8009eba:	bf00      	nop
 8009ebc:	2000007d 	.word	0x2000007d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <USER_Driver>:
2000000c:	080048c9 0800493d 08004973 080049cb     .H..=I..sI...I..
2000001c:	08004a23                                #J..

20000020 <__sglue>:
20000020:	00000000 00000003 200002d0              ........... 

2000002c <_impure_data>:
2000002c:	00000000 200002d0 20000338 200003a0     ....... 8.. ... 
	...

20000078 <_impure_ptr>:
20000078:	2000002c                                ,.. 

2000007c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000007c:	b580      	push	{r7, lr}
2000007e:	b088      	sub	sp, #32
20000080:	af00      	add	r7, sp, #0
20000082:	6078      	str	r0, [r7, #4]
20000084:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000086:	231f      	movs	r3, #31
20000088:	18fb      	adds	r3, r7, r3
2000008a:	2200      	movs	r2, #0
2000008c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000008e:	687b      	ldr	r3, [r7, #4]
20000090:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000092:	683b      	ldr	r3, [r7, #0]
20000094:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000096:	4b1a      	ldr	r3, [pc, #104]	; (20000100 <FLASH_Program_Fast+0x84>)
20000098:	695a      	ldr	r2, [r3, #20]
2000009a:	4b19      	ldr	r3, [pc, #100]	; (20000100 <FLASH_Program_Fast+0x84>)
2000009c:	2180      	movs	r1, #128	; 0x80
2000009e:	02c9      	lsls	r1, r1, #11
200000a0:	430a      	orrs	r2, r1
200000a2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000a4:	f3ef 8310 	mrs	r3, PRIMASK
200000a8:	60fb      	str	r3, [r7, #12]
  return(result);
200000aa:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000ae:	b672      	cpsid	i
}
200000b0:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000b2:	e00f      	b.n	200000d4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000b4:	697a      	ldr	r2, [r7, #20]
200000b6:	69bb      	ldr	r3, [r7, #24]
200000b8:	6812      	ldr	r2, [r2, #0]
200000ba:	601a      	str	r2, [r3, #0]
    src += 4U;
200000bc:	697b      	ldr	r3, [r7, #20]
200000be:	3304      	adds	r3, #4
200000c0:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000c2:	69bb      	ldr	r3, [r7, #24]
200000c4:	3304      	adds	r3, #4
200000c6:	61bb      	str	r3, [r7, #24]
    index++;
200000c8:	211f      	movs	r1, #31
200000ca:	187b      	adds	r3, r7, r1
200000cc:	781a      	ldrb	r2, [r3, #0]
200000ce:	187b      	adds	r3, r7, r1
200000d0:	3201      	adds	r2, #1
200000d2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000d4:	231f      	movs	r3, #31
200000d6:	18fb      	adds	r3, r7, r3
200000d8:	781b      	ldrb	r3, [r3, #0]
200000da:	2b3f      	cmp	r3, #63	; 0x3f
200000dc:	d9ea      	bls.n	200000b4 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200000de:	46c0      	nop			; (mov r8, r8)
200000e0:	4b07      	ldr	r3, [pc, #28]	; (20000100 <FLASH_Program_Fast+0x84>)
200000e2:	691a      	ldr	r2, [r3, #16]
200000e4:	23c0      	movs	r3, #192	; 0xc0
200000e6:	029b      	lsls	r3, r3, #10
200000e8:	4013      	ands	r3, r2
200000ea:	d1f9      	bne.n	200000e0 <FLASH_Program_Fast+0x64>
200000ec:	693b      	ldr	r3, [r7, #16]
200000ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000f0:	68bb      	ldr	r3, [r7, #8]
200000f2:	f383 8810 	msr	PRIMASK, r3
}
200000f6:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f8:	46c0      	nop			; (mov r8, r8)
200000fa:	46bd      	mov	sp, r7
200000fc:	b008      	add	sp, #32
200000fe:	bd80      	pop	{r7, pc}
20000100:	40022000 	.word	0x40022000
