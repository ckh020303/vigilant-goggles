
FDCAN_Bootloader_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006750  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068e8  080068e8  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  080068e8  080068e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f0  080068f0  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068f4  080068f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080068f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000a5b8  200000f4  080069ec  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a6ac  080069ec  0002a6ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012078  00000000  00000000  0002015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ba  00000000  00000000  000321d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00035398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b83  00000000  00000000  000362b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dac3  00000000  00000000  00036e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134de  00000000  00000000  000548fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8ba4  00000000  00000000  00067ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad4  00000000  00000000  00120980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00124454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f4 	.word	0x200000f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067e8 	.word	0x080067e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000f8 	.word	0x200000f8
 8000104:	080067e8 	.word	0x080067e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000626:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MX_FDCAN1_Init+0x8c>)
 8000628:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000632:	22c0      	movs	r2, #192	; 0xc0
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000640:	2201      	movs	r2, #1
 8000642:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000646:	2200      	movs	r2, #0
 8000648:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800064c:	2200      	movs	r2, #0
 800064e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000652:	2208      	movs	r2, #8
 8000654:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000658:	2203      	movs	r2, #3
 800065a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800065e:	220c      	movs	r2, #12
 8000660:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000664:	2203      	movs	r2, #3
 8000666:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800066a:	2202      	movs	r2, #2
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000670:	2203      	movs	r2, #3
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000676:	220c      	movs	r2, #12
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800067c:	2203      	movs	r2, #3
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000682:	2201      	movs	r2, #1
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000688:	2200      	movs	r2, #0
 800068a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 800068e:	2200      	movs	r2, #0
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_FDCAN1_Init+0x88>)
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fe69 	bl	800136c <HAL_FDCAN_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800069e:	f000 f9f1 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000128 	.word	0x20000128
 80006ac:	40006400 	.word	0x40006400

080006b0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b09d      	sub	sp, #116	; 0x74
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	235c      	movs	r3, #92	; 0x5c
 80006ba:	18fb      	adds	r3, r7, r3
 80006bc:	0018      	movs	r0, r3
 80006be:	2314      	movs	r3, #20
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f005 fdb4 	bl	8006230 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c8:	2410      	movs	r4, #16
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	234c      	movs	r3, #76	; 0x4c
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f005 fdac 	bl	8006230 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <HAL_FDCAN_MspInit+0xc8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d146      	bne.n	8000770 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0492      	lsls	r2, r2, #18
 80006e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	0018      	movs	r0, r3
 80006f4:	f003 f906 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006fc:	f000 f9c2 	bl	8000a84 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0149      	lsls	r1, r1, #5
 800070a:	430a      	orrs	r2, r1
 800070c:	63da      	str	r2, [r3, #60]	; 0x3c
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	015b      	lsls	r3, r3, #5
 8000716:	4013      	ands	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_FDCAN_MspInit+0xcc>)
 800071e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_FDCAN_MspInit+0xcc>)
 8000722:	2108      	movs	r1, #8
 8000724:	430a      	orrs	r2, r1
 8000726:	635a      	str	r2, [r3, #52]	; 0x34
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_FDCAN_MspInit+0xcc>)
 800072a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072c:	2208      	movs	r2, #8
 800072e:	4013      	ands	r3, r2
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000734:	215c      	movs	r1, #92	; 0x5c
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2203      	movs	r2, #3
 800073a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2202      	movs	r2, #2
 8000740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2203      	movs	r2, #3
 8000752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	187b      	adds	r3, r7, r1
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_FDCAN_MspInit+0xd0>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f002 f976 	bl	8002a4c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 1, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	2015      	movs	r0, #21
 8000766:	f000 fd07 	bl	8001178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 800076a:	2015      	movs	r0, #21
 800076c:	f000 fd19 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b01d      	add	sp, #116	; 0x74
 8000776:	bd90      	pop	{r4, r7, pc}
 8000778:	40006400 	.word	0x40006400
 800077c:	40021000 	.word	0x40021000
 8000780:	50000c00 	.word	0x50000c00

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b08b      	sub	sp, #44	; 0x2c
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	2414      	movs	r4, #20
 800078c:	193b      	adds	r3, r7, r4
 800078e:	0018      	movs	r0, r3
 8000790:	2314      	movs	r3, #20
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f005 fd4b 	bl	8006230 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <MX_GPIO_Init+0x11c>)
 800079c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079e:	4b40      	ldr	r3, [pc, #256]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007a0:	2120      	movs	r1, #32
 80007a2:	430a      	orrs	r2, r1
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007aa:	2220      	movs	r2, #32
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b6:	4b3a      	ldr	r3, [pc, #232]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007b8:	2101      	movs	r1, #1
 80007ba:	430a      	orrs	r2, r1
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c2:	2201      	movs	r2, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007d0:	2102      	movs	r1, #2
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007da:	2202      	movs	r2, #2
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007e8:	2104      	movs	r1, #4
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	2204      	movs	r2, #4
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_GPIO_Init+0x11c>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_GPIO_Init+0x11c>)
 8000800:	2108      	movs	r1, #8
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0x11c>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	2208      	movs	r2, #8
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000812:	4924      	ldr	r1, [pc, #144]	; (80008a4 <MX_GPIO_Init+0x120>)
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	2200      	movs	r2, #0
 800081a:	0018      	movs	r0, r3
 800081c:	f002 fa82 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_GPIO_Init+0x124>)
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fa7c 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin;
 800082c:	193b      	adds	r3, r7, r4
 800082e:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <MX_GPIO_Init+0x120>)
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	193a      	adds	r2, r7, r4
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f8fd 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2240      	movs	r2, #64	; 0x40
 8000856:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2201      	movs	r2, #1
 8000862:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_GPIO_Init+0x124>)
 8000868:	0019      	movs	r1, r3
 800086a:	0010      	movs	r0, r2
 800086c:	f002 f8ee 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000870:	0021      	movs	r1, r4
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2201      	movs	r2, #1
 800087c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 800088a:	187b      	adds	r3, r7, r1
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <MX_GPIO_Init+0x124>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f002 f8db 	bl	8002a4c <HAL_GPIO_Init>

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b00b      	add	sp, #44	; 0x2c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	00008203 	.word	0x00008203
 80008a8:	50000800 	.word	0x50000800

080008ac <__io_putchar>:

#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <__io_putchar+0x20>)
 80008bc:	2201      	movs	r2, #1
 80008be:	f003 fab3 	bl	8003e28 <HAL_UART_Transmit>
    return ch;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000190 	.word	0x20000190

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fab7 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f875 	bl	80009c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  uint32_t address;
  address = 0x08010000;
 80008de:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <main+0xe0>)
 80008e0:	60bb      	str	r3, [r7, #8]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f7ff ff4f 	bl	8000784 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80008e6:	f7ff fe9b 	bl	8000620 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80008ea:	f000 f9cb 	bl	8000c84 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("device\n");
 80008ee:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <main+0xe4>)
 80008f0:	0018      	movs	r0, r3
 80008f2:	f005 fba1 	bl	8006038 <puts>
  FDCAN_Enable();
 80008f6:	f004 fea3 	bl	8005640 <FDCAN_Enable>
//  jump_to_app(address);
  starttime = HAL_GetTick();
 80008fa:	f000 fb4d 	bl	8000f98 <HAL_GetTick>
 80008fe:	0003      	movs	r3, r0
 8000900:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if((isSelectID == 1) && (isCommandID == 1))
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <main+0xe8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d141      	bne.n	800098e <main+0xbe>
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <main+0xec>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d13d      	bne.n	800098e <main+0xbe>
		{
			starttime = HAL_GetTick();
 8000912:	f000 fb41 	bl	8000f98 <HAL_GetTick>
 8000916:	0003      	movs	r3, r0
 8000918:	60fb      	str	r3, [r7, #12]
			printf("Select Command ID\n");
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <main+0xf0>)
 800091c:	0018      	movs	r0, r3
 800091e:	f005 fb8b 	bl	8006038 <puts>

			isCommandID = 0;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <main+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
			FDCAN_ReadByte();
 8000928:	f004 ff3a 	bl	80057a0 <FDCAN_ReadByte>
			id = header.RxHeader.Identifier;
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <main+0xf4>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	701a      	strb	r2, [r3, #0]
			switch(id)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b44      	cmp	r3, #68	; 0x44
 800093a:	d01d      	beq.n	8000978 <main+0xa8>
 800093c:	dc1f      	bgt.n	800097e <main+0xae>
 800093e:	2b31      	cmp	r3, #49	; 0x31
 8000940:	d017      	beq.n	8000972 <main+0xa2>
 8000942:	dc1c      	bgt.n	800097e <main+0xae>
 8000944:	2b21      	cmp	r3, #33	; 0x21
 8000946:	d011      	beq.n	800096c <main+0x9c>
 8000948:	dc19      	bgt.n	800097e <main+0xae>
 800094a:	2b11      	cmp	r3, #17
 800094c:	d00b      	beq.n	8000966 <main+0x96>
 800094e:	dc16      	bgt.n	800097e <main+0xae>
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <main+0x8a>
 8000954:	2b02      	cmp	r3, #2
 8000956:	d003      	beq.n	8000960 <main+0x90>
					break;
				case 0x44:
					FDCAN_EraseMemory_d();
					break;
				default:
					break;
 8000958:	e011      	b.n	800097e <main+0xae>
					FDCAN_GetCommand_d();
 800095a:	f005 f805 	bl	8005968 <FDCAN_GetCommand_d>
					break;
 800095e:	e00f      	b.n	8000980 <main+0xb0>
					FDCAN_GetID_d();
 8000960:	f005 f830 	bl	80059c4 <FDCAN_GetID_d>
					break;
 8000964:	e00c      	b.n	8000980 <main+0xb0>
					FDCAN_ReadMemory_d();
 8000966:	f005 f845 	bl	80059f4 <FDCAN_ReadMemory_d>
					break;
 800096a:	e009      	b.n	8000980 <main+0xb0>
					FDCAN_Go_d();
 800096c:	f005 f9ee 	bl	8005d4c <FDCAN_Go_d>
					break;
 8000970:	e006      	b.n	8000980 <main+0xb0>
					FDCAN_WriteMemory_d();
 8000972:	f005 f8d9 	bl	8005b28 <FDCAN_WriteMemory_d>
					break;
 8000976:	e003      	b.n	8000980 <main+0xb0>
					FDCAN_EraseMemory_d();
 8000978:	f005 f956 	bl	8005c28 <FDCAN_EraseMemory_d>
					break;
 800097c:	e000      	b.n	8000980 <main+0xb0>
					break;
 800097e:	46c0      	nop			; (mov r8, r8)
			}
			isSelectID = 0;
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <main+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
			isCommandID = 1;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <main+0xec>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e00e      	b.n	80009ac <main+0xdc>
		}
		else
		{
			endtime = HAL_GetTick();
 800098e:	f000 fb03 	bl	8000f98 <HAL_GetTick>
 8000992:	0003      	movs	r3, r0
 8000994:	603b      	str	r3, [r7, #0]
			if(endtime - starttime > 4000)
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	1ad2      	subs	r2, r2, r3
 800099c:	23fa      	movs	r3, #250	; 0xfa
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d9ae      	bls.n	8000902 <main+0x32>
			{
				jump_to_app(address);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	0018      	movs	r0, r3
 80009a8:	f004 fddc 	bl	8005564 <jump_to_app>
		if((isSelectID == 1) && (isCommandID == 1))
 80009ac:	e7a9      	b.n	8000902 <main+0x32>
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	08010000 	.word	0x08010000
 80009b4:	08006810 	.word	0x08006810
 80009b8:	20000245 	.word	0x20000245
 80009bc:	20000244 	.word	0x20000244
 80009c0:	08006818 	.word	0x08006818
 80009c4:	2000026c 	.word	0x2000026c

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b095      	sub	sp, #84	; 0x54
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	2414      	movs	r4, #20
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	233c      	movs	r3, #60	; 0x3c
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f005 fc29 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	0018      	movs	r0, r3
 80009e2:	2310      	movs	r3, #16
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f005 fc22 	bl	8006230 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 f9b5 	bl	8002d60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2202      	movs	r2, #2
 80009fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	0052      	lsls	r2, r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a04:	0021      	movs	r1, r4
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2240      	movs	r2, #64	; 0x40
 8000a10:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2202      	movs	r2, #2
 8000a16:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2208      	movs	r2, #8
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0292      	lsls	r2, r2, #10
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	0492      	lsls	r2, r2, #18
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0592      	lsls	r2, r2, #22
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 fa53 	bl	8002ef0 <HAL_RCC_OscConfig>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a4e:	f000 f819 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 fd9e 	bl	80035b0 <HAL_RCC_ClockConfig>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a78:	f000 f804 	bl	8000a84 <Error_Handler>
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b015      	add	sp, #84	; 0x54
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_MspInit+0x4c>)
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0549      	lsls	r1, r1, #21
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <HAL_MspInit+0x4c>)
 8000abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	055b      	lsls	r3, r3, #21
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000aca:	23c0      	movs	r3, #192	; 0xc0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 fa90 	bl	8000ff4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 fa36 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 f88a 	bl	8001c30 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000128 	.word	0x20000128

08000b28 <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f003 fa1e 	bl	8003f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000190 	.word	0x20000190

08000b40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e00a      	b.n	8000b68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b52:	e000      	b.n	8000b56 <_read+0x16>
 8000b54:	bf00      	nop
 8000b56:	0001      	movs	r1, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf0      	blt.n	8000b52 <_read+0x12>
  }

  return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b006      	add	sp, #24
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e009      	b.n	8000ba0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fe89 	bl	80008ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf1      	blt.n	8000b8c <_write+0x12>
  }
  return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b006      	add	sp, #24
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_close>:

int _close(int file)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	0192      	lsls	r2, r2, #6
 8000bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f005 fb4e 	bl	80062dc <__errno>
 8000c40:	0003      	movs	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	18d2      	adds	r2, r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b006      	add	sp, #24
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20024000 	.word	0x20024000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	2000018c 	.word	0x2000018c
 8000c74:	2000a6b0 	.word	0x2000a6b0

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <MX_USART3_UART_Init+0x98>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000c90:	22e1      	movs	r2, #225	; 0xe1
 8000c92:	0252      	lsls	r2, r2, #9
 8000c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 f854 	bl	8003d7c <HAL_UART_Init>
 8000cd4:	1e03      	subs	r3, r0, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f7ff fed4 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f004 faa7 	bl	8005234 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f7ff fecb 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f004 fade 	bl	80052b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f7ff fec2 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <MX_USART3_UART_Init+0x94>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f004 fa5c 	bl	80051c0 <HAL_UARTEx_DisableFifoMode>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f7ff feba 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000190 	.word	0x20000190
 8000d1c:	40004800 	.word	0x40004800

08000d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b09d      	sub	sp, #116	; 0x74
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	235c      	movs	r3, #92	; 0x5c
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2314      	movs	r3, #20
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f005 fa7c 	bl	8006230 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d38:	2410      	movs	r4, #16
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	234c      	movs	r3, #76	; 0x4c
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f005 fa74 	bl	8006230 <memset>
  if(uartHandle->Instance==USART3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_UART_MspInit+0xc8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d146      	bne.n	8000de0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2204      	movs	r2, #4
 8000d56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fdcf 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6a:	f7ff fe8b 	bl	8000a84 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	02c9      	lsls	r1, r1, #11
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	02db      	lsls	r3, r3, #11
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d90:	2102      	movs	r1, #2
 8000d92:	430a      	orrs	r2, r1
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0xcc>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da2:	215c      	movs	r1, #92	; 0x5c
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	22c0      	movs	r2, #192	; 0xc0
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2202      	movs	r2, #2
 8000db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_UART_MspInit+0xd0>)
 8000dc8:	0019      	movs	r1, r3
 8000dca:	0010      	movs	r0, r2
 8000dcc:	f001 fe3e 	bl	8002a4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 2, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2102      	movs	r1, #2
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f000 f9cf 	bl	8001178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000dda:	201d      	movs	r0, #29
 8000ddc:	f000 f9e1 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b01d      	add	sp, #116	; 0x74
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	40004800 	.word	0x40004800
 8000dec:	40021000 	.word	0x40021000
 8000df0:	50000400 	.word	0x50000400

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f7ff ff3e 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e22:	f005 fa61 	bl	80062e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e26:	f7ff fd53 	bl	80008d0 <main>

08000e2a <LoopForever>:

LoopForever:
  b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000e38:	080068f8 	.word	0x080068f8
  ldr r2, =_sbss
 8000e3c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000e40:	2000a6ac 	.word	0x2000a6ac

08000e44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_COMP_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x3c>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_Init+0x3c>)
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	0049      	lsls	r1, r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 f83c 	bl	8000ee0 <HAL_InitTick>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e001      	b.n	8000e78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fe0c 	bl	8000a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e78:	1dfb      	adds	r3, r7, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40022000 	.word	0x40022000

08000e88 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_DeInit+0x48>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4252      	negs	r2, r2
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_DeInit+0x48>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_DeInit+0x48>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4252      	negs	r2, r2
 8000ea0:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_DeInit+0x48>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_DeInit+0x48>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4252      	negs	r2, r2
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_DeInit+0x48>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_DeInit+0x48>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4252      	negs	r2, r2
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <HAL_DeInit+0x48>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000ec4:	f000 f806 	bl	8000ed4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_InitTick+0x88>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02b      	beq.n	8000f50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_InitTick+0x8c>)
 8000efa:	681c      	ldr	r4, [r3, #0]
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_InitTick+0x88>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	0019      	movs	r1, r3
 8000f02:	23fa      	movs	r3, #250	; 0xfa
 8000f04:	0098      	lsls	r0, r3, #2
 8000f06:	f7ff f8ff 	bl	8000108 <__udivsi3>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	0020      	movs	r0, r4
 8000f10:	f7ff f8fa 	bl	8000108 <__udivsi3>
 8000f14:	0003      	movs	r3, r0
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 f953 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d112      	bne.n	8000f46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d80a      	bhi.n	8000f3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 f922 	bl	8001178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_InitTick+0x90>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e00d      	b.n	8000f58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e008      	b.n	8000f58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e003      	b.n	8000f58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b005      	add	sp, #20
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x1c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x20>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	18d2      	adds	r2, r2, r3
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_IncTick+0x20>)
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000224 	.word	0x20000224

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <HAL_GetTick+0x10>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	20000224 	.word	0x20000224

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff fff0 	bl	8000f98 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	001a      	movs	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	189b      	adds	r3, r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	f7ff ffe0 	bl	8000f98 <HAL_GetTick>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b004      	add	sp, #16
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001002:	4013      	ands	r3, r2
 8001004:	0019      	movs	r1, r3
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	40010000 	.word	0x40010000
 800101c:	fffff9ff 	.word	0xfffff9ff

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	0002      	movs	r2, r0
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b7f      	cmp	r3, #127	; 0x7f
 8001032:	d809      	bhi.n	8001048 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	001a      	movs	r2, r3
 800103a:	231f      	movs	r3, #31
 800103c:	401a      	ands	r2, r3
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_EnableIRQ+0x30>)
 8001040:	2101      	movs	r1, #1
 8001042:	4091      	lsls	r1, r2
 8001044:	000a      	movs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	0002      	movs	r2, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b7f      	cmp	r3, #127	; 0x7f
 8001068:	d828      	bhi.n	80010bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800106a:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <__NVIC_SetPriority+0xd4>)
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25b      	sxtb	r3, r3
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	33c0      	adds	r3, #192	; 0xc0
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	589b      	ldr	r3, [r3, r2]
 800107a:	1dfa      	adds	r2, r7, #7
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	0011      	movs	r1, r2
 8001080:	2203      	movs	r2, #3
 8001082:	400a      	ands	r2, r1
 8001084:	00d2      	lsls	r2, r2, #3
 8001086:	21ff      	movs	r1, #255	; 0xff
 8001088:	4091      	lsls	r1, r2
 800108a:	000a      	movs	r2, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	401a      	ands	r2, r3
 8001090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	019b      	lsls	r3, r3, #6
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	401a      	ands	r2, r3
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	2303      	movs	r3, #3
 80010a2:	4003      	ands	r3, r0
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a8:	481f      	ldr	r0, [pc, #124]	; (8001128 <__NVIC_SetPriority+0xd4>)
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	430a      	orrs	r2, r1
 80010b4:	33c0      	adds	r3, #192	; 0xc0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ba:	e031      	b.n	8001120 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <__NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0019      	movs	r1, r3
 80010c4:	230f      	movs	r3, #15
 80010c6:	400b      	ands	r3, r1
 80010c8:	3b08      	subs	r3, #8
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3306      	adds	r3, #6
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1dfa      	adds	r2, r7, #7
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	0011      	movs	r1, r2
 80010dc:	2203      	movs	r2, #3
 80010de:	400a      	ands	r2, r1
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	21ff      	movs	r1, #255	; 0xff
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	401a      	ands	r2, r3
 80010ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	401a      	ands	r2, r3
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0018      	movs	r0, r3
 80010fc:	2303      	movs	r3, #3
 80010fe:	4003      	ands	r3, r0
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001104:	4809      	ldr	r0, [pc, #36]	; (800112c <__NVIC_SetPriority+0xd8>)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	001c      	movs	r4, r3
 800110c:	230f      	movs	r3, #15
 800110e:	4023      	ands	r3, r4
 8001110:	3b08      	subs	r3, #8
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	430a      	orrs	r2, r1
 8001116:	3306      	adds	r3, #6
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	18c3      	adds	r3, r0, r3
 800111c:	3304      	adds	r3, #4
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b003      	add	sp, #12
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	045b      	lsls	r3, r3, #17
 8001140:	429a      	cmp	r2, r3
 8001142:	d301      	bcc.n	8001148 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001144:	2301      	movs	r3, #1
 8001146:	e010      	b.n	800116a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <SysTick_Config+0x44>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	3a01      	subs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001150:	2301      	movs	r3, #1
 8001152:	425b      	negs	r3, r3
 8001154:	2103      	movs	r1, #3
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff7c 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x44>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x44>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	210f      	movs	r1, #15
 8001184:	187b      	adds	r3, r7, r1
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	187b      	adds	r3, r7, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25b      	sxtb	r3, r3
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	0002      	movs	r2, r0
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff33 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ffaf 	bl	8001130 <SysTick_Config>
 80011d2:	0003      	movs	r3, r0
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e04f      	b.n	800128e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2225      	movs	r2, #37	; 0x25
 80011f2:	5c9b      	ldrb	r3, [r3, r2]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d008      	beq.n	800120c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2204      	movs	r2, #4
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e040      	b.n	800128e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	210e      	movs	r1, #14
 8001218:	438a      	bics	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001226:	491c      	ldr	r1, [pc, #112]	; (8001298 <HAL_DMA_Abort+0xbc>)
 8001228:	400a      	ands	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	438a      	bics	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	221c      	movs	r2, #28
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2101      	movs	r1, #1
 800124a:	4091      	lsls	r1, r2
 800124c:	000a      	movs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001258:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00c      	beq.n	800127c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126c:	490a      	ldr	r1, [pc, #40]	; (8001298 <HAL_DMA_Abort+0xbc>)
 800126e:	400a      	ands	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800127a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2225      	movs	r2, #37	; 0x25
 8001280:	2101      	movs	r1, #1
 8001282:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2224      	movs	r2, #36	; 0x24
 8001288:	2100      	movs	r1, #0
 800128a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	fffffeff 	.word	0xfffffeff

0800129c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	210f      	movs	r1, #15
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2225      	movs	r2, #37	; 0x25
 80012b0:	5c9b      	ldrb	r3, [r3, r2]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d006      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2204      	movs	r2, #4
 80012bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e048      	b.n	8001358 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	210e      	movs	r1, #14
 80012d2:	438a      	bics	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	438a      	bics	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	491d      	ldr	r1, [pc, #116]	; (8001368 <HAL_DMA_Abort_IT+0xcc>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	221c      	movs	r2, #28
 80012fc:	401a      	ands	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2101      	movs	r1, #1
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001312:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001326:	4910      	ldr	r1, [pc, #64]	; (8001368 <HAL_DMA_Abort_IT+0xcc>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001334:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2225      	movs	r2, #37	; 0x25
 800133a:	2101      	movs	r1, #1
 800133c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2224      	movs	r2, #36	; 0x24
 8001342:	2100      	movs	r1, #0
 8001344:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	0010      	movs	r0, r2
 8001356:	4798      	blx	r3
    }
  }
  return status;
 8001358:	230f      	movs	r3, #15
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	fffffeff 	.word	0xfffffeff

0800136c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e14e      	b.n	800161c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	225c      	movs	r2, #92	; 0x5c
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	225d      	movs	r2, #93	; 0x5d
 800138e:	2100      	movs	r1, #0
 8001390:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff f98b 	bl	80006b0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2110      	movs	r1, #16
 80013a6:	438a      	bics	r2, r1
 80013a8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013aa:	f7ff fdf5 	bl	8000f98 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013b2:	e012      	b.n	80013da <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013b4:	f7ff fdf0 	bl	8000f98 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d90b      	bls.n	80013da <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	2201      	movs	r2, #1
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	225c      	movs	r2, #92	; 0x5c
 80013d2:	2103      	movs	r1, #3
 80013d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e120      	b.n	800161c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2208      	movs	r2, #8
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d0e5      	beq.n	80013b4 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f7ff fdce 	bl	8000f98 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001400:	e012      	b.n	8001428 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001402:	f7ff fdc9 	bl	8000f98 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b0a      	cmp	r3, #10
 800140e:	d90b      	bls.n	8001428 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001414:	2201      	movs	r2, #1
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	225c      	movs	r2, #92	; 0x5c
 8001420:	2103      	movs	r1, #3
 8001422:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0f9      	b.n	800161c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2201      	movs	r2, #1
 8001430:	4013      	ands	r3, r2
 8001432:	d0e6      	beq.n	8001402 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2102      	movs	r1, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a76      	ldr	r2, [pc, #472]	; (8001624 <HAL_FDCAN_Init+0x2b8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d103      	bne.n	8001456 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800144e:	4a76      	ldr	r2, [pc, #472]	; (8001628 <HAL_FDCAN_Init+0x2bc>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c1b      	ldrb	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	438a      	bics	r2, r1
 800146c:	619a      	str	r2, [r3, #24]
 800146e:	e007      	b.n	8001480 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2140      	movs	r1, #64	; 0x40
 800147c:	430a      	orrs	r2, r1
 800147e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7c5b      	ldrb	r3, [r3, #17]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d109      	bne.n	800149c <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	01c9      	lsls	r1, r1, #7
 8001496:	430a      	orrs	r2, r1
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	e007      	b.n	80014ac <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4961      	ldr	r1, [pc, #388]	; (800162c <HAL_FDCAN_Init+0x2c0>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7c9b      	ldrb	r3, [r3, #18]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d108      	bne.n	80014c6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	495c      	ldr	r1, [pc, #368]	; (8001630 <HAL_FDCAN_Init+0x2c4>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	619a      	str	r2, [r3, #24]
 80014c4:	e008      	b.n	80014d8 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	0149      	lsls	r1, r1, #5
 80014d4:	430a      	orrs	r2, r1
 80014d6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a55      	ldr	r2, [pc, #340]	; (8001634 <HAL_FDCAN_Init+0x2c8>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	0019      	movs	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	21a4      	movs	r1, #164	; 0xa4
 80014fc:	438a      	bics	r2, r1
 80014fe:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2110      	movs	r1, #16
 800150c:	438a      	bics	r2, r1
 800150e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2104      	movs	r1, #4
 8001524:	430a      	orrs	r2, r1
 8001526:	619a      	str	r2, [r3, #24]
 8001528:	e02c      	b.n	8001584 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d028      	beq.n	8001584 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d01c      	beq.n	8001574 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699a      	ldr	r2, [r3, #24]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	430a      	orrs	r2, r1
 8001548:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2110      	movs	r1, #16
 8001556:	430a      	orrs	r2, r1
 8001558:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d110      	bne.n	8001584 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2120      	movs	r1, #32
 800156e:	430a      	orrs	r2, r1
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	e007      	b.n	8001584 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2120      	movs	r1, #32
 8001580:	430a      	orrs	r2, r1
 8001582:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	3b01      	subs	r3, #1
 800158a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	3b01      	subs	r3, #1
 8001592:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001594:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800159c:	431a      	orrs	r2, r3
 800159e:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015ac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	23c0      	movs	r3, #192	; 0xc0
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d115      	bne.n	80015e8 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	3b01      	subs	r3, #1
 80015c8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	3b01      	subs	r3, #1
 80015d2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015d4:	431a      	orrs	r2, r3
 80015d6:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	3b01      	subs	r3, #1
 80015de:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015e4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015e6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	22c0      	movs	r2, #192	; 0xc0
 80015ee:	5899      	ldr	r1, [r3, r2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	21c0      	movs	r1, #192	; 0xc0
 80015fc:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fc9f 	bl	8001f44 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	225c      	movs	r2, #92	; 0x5c
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b004      	add	sp, #16
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40006400 	.word	0x40006400
 8001628:	40006500 	.word	0x40006500
 800162c:	ffffbfff 	.word	0xffffbfff
 8001630:	ffffefff 	.word	0xffffefff
 8001634:	fffffcff 	.word	0xfffffcff

08001638 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001642:	2017      	movs	r0, #23
 8001644:	183b      	adds	r3, r7, r0
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	215c      	movs	r1, #92	; 0x5c
 800164a:	5c52      	ldrb	r2, [r2, r1]
 800164c:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800164e:	0002      	movs	r2, r0
 8001650:	18bb      	adds	r3, r7, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d003      	beq.n	8001660 <HAL_FDCAN_ConfigFilter+0x28>
 8001658:	18bb      	adds	r3, r7, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d13d      	bne.n	80016dc <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d119      	bne.n	800169c <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001674:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800167c:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	18d3      	adds	r3, r2, r3
 8001692:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	075a      	lsls	r2, r3, #29
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	079a      	lsls	r2, r3, #30
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	18d3      	adds	r3, r2, r3
 80016c4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3304      	adds	r3, #4
 80016d0:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e006      	b.n	80016ea <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e0:	2202      	movs	r2, #2
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
  }
}
 80016ea:	0018      	movs	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b006      	add	sp, #24
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	225c      	movs	r2, #92	; 0x5c
 8001702:	5c9b      	ldrb	r3, [r3, r2]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	0219      	lsls	r1, r3, #8
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	430a      	orrs	r2, r1
 8001716:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	e006      	b.n	800172a <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001720:	2204      	movs	r2, #4
 8001722:	431a      	orrs	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
  }
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	225c      	movs	r2, #92	; 0x5c
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10a      	bne.n	800175c <HAL_FDCAN_EnableTxDelayCompensation+0x2a>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0409      	lsls	r1, r1, #16
 8001754:	430a      	orrs	r2, r1
 8001756:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e006      	b.n	800176a <HAL_FDCAN_EnableTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001760:	2204      	movs	r2, #4
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
  }
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	225c      	movs	r2, #92	; 0x5c
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d110      	bne.n	80017a8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	225c      	movs	r2, #92	; 0x5c
 800178a:	2102      	movs	r1, #2
 800178c:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699a      	ldr	r2, [r3, #24]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	438a      	bics	r2, r1
 800179c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e006      	b.n	80017b6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ac:	2204      	movs	r2, #4
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
  }
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	225c      	movs	r2, #92	; 0x5c
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d12d      	bne.n	8001832 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	22c4      	movs	r2, #196	; 0xc4
 80017dc:	589a      	ldr	r2, [r3, r2]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	039b      	lsls	r3, r3, #14
 80017e2:	4013      	ands	r3, r2
 80017e4:	d008      	beq.n	80017f8 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	431a      	orrs	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e023      	b.n	8001840 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	22c4      	movs	r2, #196	; 0xc4
 80017fe:	589b      	ldr	r3, [r3, r2]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fc04 	bl	800201c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4091      	lsls	r1, r2
 800181e:	000a      	movs	r2, r1
 8001820:	21cc      	movs	r1, #204	; 0xcc
 8001822:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001824:	2201      	movs	r2, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e006      	b.n	8001840 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	2208      	movs	r2, #8
 8001838:	431a      	orrs	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
  }
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b006      	add	sp, #24
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800185a:	201b      	movs	r0, #27
 800185c:	183b      	adds	r3, r7, r0
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	215c      	movs	r1, #92	; 0x5c
 8001862:	5c52      	ldrb	r2, [r2, r1]
 8001864:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001866:	183b      	adds	r3, r7, r0
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d000      	beq.n	8001870 <HAL_FDCAN_GetRxMessage+0x28>
 800186e:	e0ec      	b.n	8001a4a <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b40      	cmp	r3, #64	; 0x40
 8001874:	d137      	bne.n	80018e6 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2290      	movs	r2, #144	; 0x90
 800187c:	589b      	ldr	r3, [r3, r2]
 800187e:	220f      	movs	r2, #15
 8001880:	4013      	ands	r3, r2
 8001882:	d108      	bne.n	8001896 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0052      	lsls	r2, r2, #1
 800188c:	431a      	orrs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0e0      	b.n	8001a58 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2290      	movs	r2, #144	; 0x90
 800189c:	589b      	ldr	r3, [r3, r2]
 800189e:	0e1b      	lsrs	r3, r3, #24
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10a      	bne.n	80018be <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	589b      	ldr	r3, [r3, r2]
 80018b0:	0a5b      	lsrs	r3, r3, #9
 80018b2:	2201      	movs	r2, #1
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2290      	movs	r2, #144	; 0x90
 80018c4:	589b      	ldr	r3, [r3, r2]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	18d3      	adds	r3, r2, r3
 80018d0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	0013      	movs	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	189b      	adds	r3, r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	18cb      	adds	r3, r1, r3
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
 80018e4:	e036      	b.n	8001954 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2298      	movs	r2, #152	; 0x98
 80018ec:	589b      	ldr	r3, [r3, r2]
 80018ee:	220f      	movs	r2, #15
 80018f0:	4013      	ands	r3, r2
 80018f2:	d108      	bne.n	8001906 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0052      	lsls	r2, r2, #1
 80018fc:	431a      	orrs	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0a8      	b.n	8001a58 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2298      	movs	r2, #152	; 0x98
 800190c:	589b      	ldr	r3, [r3, r2]
 800190e:	0e1b      	lsrs	r3, r3, #24
 8001910:	2201      	movs	r2, #1
 8001912:	4013      	ands	r3, r2
 8001914:	2b01      	cmp	r3, #1
 8001916:	d10a      	bne.n	800192e <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	589b      	ldr	r3, [r3, r2]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800192a:	2301      	movs	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2298      	movs	r2, #152	; 0x98
 8001934:	589b      	ldr	r3, [r3, r2]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	2203      	movs	r2, #3
 800193a:	4013      	ands	r3, r2
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	0013      	movs	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	189b      	adds	r3, r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	18cb      	adds	r3, r1, r3
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	05db      	lsls	r3, r3, #23
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d107      	bne.n	800197a <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	055b      	lsls	r3, r3, #21
 8001972:	0d5a      	lsrs	r2, r3, #21
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e005      	b.n	8001986 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	059b      	lsls	r3, r3, #22
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0fdb      	lsrs	r3, r3, #31
 800199a:	07da      	lsls	r2, r3, #31
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3304      	adds	r3, #4
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	0c1a      	lsrs	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	220f      	movs	r2, #15
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	035b      	lsls	r3, r3, #13
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	039b      	lsls	r3, r3, #14
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e1b      	lsrs	r3, r3, #24
 80019e2:	227f      	movs	r2, #127	; 0x7f
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0fda      	lsrs	r2, r3, #31
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3304      	adds	r3, #4
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	e00a      	b.n	8001a1a <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	18d2      	adds	r2, r2, r3
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	18cb      	adds	r3, r1, r3
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	3301      	adds	r3, #1
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_FDCAN_GetRxMessage+0x218>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	001a      	movs	r2, r3
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d3ec      	bcc.n	8001a04 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b40      	cmp	r3, #64	; 0x40
 8001a2e:	d105      	bne.n	8001a3c <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2194      	movs	r1, #148	; 0x94
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	505a      	str	r2, [r3, r1]
 8001a3a:	e004      	b.n	8001a46 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	219c      	movs	r1, #156	; 0x9c
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e006      	b.n	8001a58 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	2208      	movs	r2, #8
 8001a50:	431a      	orrs	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
  }
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b00a      	add	sp, #40	; 0x28
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	080068b0 	.word	0x080068b0

08001a64 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	22c4      	movs	r2, #196	; 0xc4
 8001a72:	589b      	ldr	r3, [r3, r2]
 8001a74:	2207      	movs	r2, #7
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a90:	2017      	movs	r0, #23
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	215c      	movs	r1, #92	; 0x5c
 8001a98:	5c52      	ldrb	r2, [r2, r1]
 8001a9a:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	18bb      	adds	r3, r7, r2
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d004      	beq.n	8001ab0 <HAL_FDCAN_ActivateNotification+0x2c>
 8001aa6:	18bb      	adds	r3, r7, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d000      	beq.n	8001ab0 <HAL_FDCAN_ActivateNotification+0x2c>
 8001aae:	e0b4      	b.n	8001c1a <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	d003      	beq.n	8001ac8 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d034      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2238      	movs	r2, #56	; 0x38
 8001acc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ace:	d003      	beq.n	8001ad8 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	23e0      	movs	r3, #224	; 0xe0
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001ae0:	d003      	beq.n	8001aea <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d023      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	23f0      	movs	r3, #240	; 0xf0
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001af2:	d003      	beq.n	8001afc <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2208      	movs	r2, #8
 8001af8:	4013      	ands	r3, r2
 8001afa:	d01a      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	23e0      	movs	r3, #224	; 0xe0
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b04:	d003      	beq.n	8001b0e <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d011      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	23c0      	movs	r3, #192	; 0xc0
 8001b12:	029b      	lsls	r3, r3, #10
 8001b14:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b16:	d003      	beq.n	8001b20 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d008      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	23fc      	movs	r3, #252	; 0xfc
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b28:	d00b      	beq.n	8001b42 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d107      	bne.n	8001b42 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2207      	movs	r2, #7
 8001b46:	4013      	ands	r3, r2
 8001b48:	d003      	beq.n	8001b52 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d134      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2238      	movs	r2, #56	; 0x38
 8001b56:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b58:	d003      	beq.n	8001b62 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d12c      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	23e0      	movs	r3, #224	; 0xe0
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b6a:	d003      	beq.n	8001b74 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4013      	ands	r3, r2
 8001b72:	d123      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	23f0      	movs	r3, #240	; 0xf0
 8001b78:	015b      	lsls	r3, r3, #5
 8001b7a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b7c:	d003      	beq.n	8001b86 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2208      	movs	r2, #8
 8001b82:	4013      	ands	r3, r2
 8001b84:	d11a      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	23e0      	movs	r3, #224	; 0xe0
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001b8e:	d003      	beq.n	8001b98 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2210      	movs	r2, #16
 8001b94:	4013      	ands	r3, r2
 8001b96:	d111      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001ba0:	d003      	beq.n	8001baa <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	23fc      	movs	r3, #252	; 0xfc
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001bb2:	d00b      	beq.n	8001bcc <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2240      	movs	r2, #64	; 0x40
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d009      	beq.n	8001be8 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	22dc      	movs	r2, #220	; 0xdc
 8001bda:	5899      	ldr	r1, [r3, r2]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	21dc      	movs	r1, #220	; 0xdc
 8001be6:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	22e0      	movs	r2, #224	; 0xe0
 8001bf8:	5899      	ldr	r1, [r3, r2]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	21e0      	movs	r1, #224	; 0xe0
 8001c04:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e006      	b.n	8001c28 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	2202      	movs	r2, #2
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
  }
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b006      	add	sp, #24
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c3e:	23e0      	movs	r3, #224	; 0xe0
 8001c40:	015b      	lsls	r3, r3, #5
 8001c42:	4013      	ands	r3, r2
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	4013      	ands	r3, r2
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c58:	2207      	movs	r2, #7
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	4013      	ands	r3, r2
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c70:	2238      	movs	r2, #56	; 0x38
 8001c72:	4013      	ands	r3, r2
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	4013      	ands	r3, r2
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c88:	23f1      	movs	r3, #241	; 0xf1
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca2:	23e0      	movs	r3, #224	; 0xe0
 8001ca4:	031b      	lsls	r3, r3, #12
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2240      	movs	r2, #64	; 0x40
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 f916 	bl	8001f12 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d01b      	beq.n	8001d28 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d016      	beq.n	8001d28 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	22d8      	movs	r2, #216	; 0xd8
 8001d00:	589b      	ldr	r3, [r3, r2]
 8001d02:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	22e0      	movs	r2, #224	; 0xe0
 8001d0a:	589a      	ldr	r2, [r3, r2]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0052      	lsls	r2, r2, #1
 8001d1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0011      	movs	r1, r2
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 f8dc 	bl	8001ee0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0011      	movs	r1, r2
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 f8ac 	bl	8001e9a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0011      	movs	r1, r2
 8001d56:	0018      	movs	r0, r3
 8001d58:	f003 fd66 	bl	8005828 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 f89b 	bl	8001eac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d00d      	beq.n	8001d9c <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d008      	beq.n	8001d9c <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f891 	bl	8001ebe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	4013      	ands	r3, r2
 8001da2:	d019      	beq.n	8001dd8 <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	4013      	ands	r3, r2
 8001daa:	d015      	beq.n	8001dd8 <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	22d4      	movs	r2, #212	; 0xd4
 8001db2:	589b      	ldr	r3, [r3, r2]
 8001db4:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	22dc      	movs	r2, #220	; 0xdc
 8001dbc:	589a      	ldr	r2, [r3, r2]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f87b 	bl	8001ece <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	4013      	ands	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	019b      	lsls	r3, r3, #6
 8001de8:	4013      	ands	r3, r2
 8001dea:	d008      	beq.n	8001dfe <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0192      	lsls	r2, r2, #6
 8001df4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 f87a 	bl	8001ef2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	4013      	ands	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d008      	beq.n	8001e24 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	0212      	lsls	r2, r2, #8
 8001e1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 f86f 	bl	8001f02 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	01db      	lsls	r3, r3, #7
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d00f      	beq.n	8001e4e <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	01db      	lsls	r3, r3, #7
 8001e34:	4013      	ands	r3, r2
 8001e36:	d00a      	beq.n	8001e4e <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	01d2      	lsls	r2, r2, #7
 8001e40:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0011      	movs	r1, r2
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 f865 	bl	8001f32 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a3a      	ldr	r2, [r7, #32]
 8001e74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f848 	bl	8001f22 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b00c      	add	sp, #48	; 0x30
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b002      	add	sp, #8
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b002      	add	sp, #8
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001f4e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d105      	bne.n	8001f66 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	22d4      	movs	r2, #212	; 0xd4
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4694      	mov	ip, r2
 8001f62:	4463      	add	r3, ip
 8001f64:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	589b      	ldr	r3, [r3, r2]
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	041a      	lsls	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3370      	adds	r3, #112	; 0x70
 8001f8e:	001a      	movs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	589b      	ldr	r3, [r3, r2]
 8001f9c:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	061a      	lsls	r2, r3, #24
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	33b0      	adds	r3, #176	; 0xb0
 8001fb6:	001a      	movs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3389      	adds	r3, #137	; 0x89
 8001fc0:	33ff      	adds	r3, #255	; 0xff
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2298      	movs	r2, #152	; 0x98
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	189a      	adds	r2, r3, r2
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	229e      	movs	r2, #158	; 0x9e
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	189a      	adds	r2, r3, r2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e005      	b.n	8001ff2 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	22d4      	movs	r2, #212	; 0xd4
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4694      	mov	ip, r2
 8001ffa:	4463      	add	r3, ip
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3f1      	bcc.n	8001fe6 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b004      	add	sp, #16
 800200a:	bd80      	pop	{r7, pc}
 800200c:	4000b400 	.word	0x4000b400
 8002010:	40006800 	.word	0x40006800
 8002014:	ffe0ffff 	.word	0xffe0ffff
 8002018:	f0ffffff 	.word	0xf0ffffff

0800201c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800203a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002042:	4313      	orrs	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e00b      	b.n	8002060 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002050:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002056:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	05d2      	lsls	r2, r2, #23
 800205c:	4313      	orrs	r3, r2
 800205e:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800206a:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002070:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002076:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	0013      	movs	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	189b      	adds	r3, r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	18cb      	adds	r3, r1, r3
 8002092:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	3304      	adds	r3, #4
 800209e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3304      	adds	r3, #4
 80020aa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e020      	b.n	80020f4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3303      	adds	r3, #3
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	18d3      	adds	r3, r2, r3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3302      	adds	r3, #2
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	18cb      	adds	r3, r1, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020ca:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	18cb      	adds	r3, r1, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020d8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	188a      	adds	r2, r1, r2
 80020e0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80020e2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	3304      	adds	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3304      	adds	r3, #4
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a05      	ldr	r2, [pc, #20]	; (8002110 <FDCAN_CopyMessageToRAM+0xf4>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	001a      	movs	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4293      	cmp	r3, r2
 8002102:	d3d6      	bcc.n	80020b2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b008      	add	sp, #32
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	080068b0 	.word	0x080068b0

08002114 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603a      	str	r2, [r7, #0]
 8002120:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_FLASH_Program+0x94>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_FLASH_Program+0x1a>
 800212a:	2302      	movs	r3, #2
 800212c:	e038      	b.n	80021a0 <HAL_FLASH_Program+0x8c>
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_FLASH_Program+0x94>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_FLASH_Program+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800213a:	2517      	movs	r5, #23
 800213c:	197c      	adds	r4, r7, r5
 800213e:	23fa      	movs	r3, #250	; 0xfa
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f87a 	bl	800223c <FLASH_WaitForLastOperation>
 8002148:	0003      	movs	r3, r0
 800214a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800214c:	197b      	adds	r3, r7, r5
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11f      	bne.n	8002194 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	0008      	movs	r0, r1
 8002162:	f000 f8b9 	bl	80022d8 <FLASH_Program_DoubleWord>
 8002166:	e005      	b.n	8002174 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0011      	movs	r1, r2
 800216e:	0018      	movs	r0, r3
 8002170:	f004 fb46 	bl	8006800 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002174:	2317      	movs	r3, #23
 8002176:	18fc      	adds	r4, r7, r3
 8002178:	23fa      	movs	r3, #250	; 0xfa
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	0018      	movs	r0, r3
 800217e:	f000 f85d 	bl	800223c <FLASH_WaitForLastOperation>
 8002182:	0003      	movs	r3, r0
 8002184:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_FLASH_Program+0x98>)
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43d9      	mvns	r1, r3
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_FLASH_Program+0x98>)
 8002190:	400a      	ands	r2, r1
 8002192:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_FLASH_Program+0x94>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800219a:	2317      	movs	r3, #23
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	781b      	ldrb	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b006      	add	sp, #24
 80021a6:	bdb0      	pop	{r4, r5, r7, pc}
 80021a8:	20000228 	.word	0x20000228
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_FLASH_Unlock+0x3c>)
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da0c      	bge.n	80021de <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_FLASH_Unlock+0x3c>)
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_FLASH_Unlock+0x40>)
 80021c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_FLASH_Unlock+0x3c>)
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_FLASH_Unlock+0x44>)
 80021ce:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_FLASH_Unlock+0x3c>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da02      	bge.n	80021de <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	40022000 	.word	0x40022000
 80021f0:	45670123 	.word	0x45670123
 80021f4:	cdef89ab 	.word	0xcdef89ab

080021f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002204:	23fa      	movs	r3, #250	; 0xfa
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	0018      	movs	r0, r3
 800220a:	f000 f817 	bl	800223c <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_FLASH_Lock+0x40>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_FLASH_Lock+0x40>)
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0609      	lsls	r1, r1, #24
 8002218:	430a      	orrs	r2, r1
 800221a:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_FLASH_Lock+0x40>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da02      	bge.n	800222a <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	781b      	ldrb	r3, [r3, #0]
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40022000 	.word	0x40022000

0800223c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7fe fea8 	bl	8000f98 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800224c:	23c0      	movs	r3, #192	; 0xc0
 800224e:	029b      	lsls	r3, r3, #10
 8002250:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8002252:	e00c      	b.n	800226e <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3301      	adds	r3, #1
 8002258:	d009      	beq.n	800226e <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800225a:	f7fe fe9d 	bl	8000f98 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d801      	bhi.n	800226e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e028      	b.n	80022c0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <FLASH_WaitForLastOperation+0x8c>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4013      	ands	r3, r2
 8002276:	d1ed      	bne.n	8002254 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <FLASH_WaitForLastOperation+0x8c>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <FLASH_WaitForLastOperation+0x90>)
 800227e:	4013      	ands	r3, r2
 8002280:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <FLASH_WaitForLastOperation+0x8c>)
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <FLASH_WaitForLastOperation+0x94>)
 8002286:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d011      	beq.n	80022b2 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <FLASH_WaitForLastOperation+0x98>)
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e013      	b.n	80022c0 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3301      	adds	r3, #1
 800229c:	d009      	beq.n	80022b2 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800229e:	f7fe fe7b 	bl	8000f98 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d801      	bhi.n	80022b2 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e006      	b.n	80022c0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <FLASH_WaitForLastOperation+0x8c>)
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	02db      	lsls	r3, r3, #11
 80022ba:	4013      	ands	r3, r2
 80022bc:	d1ec      	bne.n	8002298 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b004      	add	sp, #16
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40022000 	.word	0x40022000
 80022cc:	0000c3fa 	.word	0x0000c3fa
 80022d0:	0008c3fb 	.word	0x0008c3fb
 80022d4:	20000228 	.word	0x20000228

080022d8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	603a      	str	r2, [r7, #0]
 80022e2:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <FLASH_Program_DoubleWord+0x3c>)
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <FLASH_Program_DoubleWord+0x3c>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80022f6:	f3bf 8f6f 	isb	sy
}
 80022fa:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	001c      	movs	r4, r3
 8002300:	2300      	movs	r3, #0
 8002302:	001d      	movs	r5, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3304      	adds	r3, #4
 8002308:	0022      	movs	r2, r4
 800230a:	601a      	str	r2, [r3, #0]
}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bdb0      	pop	{r4, r5, r7, pc}
 8002314:	40022000 	.word	0x40022000

08002318 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002322:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <HAL_FLASHEx_Erase+0xd8>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_FLASHEx_Erase+0x16>
 800232a:	2302      	movs	r3, #2
 800232c:	e05c      	b.n	80023e8 <HAL_FLASHEx_Erase+0xd0>
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_FLASHEx_Erase+0xd8>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_FLASHEx_Erase+0xd8>)
 8002336:	2200      	movs	r2, #0
 8002338:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800233a:	250f      	movs	r5, #15
 800233c:	197c      	adds	r4, r7, r5
 800233e:	23fa      	movs	r3, #250	; 0xfa
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	0018      	movs	r0, r3
 8002344:	f7ff ff7a 	bl	800223c <FLASH_WaitForLastOperation>
 8002348:	0003      	movs	r3, r0
 800234a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800234c:	002c      	movs	r4, r5
 800234e:	193b      	adds	r3, r7, r4
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d142      	bne.n	80023dc <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b04      	cmp	r3, #4
 800235c:	d10d      	bne.n	800237a <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0018      	movs	r0, r3
 8002364:	f000 f8aa 	bl	80024bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002368:	193c      	adds	r4, r7, r4
 800236a:	23fa      	movs	r3, #250	; 0xfa
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff ff64 	bl	800223c <FLASH_WaitForLastOperation>
 8002374:	0003      	movs	r3, r0
 8002376:	7023      	strb	r3, [r4, #0]
 8002378:	e030      	b.n	80023dc <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4252      	negs	r2, r2
 8002380:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	e01a      	b.n	80023c0 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f8a6 	bl	80024e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002398:	250f      	movs	r5, #15
 800239a:	197c      	adds	r4, r7, r5
 800239c:	23fa      	movs	r3, #250	; 0xfa
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff ff4b 	bl	800223c <FLASH_WaitForLastOperation>
 80023a6:	0003      	movs	r3, r0
 80023a8:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	601a      	str	r2, [r3, #0]
          break;
 80023b8:	e00a      	b.n	80023d0 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3301      	adds	r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	18d3      	adds	r3, r2, r3
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3dc      	bcc.n	800238a <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_FLASHEx_Erase+0xdc>)
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_FLASHEx_Erase+0xdc>)
 80023d6:	2102      	movs	r1, #2
 80023d8:	438a      	bics	r2, r1
 80023da:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_FLASHEx_Erase+0xd8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80023e2:	230f      	movs	r3, #15
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	20000228 	.word	0x20000228
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_FLASHEx_OBGetConfig>:
  *                  configuration information. The fields pOBInit->WRPArea should
  *                  indicate which area is requested for the WRP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	221f      	movs	r2, #31
 8002404:	601a      	str	r2, [r3, #0]

  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6858      	ldr	r0, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3308      	adds	r3, #8
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	330c      	adds	r3, #12
 8002414:	001a      	movs	r2, r3
 8002416:	f000 f891 	bl	800253c <FLASH_OB_GetWRP>

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800241a:	f000 f8db 	bl	80025d4 <FLASH_OB_GetRDP>
 800241e:	0002      	movs	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002424:	f000 f8ee 	bl	8002604 <FLASH_OB_GetUser>
 8002428:	0002      	movs	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
  pOBInit->USERType = OB_USER_ALL;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_FLASHEx_OBGetConfig+0xc0>)
 8002432:	615a      	str	r2, [r3, #20]

#if defined(FLASH_PCROP_SUPPORT)
  /* Get the Proprietary code readout protection */
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	331c      	adds	r3, #28
 8002438:	0018      	movs	r0, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3320      	adds	r3, #32
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3324      	adds	r3, #36	; 0x24
 8002444:	001a      	movs	r2, r3
 8002446:	f000 f8ef 	bl	8002628 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3328      	adds	r3, #40	; 0x28
 800244e:	001a      	movs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	332c      	adds	r3, #44	; 0x2c
 8002454:	0019      	movs	r1, r3
 8002456:	0010      	movs	r0, r2
 8002458:	f000 f97a 	bl	8002750 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2203      	movs	r2, #3
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	61da      	str	r2, [r3, #28]
#if defined(FLASH_DBANK_SUPPORT)
  FLASH_OB_GetPCROP2A(&(pOBInit->PCROP2AStartAddr), &(pOBInit->PCROP2AEndAddr));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	001a      	movs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3334      	adds	r3, #52	; 0x34
 8002472:	0019      	movs	r1, r3
 8002474:	0010      	movs	r0, r2
 8002476:	f000 f9ef 	bl	8002858 <FLASH_OB_GetPCROP2A>
  FLASH_OB_GetPCROP2B(&(pOBInit->PCROP2BStartAddr), &(pOBInit->PCROP2BEndAddr));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3338      	adds	r3, #56	; 0x38
 800247e:	001a      	movs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	333c      	adds	r3, #60	; 0x3c
 8002484:	0019      	movs	r1, r3
 8002486:	0010      	movs	r0, r2
 8002488:	f000 fa52 	bl	8002930 <FLASH_OB_GetPCROP2B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE2_A | OB_PCROP_ZONE2_B);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	220c      	movs	r2, #12
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	61da      	str	r2, [r3, #28]
#endif /* FLASH_PCROP_SUPPORT */

#if defined(FLASH_SECURABLE_MEMORY_SUPPORT)
#if defined(FLASH_DBANK_SUPPORT)
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize), &(pOBInit->SecSize2));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3340      	adds	r3, #64	; 0x40
 800249c:	0018      	movs	r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3344      	adds	r3, #68	; 0x44
 80024a2:	0019      	movs	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3348      	adds	r3, #72	; 0x48
 80024a8:	001a      	movs	r2, r3
 80024aa:	f000 faad 	bl	8002a08 <FLASH_OB_GetSecMem>
#else
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
#endif /* FLASH_DBANK_SUPPORT */
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	3f7fff00 	.word	0x3f7fff00

080024bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <FLASH_MassErase+0x24>)
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <FLASH_MassErase+0x24>)
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	0249      	lsls	r1, r1, #9
 80024d2:	430a      	orrs	r2, r1
 80024d4:	615a      	str	r2, [r3, #20]
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b002      	add	sp, #8
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40022000 	.word	0x40022000

080024e4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <FLASH_PageErase+0x48>)
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <FLASH_PageErase+0x4c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d005      	beq.n	800250a <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	0192      	lsls	r2, r2, #6
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e003      	b.n	8002512 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <FLASH_PageErase+0x50>)
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	00da      	lsls	r2, r3, #3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	431a      	orrs	r2, r3
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <FLASH_PageErase+0x48>)
 800251c:	4906      	ldr	r1, [pc, #24]	; (8002538 <FLASH_PageErase+0x54>)
 800251e:	430a      	orrs	r2, r1
 8002520:	615a      	str	r2, [r3, #20]
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40022000 	.word	0x40022000
 8002530:	ffffe007 	.word	0xffffe007
 8002534:	ffffdfff 	.word	0xffffdfff
 8002538:	00010002 	.word	0x00010002

0800253c <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset  Dpecifies the address where to copied the end page of
  *                        the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10d      	bne.n	800256a <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	227f      	movs	r2, #127	; 0x7f
 8002554:	401a      	ands	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	0c1b      	lsrs	r3, r3, #16
 8002560:	227f      	movs	r2, #127	; 0x7f
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	601a      	str	r2, [r3, #0]
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 8002568:	e02e      	b.n	80025c8 <FLASH_OB_GetWRP+0x8c>
  else if (WRPArea == OB_WRPAREA_ZONE2_A)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d10d      	bne.n	800258c <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	227f      	movs	r2, #127	; 0x7f
 8002576:	401a      	ands	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	227f      	movs	r2, #127	; 0x7f
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	e01d      	b.n	80025c8 <FLASH_OB_GetWRP+0x8c>
  else if (WRPArea == OB_WRPAREA_ZONE2_B)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b08      	cmp	r3, #8
 8002590:	d10d      	bne.n	80025ae <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	227f      	movs	r2, #127	; 0x7f
 8002598:	401a      	ands	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	227f      	movs	r2, #127	; 0x7f
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	e00c      	b.n	80025c8 <FLASH_OB_GetWRP+0x8c>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	227f      	movs	r2, #127	; 0x7f
 80025b4:	401a      	ands	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <FLASH_OB_GetWRP+0x94>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	227f      	movs	r2, #127	; 0x7f
 80025c2:	401a      	ands	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40022000 	.word	0x40022000

080025d4 <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <FLASH_OB_GetRDP+0x2c>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	4013      	ands	r3, r2
 80025e2:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2baa      	cmp	r3, #170	; 0xaa
 80025e8:	d004      	beq.n	80025f4 <FLASH_OB_GetRDP+0x20>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2bcc      	cmp	r3, #204	; 0xcc
 80025ee:	d001      	beq.n	80025f4 <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 80025f0:	23bb      	movs	r3, #187	; 0xbb
 80025f2:	e000      	b.n	80025f6 <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 80025f4:	687b      	ldr	r3, [r7, #4]
  }
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40022000 	.word	0x40022000

08002604 <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_nBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <FLASH_OB_GetUser+0x1c>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <FLASH_OB_GetUser+0x20>)
 8002610:	4013      	ands	r3, r2
 8002612:	607b      	str	r3, [r7, #4]
  return user;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	40022000 	.word	0x40022000
 8002624:	3f7fff00 	.word	0x3f7fff00

08002628 <FLASH_OB_GetPCROP1A>:
  * @param  PCROP1AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t pcrop;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <FLASH_OB_GetPCROP1A+0x108>)
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	035b      	lsls	r3, r3, #13
 800263c:	401a      	ands	r2, r3
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	035b      	lsls	r3, r3, #13
 8002642:	429a      	cmp	r2, r3
 8002644:	d03f      	beq.n	80026c6 <FLASH_OB_GetPCROP1A+0x9e>
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <FLASH_OB_GetPCROP1A+0x10c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	23c0      	movs	r3, #192	; 0xc0
 800264c:	049b      	lsls	r3, r3, #18
 800264e:	4013      	ands	r3, r2
 8002650:	d039      	beq.n	80026c6 <FLASH_OB_GetPCROP1A+0x9e>
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <FLASH_OB_GetPCROP1A+0x10c>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	23c0      	movs	r3, #192	; 0xc0
 8002658:	049b      	lsls	r3, r3, #18
 800265a:	401a      	ands	r2, r3
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	045b      	lsls	r3, r3, #17
 8002660:	429a      	cmp	r2, r3
 8002662:	d105      	bne.n	8002670 <FLASH_OB_GetPCROP1A+0x48>
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <FLASH_OB_GetPCROP1A+0x110>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	039b      	lsls	r3, r3, #14
 800266c:	4013      	ands	r3, r2
 800266e:	d02a      	beq.n	80026c6 <FLASH_OB_GetPCROP1A+0x9e>
  {
    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 8002670:	4b30      	ldr	r3, [pc, #192]	; (8002734 <FLASH_OB_GetPCROP1A+0x10c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	23c0      	movs	r3, #192	; 0xc0
 8002676:	049b      	lsls	r3, r3, #18
 8002678:	4013      	ands	r3, r2
 800267a:	d00e      	beq.n	800269a <FLASH_OB_GetPCROP1A+0x72>
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <FLASH_OB_GetPCROP1A+0x10c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	049b      	lsls	r3, r3, #18
 8002684:	401a      	ands	r2, r3
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	045b      	lsls	r3, r3, #17
 800268a:	429a      	cmp	r2, r3
 800268c:	d10f      	bne.n	80026ae <FLASH_OB_GetPCROP1A+0x86>
 800268e:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <FLASH_OB_GetPCROP1A+0x110>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	039b      	lsls	r3, r3, #14
 8002696:	4013      	ands	r3, r2
 8002698:	d109      	bne.n	80026ae <FLASH_OB_GetPCROP1A+0x86>
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <FLASH_OB_GetPCROP1A+0x114>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	029b      	lsls	r3, r3, #10
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <FLASH_OB_GetPCROP1A+0x118>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	0512      	lsls	r2, r2, #20
 80026a8:	4694      	mov	ip, r2
 80026aa:	4463      	add	r3, ip
 80026ac:	e009      	b.n	80026c2 <FLASH_OB_GetPCROP1A+0x9a>
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <FLASH_OB_GetPCROP1A+0x114>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <FLASH_OB_GetPCROP1A+0x11c>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	0512      	lsls	r2, r2, #20
 80026be:	4694      	mov	ip, r2
 80026c0:	4463      	add	r3, ip
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e002      	b.n	80026cc <FLASH_OB_GetPCROP1A+0xa4>
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	051b      	lsls	r3, r3, #20
 80026ca:	617b      	str	r3, [r7, #20]
  }

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <FLASH_OB_GetPCROP1A+0x108>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	0ddb      	lsrs	r3, r3, #23
 80026d4:	613b      	str	r3, [r7, #16]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	025a      	lsls	r2, r3, #9
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	601a      	str	r2, [r3, #0]
  *PCROP1AStartAddr += ropbase;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	18d2      	adds	r2, r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	601a      	str	r2, [r3, #0]

  pcrop = FLASH->PCROP1AER;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <FLASH_OB_GetPCROP1A+0x108>)
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	613b      	str	r3, [r7, #16]
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	025b      	lsls	r3, r3, #9
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <FLASH_OB_GetPCROP1A+0x120>)
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	601a      	str	r2, [r3, #0]
  *PCROP1AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	18d3      	adds	r3, r2, r3
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <FLASH_OB_GetPCROP1A+0x124>)
 8002706:	189a      	adds	r2, r3, r2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]

  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	085a      	lsrs	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	0fdb      	lsrs	r3, r3, #31
 8002720:	07db      	lsls	r3, r3, #31
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b006      	add	sp, #24
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40022000 	.word	0x40022000
 8002734:	1fff7500 	.word	0x1fff7500
 8002738:	40022020 	.word	0x40022020
 800273c:	1fff75e0 	.word	0x1fff75e0
 8002740:	000ffc00 	.word	0x000ffc00
 8002744:	0007fe00 	.word	0x0007fe00
 8002748:	0003fe00 	.word	0x0003fe00
 800274c:	000001ff 	.word	0x000001ff

08002750 <FLASH_OB_GetPCROP1B>:
  * @param  PCROP1BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <FLASH_OB_GetPCROP1B+0xec>)
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	035b      	lsls	r3, r3, #13
 8002762:	401a      	ands	r2, r3
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	035b      	lsls	r3, r3, #13
 8002768:	429a      	cmp	r2, r3
 800276a:	d03f      	beq.n	80027ec <FLASH_OB_GetPCROP1B+0x9c>
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <FLASH_OB_GetPCROP1B+0xf0>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	049b      	lsls	r3, r3, #18
 8002774:	4013      	ands	r3, r2
 8002776:	d039      	beq.n	80027ec <FLASH_OB_GetPCROP1B+0x9c>
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <FLASH_OB_GetPCROP1B+0xf0>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	049b      	lsls	r3, r3, #18
 8002780:	401a      	ands	r2, r3
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	045b      	lsls	r3, r3, #17
 8002786:	429a      	cmp	r2, r3
 8002788:	d105      	bne.n	8002796 <FLASH_OB_GetPCROP1B+0x46>
 800278a:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <FLASH_OB_GetPCROP1B+0xf4>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	039b      	lsls	r3, r3, #14
 8002792:	4013      	ands	r3, r2
 8002794:	d02a      	beq.n	80027ec <FLASH_OB_GetPCROP1B+0x9c>
  {
    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <FLASH_OB_GetPCROP1B+0xf0>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	049b      	lsls	r3, r3, #18
 800279e:	4013      	ands	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <FLASH_OB_GetPCROP1B+0x70>
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <FLASH_OB_GetPCROP1B+0xf0>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	23c0      	movs	r3, #192	; 0xc0
 80027a8:	049b      	lsls	r3, r3, #18
 80027aa:	401a      	ands	r2, r3
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	045b      	lsls	r3, r3, #17
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10f      	bne.n	80027d4 <FLASH_OB_GetPCROP1B+0x84>
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <FLASH_OB_GetPCROP1B+0xf4>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	039b      	lsls	r3, r3, #14
 80027bc:	4013      	ands	r3, r2
 80027be:	d109      	bne.n	80027d4 <FLASH_OB_GetPCROP1B+0x84>
 80027c0:	4b21      	ldr	r3, [pc, #132]	; (8002848 <FLASH_OB_GetPCROP1B+0xf8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	029b      	lsls	r3, r3, #10
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <FLASH_OB_GetPCROP1B+0xfc>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	2280      	movs	r2, #128	; 0x80
 80027cc:	0512      	lsls	r2, r2, #20
 80027ce:	4694      	mov	ip, r2
 80027d0:	4463      	add	r3, ip
 80027d2:	e009      	b.n	80027e8 <FLASH_OB_GetPCROP1B+0x98>
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <FLASH_OB_GetPCROP1B+0xf8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <FLASH_OB_GetPCROP1B+0x100>)
 80027de:	4013      	ands	r3, r2
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0512      	lsls	r2, r2, #20
 80027e4:	4694      	mov	ip, r2
 80027e6:	4463      	add	r3, ip
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e002      	b.n	80027f2 <FLASH_OB_GetPCROP1B+0xa2>
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	051b      	lsls	r3, r3, #20
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <FLASH_OB_GetPCROP1B+0xec>)
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	05db      	lsls	r3, r3, #23
 80027f8:	0ddb      	lsrs	r3, r3, #23
 80027fa:	60bb      	str	r3, [r7, #8]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	025a      	lsls	r2, r3, #9
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
  *PCROP1BStartAddr += ropbase;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	18d2      	adds	r2, r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <FLASH_OB_GetPCROP1B+0xec>)
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	0ddb      	lsrs	r3, r3, #23
 8002818:	60bb      	str	r3, [r7, #8]
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	025a      	lsls	r2, r3, #9
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	601a      	str	r2, [r3, #0]
  *PCROP1BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <FLASH_OB_GetPCROP1B+0x104>)
 800282c:	189a      	adds	r2, r3, r2
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	601a      	str	r2, [r3, #0]
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	40022000 	.word	0x40022000
 8002840:	1fff7500 	.word	0x1fff7500
 8002844:	40022020 	.word	0x40022020
 8002848:	1fff75e0 	.word	0x1fff75e0
 800284c:	000ffc00 	.word	0x000ffc00
 8002850:	0007fe00 	.word	0x0007fe00
 8002854:	000001ff 	.word	0x000001ff

08002858 <FLASH_OB_GetPCROP2A>:
  * @param  PCROP2AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 2A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP2A(uint32_t *PCROP2AStartAddr, uint32_t *PCROP2AEndAddr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <FLASH_OB_GetPCROP2A+0xbc>)
 8002864:	6a1a      	ldr	r2, [r3, #32]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	035b      	lsls	r3, r3, #13
 800286a:	4013      	ands	r3, r2
 800286c:	d02a      	beq.n	80028c4 <FLASH_OB_GetPCROP2A+0x6c>
  {
    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 800286e:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <FLASH_OB_GetPCROP2A+0xc0>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	049b      	lsls	r3, r3, #18
 8002876:	4013      	ands	r3, r2
 8002878:	d00e      	beq.n	8002898 <FLASH_OB_GetPCROP2A+0x40>
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <FLASH_OB_GetPCROP2A+0xc0>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	049b      	lsls	r3, r3, #18
 8002882:	401a      	ands	r2, r3
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	045b      	lsls	r3, r3, #17
 8002888:	429a      	cmp	r2, r3
 800288a:	d10f      	bne.n	80028ac <FLASH_OB_GetPCROP2A+0x54>
 800288c:	4b23      	ldr	r3, [pc, #140]	; (800291c <FLASH_OB_GetPCROP2A+0xc4>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	039b      	lsls	r3, r3, #14
 8002894:	4013      	ands	r3, r2
 8002896:	d109      	bne.n	80028ac <FLASH_OB_GetPCROP2A+0x54>
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <FLASH_OB_GetPCROP2A+0xc8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	029b      	lsls	r3, r3, #10
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <FLASH_OB_GetPCROP2A+0xcc>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0512      	lsls	r2, r2, #20
 80028a6:	4694      	mov	ip, r2
 80028a8:	4463      	add	r3, ip
 80028aa:	e009      	b.n	80028c0 <FLASH_OB_GetPCROP2A+0x68>
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <FLASH_OB_GetPCROP2A+0xc8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	029b      	lsls	r3, r3, #10
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <FLASH_OB_GetPCROP2A+0xd0>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0512      	lsls	r2, r2, #20
 80028bc:	4694      	mov	ip, r2
 80028be:	4463      	add	r3, ip
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e002      	b.n	80028ca <FLASH_OB_GetPCROP2A+0x72>
  }
  else
  {
    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	051b      	lsls	r3, r3, #20
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP2ASR & FLASH_PCROP2ASR_PCROP2A_STRT);
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <FLASH_OB_GetPCROP2A+0xbc>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	0ddb      	lsrs	r3, r3, #23
 80028d2:	60bb      	str	r3, [r7, #8]
  *PCROP2AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	025a      	lsls	r2, r3, #9
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	601a      	str	r2, [r3, #0]
  *PCROP2AStartAddr += ropbase;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	18d2      	adds	r2, r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP2AER & FLASH_PCROP2AER_PCROP2A_END);
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <FLASH_OB_GetPCROP2A+0xbc>)
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	05db      	lsls	r3, r3, #23
 80028ee:	0ddb      	lsrs	r3, r3, #23
 80028f0:	60bb      	str	r3, [r7, #8]
  *PCROP2AEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	025a      	lsls	r2, r3, #9
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	601a      	str	r2, [r3, #0]
  *PCROP2AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <FLASH_OB_GetPCROP2A+0xd4>)
 8002904:	189a      	adds	r2, r3, r2
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	40022000 	.word	0x40022000
 8002918:	1fff7500 	.word	0x1fff7500
 800291c:	40022020 	.word	0x40022020
 8002920:	1fff75e0 	.word	0x1fff75e0
 8002924:	000ffc00 	.word	0x000ffc00
 8002928:	0007fe00 	.word	0x0007fe00
 800292c:	000001ff 	.word	0x000001ff

08002930 <FLASH_OB_GetPCROP2B>:
  * @param  PCROP2BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 2B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP2B(uint32_t *PCROP2BStartAddr, uint32_t *PCROP2BEndAddr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <FLASH_OB_GetPCROP2B+0xbc>)
 800293c:	6a1a      	ldr	r2, [r3, #32]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	035b      	lsls	r3, r3, #13
 8002942:	4013      	ands	r3, r2
 8002944:	d02a      	beq.n	800299c <FLASH_OB_GetPCROP2B+0x6c>
  {
    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <FLASH_OB_GetPCROP2B+0xc0>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	23c0      	movs	r3, #192	; 0xc0
 800294c:	049b      	lsls	r3, r3, #18
 800294e:	4013      	ands	r3, r2
 8002950:	d00e      	beq.n	8002970 <FLASH_OB_GetPCROP2B+0x40>
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <FLASH_OB_GetPCROP2B+0xc0>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	23c0      	movs	r3, #192	; 0xc0
 8002958:	049b      	lsls	r3, r3, #18
 800295a:	401a      	ands	r2, r3
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	045b      	lsls	r3, r3, #17
 8002960:	429a      	cmp	r2, r3
 8002962:	d10f      	bne.n	8002984 <FLASH_OB_GetPCROP2B+0x54>
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <FLASH_OB_GetPCROP2B+0xc4>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	039b      	lsls	r3, r3, #14
 800296c:	4013      	ands	r3, r2
 800296e:	d109      	bne.n	8002984 <FLASH_OB_GetPCROP2B+0x54>
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <FLASH_OB_GetPCROP2B+0xc8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	029b      	lsls	r3, r3, #10
 8002976:	4a21      	ldr	r2, [pc, #132]	; (80029fc <FLASH_OB_GetPCROP2B+0xcc>)
 8002978:	4013      	ands	r3, r2
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	0512      	lsls	r2, r2, #20
 800297e:	4694      	mov	ip, r2
 8002980:	4463      	add	r3, ip
 8002982:	e009      	b.n	8002998 <FLASH_OB_GetPCROP2B+0x68>
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <FLASH_OB_GetPCROP2B+0xc8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <FLASH_OB_GetPCROP2B+0xd0>)
 800298e:	4013      	ands	r3, r2
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	0512      	lsls	r2, r2, #20
 8002994:	4694      	mov	ip, r2
 8002996:	4463      	add	r3, ip
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e002      	b.n	80029a2 <FLASH_OB_GetPCROP2B+0x72>
  }
  else
  {
    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	051b      	lsls	r3, r3, #20
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP2BSR & FLASH_PCROP2BSR_PCROP2B_STRT);
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <FLASH_OB_GetPCROP2B+0xbc>)
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	0ddb      	lsrs	r3, r3, #23
 80029aa:	60bb      	str	r3, [r7, #8]
  *PCROP2BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	025a      	lsls	r2, r3, #9
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	601a      	str	r2, [r3, #0]
  *PCROP2BStartAddr += ropbase;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	18d2      	adds	r2, r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP2BER & FLASH_PCROP2BER_PCROP2B_END);
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <FLASH_OB_GetPCROP2B+0xbc>)
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	0ddb      	lsrs	r3, r3, #23
 80029c8:	60bb      	str	r3, [r7, #8]
  *PCROP2BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	025a      	lsls	r2, r3, #9
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
  *PCROP2BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <FLASH_OB_GetPCROP2B+0xd4>)
 80029dc:	189a      	adds	r2, r3, r2
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b004      	add	sp, #16
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	40022000 	.word	0x40022000
 80029f0:	1fff7500 	.word	0x1fff7500
 80029f4:	40022020 	.word	0x40022020
 80029f8:	1fff75e0 	.word	0x1fff75e0
 80029fc:	000ffc00 	.word	0x000ffc00
 8002a00:	0007fe00 	.word	0x0007fe00
 8002a04:	000001ff 	.word	0x000001ff

08002a08 <FLASH_OB_GetSecMem>:
  * @param  SecSize2 specifies number of pages to protect as secure memory area, starting from
  *         beginning of Bank2 (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize, uint32_t *SecSize2)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t secmem = FLASH->SECR;
 8002a14:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <FLASH_OB_GetSecMem+0x40>)
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	58d3      	ldr	r3, [r2, r3]
 8002a1a:	617b      	str	r3, [r7, #20]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	2380      	movs	r3, #128	; 0x80
 8002a20:	025b      	lsls	r3, r3, #9
 8002a22:	401a      	ands	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	22ff      	movs	r2, #255	; 0xff
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	601a      	str	r2, [r3, #0]
  *SecSize2 = (secmem & FLASH_SECR_SEC_SIZE2) >> FLASH_SECR_SEC_SIZE2_Pos;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	0d1b      	lsrs	r3, r3, #20
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	401a      	ands	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40022000 	.word	0x40022000

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5a:	e14d      	b.n	8002cf8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4091      	lsls	r1, r2
 8002a66:	000a      	movs	r2, r1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d100      	bne.n	8002a74 <HAL_GPIO_Init+0x28>
 8002a72:	e13e      	b.n	8002cf2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <HAL_GPIO_Init+0x40>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2203      	movs	r2, #3
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d130      	bne.n	8002aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	0013      	movs	r3, r2
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	0013      	movs	r3, r2
 8002aca:	43da      	mvns	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	2201      	movs	r2, #1
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
 8002ae0:	0013      	movs	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2203      	movs	r2, #3
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d017      	beq.n	8002b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	409a      	lsls	r2, r3
 8002b08:	0013      	movs	r3, r2
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d123      	bne.n	8002b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	58d3      	ldr	r3, [r2, r3]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2207      	movs	r2, #7
 8002b48:	4013      	ands	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	43da      	mvns	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2107      	movs	r1, #7
 8002b62:	400b      	ands	r3, r1
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	0092      	lsls	r2, r2, #2
 8002b7a:	6939      	ldr	r1, [r7, #16]
 8002b7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	0013      	movs	r3, r2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	23c0      	movs	r3, #192	; 0xc0
 8002bb8:	029b      	lsls	r3, r3, #10
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d100      	bne.n	8002bc0 <HAL_GPIO_Init+0x174>
 8002bbe:	e098      	b.n	8002cf2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002bc0:	4a53      	ldr	r2, [pc, #332]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3318      	adds	r3, #24
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	589b      	ldr	r3, [r3, r2]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	0013      	movs	r3, r2
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	23a0      	movs	r3, #160	; 0xa0
 8002be8:	05db      	lsls	r3, r3, #23
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x1d6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a48      	ldr	r2, [pc, #288]	; (8002d14 <HAL_GPIO_Init+0x2c8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x1d2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a47      	ldr	r2, [pc, #284]	; (8002d18 <HAL_GPIO_Init+0x2cc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x1ce>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a46      	ldr	r2, [pc, #280]	; (8002d1c <HAL_GPIO_Init+0x2d0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x1ca>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a45      	ldr	r2, [pc, #276]	; (8002d20 <HAL_GPIO_Init+0x2d4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x1c6>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x1d8>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x1d8>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x1d8>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x1d8>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x1d8>
 8002c22:	2300      	movs	r3, #0
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	2103      	movs	r1, #3
 8002c28:	400a      	ands	r2, r1
 8002c2a:	00d2      	lsls	r2, r2, #3
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c34:	4936      	ldr	r1, [pc, #216]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3318      	adds	r3, #24
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	035b      	lsls	r3, r3, #13
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	039b      	lsls	r3, r3, #14
 8002c84:	4013      	ands	r3, r2
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c96:	4a1e      	ldr	r2, [pc, #120]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002c98:	2384      	movs	r3, #132	; 0x84
 8002c9a:	58d3      	ldr	r3, [r2, r3]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cbc:	4914      	ldr	r1, [pc, #80]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002cbe:	2284      	movs	r2, #132	; 0x84
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	58d3      	ldr	r3, [r2, r3]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cea:	4909      	ldr	r1, [pc, #36]	; (8002d10 <HAL_GPIO_Init+0x2c4>)
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	40da      	lsrs	r2, r3
 8002d00:	1e13      	subs	r3, r2, #0
 8002d02:	d000      	beq.n	8002d06 <HAL_GPIO_Init+0x2ba>
 8002d04:	e6aa      	b.n	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b006      	add	sp, #24
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021800 	.word	0x40021800
 8002d14:	50000400 	.word	0x50000400
 8002d18:	50000800 	.word	0x50000800
 8002d1c:	50000c00 	.word	0x50000c00
 8002d20:	50001000 	.word	0x50001000

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	0008      	movs	r0, r1
 8002d2e:	0011      	movs	r1, r2
 8002d30:	1cbb      	adds	r3, r7, #2
 8002d32:	1c02      	adds	r2, r0, #0
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	1c7b      	adds	r3, r7, #1
 8002d38:	1c0a      	adds	r2, r1, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d3c:	1c7b      	adds	r3, r7, #1
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d44:	1cbb      	adds	r3, r7, #2
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d4e:	1cbb      	adds	r3, r7, #2
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d11f      	bne.n	8002dc4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	0013      	movs	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	189b      	adds	r3, r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4912      	ldr	r1, [pc, #72]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fd f9b8 	bl	8000108 <__udivsi3>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9e:	e008      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e001      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e009      	b.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d0ed      	beq.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b004      	add	sp, #16
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	fffff9ff 	.word	0xfffff9ff
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	000f4240 	.word	0x000f4240

08002de0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	23e0      	movs	r3, #224	; 0xe0
 8002dea:	01db      	lsls	r3, r3, #7
 8002dec:	4013      	ands	r3, r2
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002dfe:	f7fe f8cb 	bl	8000f98 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0049      	lsls	r1, r1, #1
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fe f8bf 	bl	8000f98 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e054      	b.n	8002ed2 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4013      	ands	r3, r2
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8002e34:	4b29      	ldr	r3, [pc, #164]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	01d2      	lsls	r2, r2, #7
 8002e3a:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e3c:	f7fe f8ac 	bl	8000f98 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002e4a:	e009      	b.n	8002e60 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe f8a4 	bl	8000f98 <HAL_GetTick>
 8002e50:	0002      	movs	r2, r0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <HAL_RCC_DeInit+0xe8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e038      	b.n	8002ed2 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2238      	movs	r2, #56	; 0x38
 8002e66:	4013      	ands	r3, r2
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	0052      	lsls	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	0052      	lsls	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e7a:	f7fe f88d 	bl	8000f98 <HAL_GetTick>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe f888 	bl	8000f98 <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e01d      	b.n	8002ed2 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	049b      	lsls	r3, r3, #18
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	0152      	lsls	r2, r2, #5
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCC_DeInit+0xe4>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4252      	negs	r2, r2
 8002eb6:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_DeInit+0xec>)
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <HAL_RCC_DeInit+0xf0>)
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_DeInit+0xf4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7fe f80c 	bl	8000ee0 <HAL_InitTick>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
  }
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	00001388 	.word	0x00001388
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f000 fb50 	bl	80035a4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d100      	bne.n	8002f10 <HAL_RCC_OscConfig+0x20>
 8002f0e:	e07c      	b.n	800300a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f10:	4bc3      	ldr	r3, [pc, #780]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2238      	movs	r2, #56	; 0x38
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f1a:	4bc1      	ldr	r3, [pc, #772]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	4013      	ands	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_OscConfig+0x40>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d002      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	4bba      	ldr	r3, [pc, #744]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	029b      	lsls	r3, r3, #10
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d062      	beq.n	8003008 <HAL_RCC_OscConfig+0x118>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d15e      	bne.n	8003008 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e32a      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	025b      	lsls	r3, r3, #9
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_OscConfig+0x7a>
 8002f5a:	4bb1      	ldr	r3, [pc, #708]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4bb0      	ldr	r3, [pc, #704]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	0249      	lsls	r1, r1, #9
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e020      	b.n	8002fac <HAL_RCC_OscConfig+0xbc>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	23a0      	movs	r3, #160	; 0xa0
 8002f70:	02db      	lsls	r3, r3, #11
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d10e      	bne.n	8002f94 <HAL_RCC_OscConfig+0xa4>
 8002f76:	4baa      	ldr	r3, [pc, #680]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4ba9      	ldr	r3, [pc, #676]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	02c9      	lsls	r1, r1, #11
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	4ba6      	ldr	r3, [pc, #664]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4ba5      	ldr	r3, [pc, #660]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	0249      	lsls	r1, r1, #9
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xbc>
 8002f94:	4ba2      	ldr	r3, [pc, #648]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4ba1      	ldr	r3, [pc, #644]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002f9a:	49a2      	ldr	r1, [pc, #648]	; (8003224 <HAL_RCC_OscConfig+0x334>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	4b9f      	ldr	r3, [pc, #636]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b9e      	ldr	r3, [pc, #632]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002fa6:	49a0      	ldr	r1, [pc, #640]	; (8003228 <HAL_RCC_OscConfig+0x338>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d014      	beq.n	8002fde <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fff0 	bl	8000f98 <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbe:	f7fd ffeb 	bl	8000f98 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b64      	cmp	r3, #100	; 0x64
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e2e9      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd0:	4b93      	ldr	r3, [pc, #588]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	029b      	lsls	r3, r3, #10
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0xce>
 8002fdc:	e015      	b.n	800300a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fd ffdb 	bl	8000f98 <HAL_GetTick>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fd ffd6 	bl	8000f98 <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e2d4      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffa:	4b89      	ldr	r3, [pc, #548]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	029b      	lsls	r3, r3, #10
 8003002:	4013      	ands	r3, r2
 8003004:	d1f0      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xf8>
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2202      	movs	r2, #2
 8003010:	4013      	ands	r3, r2
 8003012:	d100      	bne.n	8003016 <HAL_RCC_OscConfig+0x126>
 8003014:	e099      	b.n	800314a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003016:	4b82      	ldr	r3, [pc, #520]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2238      	movs	r2, #56	; 0x38
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003020:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2203      	movs	r2, #3
 8003026:	4013      	ands	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b10      	cmp	r3, #16
 800302e:	d102      	bne.n	8003036 <HAL_RCC_OscConfig+0x146>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d002      	beq.n	800303c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d135      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303c:	4b78      	ldr	r3, [pc, #480]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4013      	ands	r3, r2
 8003046:	d005      	beq.n	8003054 <HAL_RCC_OscConfig+0x164>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e2a7      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b72      	ldr	r3, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a74      	ldr	r2, [pc, #464]	; (800322c <HAL_RCC_OscConfig+0x33c>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	021a      	lsls	r2, r3, #8
 8003064:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d112      	bne.n	8003096 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003070:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x340>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	4b68      	ldr	r3, [pc, #416]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003084:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0adb      	lsrs	r3, r3, #11
 800308a:	2207      	movs	r2, #7
 800308c:	4013      	ands	r3, r2
 800308e:	4a69      	ldr	r2, [pc, #420]	; (8003234 <HAL_RCC_OscConfig+0x344>)
 8003090:	40da      	lsrs	r2, r3
 8003092:	4b69      	ldr	r3, [pc, #420]	; (8003238 <HAL_RCC_OscConfig+0x348>)
 8003094:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003096:	4b69      	ldr	r3, [pc, #420]	; (800323c <HAL_RCC_OscConfig+0x34c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0018      	movs	r0, r3
 800309c:	f7fd ff20 	bl	8000ee0 <HAL_InitTick>
 80030a0:	1e03      	subs	r3, r0, #0
 80030a2:	d051      	beq.n	8003148 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e27d      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d030      	beq.n	8003112 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030b0:	4b5b      	ldr	r3, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5e      	ldr	r2, [pc, #376]	; (8003230 <HAL_RCC_OscConfig+0x340>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	4b58      	ldr	r3, [pc, #352]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80030c4:	4b56      	ldr	r3, [pc, #344]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80030ca:	2180      	movs	r1, #128	; 0x80
 80030cc:	0049      	lsls	r1, r1, #1
 80030ce:	430a      	orrs	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fd ff61 	bl	8000f98 <HAL_GetTick>
 80030d6:	0003      	movs	r3, r0
 80030d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030dc:	f7fd ff5c 	bl	8000f98 <HAL_GetTick>
 80030e0:	0002      	movs	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e25a      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ee:	4b4c      	ldr	r3, [pc, #304]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4013      	ands	r3, r2
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a4b      	ldr	r2, [pc, #300]	; (800322c <HAL_RCC_OscConfig+0x33c>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	4b45      	ldr	r3, [pc, #276]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e01b      	b.n	800314a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b42      	ldr	r3, [pc, #264]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003118:	4949      	ldr	r1, [pc, #292]	; (8003240 <HAL_RCC_OscConfig+0x350>)
 800311a:	400a      	ands	r2, r1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fd ff3b 	bl	8000f98 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7fd ff36 	bl	8000f98 <HAL_GetTick>
 800312c:	0002      	movs	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e234      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4013      	ands	r3, r2
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x238>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2208      	movs	r2, #8
 8003150:	4013      	ands	r3, r2
 8003152:	d047      	beq.n	80031e4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2238      	movs	r2, #56	; 0x38
 800315a:	4013      	ands	r3, r2
 800315c:	2b18      	cmp	r3, #24
 800315e:	d10a      	bne.n	8003176 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003160:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d03c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x2f4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d138      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e216      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d019      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003184:	2101      	movs	r1, #1
 8003186:	430a      	orrs	r2, r1
 8003188:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fd ff05 	bl	8000f98 <HAL_GetTick>
 800318e:	0003      	movs	r3, r0
 8003190:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7fd ff00 	bl	8000f98 <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1fe      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a6:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	2202      	movs	r2, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	d0f1      	beq.n	8003194 <HAL_RCC_OscConfig+0x2a4>
 80031b0:	e018      	b.n	80031e4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80031b2:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80031b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80031b8:	2101      	movs	r1, #1
 80031ba:	438a      	bics	r2, r1
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd feeb 	bl	8000f98 <HAL_GetTick>
 80031c2:	0003      	movs	r3, r0
 80031c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c8:	f7fd fee6 	bl	8000f98 <HAL_GetTick>
 80031cc:	0002      	movs	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1e4      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031da:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d1f1      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2204      	movs	r2, #4
 80031ea:	4013      	ands	r3, r2
 80031ec:	d100      	bne.n	80031f0 <HAL_RCC_OscConfig+0x300>
 80031ee:	e0c7      	b.n	8003380 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f0:	231f      	movs	r3, #31
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2238      	movs	r2, #56	; 0x38
 80031fe:	4013      	ands	r3, r2
 8003200:	2b20      	cmp	r3, #32
 8003202:	d11f      	bne.n	8003244 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x330>)
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2202      	movs	r2, #2
 800320a:	4013      	ands	r3, r2
 800320c:	d100      	bne.n	8003210 <HAL_RCC_OscConfig+0x320>
 800320e:	e0b7      	b.n	8003380 <HAL_RCC_OscConfig+0x490>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d000      	beq.n	800321a <HAL_RCC_OscConfig+0x32a>
 8003218:	e0b2      	b.n	8003380 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1c2      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	40021000 	.word	0x40021000
 8003224:	fffeffff 	.word	0xfffeffff
 8003228:	fffbffff 	.word	0xfffbffff
 800322c:	ffff80ff 	.word	0xffff80ff
 8003230:	ffffc7ff 	.word	0xffffc7ff
 8003234:	00f42400 	.word	0x00f42400
 8003238:	20000000 	.word	0x20000000
 800323c:	20000004 	.word	0x20000004
 8003240:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003244:	4bb5      	ldr	r3, [pc, #724]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	055b      	lsls	r3, r3, #21
 800324c:	4013      	ands	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_RCC_OscConfig+0x364>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0x366>
 8003254:	2300      	movs	r3, #0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4bb0      	ldr	r3, [pc, #704]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	4baf      	ldr	r3, [pc, #700]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0549      	lsls	r1, r1, #21
 8003264:	430a      	orrs	r2, r1
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c
 8003268:	4bac      	ldr	r3, [pc, #688]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800326a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	055b      	lsls	r3, r3, #21
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003276:	231f      	movs	r3, #31
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327e:	4ba8      	ldr	r3, [pc, #672]	; (8003520 <HAL_RCC_OscConfig+0x630>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4013      	ands	r3, r2
 8003288:	d11a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328a:	4ba5      	ldr	r3, [pc, #660]	; (8003520 <HAL_RCC_OscConfig+0x630>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4ba4      	ldr	r3, [pc, #656]	; (8003520 <HAL_RCC_OscConfig+0x630>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0049      	lsls	r1, r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003298:	f7fd fe7e 	bl	8000f98 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fd fe79 	bl	8000f98 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e177      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b4:	4b9a      	ldr	r3, [pc, #616]	; (8003520 <HAL_RCC_OscConfig+0x630>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3e6>
 80032c8:	4b94      	ldr	r3, [pc, #592]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032cc:	4b93      	ldr	r3, [pc, #588]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	430a      	orrs	r2, r1
 80032d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d4:	e01c      	b.n	8003310 <HAL_RCC_OscConfig+0x420>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x408>
 80032de:	4b8f      	ldr	r3, [pc, #572]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032e2:	4b8e      	ldr	r3, [pc, #568]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032e4:	2104      	movs	r1, #4
 80032e6:	430a      	orrs	r2, r1
 80032e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80032ea:	4b8c      	ldr	r3, [pc, #560]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ee:	4b8b      	ldr	r3, [pc, #556]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0x420>
 80032f8:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032fc:	4b87      	ldr	r3, [pc, #540]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c
 8003304:	4b85      	ldr	r3, [pc, #532]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003308:	4b84      	ldr	r3, [pc, #528]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800330a:	2104      	movs	r1, #4
 800330c:	438a      	bics	r2, r1
 800330e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d014      	beq.n	8003342 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fd fe3e 	bl	8000f98 <HAL_GetTick>
 800331c:	0003      	movs	r3, r0
 800331e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003320:	e009      	b.n	8003336 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd fe39 	bl	8000f98 <HAL_GetTick>
 8003326:	0002      	movs	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	4a7d      	ldr	r2, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x634>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e136      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003336:	4b79      	ldr	r3, [pc, #484]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x432>
 8003340:	e013      	b.n	800336a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fd fe29 	bl	8000f98 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800334a:	e009      	b.n	8003360 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd fe24 	bl	8000f98 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4a73      	ldr	r2, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x634>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e121      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003360:	4b6e      	ldr	r3, [pc, #440]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2202      	movs	r2, #2
 8003366:	4013      	ands	r3, r2
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800336a:	231f      	movs	r3, #31
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b69      	ldr	r3, [pc, #420]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	4b68      	ldr	r3, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800337a:	496b      	ldr	r1, [pc, #428]	; (8003528 <HAL_RCC_OscConfig+0x638>)
 800337c:	400a      	ands	r2, r1
 800337e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2220      	movs	r2, #32
 8003386:	4013      	ands	r3, r2
 8003388:	d039      	beq.n	80033fe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003392:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	03c9      	lsls	r1, r1, #15
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fd fdfa 	bl	8000f98 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033aa:	f7fd fdf5 	bl	8000f98 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0f3      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80033bc:	4b57      	ldr	r3, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	4013      	ands	r3, r2
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x4ba>
 80033c8:	e019      	b.n	80033fe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ca:	4b54      	ldr	r3, [pc, #336]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80033d0:	4956      	ldr	r1, [pc, #344]	; (800352c <HAL_RCC_OscConfig+0x63c>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fd fddf 	bl	8000f98 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e0:	f7fd fdda 	bl	8000f98 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0d8      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	4013      	ands	r3, r2
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d100      	bne.n	8003408 <HAL_RCC_OscConfig+0x518>
 8003406:	e0cc      	b.n	80035a2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2238      	movs	r2, #56	; 0x38
 800340e:	4013      	ands	r3, r2
 8003410:	2b10      	cmp	r3, #16
 8003412:	d100      	bne.n	8003416 <HAL_RCC_OscConfig+0x526>
 8003414:	e07b      	b.n	800350e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d156      	bne.n	80034cc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003424:	4942      	ldr	r1, [pc, #264]	; (8003530 <HAL_RCC_OscConfig+0x640>)
 8003426:	400a      	ands	r2, r1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fd fdb5 	bl	8000f98 <HAL_GetTick>
 800342e:	0003      	movs	r3, r0
 8003430:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fdb0 	bl	8000f98 <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0ae      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	049b      	lsls	r3, r3, #18
 800344e:	4013      	ands	r3, r2
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003452:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4a37      	ldr	r2, [pc, #220]	; (8003534 <HAL_RCC_OscConfig+0x644>)
 8003458:	4013      	ands	r3, r2
 800345a:	0019      	movs	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	431a      	orrs	r2, r3
 8003480:	4b26      	ldr	r3, [pc, #152]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003482:	430a      	orrs	r2, r1
 8003484:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0449      	lsls	r1, r1, #17
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003494:	4b21      	ldr	r3, [pc, #132]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	4b20      	ldr	r3, [pc, #128]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	0549      	lsls	r1, r1, #21
 800349e:	430a      	orrs	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fd fd79 	bl	8000f98 <HAL_GetTick>
 80034a6:	0003      	movs	r3, r0
 80034a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fd fd74 	bl	8000f98 <HAL_GetTick>
 80034b0:	0002      	movs	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e072      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	049b      	lsls	r3, r3, #18
 80034c6:	4013      	ands	r3, r2
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x5bc>
 80034ca:	e06a      	b.n	80035a2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80034d2:	4917      	ldr	r1, [pc, #92]	; (8003530 <HAL_RCC_OscConfig+0x640>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fd5e 	bl	8000f98 <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fd fd59 	bl	8000f98 <HAL_GetTick>
 80034e6:	0002      	movs	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e057      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	049b      	lsls	r3, r3, #18
 80034fc:	4013      	ands	r3, r2
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_OscConfig+0x62c>)
 8003506:	490c      	ldr	r1, [pc, #48]	; (8003538 <HAL_RCC_OscConfig+0x648>)
 8003508:	400a      	ands	r2, r1
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	e049      	b.n	80035a2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d112      	bne.n	800353c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e044      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	00001388 	.word	0x00001388
 8003528:	efffffff 	.word	0xefffffff
 800352c:	ffbfffff 	.word	0xffbfffff
 8003530:	feffffff 	.word	0xfeffffff
 8003534:	11c1808c 	.word	0x11c1808c
 8003538:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x6bc>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2203      	movs	r2, #3
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	429a      	cmp	r2, r3
 800354e:	d126      	bne.n	800359e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2270      	movs	r2, #112	; 0x70
 8003554:	401a      	ands	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d11f      	bne.n	800359e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	23fe      	movs	r3, #254	; 0xfe
 8003562:	01db      	lsls	r3, r3, #7
 8003564:	401a      	ands	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d116      	bne.n	800359e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	23f8      	movs	r3, #248	; 0xf8
 8003574:	039b      	lsls	r3, r3, #14
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d10e      	bne.n	800359e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	23e0      	movs	r3, #224	; 0xe0
 8003584:	051b      	lsls	r3, r3, #20
 8003586:	401a      	ands	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	0f5b      	lsrs	r3, r3, #29
 8003594:	075a      	lsls	r2, r3, #29
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b008      	add	sp, #32
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0e9      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c4:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2207      	movs	r2, #7
 80035ca:	4013      	ands	r3, r2
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d91e      	bls.n	8003610 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2207      	movs	r2, #7
 80035d8:	4393      	bics	r3, r2
 80035da:	0019      	movs	r1, r3
 80035dc:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035e4:	f7fd fcd8 	bl	8000f98 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035ec:	e009      	b.n	8003602 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ee:	f7fd fcd3 	bl	8000f98 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	4a6a      	ldr	r2, [pc, #424]	; (80037a4 <HAL_RCC_ClockConfig+0x1f4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0ca      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d1ee      	bne.n	80035ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	4013      	ands	r3, r2
 8003618:	d015      	beq.n	8003646 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2204      	movs	r2, #4
 8003620:	4013      	ands	r3, r2
 8003622:	d006      	beq.n	8003632 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 800362a:	21e0      	movs	r1, #224	; 0xe0
 800362c:	01c9      	lsls	r1, r1, #7
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4a5d      	ldr	r2, [pc, #372]	; (80037ac <HAL_RCC_ClockConfig+0x1fc>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2201      	movs	r2, #1
 800364c:	4013      	ands	r3, r2
 800364e:	d057      	beq.n	8003700 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	029b      	lsls	r3, r3, #10
 8003660:	4013      	ands	r3, r2
 8003662:	d12b      	bne.n	80036bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e097      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d107      	bne.n	8003680 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003670:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	049b      	lsls	r3, r3, #18
 8003678:	4013      	ands	r3, r2
 800367a:	d11f      	bne.n	80036bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e08b      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4013      	ands	r3, r2
 8003692:	d113      	bne.n	80036bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e07f      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d106      	bne.n	80036ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	2202      	movs	r2, #2
 80036a6:	4013      	ands	r3, r2
 80036a8:	d108      	bne.n	80036bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e074      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ae:	4b3e      	ldr	r3, [pc, #248]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2202      	movs	r2, #2
 80036b4:	4013      	ands	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e06d      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2207      	movs	r2, #7
 80036c2:	4393      	bics	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fd fc62 	bl	8000f98 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d8:	e009      	b.n	80036ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036da:	f7fd fc5d 	bl	8000f98 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	4a2f      	ldr	r2, [pc, #188]	; (80037a4 <HAL_RCC_ClockConfig+0x1f4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e054      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2238      	movs	r2, #56	; 0x38
 80036f4:	401a      	ands	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1ec      	bne.n	80036da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2207      	movs	r2, #7
 8003706:	4013      	ands	r3, r2
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d21e      	bcs.n	800374c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2207      	movs	r2, #7
 8003714:	4393      	bics	r3, r2
 8003716:	0019      	movs	r1, r3
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003720:	f7fd fc3a 	bl	8000f98 <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003728:	e009      	b.n	800373e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372a:	f7fd fc35 	bl	8000f98 <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e02c      	b.n	8003798 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2207      	movs	r2, #7
 8003744:	4013      	ands	r3, r2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d1ee      	bne.n	800372a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2204      	movs	r2, #4
 8003752:	4013      	ands	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_RCC_ClockConfig+0x200>)
 800375c:	4013      	ands	r3, r2
 800375e:	0019      	movs	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800376a:	f000 f829 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800376e:	0001      	movs	r1, r0
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	220f      	movs	r2, #15
 8003778:	401a      	ands	r2, r3
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_RCC_ClockConfig+0x204>)
 800377c:	0092      	lsls	r2, r2, #2
 800377e:	58d3      	ldr	r3, [r2, r3]
 8003780:	221f      	movs	r2, #31
 8003782:	4013      	ands	r3, r2
 8003784:	000a      	movs	r2, r1
 8003786:	40da      	lsrs	r2, r3
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x208>)
 800378a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_RCC_ClockConfig+0x20c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0018      	movs	r0, r3
 8003792:	f7fd fba5 	bl	8000ee0 <HAL_InitTick>
 8003796:	0003      	movs	r3, r0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b004      	add	sp, #16
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40022000 	.word	0x40022000
 80037a4:	00001388 	.word	0x00001388
 80037a8:	40021000 	.word	0x40021000
 80037ac:	fffff0ff 	.word	0xfffff0ff
 80037b0:	ffff8fff 	.word	0xffff8fff
 80037b4:	08006850 	.word	0x08006850
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c6:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2238      	movs	r2, #56	; 0x38
 80037cc:	4013      	ands	r3, r2
 80037ce:	d10f      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037d0:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0adb      	lsrs	r3, r3, #11
 80037d6:	2207      	movs	r2, #7
 80037d8:	4013      	ands	r3, r2
 80037da:	2201      	movs	r2, #1
 80037dc:	409a      	lsls	r2, r3
 80037de:	0013      	movs	r3, r2
 80037e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	4835      	ldr	r0, [pc, #212]	; (80038bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80037e6:	f7fc fc8f 	bl	8000108 <__udivsi3>
 80037ea:	0003      	movs	r3, r0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e05d      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037f0:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2238      	movs	r2, #56	; 0x38
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e054      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2238      	movs	r2, #56	; 0x38
 8003808:	4013      	ands	r3, r2
 800380a:	2b10      	cmp	r3, #16
 800380c:	d138      	bne.n	8003880 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800380e:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2203      	movs	r2, #3
 8003814:	4013      	ands	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	2207      	movs	r2, #7
 8003820:	4013      	ands	r3, r2
 8003822:	3301      	adds	r3, #1
 8003824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d10d      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4824      	ldr	r0, [pc, #144]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003830:	f7fc fc6a 	bl	8000108 <__udivsi3>
 8003834:	0003      	movs	r3, r0
 8003836:	0019      	movs	r1, r3
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	227f      	movs	r2, #127	; 0x7f
 8003840:	4013      	ands	r3, r2
 8003842:	434b      	muls	r3, r1
 8003844:	617b      	str	r3, [r7, #20]
        break;
 8003846:	e00d      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	481c      	ldr	r0, [pc, #112]	; (80038bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800384c:	f7fc fc5c 	bl	8000108 <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	0019      	movs	r1, r3
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	227f      	movs	r2, #127	; 0x7f
 800385c:	4013      	ands	r3, r2
 800385e:	434b      	muls	r3, r1
 8003860:	617b      	str	r3, [r7, #20]
        break;
 8003862:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003864:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0f5b      	lsrs	r3, r3, #29
 800386a:	2207      	movs	r2, #7
 800386c:	4013      	ands	r3, r2
 800386e:	3301      	adds	r3, #1
 8003870:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f7fc fc47 	bl	8000108 <__udivsi3>
 800387a:	0003      	movs	r3, r0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e015      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2238      	movs	r2, #56	; 0x38
 8003886:	4013      	ands	r3, r2
 8003888:	2b20      	cmp	r3, #32
 800388a:	d103      	bne.n	8003894 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e00b      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2238      	movs	r2, #56	; 0x38
 800389a:	4013      	ands	r3, r2
 800389c:	2b18      	cmp	r3, #24
 800389e:	d103      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80038a0:	23fa      	movs	r3, #250	; 0xfa
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e001      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038ac:	693b      	ldr	r3, [r7, #16]
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b006      	add	sp, #24
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	40021000 	.word	0x40021000
 80038bc:	00f42400 	.word	0x00f42400
 80038c0:	007a1200 	.word	0x007a1200

080038c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c8:	4b02      	ldr	r3, [pc, #8]	; (80038d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	20000000 	.word	0x20000000

080038d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038dc:	f7ff fff2 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 80038e0:	0004      	movs	r4, r0
 80038e2:	f7ff fa7d 	bl	8002de0 <LL_RCC_GetAPB1Prescaler>
 80038e6:	0003      	movs	r3, r0
 80038e8:	0b1a      	lsrs	r2, r3, #12
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	58d3      	ldr	r3, [r2, r3]
 80038f0:	221f      	movs	r2, #31
 80038f2:	4013      	ands	r3, r2
 80038f4:	40dc      	lsrs	r4, r3
 80038f6:	0023      	movs	r3, r4
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bdb0      	pop	{r4, r5, r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	08006890 	.word	0x08006890

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800390c:	2313      	movs	r3, #19
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003914:	2312      	movs	r3, #18
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	029b      	lsls	r3, r3, #10
 8003924:	4013      	ands	r3, r2
 8003926:	d100      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003928:	e0ad      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392a:	2011      	movs	r0, #17
 800392c:	183b      	adds	r3, r7, r0
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003936:	2380      	movs	r3, #128	; 0x80
 8003938:	055b      	lsls	r3, r3, #21
 800393a:	4013      	ands	r3, r2
 800393c:	d110      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	0549      	lsls	r1, r1, #21
 8003948:	430a      	orrs	r2, r1
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800394e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	055b      	lsls	r3, r3, #21
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	183b      	adds	r3, r7, r0
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003960:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	0049      	lsls	r1, r1, #1
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800396e:	f7fd fb13 	bl	8000f98 <HAL_GetTick>
 8003972:	0003      	movs	r3, r0
 8003974:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003976:	e00b      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003978:	f7fd fb0e 	bl	8000f98 <HAL_GetTick>
 800397c:	0002      	movs	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d904      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003986:	2313      	movs	r3, #19
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2203      	movs	r2, #3
 800398c:	701a      	strb	r2, [r3, #0]
        break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003990:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4013      	ands	r3, r2
 800399a:	d0ed      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800399c:	2313      	movs	r3, #19
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d15e      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039aa:	23c0      	movs	r3, #192	; 0xc0
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4013      	ands	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d019      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d014      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	4a24      	ldr	r2, [pc, #144]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039d0:	4b1f      	ldr	r3, [pc, #124]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0249      	lsls	r1, r1, #9
 80039d6:	430a      	orrs	r2, r1
 80039d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039da:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039e0:	491e      	ldr	r1, [pc, #120]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80039e2:	400a      	ands	r2, r1
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d016      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd fad0 	bl	8000f98 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fc:	e00c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd facb 	bl	8000f98 <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d904      	bls.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a0e:	2313      	movs	r3, #19
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2203      	movs	r2, #3
 8003a14:	701a      	strb	r2, [r3, #0]
            break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d0ed      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a22:	2313      	movs	r3, #19
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a40:	e016      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a42:	2312      	movs	r3, #18
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2213      	movs	r2, #19
 8003a48:	18ba      	adds	r2, r7, r2
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	e00f      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40007000 	.word	0x40007000
 8003a58:	fffffcff 	.word	0xfffffcff
 8003a5c:	fffeffff 	.word	0xfffeffff
 8003a60:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	2312      	movs	r3, #18
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	2213      	movs	r2, #19
 8003a6a:	18ba      	adds	r2, r7, r2
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a70:	2311      	movs	r3, #17
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d105      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a7a:	4bb6      	ldr	r3, [pc, #728]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a7e:	4bb5      	ldr	r3, [pc, #724]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a80:	49b5      	ldr	r1, [pc, #724]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a90:	4bb0      	ldr	r3, [pc, #704]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a94:	2203      	movs	r2, #3
 8003a96:	4393      	bics	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4bad      	ldr	r3, [pc, #692]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aae:	4ba9      	ldr	r3, [pc, #676]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	4393      	bics	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	4ba5      	ldr	r3, [pc, #660]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003acc:	4ba1      	ldr	r3, [pc, #644]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	2230      	movs	r2, #48	; 0x30
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	4b9e      	ldr	r3, [pc, #632]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aea:	4b9a      	ldr	r3, [pc, #616]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	4a9b      	ldr	r2, [pc, #620]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	4b96      	ldr	r3, [pc, #600]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003afa:	430a      	orrs	r2, r1
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	2380      	movs	r3, #128	; 0x80
 8003b04:	015b      	lsls	r3, r3, #5
 8003b06:	4013      	ands	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003b0a:	4b92      	ldr	r3, [pc, #584]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	4a94      	ldr	r2, [pc, #592]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	4b8e      	ldr	r3, [pc, #568]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b2a:	4b8a      	ldr	r3, [pc, #552]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	4a8d      	ldr	r2, [pc, #564]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	0019      	movs	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b38:	4b86      	ldr	r3, [pc, #536]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4013      	ands	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b4a:	4b82      	ldr	r3, [pc, #520]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	4a86      	ldr	r2, [pc, #536]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4b7e      	ldr	r3, [pc, #504]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2220      	movs	r2, #32
 8003b64:	4013      	ands	r3, r2
 8003b66:	d009      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b68:	4b7a      	ldr	r3, [pc, #488]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	4a7f      	ldr	r2, [pc, #508]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	4b77      	ldr	r3, [pc, #476]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	4013      	ands	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b86:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	4a79      	ldr	r2, [pc, #484]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	0019      	movs	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003b96:	430a      	orrs	r2, r1
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	01db      	lsls	r3, r3, #7
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba6:	4b6b      	ldr	r3, [pc, #428]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	0899      	lsrs	r1, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb2:	4b68      	ldr	r3, [pc, #416]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	05db      	lsls	r3, r3, #23
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bc4:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	0249      	lsls	r1, r1, #9
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	031b      	lsls	r3, r3, #12
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	4393      	bics	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	039b      	lsls	r3, r3, #14
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d016      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bfe:	4b55      	ldr	r3, [pc, #340]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0c:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	03db      	lsls	r3, r3, #15
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c1e:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	0449      	lsls	r1, r1, #17
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	03db      	lsls	r3, r3, #15
 8003c34:	4013      	ands	r3, r2
 8003c36:	d016      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c38:	4b46      	ldr	r3, [pc, #280]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	045b      	lsls	r3, r3, #17
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d106      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	4b3d      	ldr	r3, [pc, #244]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c5e:	2180      	movs	r1, #128	; 0x80
 8003c60:	0449      	lsls	r1, r1, #17
 8003c62:	430a      	orrs	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d014      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	2203      	movs	r2, #3
 8003c78:	4393      	bics	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1a      	ldr	r2, [r3, #32]
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c82:	430a      	orrs	r2, r1
 8003c84:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d106      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	0249      	lsls	r1, r1, #9
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	019b      	lsls	r3, r3, #6
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d014      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	220c      	movs	r2, #12
 8003cae:	4393      	bics	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	0249      	lsls	r1, r1, #9
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	045b      	lsls	r3, r3, #17
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d016      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d106      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0449      	lsls	r1, r1, #17
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	049b      	lsls	r3, r3, #18
 8003d14:	4013      	ands	r3, r2
 8003d16:	d016      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d106      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0449      	lsls	r1, r1, #17
 8003d42:	430a      	orrs	r2, r1
 8003d44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003d46:	2312      	movs	r3, #18
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	781b      	ldrb	r3, [r3, #0]
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b006      	add	sp, #24
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	efffffff 	.word	0xefffffff
 8003d5c:	fffff3ff 	.word	0xfffff3ff
 8003d60:	fffffcff 	.word	0xfffffcff
 8003d64:	fff3ffff 	.word	0xfff3ffff
 8003d68:	ffcfffff 	.word	0xffcfffff
 8003d6c:	ffffcfff 	.word	0xffffcfff
 8003d70:	ffff3fff 	.word	0xffff3fff
 8003d74:	ffbfffff 	.word	0xffbfffff
 8003d78:	feffffff 	.word	0xfeffffff

08003d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e046      	b.n	8003e1c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2288      	movs	r2, #136	; 0x88
 8003d92:	589b      	ldr	r3, [r3, r2]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2284      	movs	r2, #132	; 0x84
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7fc ffbc 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2288      	movs	r2, #136	; 0x88
 8003dac:	2124      	movs	r1, #36	; 0x24
 8003dae:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 ff68 	bl	8004ca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f000 fc0e 	bl	80045f4 <UART_SetConfig>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e01c      	b.n	8003e1c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	490d      	ldr	r1, [pc, #52]	; (8003e24 <HAL_UART_Init+0xa8>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	212a      	movs	r1, #42	; 0x2a
 8003dfe:	438a      	bics	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fff7 	bl	8004e08 <UART_CheckIdleState>
 8003e1a:	0003      	movs	r3, r0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b002      	add	sp, #8
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	ffffb7ff 	.word	0xffffb7ff

08003e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2288      	movs	r2, #136	; 0x88
 8003e3c:	589b      	ldr	r3, [r3, r2]
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d000      	beq.n	8003e44 <HAL_UART_Transmit+0x1c>
 8003e42:	e090      	b.n	8003f66 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_UART_Transmit+0x2a>
 8003e4a:	1dbb      	adds	r3, r7, #6
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e088      	b.n	8003f68 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	015b      	lsls	r3, r3, #5
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d109      	bne.n	8003e76 <HAL_UART_Transmit+0x4e>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d001      	beq.n	8003e76 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e078      	b.n	8003f68 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2290      	movs	r2, #144	; 0x90
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2288      	movs	r2, #136	; 0x88
 8003e82:	2121      	movs	r1, #33	; 0x21
 8003e84:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e86:	f7fd f887 	bl	8000f98 <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1dba      	adds	r2, r7, #6
 8003e92:	2154      	movs	r1, #84	; 0x54
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1dba      	adds	r2, r7, #6
 8003e9c:	2156      	movs	r1, #86	; 0x56
 8003e9e:	8812      	ldrh	r2, [r2, #0]
 8003ea0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	015b      	lsls	r3, r3, #5
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d108      	bne.n	8003ec0 <HAL_UART_Transmit+0x98>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e003      	b.n	8003ec8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ec8:	e030      	b.n	8003f2c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	0013      	movs	r3, r2
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	f001 f840 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8003edc:	1e03      	subs	r3, r0, #0
 8003ede:	d005      	beq.n	8003eec <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2288      	movs	r2, #136	; 0x88
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e03d      	b.n	8003f68 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	05d2      	lsls	r2, r2, #23
 8003efe:	0dd2      	lsrs	r2, r2, #23
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	3302      	adds	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e007      	b.n	8003f1a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2256      	movs	r2, #86	; 0x56
 8003f1e:	5a9b      	ldrh	r3, [r3, r2]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b299      	uxth	r1, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2256      	movs	r2, #86	; 0x56
 8003f2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2256      	movs	r2, #86	; 0x56
 8003f30:	5a9b      	ldrh	r3, [r3, r2]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1c8      	bne.n	8003eca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	0013      	movs	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	2140      	movs	r1, #64	; 0x40
 8003f46:	f001 f809 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2288      	movs	r2, #136	; 0x88
 8003f52:	2120      	movs	r1, #32
 8003f54:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e006      	b.n	8003f68 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2288      	movs	r2, #136	; 0x88
 8003f5e:	2120      	movs	r1, #32
 8003f60:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b008      	add	sp, #32
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f70:	b5b0      	push	{r4, r5, r7, lr}
 8003f72:	b0aa      	sub	sp, #168	; 0xa8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	22a4      	movs	r2, #164	; 0xa4
 8003f80:	18b9      	adds	r1, r7, r2
 8003f82:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	20a0      	movs	r0, #160	; 0xa0
 8003f8c:	1839      	adds	r1, r7, r0
 8003f8e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	249c      	movs	r4, #156	; 0x9c
 8003f98:	1939      	adds	r1, r7, r4
 8003f9a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	18bb      	adds	r3, r7, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4aa2      	ldr	r2, [pc, #648]	; (800422c <HAL_UART_IRQHandler+0x2bc>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2298      	movs	r2, #152	; 0x98
 8003fa8:	18bd      	adds	r5, r7, r2
 8003faa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003fac:	18bb      	adds	r3, r7, r2
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d11a      	bne.n	8003fea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d015      	beq.n	8003fea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fbe:	183b      	adds	r3, r7, r0
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d105      	bne.n	8003fd4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fc8:	193b      	adds	r3, r7, r4
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	055b      	lsls	r3, r3, #21
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d00a      	beq.n	8003fea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d100      	bne.n	8003fde <HAL_UART_IRQHandler+0x6e>
 8003fdc:	e2dc      	b.n	8004598 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	0010      	movs	r0, r2
 8003fe6:	4798      	blx	r3
      }
      return;
 8003fe8:	e2d6      	b.n	8004598 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fea:	2398      	movs	r3, #152	; 0x98
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d100      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x86>
 8003ff4:	e122      	b.n	800423c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ff6:	239c      	movs	r3, #156	; 0x9c
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a8c      	ldr	r2, [pc, #560]	; (8004230 <HAL_UART_IRQHandler+0x2c0>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	d106      	bne.n	8004010 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004002:	23a0      	movs	r3, #160	; 0xa0
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a8a      	ldr	r2, [pc, #552]	; (8004234 <HAL_UART_IRQHandler+0x2c4>)
 800400a:	4013      	ands	r3, r2
 800400c:	d100      	bne.n	8004010 <HAL_UART_IRQHandler+0xa0>
 800400e:	e115      	b.n	800423c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004010:	23a4      	movs	r3, #164	; 0xa4
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	4013      	ands	r3, r2
 800401a:	d012      	beq.n	8004042 <HAL_UART_IRQHandler+0xd2>
 800401c:	23a0      	movs	r3, #160	; 0xa0
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4013      	ands	r3, r2
 8004028:	d00b      	beq.n	8004042 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2290      	movs	r2, #144	; 0x90
 8004036:	589b      	ldr	r3, [r3, r2]
 8004038:	2201      	movs	r2, #1
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2190      	movs	r1, #144	; 0x90
 8004040:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004042:	23a4      	movs	r3, #164	; 0xa4
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2202      	movs	r2, #2
 800404a:	4013      	ands	r3, r2
 800404c:	d011      	beq.n	8004072 <HAL_UART_IRQHandler+0x102>
 800404e:	239c      	movs	r3, #156	; 0x9c
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2201      	movs	r2, #1
 8004056:	4013      	ands	r3, r2
 8004058:	d00b      	beq.n	8004072 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2202      	movs	r2, #2
 8004060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2290      	movs	r2, #144	; 0x90
 8004066:	589b      	ldr	r3, [r3, r2]
 8004068:	2204      	movs	r2, #4
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2190      	movs	r1, #144	; 0x90
 8004070:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004072:	23a4      	movs	r3, #164	; 0xa4
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2204      	movs	r2, #4
 800407a:	4013      	ands	r3, r2
 800407c:	d011      	beq.n	80040a2 <HAL_UART_IRQHandler+0x132>
 800407e:	239c      	movs	r3, #156	; 0x9c
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	4013      	ands	r3, r2
 8004088:	d00b      	beq.n	80040a2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2204      	movs	r2, #4
 8004090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2290      	movs	r2, #144	; 0x90
 8004096:	589b      	ldr	r3, [r3, r2]
 8004098:	2202      	movs	r2, #2
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2190      	movs	r1, #144	; 0x90
 80040a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040a2:	23a4      	movs	r3, #164	; 0xa4
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2208      	movs	r2, #8
 80040aa:	4013      	ands	r3, r2
 80040ac:	d017      	beq.n	80040de <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040ae:	23a0      	movs	r3, #160	; 0xa0
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2220      	movs	r2, #32
 80040b6:	4013      	ands	r3, r2
 80040b8:	d105      	bne.n	80040c6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040ba:	239c      	movs	r3, #156	; 0x9c
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a5b      	ldr	r2, [pc, #364]	; (8004230 <HAL_UART_IRQHandler+0x2c0>)
 80040c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040c4:	d00b      	beq.n	80040de <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2208      	movs	r2, #8
 80040cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2290      	movs	r2, #144	; 0x90
 80040d2:	589b      	ldr	r3, [r3, r2]
 80040d4:	2208      	movs	r2, #8
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2190      	movs	r1, #144	; 0x90
 80040dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040de:	23a4      	movs	r3, #164	; 0xa4
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_UART_IRQHandler+0x1a4>
 80040ec:	23a0      	movs	r3, #160	; 0xa0
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	04db      	lsls	r3, r3, #19
 80040f6:	4013      	ands	r3, r2
 80040f8:	d00c      	beq.n	8004114 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	0112      	lsls	r2, r2, #4
 8004102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2290      	movs	r2, #144	; 0x90
 8004108:	589b      	ldr	r3, [r3, r2]
 800410a:	2220      	movs	r2, #32
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2190      	movs	r1, #144	; 0x90
 8004112:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2290      	movs	r2, #144	; 0x90
 8004118:	589b      	ldr	r3, [r3, r2]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d100      	bne.n	8004120 <HAL_UART_IRQHandler+0x1b0>
 800411e:	e23d      	b.n	800459c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004120:	23a4      	movs	r3, #164	; 0xa4
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2220      	movs	r2, #32
 8004128:	4013      	ands	r3, r2
 800412a:	d015      	beq.n	8004158 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800412c:	23a0      	movs	r3, #160	; 0xa0
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2220      	movs	r2, #32
 8004134:	4013      	ands	r3, r2
 8004136:	d106      	bne.n	8004146 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004138:	239c      	movs	r3, #156	; 0x9c
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	055b      	lsls	r3, r3, #21
 8004142:	4013      	ands	r3, r2
 8004144:	d008      	beq.n	8004158 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	0010      	movs	r0, r2
 8004156:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2290      	movs	r2, #144	; 0x90
 800415c:	589b      	ldr	r3, [r3, r2]
 800415e:	2194      	movs	r1, #148	; 0x94
 8004160:	187a      	adds	r2, r7, r1
 8004162:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	4013      	ands	r3, r2
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d004      	beq.n	800417c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004172:	187b      	adds	r3, r7, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2228      	movs	r2, #40	; 0x28
 8004178:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800417a:	d04c      	beq.n	8004216 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0018      	movs	r0, r3
 8004180:	f000 ff5c 	bl	800503c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	4013      	ands	r3, r2
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d13c      	bne.n	800420c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419a:	2090      	movs	r0, #144	; 0x90
 800419c:	183a      	adds	r2, r7, r0
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	2301      	movs	r3, #1
 80041a2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2140      	movs	r1, #64	; 0x40
 80041b8:	438a      	bics	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	183b      	adds	r3, r7, r0
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2280      	movs	r2, #128	; 0x80
 80041ce:	589b      	ldr	r3, [r3, r2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d016      	beq.n	8004202 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	589b      	ldr	r3, [r3, r2]
 80041da:	4a17      	ldr	r2, [pc, #92]	; (8004238 <HAL_UART_IRQHandler+0x2c8>)
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2280      	movs	r2, #128	; 0x80
 80041e2:	589b      	ldr	r3, [r3, r2]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7fd f859 	bl	800129c <HAL_DMA_Abort_IT>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d01c      	beq.n	8004228 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	589b      	ldr	r3, [r3, r2]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	5852      	ldr	r2, [r2, r1]
 80041fc:	0010      	movs	r0, r2
 80041fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	e012      	b.n	8004228 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 f9e1 	bl	80045cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420a:	e00d      	b.n	8004228 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0018      	movs	r0, r3
 8004210:	f000 f9dc 	bl	80045cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e008      	b.n	8004228 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f9d7 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2290      	movs	r2, #144	; 0x90
 8004222:	2100      	movs	r1, #0
 8004224:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004226:	e1b9      	b.n	800459c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004228:	46c0      	nop			; (mov r8, r8)
    return;
 800422a:	e1b7      	b.n	800459c <HAL_UART_IRQHandler+0x62c>
 800422c:	0000080f 	.word	0x0000080f
 8004230:	10000001 	.word	0x10000001
 8004234:	04000120 	.word	0x04000120
 8004238:	08005109 	.word	0x08005109

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d000      	beq.n	8004246 <HAL_UART_IRQHandler+0x2d6>
 8004244:	e13e      	b.n	80044c4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004246:	23a4      	movs	r3, #164	; 0xa4
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2210      	movs	r2, #16
 800424e:	4013      	ands	r3, r2
 8004250:	d100      	bne.n	8004254 <HAL_UART_IRQHandler+0x2e4>
 8004252:	e137      	b.n	80044c4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004254:	23a0      	movs	r3, #160	; 0xa0
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2210      	movs	r2, #16
 800425c:	4013      	ands	r3, r2
 800425e:	d100      	bne.n	8004262 <HAL_UART_IRQHandler+0x2f2>
 8004260:	e130      	b.n	80044c4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2210      	movs	r2, #16
 8004268:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2240      	movs	r2, #64	; 0x40
 8004272:	4013      	ands	r3, r2
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d000      	beq.n	800427a <HAL_UART_IRQHandler+0x30a>
 8004278:	e0a4      	b.n	80043c4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	589b      	ldr	r3, [r3, r2]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	217e      	movs	r1, #126	; 0x7e
 8004286:	187b      	adds	r3, r7, r1
 8004288:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800428a:	187b      	adds	r3, r7, r1
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d100      	bne.n	8004294 <HAL_UART_IRQHandler+0x324>
 8004292:	e185      	b.n	80045a0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	225c      	movs	r2, #92	; 0x5c
 8004298:	5a9b      	ldrh	r3, [r3, r2]
 800429a:	187a      	adds	r2, r7, r1
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d300      	bcc.n	80042a4 <HAL_UART_IRQHandler+0x334>
 80042a2:	e17d      	b.n	80045a0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	187a      	adds	r2, r7, r1
 80042a8:	215e      	movs	r1, #94	; 0x5e
 80042aa:	8812      	ldrh	r2, [r2, #0]
 80042ac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	589b      	ldr	r3, [r3, r2]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2220      	movs	r2, #32
 80042ba:	4013      	ands	r3, r2
 80042bc:	d170      	bne.n	80043a0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042be:	f3ef 8310 	mrs	r3, PRIMASK
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80042c8:	2301      	movs	r3, #1
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	49b4      	ldr	r1, [pc, #720]	; (80045b0 <HAL_UART_IRQHandler+0x640>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f0:	f3ef 8310 	mrs	r3, PRIMASK
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	677b      	str	r3, [r7, #116]	; 0x74
 80042fa:	2301      	movs	r3, #1
 80042fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2101      	movs	r1, #1
 8004312:	438a      	bics	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004322:	f3ef 8310 	mrs	r3, PRIMASK
 8004326:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004328:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	673b      	str	r3, [r7, #112]	; 0x70
 800432c:	2301      	movs	r3, #1
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	438a      	bics	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434e:	f383 8810 	msr	PRIMASK, r3
}
 8004352:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	228c      	movs	r2, #140	; 0x8c
 8004358:	2120      	movs	r1, #32
 800435a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004362:	f3ef 8310 	mrs	r3, PRIMASK
 8004366:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004368:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800436c:	2301      	movs	r3, #1
 800436e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004372:	f383 8810 	msr	PRIMASK, r3
}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2110      	movs	r1, #16
 8004384:	438a      	bics	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438e:	f383 8810 	msr	PRIMASK, r3
}
 8004392:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2280      	movs	r2, #128	; 0x80
 8004398:	589b      	ldr	r3, [r3, r2]
 800439a:	0018      	movs	r0, r3
 800439c:	f7fc ff1e 	bl	80011dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	225c      	movs	r2, #92	; 0x5c
 80043aa:	5a9a      	ldrh	r2, [r3, r2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	215e      	movs	r1, #94	; 0x5e
 80043b0:	5a5b      	ldrh	r3, [r3, r1]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0011      	movs	r1, r2
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 f90d 	bl	80045dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043c2:	e0ed      	b.n	80045a0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	225c      	movs	r2, #92	; 0x5c
 80043c8:	5a99      	ldrh	r1, [r3, r2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	225e      	movs	r2, #94	; 0x5e
 80043ce:	5a9b      	ldrh	r3, [r3, r2]
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	208e      	movs	r0, #142	; 0x8e
 80043d4:	183b      	adds	r3, r7, r0
 80043d6:	1a8a      	subs	r2, r1, r2
 80043d8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	225e      	movs	r2, #94	; 0x5e
 80043de:	5a9b      	ldrh	r3, [r3, r2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d100      	bne.n	80043e8 <HAL_UART_IRQHandler+0x478>
 80043e6:	e0dd      	b.n	80045a4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d100      	bne.n	80043f2 <HAL_UART_IRQHandler+0x482>
 80043f0:	e0d8      	b.n	80045a4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f2:	f3ef 8310 	mrs	r3, PRIMASK
 80043f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80043f8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043fa:	2488      	movs	r4, #136	; 0x88
 80043fc:	193a      	adds	r2, r7, r4
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	2301      	movs	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4967      	ldr	r1, [pc, #412]	; (80045b4 <HAL_UART_IRQHandler+0x644>)
 8004418:	400a      	ands	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	193b      	adds	r3, r7, r4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f383 8810 	msr	PRIMASK, r3
}
 8004428:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442a:	f3ef 8310 	mrs	r3, PRIMASK
 800442e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004430:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004432:	2484      	movs	r4, #132	; 0x84
 8004434:	193a      	adds	r2, r7, r4
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	2301      	movs	r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f383 8810 	msr	PRIMASK, r3
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	495a      	ldr	r1, [pc, #360]	; (80045b8 <HAL_UART_IRQHandler+0x648>)
 8004450:	400a      	ands	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	193b      	adds	r3, r7, r4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	228c      	movs	r2, #140	; 0x8c
 8004466:	2120      	movs	r1, #32
 8004468:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004476:	f3ef 8310 	mrs	r3, PRIMASK
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447e:	2480      	movs	r4, #128	; 0x80
 8004480:	193a      	adds	r2, r7, r4
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	2301      	movs	r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	f383 8810 	msr	PRIMASK, r3
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2110      	movs	r1, #16
 800449c:	438a      	bics	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	193b      	adds	r3, r7, r4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	f383 8810 	msr	PRIMASK, r3
}
 80044ac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b4:	183b      	adds	r3, r7, r0
 80044b6:	881a      	ldrh	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	0011      	movs	r1, r2
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 f88d 	bl	80045dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044c2:	e06f      	b.n	80045a4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044c4:	23a4      	movs	r3, #164	; 0xa4
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	035b      	lsls	r3, r3, #13
 80044ce:	4013      	ands	r3, r2
 80044d0:	d010      	beq.n	80044f4 <HAL_UART_IRQHandler+0x584>
 80044d2:	239c      	movs	r3, #156	; 0x9c
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	03db      	lsls	r3, r3, #15
 80044dc:	4013      	ands	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	0352      	lsls	r2, r2, #13
 80044e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 fe4e 	bl	800518e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044f2:	e05a      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80044f4:	23a4      	movs	r3, #164	; 0xa4
 80044f6:	18fb      	adds	r3, r7, r3
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	4013      	ands	r3, r2
 80044fe:	d016      	beq.n	800452e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004500:	23a0      	movs	r3, #160	; 0xa0
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	4013      	ands	r3, r2
 800450a:	d106      	bne.n	800451a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800450c:	239c      	movs	r3, #156	; 0x9c
 800450e:	18fb      	adds	r3, r7, r3
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	4013      	ands	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451e:	2b00      	cmp	r3, #0
 8004520:	d042      	beq.n	80045a8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	0010      	movs	r0, r2
 800452a:	4798      	blx	r3
    }
    return;
 800452c:	e03c      	b.n	80045a8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800452e:	23a4      	movs	r3, #164	; 0xa4
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2240      	movs	r2, #64	; 0x40
 8004536:	4013      	ands	r3, r2
 8004538:	d00a      	beq.n	8004550 <HAL_UART_IRQHandler+0x5e0>
 800453a:	23a0      	movs	r3, #160	; 0xa0
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	4013      	ands	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fdf4 	bl	8005136 <UART_EndTransmit_IT>
    return;
 800454e:	e02c      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004550:	23a4      	movs	r3, #164	; 0xa4
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	4013      	ands	r3, r2
 800455c:	d00b      	beq.n	8004576 <HAL_UART_IRQHandler+0x606>
 800455e:	23a0      	movs	r3, #160	; 0xa0
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	05db      	lsls	r3, r3, #23
 8004568:	4013      	ands	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0018      	movs	r0, r3
 8004570:	f000 fe1d 	bl	80051ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004574:	e019      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004576:	23a4      	movs	r3, #164	; 0xa4
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	045b      	lsls	r3, r3, #17
 8004580:	4013      	ands	r3, r2
 8004582:	d012      	beq.n	80045aa <HAL_UART_IRQHandler+0x63a>
 8004584:	23a0      	movs	r3, #160	; 0xa0
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	da0d      	bge.n	80045aa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	0018      	movs	r0, r3
 8004592:	f000 fe04 	bl	800519e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004596:	e008      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
      return;
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	e006      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
    return;
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	e004      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
      return;
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	e002      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
      return;
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	e000      	b.n	80045aa <HAL_UART_IRQHandler+0x63a>
    return;
 80045a8:	46c0      	nop			; (mov r8, r8)
  }
}
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b02a      	add	sp, #168	; 0xa8
 80045ae:	bdb0      	pop	{r4, r5, r7, pc}
 80045b0:	fffffeff 	.word	0xfffffeff
 80045b4:	fffffedf 	.word	0xfffffedf
 80045b8:	effffffe 	.word	0xeffffffe

080045bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	000a      	movs	r2, r1
 80045e6:	1cbb      	adds	r3, r7, #2
 80045e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b090      	sub	sp, #64	; 0x40
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fc:	231a      	movs	r3, #26
 80045fe:	2220      	movs	r2, #32
 8004600:	189b      	adds	r3, r3, r2
 8004602:	19db      	adds	r3, r3, r7
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4ac1      	ldr	r2, [pc, #772]	; (800492c <UART_SetConfig+0x338>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	430b      	orrs	r3, r1
 8004634:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4abc      	ldr	r2, [pc, #752]	; (8004930 <UART_SetConfig+0x33c>)
 800463e:	4013      	ands	r3, r2
 8004640:	0018      	movs	r0, r3
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	68d9      	ldr	r1, [r3, #12]
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	0003      	movs	r3, r0
 800464c:	430b      	orrs	r3, r1
 800464e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4ab6      	ldr	r2, [pc, #728]	; (8004934 <UART_SetConfig+0x340>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <UART_SetConfig+0x80>
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4ab4      	ldr	r2, [pc, #720]	; (8004938 <UART_SetConfig+0x344>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004670:	4313      	orrs	r3, r2
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4ab0      	ldr	r2, [pc, #704]	; (800493c <UART_SetConfig+0x348>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004686:	430b      	orrs	r3, r1
 8004688:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	220f      	movs	r2, #15
 8004692:	4393      	bics	r3, r2
 8004694:	0018      	movs	r0, r3
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	0003      	movs	r3, r0
 80046a0:	430b      	orrs	r3, r1
 80046a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4aa5      	ldr	r2, [pc, #660]	; (8004940 <UART_SetConfig+0x34c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d131      	bne.n	8004712 <UART_SetConfig+0x11e>
 80046ae:	4ba5      	ldr	r3, [pc, #660]	; (8004944 <UART_SetConfig+0x350>)
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	2203      	movs	r2, #3
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d01d      	beq.n	80046f6 <UART_SetConfig+0x102>
 80046ba:	d823      	bhi.n	8004704 <UART_SetConfig+0x110>
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d00c      	beq.n	80046da <UART_SetConfig+0xe6>
 80046c0:	d820      	bhi.n	8004704 <UART_SetConfig+0x110>
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <UART_SetConfig+0xd8>
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d00e      	beq.n	80046e8 <UART_SetConfig+0xf4>
 80046ca:	e01b      	b.n	8004704 <UART_SetConfig+0x110>
 80046cc:	231b      	movs	r3, #27
 80046ce:	2220      	movs	r2, #32
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	19db      	adds	r3, r3, r7
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e154      	b.n	8004984 <UART_SetConfig+0x390>
 80046da:	231b      	movs	r3, #27
 80046dc:	2220      	movs	r2, #32
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	19db      	adds	r3, r3, r7
 80046e2:	2202      	movs	r2, #2
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e14d      	b.n	8004984 <UART_SetConfig+0x390>
 80046e8:	231b      	movs	r3, #27
 80046ea:	2220      	movs	r2, #32
 80046ec:	189b      	adds	r3, r3, r2
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	2204      	movs	r2, #4
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e146      	b.n	8004984 <UART_SetConfig+0x390>
 80046f6:	231b      	movs	r3, #27
 80046f8:	2220      	movs	r2, #32
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	19db      	adds	r3, r3, r7
 80046fe:	2208      	movs	r2, #8
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e13f      	b.n	8004984 <UART_SetConfig+0x390>
 8004704:	231b      	movs	r3, #27
 8004706:	2220      	movs	r2, #32
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	2210      	movs	r2, #16
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e138      	b.n	8004984 <UART_SetConfig+0x390>
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a8c      	ldr	r2, [pc, #560]	; (8004948 <UART_SetConfig+0x354>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d131      	bne.n	8004780 <UART_SetConfig+0x18c>
 800471c:	4b89      	ldr	r3, [pc, #548]	; (8004944 <UART_SetConfig+0x350>)
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	220c      	movs	r2, #12
 8004722:	4013      	ands	r3, r2
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d01d      	beq.n	8004764 <UART_SetConfig+0x170>
 8004728:	d823      	bhi.n	8004772 <UART_SetConfig+0x17e>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d00c      	beq.n	8004748 <UART_SetConfig+0x154>
 800472e:	d820      	bhi.n	8004772 <UART_SetConfig+0x17e>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <UART_SetConfig+0x146>
 8004734:	2b04      	cmp	r3, #4
 8004736:	d00e      	beq.n	8004756 <UART_SetConfig+0x162>
 8004738:	e01b      	b.n	8004772 <UART_SetConfig+0x17e>
 800473a:	231b      	movs	r3, #27
 800473c:	2220      	movs	r2, #32
 800473e:	189b      	adds	r3, r3, r2
 8004740:	19db      	adds	r3, r3, r7
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e11d      	b.n	8004984 <UART_SetConfig+0x390>
 8004748:	231b      	movs	r3, #27
 800474a:	2220      	movs	r2, #32
 800474c:	189b      	adds	r3, r3, r2
 800474e:	19db      	adds	r3, r3, r7
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e116      	b.n	8004984 <UART_SetConfig+0x390>
 8004756:	231b      	movs	r3, #27
 8004758:	2220      	movs	r2, #32
 800475a:	189b      	adds	r3, r3, r2
 800475c:	19db      	adds	r3, r3, r7
 800475e:	2204      	movs	r2, #4
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e10f      	b.n	8004984 <UART_SetConfig+0x390>
 8004764:	231b      	movs	r3, #27
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e108      	b.n	8004984 <UART_SetConfig+0x390>
 8004772:	231b      	movs	r3, #27
 8004774:	2220      	movs	r2, #32
 8004776:	189b      	adds	r3, r3, r2
 8004778:	19db      	adds	r3, r3, r7
 800477a:	2210      	movs	r2, #16
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e101      	b.n	8004984 <UART_SetConfig+0x390>
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a71      	ldr	r2, [pc, #452]	; (800494c <UART_SetConfig+0x358>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d131      	bne.n	80047ee <UART_SetConfig+0x1fa>
 800478a:	4b6e      	ldr	r3, [pc, #440]	; (8004944 <UART_SetConfig+0x350>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	2230      	movs	r2, #48	; 0x30
 8004790:	4013      	ands	r3, r2
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d01d      	beq.n	80047d2 <UART_SetConfig+0x1de>
 8004796:	d823      	bhi.n	80047e0 <UART_SetConfig+0x1ec>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d00c      	beq.n	80047b6 <UART_SetConfig+0x1c2>
 800479c:	d820      	bhi.n	80047e0 <UART_SetConfig+0x1ec>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <UART_SetConfig+0x1b4>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d00e      	beq.n	80047c4 <UART_SetConfig+0x1d0>
 80047a6:	e01b      	b.n	80047e0 <UART_SetConfig+0x1ec>
 80047a8:	231b      	movs	r3, #27
 80047aa:	2220      	movs	r2, #32
 80047ac:	189b      	adds	r3, r3, r2
 80047ae:	19db      	adds	r3, r3, r7
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e0e6      	b.n	8004984 <UART_SetConfig+0x390>
 80047b6:	231b      	movs	r3, #27
 80047b8:	2220      	movs	r2, #32
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	19db      	adds	r3, r3, r7
 80047be:	2202      	movs	r2, #2
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e0df      	b.n	8004984 <UART_SetConfig+0x390>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2220      	movs	r2, #32
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2204      	movs	r2, #4
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e0d8      	b.n	8004984 <UART_SetConfig+0x390>
 80047d2:	231b      	movs	r3, #27
 80047d4:	2220      	movs	r2, #32
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	19db      	adds	r3, r3, r7
 80047da:	2208      	movs	r2, #8
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e0d1      	b.n	8004984 <UART_SetConfig+0x390>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2220      	movs	r2, #32
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2210      	movs	r2, #16
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e0ca      	b.n	8004984 <UART_SetConfig+0x390>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a57      	ldr	r2, [pc, #348]	; (8004950 <UART_SetConfig+0x35c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d106      	bne.n	8004806 <UART_SetConfig+0x212>
 80047f8:	231b      	movs	r3, #27
 80047fa:	2220      	movs	r2, #32
 80047fc:	189b      	adds	r3, r3, r2
 80047fe:	19db      	adds	r3, r3, r7
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e0be      	b.n	8004984 <UART_SetConfig+0x390>
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a52      	ldr	r2, [pc, #328]	; (8004954 <UART_SetConfig+0x360>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d106      	bne.n	800481e <UART_SetConfig+0x22a>
 8004810:	231b      	movs	r3, #27
 8004812:	2220      	movs	r2, #32
 8004814:	189b      	adds	r3, r3, r2
 8004816:	19db      	adds	r3, r3, r7
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e0b2      	b.n	8004984 <UART_SetConfig+0x390>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4d      	ldr	r2, [pc, #308]	; (8004958 <UART_SetConfig+0x364>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d106      	bne.n	8004836 <UART_SetConfig+0x242>
 8004828:	231b      	movs	r3, #27
 800482a:	2220      	movs	r2, #32
 800482c:	189b      	adds	r3, r3, r2
 800482e:	19db      	adds	r3, r3, r7
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e0a6      	b.n	8004984 <UART_SetConfig+0x390>
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3e      	ldr	r2, [pc, #248]	; (8004934 <UART_SetConfig+0x340>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d13e      	bne.n	80048be <UART_SetConfig+0x2ca>
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <UART_SetConfig+0x350>)
 8004842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004844:	23c0      	movs	r3, #192	; 0xc0
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	4013      	ands	r3, r2
 800484a:	22c0      	movs	r2, #192	; 0xc0
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	4293      	cmp	r3, r2
 8004850:	d027      	beq.n	80048a2 <UART_SetConfig+0x2ae>
 8004852:	22c0      	movs	r2, #192	; 0xc0
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	4293      	cmp	r3, r2
 8004858:	d82a      	bhi.n	80048b0 <UART_SetConfig+0x2bc>
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	4293      	cmp	r3, r2
 8004860:	d011      	beq.n	8004886 <UART_SetConfig+0x292>
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	0112      	lsls	r2, r2, #4
 8004866:	4293      	cmp	r3, r2
 8004868:	d822      	bhi.n	80048b0 <UART_SetConfig+0x2bc>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <UART_SetConfig+0x284>
 800486e:	2280      	movs	r2, #128	; 0x80
 8004870:	00d2      	lsls	r2, r2, #3
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <UART_SetConfig+0x2a0>
 8004876:	e01b      	b.n	80048b0 <UART_SetConfig+0x2bc>
 8004878:	231b      	movs	r3, #27
 800487a:	2220      	movs	r2, #32
 800487c:	189b      	adds	r3, r3, r2
 800487e:	19db      	adds	r3, r3, r7
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e07e      	b.n	8004984 <UART_SetConfig+0x390>
 8004886:	231b      	movs	r3, #27
 8004888:	2220      	movs	r2, #32
 800488a:	189b      	adds	r3, r3, r2
 800488c:	19db      	adds	r3, r3, r7
 800488e:	2202      	movs	r2, #2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e077      	b.n	8004984 <UART_SetConfig+0x390>
 8004894:	231b      	movs	r3, #27
 8004896:	2220      	movs	r2, #32
 8004898:	189b      	adds	r3, r3, r2
 800489a:	19db      	adds	r3, r3, r7
 800489c:	2204      	movs	r2, #4
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e070      	b.n	8004984 <UART_SetConfig+0x390>
 80048a2:	231b      	movs	r3, #27
 80048a4:	2220      	movs	r2, #32
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	2208      	movs	r2, #8
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e069      	b.n	8004984 <UART_SetConfig+0x390>
 80048b0:	231b      	movs	r3, #27
 80048b2:	2220      	movs	r2, #32
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	2210      	movs	r2, #16
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e062      	b.n	8004984 <UART_SetConfig+0x390>
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <UART_SetConfig+0x344>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d157      	bne.n	8004978 <UART_SetConfig+0x384>
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <UART_SetConfig+0x350>)
 80048ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048cc:	23c0      	movs	r3, #192	; 0xc0
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4013      	ands	r3, r2
 80048d2:	22c0      	movs	r2, #192	; 0xc0
 80048d4:	0092      	lsls	r2, r2, #2
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d040      	beq.n	800495c <UART_SetConfig+0x368>
 80048da:	22c0      	movs	r2, #192	; 0xc0
 80048dc:	0092      	lsls	r2, r2, #2
 80048de:	4293      	cmp	r3, r2
 80048e0:	d843      	bhi.n	800496a <UART_SetConfig+0x376>
 80048e2:	2280      	movs	r2, #128	; 0x80
 80048e4:	0092      	lsls	r2, r2, #2
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d011      	beq.n	800490e <UART_SetConfig+0x31a>
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	0092      	lsls	r2, r2, #2
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d83b      	bhi.n	800496a <UART_SetConfig+0x376>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <UART_SetConfig+0x30c>
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	0052      	lsls	r2, r2, #1
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00e      	beq.n	800491c <UART_SetConfig+0x328>
 80048fe:	e034      	b.n	800496a <UART_SetConfig+0x376>
 8004900:	231b      	movs	r3, #27
 8004902:	2220      	movs	r2, #32
 8004904:	189b      	adds	r3, r3, r2
 8004906:	19db      	adds	r3, r3, r7
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e03a      	b.n	8004984 <UART_SetConfig+0x390>
 800490e:	231b      	movs	r3, #27
 8004910:	2220      	movs	r2, #32
 8004912:	189b      	adds	r3, r3, r2
 8004914:	19db      	adds	r3, r3, r7
 8004916:	2202      	movs	r2, #2
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e033      	b.n	8004984 <UART_SetConfig+0x390>
 800491c:	231b      	movs	r3, #27
 800491e:	2220      	movs	r2, #32
 8004920:	189b      	adds	r3, r3, r2
 8004922:	19db      	adds	r3, r3, r7
 8004924:	2204      	movs	r2, #4
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e02c      	b.n	8004984 <UART_SetConfig+0x390>
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	cfff69f3 	.word	0xcfff69f3
 8004930:	ffffcfff 	.word	0xffffcfff
 8004934:	40008000 	.word	0x40008000
 8004938:	40008400 	.word	0x40008400
 800493c:	11fff4ff 	.word	0x11fff4ff
 8004940:	40013800 	.word	0x40013800
 8004944:	40021000 	.word	0x40021000
 8004948:	40004400 	.word	0x40004400
 800494c:	40004800 	.word	0x40004800
 8004950:	40004c00 	.word	0x40004c00
 8004954:	40005000 	.word	0x40005000
 8004958:	40013c00 	.word	0x40013c00
 800495c:	231b      	movs	r3, #27
 800495e:	2220      	movs	r2, #32
 8004960:	189b      	adds	r3, r3, r2
 8004962:	19db      	adds	r3, r3, r7
 8004964:	2208      	movs	r2, #8
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e00c      	b.n	8004984 <UART_SetConfig+0x390>
 800496a:	231b      	movs	r3, #27
 800496c:	2220      	movs	r2, #32
 800496e:	189b      	adds	r3, r3, r2
 8004970:	19db      	adds	r3, r3, r7
 8004972:	2210      	movs	r2, #16
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e005      	b.n	8004984 <UART_SetConfig+0x390>
 8004978:	231b      	movs	r3, #27
 800497a:	2220      	movs	r2, #32
 800497c:	189b      	adds	r3, r3, r2
 800497e:	19db      	adds	r3, r3, r7
 8004980:	2210      	movs	r2, #16
 8004982:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4ac1      	ldr	r2, [pc, #772]	; (8004c90 <UART_SetConfig+0x69c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d005      	beq.n	800499a <UART_SetConfig+0x3a6>
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4ac0      	ldr	r2, [pc, #768]	; (8004c94 <UART_SetConfig+0x6a0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d000      	beq.n	800499a <UART_SetConfig+0x3a6>
 8004998:	e093      	b.n	8004ac2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800499a:	231b      	movs	r3, #27
 800499c:	2220      	movs	r2, #32
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	19db      	adds	r3, r3, r7
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d015      	beq.n	80049d4 <UART_SetConfig+0x3e0>
 80049a8:	dc18      	bgt.n	80049dc <UART_SetConfig+0x3e8>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d00d      	beq.n	80049ca <UART_SetConfig+0x3d6>
 80049ae:	dc15      	bgt.n	80049dc <UART_SetConfig+0x3e8>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <UART_SetConfig+0x3c6>
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d005      	beq.n	80049c4 <UART_SetConfig+0x3d0>
 80049b8:	e010      	b.n	80049dc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7fe ff8d 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 80049be:	0003      	movs	r3, r0
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049c2:	e014      	b.n	80049ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c4:	4bb4      	ldr	r3, [pc, #720]	; (8004c98 <UART_SetConfig+0x6a4>)
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049c8:	e011      	b.n	80049ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ca:	f7fe fef9 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 80049ce:	0003      	movs	r3, r0
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049d2:	e00c      	b.n	80049ee <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049da:	e008      	b.n	80049ee <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80049e0:	231a      	movs	r3, #26
 80049e2:	2220      	movs	r2, #32
 80049e4:	189b      	adds	r3, r3, r2
 80049e6:	19db      	adds	r3, r3, r7
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
        break;
 80049ec:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d100      	bne.n	80049f6 <UART_SetConfig+0x402>
 80049f4:	e135      	b.n	8004c62 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049fa:	4ba8      	ldr	r3, [pc, #672]	; (8004c9c <UART_SetConfig+0x6a8>)
 80049fc:	0052      	lsls	r2, r2, #1
 80049fe:	5ad3      	ldrh	r3, [r2, r3]
 8004a00:	0019      	movs	r1, r3
 8004a02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a04:	f7fb fb80 	bl	8000108 <__udivsi3>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	0013      	movs	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	189b      	adds	r3, r3, r2
 8004a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d305      	bcc.n	8004a28 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d906      	bls.n	8004a36 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004a28:	231a      	movs	r3, #26
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	189b      	adds	r3, r3, r2
 8004a2e:	19db      	adds	r3, r3, r7
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e044      	b.n	8004ac0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a42:	4b96      	ldr	r3, [pc, #600]	; (8004c9c <UART_SetConfig+0x6a8>)
 8004a44:	0052      	lsls	r2, r2, #1
 8004a46:	5ad3      	ldrh	r3, [r2, r3]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	69b8      	ldr	r0, [r7, #24]
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	f7fb fccd 	bl	80003f4 <__aeabi_uldivmod>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	000b      	movs	r3, r1
 8004a5e:	0e11      	lsrs	r1, r2, #24
 8004a60:	021d      	lsls	r5, r3, #8
 8004a62:	430d      	orrs	r5, r1
 8004a64:	0214      	lsls	r4, r2, #8
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68b8      	ldr	r0, [r7, #8]
 8004a74:	68f9      	ldr	r1, [r7, #12]
 8004a76:	1900      	adds	r0, r0, r4
 8004a78:	4169      	adcs	r1, r5
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f7fb fcb4 	bl	80003f4 <__aeabi_uldivmod>
 8004a8c:	0002      	movs	r2, r0
 8004a8e:	000b      	movs	r3, r1
 8004a90:	0013      	movs	r3, r2
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a96:	23c0      	movs	r3, #192	; 0xc0
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d309      	bcc.n	8004ab2 <UART_SetConfig+0x4be>
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	035b      	lsls	r3, r3, #13
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d204      	bcs.n	8004ab2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aae:	60da      	str	r2, [r3, #12]
 8004ab0:	e006      	b.n	8004ac0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004ab2:	231a      	movs	r3, #26
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	19db      	adds	r3, r3, r7
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004abe:	e0d0      	b.n	8004c62 <UART_SetConfig+0x66e>
 8004ac0:	e0cf      	b.n	8004c62 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d000      	beq.n	8004ad0 <UART_SetConfig+0x4dc>
 8004ace:	e070      	b.n	8004bb2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004ad0:	231b      	movs	r3, #27
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	19db      	adds	r3, r3, r7
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d015      	beq.n	8004b0a <UART_SetConfig+0x516>
 8004ade:	dc18      	bgt.n	8004b12 <UART_SetConfig+0x51e>
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d00d      	beq.n	8004b00 <UART_SetConfig+0x50c>
 8004ae4:	dc15      	bgt.n	8004b12 <UART_SetConfig+0x51e>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x4fc>
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d005      	beq.n	8004afa <UART_SetConfig+0x506>
 8004aee:	e010      	b.n	8004b12 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe fef2 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004af4:	0003      	movs	r3, r0
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004af8:	e014      	b.n	8004b24 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004afa:	4b67      	ldr	r3, [pc, #412]	; (8004c98 <UART_SetConfig+0x6a4>)
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004afe:	e011      	b.n	8004b24 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b00:	f7fe fe5e 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8004b04:	0003      	movs	r3, r0
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b08:	e00c      	b.n	8004b24 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b10:	e008      	b.n	8004b24 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b16:	231a      	movs	r3, #26
 8004b18:	2220      	movs	r2, #32
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	19db      	adds	r3, r3, r7
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]
        break;
 8004b22:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d100      	bne.n	8004b2c <UART_SetConfig+0x538>
 8004b2a:	e09a      	b.n	8004c62 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b30:	4b5a      	ldr	r3, [pc, #360]	; (8004c9c <UART_SetConfig+0x6a8>)
 8004b32:	0052      	lsls	r2, r2, #1
 8004b34:	5ad3      	ldrh	r3, [r2, r3]
 8004b36:	0019      	movs	r1, r3
 8004b38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b3a:	f7fb fae5 	bl	8000108 <__udivsi3>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	005a      	lsls	r2, r3, #1
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	18d2      	adds	r2, r2, r3
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0019      	movs	r1, r3
 8004b50:	0010      	movs	r0, r2
 8004b52:	f7fb fad9 	bl	8000108 <__udivsi3>
 8004b56:	0003      	movs	r3, r0
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	2b0f      	cmp	r3, #15
 8004b5e:	d921      	bls.n	8004ba4 <UART_SetConfig+0x5b0>
 8004b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	025b      	lsls	r3, r3, #9
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d21c      	bcs.n	8004ba4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	200e      	movs	r0, #14
 8004b70:	2420      	movs	r4, #32
 8004b72:	1903      	adds	r3, r0, r4
 8004b74:	19db      	adds	r3, r3, r7
 8004b76:	210f      	movs	r1, #15
 8004b78:	438a      	bics	r2, r1
 8004b7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2207      	movs	r2, #7
 8004b84:	4013      	ands	r3, r2
 8004b86:	b299      	uxth	r1, r3
 8004b88:	1903      	adds	r3, r0, r4
 8004b8a:	19db      	adds	r3, r3, r7
 8004b8c:	1902      	adds	r2, r0, r4
 8004b8e:	19d2      	adds	r2, r2, r7
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1902      	adds	r2, r0, r4
 8004b9c:	19d2      	adds	r2, r2, r7
 8004b9e:	8812      	ldrh	r2, [r2, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e05e      	b.n	8004c62 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba4:	231a      	movs	r3, #26
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	19db      	adds	r3, r3, r7
 8004bac:	2201      	movs	r2, #1
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e057      	b.n	8004c62 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb2:	231b      	movs	r3, #27
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	19db      	adds	r3, r3, r7
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d015      	beq.n	8004bec <UART_SetConfig+0x5f8>
 8004bc0:	dc18      	bgt.n	8004bf4 <UART_SetConfig+0x600>
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00d      	beq.n	8004be2 <UART_SetConfig+0x5ee>
 8004bc6:	dc15      	bgt.n	8004bf4 <UART_SetConfig+0x600>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <UART_SetConfig+0x5de>
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d005      	beq.n	8004bdc <UART_SetConfig+0x5e8>
 8004bd0:	e010      	b.n	8004bf4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd2:	f7fe fe81 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bda:	e014      	b.n	8004c06 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b2e      	ldr	r3, [pc, #184]	; (8004c98 <UART_SetConfig+0x6a4>)
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004be0:	e011      	b.n	8004c06 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fe fded 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8004be6:	0003      	movs	r3, r0
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bea:	e00c      	b.n	8004c06 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004bf2:	e008      	b.n	8004c06 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004bf8:	231a      	movs	r3, #26
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	189b      	adds	r3, r3, r2
 8004bfe:	19db      	adds	r3, r3, r7
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
        break;
 8004c04:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02a      	beq.n	8004c62 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c10:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <UART_SetConfig+0x6a8>)
 8004c12:	0052      	lsls	r2, r2, #1
 8004c14:	5ad3      	ldrh	r3, [r2, r3]
 8004c16:	0019      	movs	r1, r3
 8004c18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c1a:	f7fb fa75 	bl	8000108 <__udivsi3>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	001a      	movs	r2, r3
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	18d2      	adds	r2, r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0019      	movs	r1, r3
 8004c30:	0010      	movs	r0, r2
 8004c32:	f7fb fa69 	bl	8000108 <__udivsi3>
 8004c36:	0003      	movs	r3, r0
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d90a      	bls.n	8004c56 <UART_SetConfig+0x662>
 8004c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	025b      	lsls	r3, r3, #9
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d205      	bcs.n	8004c56 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004c56:	231a      	movs	r3, #26
 8004c58:	2220      	movs	r2, #32
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	19db      	adds	r3, r3, r7
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	226a      	movs	r2, #106	; 0x6a
 8004c66:	2101      	movs	r1, #1
 8004c68:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	2268      	movs	r2, #104	; 0x68
 8004c6e:	2101      	movs	r1, #1
 8004c70:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	2200      	movs	r2, #0
 8004c76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c7e:	231a      	movs	r3, #26
 8004c80:	2220      	movs	r2, #32
 8004c82:	189b      	adds	r3, r3, r2
 8004c84:	19db      	adds	r3, r3, r7
 8004c86:	781b      	ldrb	r3, [r3, #0]
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b010      	add	sp, #64	; 0x40
 8004c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c90:	40008000 	.word	0x40008000
 8004c94:	40008400 	.word	0x40008400
 8004c98:	00f42400 	.word	0x00f42400
 8004c9c:	080068c0 	.word	0x080068c0

08004ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	2208      	movs	r2, #8
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <UART_AdvFeatureConfig+0x144>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4a43      	ldr	r2, [pc, #268]	; (8004de8 <UART_AdvFeatureConfig+0x148>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	0019      	movs	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a3b      	ldr	r2, [pc, #236]	; (8004dec <UART_AdvFeatureConfig+0x14c>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	0019      	movs	r1, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	2204      	movs	r2, #4
 8004d14:	4013      	ands	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <UART_AdvFeatureConfig+0x150>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	2210      	movs	r2, #16
 8004d36:	4013      	ands	r3, r2
 8004d38:	d00b      	beq.n	8004d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a2c      	ldr	r2, [pc, #176]	; (8004df4 <UART_AdvFeatureConfig+0x154>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	0019      	movs	r1, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	2220      	movs	r2, #32
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4a25      	ldr	r2, [pc, #148]	; (8004df8 <UART_AdvFeatureConfig+0x158>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	0019      	movs	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	2240      	movs	r2, #64	; 0x40
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d01d      	beq.n	8004dba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <UART_AdvFeatureConfig+0x15c>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	0019      	movs	r1, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	035b      	lsls	r3, r3, #13
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d10b      	bne.n	8004dba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <UART_AdvFeatureConfig+0x160>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	0019      	movs	r1, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <UART_AdvFeatureConfig+0x164>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	ffff7fff 	.word	0xffff7fff
 8004de8:	fffdffff 	.word	0xfffdffff
 8004dec:	fffeffff 	.word	0xfffeffff
 8004df0:	fffbffff 	.word	0xfffbffff
 8004df4:	ffffefff 	.word	0xffffefff
 8004df8:	ffffdfff 	.word	0xffffdfff
 8004dfc:	ffefffff 	.word	0xffefffff
 8004e00:	ff9fffff 	.word	0xff9fffff
 8004e04:	fff7ffff 	.word	0xfff7ffff

08004e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b092      	sub	sp, #72	; 0x48
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2290      	movs	r2, #144	; 0x90
 8004e14:	2100      	movs	r1, #0
 8004e16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e18:	f7fc f8be 	bl	8000f98 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2208      	movs	r2, #8
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d12d      	bne.n	8004e8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e30:	2280      	movs	r2, #128	; 0x80
 8004e32:	0391      	lsls	r1, r2, #14
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4a47      	ldr	r2, [pc, #284]	; (8004f54 <UART_CheckIdleState+0x14c>)
 8004e38:	9200      	str	r2, [sp, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f000 f88e 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004e40:	1e03      	subs	r3, r0, #0
 8004e42:	d022      	beq.n	8004e8a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e44:	f3ef 8310 	mrs	r3, PRIMASK
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4e:	2301      	movs	r3, #1
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	f383 8810 	msr	PRIMASK, r3
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	438a      	bics	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2288      	movs	r2, #136	; 0x88
 8004e7a:	2120      	movs	r1, #32
 8004e7c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2284      	movs	r2, #132	; 0x84
 8004e82:	2100      	movs	r1, #0
 8004e84:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e060      	b.n	8004f4c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2204      	movs	r2, #4
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d146      	bne.n	8004f26 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	03d1      	lsls	r1, r2, #15
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <UART_CheckIdleState+0x14c>)
 8004ea2:	9200      	str	r2, [sp, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f000 f859 	bl	8004f5c <UART_WaitOnFlagUntilTimeout>
 8004eaa:	1e03      	subs	r3, r0, #0
 8004eac:	d03b      	beq.n	8004f26 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eae:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb8:	2301      	movs	r3, #1
 8004eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f383 8810 	msr	PRIMASK, r3
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4922      	ldr	r1, [pc, #136]	; (8004f58 <UART_CheckIdleState+0x150>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f383 8810 	msr	PRIMASK, r3
}
 8004ede:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eea:	2301      	movs	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2101      	movs	r1, #1
 8004f02:	438a      	bics	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	228c      	movs	r2, #140	; 0x8c
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2284      	movs	r2, #132	; 0x84
 8004f1e:	2100      	movs	r1, #0
 8004f20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e012      	b.n	8004f4c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2288      	movs	r2, #136	; 0x88
 8004f2a:	2120      	movs	r1, #32
 8004f2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	228c      	movs	r2, #140	; 0x8c
 8004f32:	2120      	movs	r1, #32
 8004f34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2284      	movs	r2, #132	; 0x84
 8004f46:	2100      	movs	r1, #0
 8004f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b010      	add	sp, #64	; 0x40
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	01ffffff 	.word	0x01ffffff
 8004f58:	fffffedf 	.word	0xfffffedf

08004f5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f6c:	e051      	b.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	3301      	adds	r3, #1
 8004f72:	d04e      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fc f810 	bl	8000f98 <HAL_GetTick>
 8004f78:	0002      	movs	r2, r0
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e051      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2204      	movs	r2, #4
 8004f96:	4013      	ands	r3, r2
 8004f98:	d03b      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b80      	cmp	r3, #128	; 0x80
 8004f9e:	d038      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d035      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2208      	movs	r2, #8
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d111      	bne.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 f83c 	bl	800503c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2290      	movs	r2, #144	; 0x90
 8004fc8:	2108      	movs	r1, #8
 8004fca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2284      	movs	r2, #132	; 0x84
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e02c      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d112      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2280      	movs	r2, #128	; 0x80
 8004ff2:	0112      	lsls	r2, r2, #4
 8004ff4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f000 f81f 	bl	800503c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2290      	movs	r2, #144	; 0x90
 8005002:	2120      	movs	r1, #32
 8005004:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2284      	movs	r2, #132	; 0x84
 800500a:	2100      	movs	r1, #0
 800500c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e00f      	b.n	8005032 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	4013      	ands	r3, r2
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	425a      	negs	r2, r3
 8005022:	4153      	adcs	r3, r2
 8005024:	b2db      	uxtb	r3, r3
 8005026:	001a      	movs	r2, r3
 8005028:	1dfb      	adds	r3, r7, #7
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d09e      	beq.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	; 0x38
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005044:	f3ef 8310 	mrs	r3, PRIMASK
 8005048:	617b      	str	r3, [r7, #20]
  return(result);
 800504a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
 800504e:	2301      	movs	r3, #1
 8005050:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f383 8810 	msr	PRIMASK, r3
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4926      	ldr	r1, [pc, #152]	; (8005100 <UART_EndRxTransfer+0xc4>)
 8005066:	400a      	ands	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f383 8810 	msr	PRIMASK, r3
}
 8005074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8310 	mrs	r3, PRIMASK
 800507a:	623b      	str	r3, [r7, #32]
  return(result);
 800507c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
 8005080:	2301      	movs	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	f383 8810 	msr	PRIMASK, r3
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	491b      	ldr	r1, [pc, #108]	; (8005104 <UART_EndRxTransfer+0xc8>)
 8005098:	400a      	ands	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	f383 8810 	msr	PRIMASK, r3
}
 80050a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d118      	bne.n	80050e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b0:	f3ef 8310 	mrs	r3, PRIMASK
 80050b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ba:	2301      	movs	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f383 8810 	msr	PRIMASK, r3
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2110      	movs	r1, #16
 80050d2:	438a      	bics	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	228c      	movs	r2, #140	; 0x8c
 80050e6:	2120      	movs	r1, #32
 80050e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b00e      	add	sp, #56	; 0x38
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	fffffedf 	.word	0xfffffedf
 8005104:	effffffe 	.word	0xeffffffe

08005108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	225e      	movs	r2, #94	; 0x5e
 800511a:	2100      	movs	r1, #0
 800511c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2256      	movs	r2, #86	; 0x56
 8005122:	2100      	movs	r1, #0
 8005124:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	0018      	movs	r0, r3
 800512a:	f7ff fa4f 	bl	80045cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	46bd      	mov	sp, r7
 8005132:	b004      	add	sp, #16
 8005134:	bd80      	pop	{r7, pc}

08005136 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513e:	f3ef 8310 	mrs	r3, PRIMASK
 8005142:	60bb      	str	r3, [r7, #8]
  return(result);
 8005144:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	2301      	movs	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f383 8810 	msr	PRIMASK, r3
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2140      	movs	r1, #64	; 0x40
 8005160:	438a      	bics	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2288      	movs	r2, #136	; 0x88
 8005174:	2120      	movs	r1, #32
 8005176:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	0018      	movs	r0, r3
 8005182:	f7ff fa1b 	bl	80045bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b006      	add	sp, #24
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	46bd      	mov	sp, r7
 800519a:	b002      	add	sp, #8
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b002      	add	sp, #8
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051b6:	46c0      	nop			; (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	b002      	add	sp, #8
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2284      	movs	r2, #132	; 0x84
 80051cc:	5c9b      	ldrb	r3, [r3, r2]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e027      	b.n	8005226 <HAL_UARTEx_DisableFifoMode+0x66>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2284      	movs	r2, #132	; 0x84
 80051da:	2101      	movs	r1, #1
 80051dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2288      	movs	r2, #136	; 0x88
 80051e2:	2124      	movs	r1, #36	; 0x24
 80051e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	438a      	bics	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a0b      	ldr	r2, [pc, #44]	; (8005230 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005202:	4013      	ands	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2288      	movs	r2, #136	; 0x88
 8005218:	2120      	movs	r1, #32
 800521a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2284      	movs	r2, #132	; 0x84
 8005220:	2100      	movs	r1, #0
 8005222:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b004      	add	sp, #16
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	dfffffff 	.word	0xdfffffff

08005234 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2284      	movs	r2, #132	; 0x84
 8005242:	5c9b      	ldrb	r3, [r3, r2]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e02e      	b.n	80052aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2284      	movs	r2, #132	; 0x84
 8005250:	2101      	movs	r1, #1
 8005252:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2288      	movs	r2, #136	; 0x88
 8005258:	2124      	movs	r1, #36	; 0x24
 800525a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2101      	movs	r1, #1
 8005270:	438a      	bics	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	08d9      	lsrs	r1, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 f854 	bl	8005338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2288      	movs	r2, #136	; 0x88
 800529c:	2120      	movs	r1, #32
 800529e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2284      	movs	r2, #132	; 0x84
 80052a4:	2100      	movs	r1, #0
 80052a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b004      	add	sp, #16
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2284      	movs	r2, #132	; 0x84
 80052c2:	5c9b      	ldrb	r3, [r3, r2]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e02f      	b.n	800532c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2284      	movs	r2, #132	; 0x84
 80052d0:	2101      	movs	r1, #1
 80052d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2288      	movs	r2, #136	; 0x88
 80052d8:	2124      	movs	r1, #36	; 0x24
 80052da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2101      	movs	r1, #1
 80052f0:	438a      	bics	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	0019      	movs	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f000 f813 	bl	8005338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2288      	movs	r2, #136	; 0x88
 800531e:	2120      	movs	r1, #32
 8005320:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2284      	movs	r2, #132	; 0x84
 8005326:	2100      	movs	r1, #0
 8005328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b004      	add	sp, #16
 8005332:	bd80      	pop	{r7, pc}
 8005334:	f1ffffff 	.word	0xf1ffffff

08005338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005344:	2b00      	cmp	r3, #0
 8005346:	d108      	bne.n	800535a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	226a      	movs	r2, #106	; 0x6a
 800534c:	2101      	movs	r1, #1
 800534e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2268      	movs	r2, #104	; 0x68
 8005354:	2101      	movs	r1, #1
 8005356:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005358:	e043      	b.n	80053e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800535a:	260f      	movs	r6, #15
 800535c:	19bb      	adds	r3, r7, r6
 800535e:	2208      	movs	r2, #8
 8005360:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005362:	200e      	movs	r0, #14
 8005364:	183b      	adds	r3, r7, r0
 8005366:	2208      	movs	r2, #8
 8005368:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	0e5b      	lsrs	r3, r3, #25
 8005372:	b2da      	uxtb	r2, r3
 8005374:	240d      	movs	r4, #13
 8005376:	193b      	adds	r3, r7, r4
 8005378:	2107      	movs	r1, #7
 800537a:	400a      	ands	r2, r1
 800537c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	0f5b      	lsrs	r3, r3, #29
 8005386:	b2da      	uxtb	r2, r3
 8005388:	250c      	movs	r5, #12
 800538a:	197b      	adds	r3, r7, r5
 800538c:	2107      	movs	r1, #7
 800538e:	400a      	ands	r2, r1
 8005390:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005392:	183b      	adds	r3, r7, r0
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	197a      	adds	r2, r7, r5
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	4914      	ldr	r1, [pc, #80]	; (80053ec <UARTEx_SetNbDataToProcess+0xb4>)
 800539c:	5c8a      	ldrb	r2, [r1, r2]
 800539e:	435a      	muls	r2, r3
 80053a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80053a2:	197b      	adds	r3, r7, r5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80053a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053aa:	0019      	movs	r1, r3
 80053ac:	f7fa ff36 	bl	800021c <__divsi3>
 80053b0:	0003      	movs	r3, r0
 80053b2:	b299      	uxth	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	226a      	movs	r2, #106	; 0x6a
 80053b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053ba:	19bb      	adds	r3, r7, r6
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	193a      	adds	r2, r7, r4
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	490a      	ldr	r1, [pc, #40]	; (80053ec <UARTEx_SetNbDataToProcess+0xb4>)
 80053c4:	5c8a      	ldrb	r2, [r1, r2]
 80053c6:	435a      	muls	r2, r3
 80053c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80053ca:	193b      	adds	r3, r7, r4
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053d2:	0019      	movs	r1, r3
 80053d4:	f7fa ff22 	bl	800021c <__divsi3>
 80053d8:	0003      	movs	r3, r0
 80053da:	b299      	uxth	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2268      	movs	r2, #104	; 0x68
 80053e0:	5299      	strh	r1, [r3, r2]
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b005      	add	sp, #20
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	080068d8 	.word	0x080068d8
 80053f0:	080068e0 	.word	0x080068e0

080053f4 <enterNormalMode>:
{
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
}

void enterNormalMode(void)									//正常模式
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_SET);		//CAN1_STB
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <enterNormalMode+0x28>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fd fc90 	bl	8002d24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FDCAN1_EN_GPIO_Port, FDCAN1_EN_Pin, GPIO_PIN_SET);		//CAN1_EN
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	0219      	lsls	r1, r3, #8
 8005408:	23a0      	movs	r3, #160	; 0xa0
 800540a:	05db      	lsls	r3, r3, #23
 800540c:	2201      	movs	r2, #1
 800540e:	0018      	movs	r0, r3
 8005410:	f7fd fc88 	bl	8002d24 <HAL_GPIO_WritePin>
}
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	50000800 	.word	0x50000800

08005420 <GetReadOutProtectionStatus>:

FlagStatus GetReadOutProtectionStatus(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
	FlagStatus status;

	if (FLASH_GetReadOutProtectionLevel() != OB_RDP_LEVEL_0)
 8005426:	f000 f810 	bl	800544a <FLASH_GetReadOutProtectionLevel>
 800542a:	0003      	movs	r3, r0
 800542c:	2baa      	cmp	r3, #170	; 0xaa
 800542e:	d003      	beq.n	8005438 <GetReadOutProtectionStatus+0x18>
	{
		status = SET;
 8005430:	1dfb      	adds	r3, r7, #7
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e002      	b.n	800543e <GetReadOutProtectionStatus+0x1e>
	}
	else
	{
		status = RESET;
 8005438:	1dfb      	adds	r3, r7, #7
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800543e:	1dfb      	adds	r3, r7, #7
 8005440:	781b      	ldrb	r3, [r3, #0]
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b002      	add	sp, #8
 8005448:	bd80      	pop	{r7, pc}

0800544a <FLASH_GetReadOutProtectionLevel>:

uint32_t FLASH_GetReadOutProtectionLevel(void)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b094      	sub	sp, #80	; 0x50
 800544e:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef flash_ob;

	/* Get the Option bytes configuration */
	HAL_FLASHEx_OBGetConfig(&flash_ob);
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	0018      	movs	r0, r3
 8005454:	f7fc ffd0 	bl	80023f8 <HAL_FLASHEx_OBGetConfig>

	return flash_ob.RDPLevel;
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	691b      	ldr	r3, [r3, #16]
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b014      	add	sp, #80	; 0x50
 8005462:	bd80      	pop	{r7, pc}

08005464 <FLASH_Read>:

uint8_t FLASH_Read(uint32_t Address)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	781b      	ldrb	r3, [r3, #0]
}
 8005470:	0018      	movs	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	b002      	add	sp, #8
 8005476:	bd80      	pop	{r7, pc}

08005478 <FLASH_Write>:

void FLASH_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
	uint32_t index  = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
	uint32_t length = DataLength;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]

	/* Unlock the flash memory for write operation */
	HAL_FLASH_Unlock();
 800548c:	f7fc fe90 	bl	80021b0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <FLASH_Write+0x58>)
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	0612      	lsls	r2, r2, #24
 8005496:	611a      	str	r2, [r3, #16]

	for (index = 0U; index < length; (index += 8U))
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	e00d      	b.n	80054ba <FLASH_Write+0x42>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + index), *(uint64_t *)(&Data[index]));
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	18d1      	adds	r1, r2, r3
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	18d3      	adds	r3, r2, r3
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2001      	movs	r0, #1
 80054b0:	f7fc fe30 	bl	8002114 <HAL_FLASH_Program>
	for (index = 0U; index < length; (index += 8U))
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3308      	adds	r3, #8
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3ed      	bcc.n	800549e <FLASH_Write+0x26>
	}

	/* Lock the Flash to disable the flash control register access */
	HAL_FLASH_Lock();
 80054c2:	f7fc fe99 	bl	80021f8 <HAL_FLASH_Lock>
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b006      	add	sp, #24
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	40022000 	.word	0x40022000

080054d4 <FLASH_Erase>:

void FLASH_Erase(uint8_t *p_Data, uint32_t DataLength)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
	uint32_t counter      = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	623b      	str	r3, [r7, #32]
	uint32_t pages_number = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;

	HAL_FLASH_Unlock();
 80054ea:	f7fc fe61 	bl	80021b0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80054ee:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <FLASH_Erase+0x8c>)
 80054f0:	2280      	movs	r2, #128	; 0x80
 80054f2:	0612      	lsls	r2, r2, #24
 80054f4:	611a      	str	r2, [r3, #16]

	pages_number  = (uint32_t)(*(uint16_t *)(p_Data));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
	p_Data += 2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3302      	adds	r3, #2
 8005500:	607b      	str	r3, [r7, #4]

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005502:	210c      	movs	r1, #12
 8005504:	187b      	adds	r3, r7, r1
 8005506:	2202      	movs	r2, #2
 8005508:	601a      	str	r2, [r3, #0]
	pEraseInit.Banks = FLASH_BANK_1;
 800550a:	187b      	adds	r3, r7, r1
 800550c:	2204      	movs	r2, #4
 800550e:	605a      	str	r2, [r3, #4]
	pEraseInit.NbPages   = 1U;
 8005510:	187b      	adds	r3, r7, r1
 8005512:	2201      	movs	r2, #1
 8005514:	60da      	str	r2, [r3, #12]

	for (counter = 0U; ((counter < pages_number) && (counter < DataLength)) ; counter++)
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
 800551a:	e012      	b.n	8005542 <FLASH_Erase+0x6e>
	{
		pEraseInit.Page = ((uint32_t)(*(uint16_t *)(p_Data)));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	001a      	movs	r2, r3
 8005522:	210c      	movs	r1, #12
 8005524:	187b      	adds	r3, r7, r1
 8005526:	609a      	str	r2, [r3, #8]
		HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8005528:	231c      	movs	r3, #28
 800552a:	18fa      	adds	r2, r7, r3
 800552c:	187b      	adds	r3, r7, r1
 800552e:	0011      	movs	r1, r2
 8005530:	0018      	movs	r0, r3
 8005532:	f7fc fef1 	bl	8002318 <HAL_FLASHEx_Erase>
		p_Data += 2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3302      	adds	r3, #2
 800553a:	607b      	str	r3, [r7, #4]
	for (counter = 0U; ((counter < pages_number) && (counter < DataLength)) ; counter++)
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	3301      	adds	r3, #1
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	429a      	cmp	r2, r3
 8005548:	d203      	bcs.n	8005552 <FLASH_Erase+0x7e>
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d3e4      	bcc.n	800551c <FLASH_Erase+0x48>
//		HAL_Delay(1);
	}

	HAL_FLASH_Lock();
 8005552:	f7fc fe51 	bl	80021f8 <HAL_FLASH_Lock>
}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	46bd      	mov	sp, r7
 800555a:	b00a      	add	sp, #40	; 0x28
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	40022000 	.word	0x40022000

08005564 <jump_to_app>:

void jump_to_app(uint32_t APP_FLASH_ADDR)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	/* 检查栈顶地址是否合法 */
	if(((*(__IO uint32_t *)APP_FLASH_ADDR) & 0x2FFDB000) == 0x20000000)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <jump_to_app+0x54>)
 8005572:	401a      	ands	r2, r3
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	059b      	lsls	r3, r3, #22
 8005578:	429a      	cmp	r2, r3
 800557a:	d118      	bne.n	80055ae <jump_to_app+0x4a>
	{
		printf("jump\n");
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <jump_to_app+0x58>)
 800557e:	0018      	movs	r0, r3
 8005580:	f000 fd5a 	bl	8006038 <puts>

		/* 去初始化 */
		HAL_RCC_DeInit();
 8005584:	f7fd fc38 	bl	8002df8 <HAL_RCC_DeInit>
		HAL_DeInit();
 8005588:	f7fb fc7e 	bl	8000e88 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 800558c:	b672      	cpsid	i
}
 800558e:	46c0      	nop			; (mov r8, r8)

		/* 屏蔽所有中断，防止在跳转过程中，中断干扰出现异常 */
		__disable_irq();

		/* 用户代码区第二个 字 为程序开始地址(复位地址) */
		JumpAddress = *(__IO uint32_t *) (APP_FLASH_ADDR + 4);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	617b      	str	r3, [r7, #20]

		/* Initialize user application's Stack Pointer */
		/* 初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址) */
		__set_MSP(*(__IO uint32_t *) APP_FLASH_ADDR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f383 8808 	msr	MSP, r3
}
 80055a4:	46c0      	nop			; (mov r8, r8)

		/* 类型转换 */
		Jump_To_Application = (pFunction) JumpAddress;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	613b      	str	r3, [r7, #16]

		/* 跳转到 APP */
		Jump_To_Application();
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4798      	blx	r3
	}
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b006      	add	sp, #24
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	2ffdb000 	.word	0x2ffdb000
 80055bc:	0800682c 	.word	0x0800682c

080055c0 <FDCAN_Config>:

#define PAGE_SIZE   FLASH_PAGE_SIZE          /* 2KB Page */
#define	MAX_SIZE	0x08000000 + 0x020000 - 0x0800F000

void FDCAN_Config(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <FDCAN_Config+0x74>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
	hfdcan_filter.FilterIndex = 0;
 80055ca:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <FDCAN_Config+0x74>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
	hfdcan_filter.FilterType = FDCAN_FILTER_MASK;
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <FDCAN_Config+0x74>)
 80055d2:	2202      	movs	r2, #2
 80055d4:	609a      	str	r2, [r3, #8]
	hfdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80055d6:	4b17      	ldr	r3, [pc, #92]	; (8005634 <FDCAN_Config+0x74>)
 80055d8:	2201      	movs	r2, #1
 80055da:	60da      	str	r2, [r3, #12]
	hfdcan_filter.FilterID1 = 0x111;
 80055dc:	4b15      	ldr	r3, [pc, #84]	; (8005634 <FDCAN_Config+0x74>)
 80055de:	2212      	movs	r2, #18
 80055e0:	32ff      	adds	r2, #255	; 0xff
 80055e2:	611a      	str	r2, [r3, #16]
	hfdcan_filter.FilterID2 = 0x7FF;
 80055e4:	4b13      	ldr	r3, [pc, #76]	; (8005634 <FDCAN_Config+0x74>)
 80055e6:	4a14      	ldr	r2, [pc, #80]	; (8005638 <FDCAN_Config+0x78>)
 80055e8:	615a      	str	r2, [r3, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 80055ea:	4a12      	ldr	r2, [pc, #72]	; (8005634 <FDCAN_Config+0x74>)
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <FDCAN_Config+0x7c>)
 80055ee:	0011      	movs	r1, r2
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7fc f821 	bl	8001638 <HAL_FDCAN_ConfigFilter>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d001      	beq.n	80055fe <FDCAN_Config+0x3e>
	{
		Error_Handler();
 80055fa:	f7fb fa43 	bl	8000a84 <Error_Handler>
	}

	/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, hfdcan1.Init.DataPrescaler * hfdcan1.Init.DataTimeSeg1, 0) != HAL_OK)
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <FDCAN_Config+0x7c>)
 8005600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005602:	4b0e      	ldr	r3, [pc, #56]	; (800563c <FDCAN_Config+0x7c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	4353      	muls	r3, r2
 8005608:	0019      	movs	r1, r3
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <FDCAN_Config+0x7c>)
 800560c:	2200      	movs	r2, #0
 800560e:	0018      	movs	r0, r3
 8005610:	f7fc f86f 	bl	80016f2 <HAL_FDCAN_ConfigTxDelayCompensation>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d001      	beq.n	800561c <FDCAN_Config+0x5c>
	{
		Error_Handler();
 8005618:	f7fb fa34 	bl	8000a84 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <FDCAN_Config+0x7c>)
 800561e:	0018      	movs	r0, r3
 8005620:	f7fc f887 	bl	8001732 <HAL_FDCAN_EnableTxDelayCompensation>
 8005624:	1e03      	subs	r3, r0, #0
 8005626:	d001      	beq.n	800562c <FDCAN_Config+0x6c>
	{
		Error_Handler();
 8005628:	f7fb fa2c 	bl	8000a84 <Error_Handler>
	}
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	20000110 	.word	0x20000110
 8005638:	000007ff 	.word	0x000007ff
 800563c:	20000128 	.word	0x20000128

08005640 <FDCAN_Enable>:

void FDCAN_Enable(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
	FDCAN_Config();
 8005644:	f7ff ffbc 	bl	80055c0 <FDCAN_Config>
	enterNormalMode();											//CAN收发器正常模�?????
 8005648:	f7ff fed4 	bl	80053f4 <enterNormalMode>
	HAL_Delay(5);
 800564c:	2005      	movs	r0, #5
 800564e:	f7fb fcad 	bl	8000fac <HAL_Delay>

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)		//使能FIFO0新消息中�?????
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <FDCAN_Enable+0x80>)
 8005654:	2200      	movs	r2, #0
 8005656:	2101      	movs	r1, #1
 8005658:	0018      	movs	r0, r3
 800565a:	f7fc fa13 	bl	8001a84 <HAL_FDCAN_ActivateNotification>
 800565e:	1e03      	subs	r3, r0, #0
 8005660:	d001      	beq.n	8005666 <FDCAN_Enable+0x26>
	{
		Error_Handler();
 8005662:	f7fb fa0f 	bl	8000a84 <Error_Handler>
	}
	if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)														//使能FDCAN
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <FDCAN_Enable+0x80>)
 8005668:	0018      	movs	r0, r3
 800566a:	f7fc f882 	bl	8001772 <HAL_FDCAN_Start>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d001      	beq.n	8005676 <FDCAN_Enable+0x36>
	{
		Error_Handler();
 8005672:	f7fb fa07 	bl	8000a84 <Error_Handler>
	}

	isCommandID = 1;
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <FDCAN_Enable+0x84>)
 8005678:	2201      	movs	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]

	TxHeader.Identifier = 0x111;
 800567c:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <FDCAN_Enable+0x88>)
 800567e:	2212      	movs	r2, #18
 8005680:	32ff      	adds	r2, #255	; 0xff
 8005682:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <FDCAN_Enable+0x88>)
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <FDCAN_Enable+0x88>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <FDCAN_Enable+0x88>)
 8005692:	220f      	movs	r2, #15
 8005694:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <FDCAN_Enable+0x88>)
 8005698:	2200      	movs	r2, #0
 800569a:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <FDCAN_Enable+0x88>)
 800569e:	2280      	movs	r2, #128	; 0x80
 80056a0:	0352      	lsls	r2, r2, #13
 80056a2:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 80056a4:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <FDCAN_Enable+0x88>)
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	0392      	lsls	r2, r2, #14
 80056aa:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <FDCAN_Enable+0x88>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker       = 0;
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <FDCAN_Enable+0x88>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	20000128 	.word	0x20000128
 80056c4:	20000244 	.word	0x20000244
 80056c8:	20000248 	.word	0x20000248

080056cc <FDCAN_SendByte>:
	header->TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
	header->MessageMarker       = 0;
}

void FDCAN_SendByte(uint8_t byte)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	0002      	movs	r2, r0
 80056d4:	1dfb      	adds	r3, r7, #7
 80056d6:	701a      	strb	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <FDCAN_SendByte+0x64>)
 80056da:	2201      	movs	r2, #1
 80056dc:	60da      	str	r2, [r3, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	4b14      	ldr	r3, [pc, #80]	; (8005734 <FDCAN_SendByte+0x68>)
 80056e2:	0018      	movs	r0, r3
 80056e4:	f7fc f9be 	bl	8001a64 <HAL_FDCAN_GetTxFifoFreeLevel>
 80056e8:	1e03      	subs	r3, r0, #0
 80056ea:	d0f9      	beq.n	80056e0 <FDCAN_SendByte+0x14>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,&byte);
 80056ec:	1dfa      	adds	r2, r7, #7
 80056ee:	4910      	ldr	r1, [pc, #64]	; (8005730 <FDCAN_SendByte+0x64>)
 80056f0:	4b10      	ldr	r3, [pc, #64]	; (8005734 <FDCAN_SendByte+0x68>)
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7fc f863 	bl	80017be <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE );
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <FDCAN_SendByte+0x68>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	401a      	ands	r2, r3
 8005706:	2380      	movs	r3, #128	; 0x80
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	429a      	cmp	r2, r3
 800570c:	d1f5      	bne.n	80056fa <FDCAN_SendByte+0x2e>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <FDCAN_SendByte+0x68>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <FDCAN_SendByte+0x68>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2280      	movs	r2, #128	; 0x80
 800571a:	0092      	lsls	r2, r2, #2
 800571c:	400a      	ands	r2, r1
 800571e:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8005720:	2001      	movs	r0, #1
 8005722:	f7fb fc43 	bl	8000fac <HAL_Delay>
}
 8005726:	46c0      	nop			; (mov r8, r8)
 8005728:	46bd      	mov	sp, r7
 800572a:	b002      	add	sp, #8
 800572c:	bd80      	pop	{r7, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	20000248 	.word	0x20000248
 8005734:	20000128 	.word	0x20000128

08005738 <FDCAN_SendBytes>:

void FDCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
	TxHeader.DataLength = BufferSize;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <FDCAN_SendBytes+0x60>)
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	60da      	str	r2, [r3, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	4b14      	ldr	r3, [pc, #80]	; (800579c <FDCAN_SendBytes+0x64>)
 800574c:	0018      	movs	r0, r3
 800574e:	f7fc f989 	bl	8001a64 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005752:	1e03      	subs	r3, r0, #0
 8005754:	d0f9      	beq.n	800574a <FDCAN_SendBytes+0x12>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Buffer);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	490f      	ldr	r1, [pc, #60]	; (8005798 <FDCAN_SendBytes+0x60>)
 800575a:	4b10      	ldr	r3, [pc, #64]	; (800579c <FDCAN_SendBytes+0x64>)
 800575c:	0018      	movs	r0, r3
 800575e:	f7fc f82e 	bl	80017be <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE);
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <FDCAN_SendBytes+0x64>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800576a:	2380      	movs	r3, #128	; 0x80
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	401a      	ands	r2, r3
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	429a      	cmp	r2, r3
 8005776:	d1f5      	bne.n	8005764 <FDCAN_SendBytes+0x2c>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <FDCAN_SendBytes+0x64>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <FDCAN_SendBytes+0x64>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2280      	movs	r2, #128	; 0x80
 8005784:	0092      	lsls	r2, r2, #2
 8005786:	400a      	ands	r2, r1
 8005788:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 800578a:	2001      	movs	r0, #1
 800578c:	f7fb fc0e 	bl	8000fac <HAL_Delay>
}
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000248 	.word	0x20000248
 800579c:	20000128 	.word	0x20000128

080057a0 <FDCAN_ReadByte>:

uint8_t FDCAN_ReadByte(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b09c      	sub	sp, #112	; 0x70
 80057a4:	af00      	add	r7, sp, #0
	FDCanRxHeader header;
	int err;

	err = read(&header);
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	0018      	movs	r0, r3
 80057aa:	f000 f8ad 	bl	8005908 <read>
 80057ae:	0003      	movs	r3, r0
 80057b0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if(err){
 80057b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d006      	beq.n	80057c6 <FDCAN_ReadByte+0x26>
		HAL_Delay(1);
 80057b8:	2001      	movs	r0, #1
 80057ba:	f7fb fbf7 	bl	8000fac <HAL_Delay>
		return header.data[0];
 80057be:	1d3b      	adds	r3, r7, #4
 80057c0:	2228      	movs	r2, #40	; 0x28
 80057c2:	5c9b      	ldrb	r3, [r3, r2]
 80057c4:	e003      	b.n	80057ce <FDCAN_ReadByte+0x2e>
	}
	else
	{
		printf("Buffer is Empty\n");
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <FDCAN_ReadByte+0x38>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 fc35 	bl	8006038 <puts>
	}
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b01c      	add	sp, #112	; 0x70
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	08006834 	.word	0x08006834

080057dc <FDCAN_ReadBytes>:

void FDCAN_ReadBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b09f      	sub	sp, #124	; 0x7c
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	FDCanRxHeader header;
	int err;

	err = read(&header);
 80057e6:	240c      	movs	r4, #12
 80057e8:	193b      	adds	r3, r7, r4
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 f88c 	bl	8005908 <read>
 80057f0:	0003      	movs	r3, r0
 80057f2:	677b      	str	r3, [r7, #116]	; 0x74
	if(err){
 80057f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <FDCAN_ReadBytes+0x36>
		memcpy(Buffer,header.data,sizeof(header.data));
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	193b      	adds	r3, r7, r4
 80057fe:	0010      	movs	r0, r2
 8005800:	3328      	adds	r3, #40	; 0x28
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	0019      	movs	r1, r3
 8005806:	f000 fd96 	bl	8006336 <memcpy>
		HAL_Delay(1);
 800580a:	2001      	movs	r0, #1
 800580c:	f7fb fbce 	bl	8000fac <HAL_Delay>
	}
	else
	{
		printf("Buffer is Empty\n");
	}
}
 8005810:	e003      	b.n	800581a <FDCAN_ReadBytes+0x3e>
		printf("Buffer is Empty\n");
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <FDCAN_ReadBytes+0x48>)
 8005814:	0018      	movs	r0, r3
 8005816:	f000 fc0f 	bl	8006038 <puts>
}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	46bd      	mov	sp, r7
 800581e:	b01f      	add	sp, #124	; 0x7c
 8005820:	bd90      	pop	{r4, r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	08006834 	.word	0x08006834

08005828 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)			//接收中断回调函数重写
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	4013      	ands	r3, r2
 8005838:	d010      	beq.n	800585c <HAL_FDCAN_RxFifo0Callback+0x34>
	{
	  /* Retrieve Rx messages from RX FIFO0 */
		if(isCommandID == 1)
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d102      	bne.n	8005848 <HAL_FDCAN_RxFifo0Callback+0x20>
		{
			isSelectID = 1;
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
		}

		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
 8005848:	4b08      	ldr	r3, [pc, #32]	; (800586c <HAL_FDCAN_RxFifo0Callback+0x44>)
 800584a:	4a09      	ldr	r2, [pc, #36]	; (8005870 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800584c:	4809      	ldr	r0, [pc, #36]	; (8005874 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800584e:	2140      	movs	r1, #64	; 0x40
 8005850:	f7fb fffa 	bl	8001848 <HAL_FDCAN_GetRxMessage>
		write(&header);
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8005856:	0018      	movs	r0, r3
 8005858:	f000 f822 	bl	80058a0 <write>
	}
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b002      	add	sp, #8
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000244 	.word	0x20000244
 8005868:	20000245 	.word	0x20000245
 800586c:	20000294 	.word	0x20000294
 8005870:	2000026c 	.word	0x2000026c
 8005874:	20000128 	.word	0x20000128

08005878 <getNextPos>:

int getNextPos(int cur)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	return (cur+1) == size ? 0 : cur+1;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <getNextPos+0x24>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d002      	beq.n	8005892 <getNextPos+0x1a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3301      	adds	r3, #1
 8005890:	e000      	b.n	8005894 <getNextPos+0x1c>
 8005892:	2300      	movs	r3, #0
}
 8005894:	0018      	movs	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}
 800589c:	2000000c 	.word	0x2000000c

080058a0 <write>:

int write(FDCanRxHeader *content)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	int ret = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
	if (validCount < size) {
 80058ac:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <write+0x58>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b12      	ldr	r3, [pc, #72]	; (80058fc <write+0x5c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	da18      	bge.n	80058ea <write+0x4a>
		_Buffer[tail] = *content;
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <write+0x60>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a11      	ldr	r2, [pc, #68]	; (8005904 <write+0x64>)
 80058be:	2168      	movs	r1, #104	; 0x68
 80058c0:	434b      	muls	r3, r1
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	2268      	movs	r2, #104	; 0x68
 80058c8:	0018      	movs	r0, r3
 80058ca:	f000 fd34 	bl	8006336 <memcpy>
		tail = getNextPos(tail);
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <write+0x60>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f7ff ffd0 	bl	8005878 <getNextPos>
 80058d8:	0002      	movs	r2, r0
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <write+0x60>)
 80058dc:	601a      	str	r2, [r3, #0]
		validCount++;
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <write+0x58>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <write+0x58>)
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e001      	b.n	80058ee <write+0x4e>
	} else {
		/* Buffer is FULL */
		ret = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	0018      	movs	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b004      	add	sp, #16
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	2000a554 	.word	0x2000a554
 80058fc:	2000000c 	.word	0x2000000c
 8005900:	2000a55c 	.word	0x2000a55c
 8005904:	200002d4 	.word	0x200002d4

08005908 <read>:

int read(FDCanRxHeader* buf)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	int ret = 1;
 8005910:	2301      	movs	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
	if (validCount > 0) {
 8005914:	4b11      	ldr	r3, [pc, #68]	; (800595c <read+0x54>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dd18      	ble.n	800594e <read+0x46>
		*buf = _Buffer[head];
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <read+0x58>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4a10      	ldr	r2, [pc, #64]	; (8005964 <read+0x5c>)
 8005924:	2168      	movs	r1, #104	; 0x68
 8005926:	434b      	muls	r3, r1
 8005928:	18d3      	adds	r3, r2, r3
 800592a:	2268      	movs	r2, #104	; 0x68
 800592c:	0019      	movs	r1, r3
 800592e:	f000 fd02 	bl	8006336 <memcpy>
		head = getNextPos(head);
 8005932:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <read+0x58>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	0018      	movs	r0, r3
 8005938:	f7ff ff9e 	bl	8005878 <getNextPos>
 800593c:	0002      	movs	r2, r0
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <read+0x58>)
 8005940:	601a      	str	r2, [r3, #0]
		validCount--;
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <read+0x54>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	1e5a      	subs	r2, r3, #1
 8005948:	4b04      	ldr	r3, [pc, #16]	; (800595c <read+0x54>)
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e001      	b.n	8005952 <read+0x4a>
	} else {
		/* Buffer is Empty */
		ret = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	0018      	movs	r0, r3
 8005956:	46bd      	mov	sp, r7
 8005958:	b004      	add	sp, #16
 800595a:	bd80      	pop	{r7, pc}
 800595c:	2000a554 	.word	0x2000a554
 8005960:	2000a558 	.word	0x2000a558
 8005964:	200002d4 	.word	0x200002d4

08005968 <FDCAN_GetCommand_d>:

void FDCAN_GetCommand_d(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
	uint32_t counter;
	const uint8_t a_FDCAN_CommandsList[OPENBL_FDCAN_COMMANDS_NB] =
 800596e:	003b      	movs	r3, r7
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <FDCAN_GetCommand_d+0x58>)
 8005972:	ca03      	ldmia	r2!, {r0, r1}
 8005974:	c303      	stmia	r3!, {r0, r1}
 8005976:	8811      	ldrh	r1, [r2, #0]
 8005978:	8019      	strh	r1, [r3, #0]
 800597a:	7892      	ldrb	r2, [r2, #2]
 800597c:	709a      	strb	r2, [r3, #2]
		WRDS,
		RDEN,
		RDDS
	};

	FDCAN_SendByte(ACK_BYTE);
 800597e:	2079      	movs	r0, #121	; 0x79
 8005980:	f7ff fea4 	bl	80056cc <FDCAN_SendByte>
	/*Send 1 message: number of bytes*/
	FDCAN_SendByte(OPENBL_FDCAN_COMMANDS_NB);
 8005984:	200b      	movs	r0, #11
 8005986:	f7ff fea1 	bl	80056cc <FDCAN_SendByte>
	/*Send 1 message: protocol version*/
	FDCAN_SendByte(0x01);
 800598a:	2001      	movs	r0, #1
 800598c:	f7ff fe9e 	bl	80056cc <FDCAN_SendByte>
	/*Send 12 messages (message by message): command opcodes */
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e009      	b.n	80059aa <FDCAN_GetCommand_d+0x42>
	{
		FDCAN_SendByte(a_FDCAN_CommandsList[i]);
 8005996:	003a      	movs	r2, r7
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	18d3      	adds	r3, r2, r3
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	0018      	movs	r0, r3
 80059a0:	f7ff fe94 	bl	80056cc <FDCAN_SendByte>
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b0a      	cmp	r3, #10
 80059ae:	d9f2      	bls.n	8005996 <FDCAN_GetCommand_d+0x2e>
	}

	FDCAN_SendByte(ACK_BYTE);
 80059b0:	2079      	movs	r0, #121	; 0x79
 80059b2:	f7ff fe8b 	bl	80056cc <FDCAN_SendByte>
}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	08006844 	.word	0x08006844

080059c4 <FDCAN_GetID_d>:

void FDCAN_GetID_d(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b090      	sub	sp, #64	; 0x40
 80059c8:	af00      	add	r7, sp, #0
	uint8_t TxData[64];
	FDCAN_SendByte(ACK_BYTE);
 80059ca:	2079      	movs	r0, #121	; 0x79
 80059cc:	f7ff fe7e 	bl	80056cc <FDCAN_SendByte>

	TxData[0] = DEVICE_ID_MSB;
 80059d0:	003b      	movs	r3, r7
 80059d2:	2204      	movs	r2, #4
 80059d4:	701a      	strb	r2, [r3, #0]
	TxData[1] = DEVICE_ID_LSB;
 80059d6:	003b      	movs	r3, r7
 80059d8:	2267      	movs	r2, #103	; 0x67
 80059da:	705a      	strb	r2, [r3, #1]
	//STM32 product ID
	FDCAN_SendBytes(TxData,FDCAN_DLC_BYTES_2);
 80059dc:	003b      	movs	r3, r7
 80059de:	2102      	movs	r1, #2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fea9 	bl	8005738 <FDCAN_SendBytes>

	FDCAN_SendByte(ACK_BYTE);
 80059e6:	2079      	movs	r0, #121	; 0x79
 80059e8:	f7ff fe70 	bl	80056cc <FDCAN_SendByte>
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b010      	add	sp, #64	; 0x40
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <FDCAN_ReadMemory_d>:

void FDCAN_ReadMemory_d(void)
{
 80059f4:	b5b0      	push	{r4, r5, r7, lr}
 80059f6:	b096      	sub	sp, #88	; 0x58
 80059f8:	af00      	add	r7, sp, #0
	uint32_t single;
	uint8_t  data_length;
	uint8_t TxData[64];

	/* Check memory protection then send adequate response */
	if (GetReadOutProtectionStatus() != RESET)
 80059fa:	f7ff fd11 	bl	8005420 <GetReadOutProtectionStatus>
 80059fe:	1e03      	subs	r3, r0, #0
 8005a00:	d003      	beq.n	8005a0a <FDCAN_ReadMemory_d+0x16>
	{
		FDCAN_SendByte(NACK_BYTE);
 8005a02:	201f      	movs	r0, #31
 8005a04:	f7ff fe62 	bl	80056cc <FDCAN_SendByte>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
			}
			FDCAN_SendByte(ACK_BYTE);
		}
	}
}
 8005a08:	e087      	b.n	8005b1a <FDCAN_ReadMemory_d+0x126>
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 8005a0a:	2340      	movs	r3, #64	; 0x40
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f000 f9c0 	bl	8005d94 <FDCAN_GetAddress>
 8005a14:	0003      	movs	r3, r0
 8005a16:	2b1f      	cmp	r3, #31
 8005a18:	d103      	bne.n	8005a22 <FDCAN_ReadMemory_d+0x2e>
			FDCAN_SendByte(NACK_BYTE);
 8005a1a:	201f      	movs	r0, #31
 8005a1c:	f7ff fe56 	bl	80056cc <FDCAN_SendByte>
}
 8005a20:	e07b      	b.n	8005b1a <FDCAN_ReadMemory_d+0x126>
			FDCAN_SendByte(ACK_BYTE);
 8005a22:	2079      	movs	r0, #121	; 0x79
 8005a24:	f7ff fe52 	bl	80056cc <FDCAN_SendByte>
			number_of_bytes = (uint32_t)(header.data[4]) + 1U;
 8005a28:	4b3e      	ldr	r3, [pc, #248]	; (8005b24 <FDCAN_ReadMemory_d+0x130>)
 8005a2a:	222c      	movs	r2, #44	; 0x2c
 8005a2c:	5c9b      	ldrb	r3, [r3, r2]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	64bb      	str	r3, [r7, #72]	; 0x48
			count  = number_of_bytes / 64U;
 8005a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a34:	099b      	lsrs	r3, r3, #6
 8005a36:	653b      	str	r3, [r7, #80]	; 0x50
			single = (uint32_t)(number_of_bytes % 64U);
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	223f      	movs	r2, #63	; 0x3f
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	647b      	str	r3, [r7, #68]	; 0x44
			while (count != 0U)
 8005a40:	e027      	b.n	8005a92 <FDCAN_ReadMemory_d+0x9e>
				data_length = 0;
 8005a42:	234f      	movs	r3, #79	; 0x4f
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
				for (counter = 64U ; counter > 0U; counter--)
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a4e:	e015      	b.n	8005a7c <FDCAN_ReadMemory_d+0x88>
					TxData[data_length] = FLASH_Read(address);
 8005a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a52:	254f      	movs	r5, #79	; 0x4f
 8005a54:	197b      	adds	r3, r7, r5
 8005a56:	781c      	ldrb	r4, [r3, #0]
 8005a58:	0010      	movs	r0, r2
 8005a5a:	f7ff fd03 	bl	8005464 <FLASH_Read>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	001a      	movs	r2, r3
 8005a62:	003b      	movs	r3, r7
 8005a64:	551a      	strb	r2, [r3, r4]
					data_length++;
 8005a66:	197b      	adds	r3, r7, r5
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	197b      	adds	r3, r7, r5
 8005a6c:	3201      	adds	r2, #1
 8005a6e:	701a      	strb	r2, [r3, #0]
					address++;
 8005a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a72:	3301      	adds	r3, #1
 8005a74:	643b      	str	r3, [r7, #64]	; 0x40
				for (counter = 64U ; counter > 0U; counter--)
 8005a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e6      	bne.n	8005a50 <FDCAN_ReadMemory_d+0x5c>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
 8005a82:	003b      	movs	r3, r7
 8005a84:	210f      	movs	r1, #15
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fe56 	bl	8005738 <FDCAN_SendBytes>
				count--;
 8005a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	653b      	str	r3, [r7, #80]	; 0x50
			while (count != 0U)
 8005a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1d4      	bne.n	8005a42 <FDCAN_ReadMemory_d+0x4e>
			if (single != 0U)
 8005a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d03a      	beq.n	8005b14 <FDCAN_ReadMemory_d+0x120>
				data_length = 0U;
 8005a9e:	234f      	movs	r3, #79	; 0x4f
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
				for (counter = single ; counter > 0U; counter--)
 8005aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8005aaa:	e015      	b.n	8005ad8 <FDCAN_ReadMemory_d+0xe4>
					TxData[data_length] = FLASH_Read(address);
 8005aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aae:	254f      	movs	r5, #79	; 0x4f
 8005ab0:	197b      	adds	r3, r7, r5
 8005ab2:	781c      	ldrb	r4, [r3, #0]
 8005ab4:	0010      	movs	r0, r2
 8005ab6:	f7ff fcd5 	bl	8005464 <FLASH_Read>
 8005aba:	0003      	movs	r3, r0
 8005abc:	001a      	movs	r2, r3
 8005abe:	003b      	movs	r3, r7
 8005ac0:	551a      	strb	r2, [r3, r4]
					data_length++;
 8005ac2:	197b      	adds	r3, r7, r5
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	197b      	adds	r3, r7, r5
 8005ac8:	3201      	adds	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
					address++;
 8005acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ace:	3301      	adds	r3, #1
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
				for (counter = single ; counter > 0U; counter--)
 8005ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <FDCAN_ReadMemory_d+0xb8>
				for (counter = (64U - single) ; counter > 0U; counter--)
 8005ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae0:	2240      	movs	r2, #64	; 0x40
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae6:	e00d      	b.n	8005b04 <FDCAN_ReadMemory_d+0x110>
					TxData[data_length] = 0xFF;
 8005ae8:	204f      	movs	r0, #79	; 0x4f
 8005aea:	183b      	adds	r3, r7, r0
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	003a      	movs	r2, r7
 8005af0:	21ff      	movs	r1, #255	; 0xff
 8005af2:	54d1      	strb	r1, [r2, r3]
					data_length++;
 8005af4:	183b      	adds	r3, r7, r0
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	183b      	adds	r3, r7, r0
 8005afa:	3201      	adds	r2, #1
 8005afc:	701a      	strb	r2, [r3, #0]
				for (counter = (64U - single) ; counter > 0U; counter--)
 8005afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b00:	3b01      	subs	r3, #1
 8005b02:	657b      	str	r3, [r7, #84]	; 0x54
 8005b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ee      	bne.n	8005ae8 <FDCAN_ReadMemory_d+0xf4>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
 8005b0a:	003b      	movs	r3, r7
 8005b0c:	210f      	movs	r1, #15
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f7ff fe12 	bl	8005738 <FDCAN_SendBytes>
			FDCAN_SendByte(ACK_BYTE);
 8005b14:	2079      	movs	r0, #121	; 0x79
 8005b16:	f7ff fdd9 	bl	80056cc <FDCAN_SendByte>
}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b016      	add	sp, #88	; 0x58
 8005b20:	bdb0      	pop	{r4, r5, r7, pc}
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	2000026c 	.word	0x2000026c

08005b28 <FDCAN_WriteMemory_d>:

void FDCAN_WriteMemory_d(void)
{
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b0c7      	sub	sp, #284	; 0x11c
 8005b2c:	af00      	add	r7, sp, #0
	uint32_t single;
	uint32_t mem_area;
	uint8_t data_length;
	uint8_t data[256];

	if (GetReadOutProtectionStatus() != RESET)
 8005b2e:	f7ff fc77 	bl	8005420 <GetReadOutProtectionStatus>
 8005b32:	1e03      	subs	r3, r0, #0
 8005b34:	d003      	beq.n	8005b3e <FDCAN_WriteMemory_d+0x16>
	{
		FDCAN_SendByte(NACK_BYTE);
 8005b36:	201f      	movs	r0, #31
 8005b38:	f7ff fdc8 	bl	80056cc <FDCAN_SendByte>
			FLASH_Write(address, (uint8_t *)data, CodeSize);

			FDCAN_SendByte(ACK_BYTE);
		}
	}
}
 8005b3c:	e06d      	b.n	8005c1a <FDCAN_WriteMemory_d+0xf2>
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 8005b3e:	1d7b      	adds	r3, r7, #5
 8005b40:	33ff      	adds	r3, #255	; 0xff
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f926 	bl	8005d94 <FDCAN_GetAddress>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	2b1f      	cmp	r3, #31
 8005b4c:	d103      	bne.n	8005b56 <FDCAN_WriteMemory_d+0x2e>
			FDCAN_SendByte(NACK_BYTE);
 8005b4e:	201f      	movs	r0, #31
 8005b50:	f7ff fdbc 	bl	80056cc <FDCAN_SendByte>
}
 8005b54:	e061      	b.n	8005c1a <FDCAN_WriteMemory_d+0xf2>
			FDCAN_SendByte(ACK_BYTE);
 8005b56:	2079      	movs	r0, #121	; 0x79
 8005b58:	f7ff fdb8 	bl	80056cc <FDCAN_SendByte>
			CodeSize = (uint32_t)(header.data[4]) + 1U;
 8005b5c:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <FDCAN_WriteMemory_d+0xfc>)
 8005b5e:	222c      	movs	r2, #44	; 0x2c
 8005b60:	5c9b      	ldrb	r3, [r3, r2]
 8005b62:	3301      	adds	r3, #1
 8005b64:	2288      	movs	r2, #136	; 0x88
 8005b66:	0052      	lsls	r2, r2, #1
 8005b68:	18b9      	adds	r1, r7, r2
 8005b6a:	600b      	str	r3, [r1, #0]
			count = CodeSize / 64U;
 8005b6c:	18bb      	adds	r3, r7, r2
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	099b      	lsrs	r3, r3, #6
 8005b72:	2486      	movs	r4, #134	; 0x86
 8005b74:	0064      	lsls	r4, r4, #1
 8005b76:	1939      	adds	r1, r7, r4
 8005b78:	600b      	str	r3, [r1, #0]
			single = (uint32_t)(CodeSize % 64U);
 8005b7a:	18bb      	adds	r3, r7, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	223f      	movs	r2, #63	; 0x3f
 8005b80:	4013      	ands	r3, r2
 8005b82:	2284      	movs	r2, #132	; 0x84
 8005b84:	0052      	lsls	r2, r2, #1
 8005b86:	18ba      	adds	r2, r7, r2
 8005b88:	6013      	str	r3, [r2, #0]
			data_length = 0;
 8005b8a:	2318      	movs	r3, #24
 8005b8c:	33ff      	adds	r3, #255	; 0xff
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
			HAL_Delay(15);
 8005b94:	200f      	movs	r0, #15
 8005b96:	f7fb fa09 	bl	8000fac <HAL_Delay>
			if (count != 0U)
 8005b9a:	193b      	adds	r3, r7, r4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01a      	beq.n	8005bd8 <FDCAN_WriteMemory_d+0xb0>
				while (data_length != count)
 8005ba2:	e00f      	b.n	8005bc4 <FDCAN_WriteMemory_d+0x9c>
					FDCAN_ReadBytes(&data[data_length * 64U], FDCAN_DLC_BYTES_64);
 8005ba4:	2418      	movs	r4, #24
 8005ba6:	34ff      	adds	r4, #255	; 0xff
 8005ba8:	193b      	adds	r3, r7, r4
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	019b      	lsls	r3, r3, #6
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	18d3      	adds	r3, r2, r3
 8005bb2:	210f      	movs	r1, #15
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7ff fe11 	bl	80057dc <FDCAN_ReadBytes>
					data_length++;
 8005bba:	193b      	adds	r3, r7, r4
 8005bbc:	781a      	ldrb	r2, [r3, #0]
 8005bbe:	193b      	adds	r3, r7, r4
 8005bc0:	3201      	adds	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
				while (data_length != count)
 8005bc4:	2318      	movs	r3, #24
 8005bc6:	33ff      	adds	r3, #255	; 0xff
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2286      	movs	r2, #134	; 0x86
 8005bce:	0052      	lsls	r2, r2, #1
 8005bd0:	18ba      	adds	r2, r7, r2
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1e5      	bne.n	8005ba4 <FDCAN_WriteMemory_d+0x7c>
			if (single != 0U)
 8005bd8:	2184      	movs	r1, #132	; 0x84
 8005bda:	0049      	lsls	r1, r1, #1
 8005bdc:	187b      	adds	r3, r7, r1
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <FDCAN_WriteMemory_d+0xd6>
				FDCAN_ReadBytes(&data[(CodeSize - single)], FDCAN_DLC_BYTES_64);
 8005be4:	2388      	movs	r3, #136	; 0x88
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	187b      	adds	r3, r7, r1
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	1d3a      	adds	r2, r7, #4
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	210f      	movs	r1, #15
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7ff fdef 	bl	80057dc <FDCAN_ReadBytes>
			FLASH_Write(address, (uint8_t *)data, CodeSize);
 8005bfe:	1d7b      	adds	r3, r7, #5
 8005c00:	33ff      	adds	r3, #255	; 0xff
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2288      	movs	r2, #136	; 0x88
 8005c06:	0052      	lsls	r2, r2, #1
 8005c08:	18ba      	adds	r2, r7, r2
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	1d39      	adds	r1, r7, #4
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f7ff fc32 	bl	8005478 <FLASH_Write>
			FDCAN_SendByte(ACK_BYTE);
 8005c14:	2079      	movs	r0, #121	; 0x79
 8005c16:	f7ff fd59 	bl	80056cc <FDCAN_SendByte>
}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b047      	add	sp, #284	; 0x11c
 8005c20:	bd90      	pop	{r4, r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	2000026c 	.word	0x2000026c

08005c28 <FDCAN_EraseMemory_d>:

void FDCAN_EraseMemory_d(void)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b099      	sub	sp, #100	; 0x64
 8005c2c:	af00      	add	r7, sp, #0
	uint16_t data_a;
	uint16_t counter;
	uint16_t i;
	uint8_t tempdata;
	uint8_t status = ACK_BYTE;
 8005c2e:	235b      	movs	r3, #91	; 0x5b
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	2279      	movs	r2, #121	; 0x79
 8005c34:	701a      	strb	r2, [r3, #0]
	ErrorStatus error_value;
	uint8_t data[80];

	if (GetReadOutProtectionStatus() != RESET)
 8005c36:	f7ff fbf3 	bl	8005420 <GetReadOutProtectionStatus>
 8005c3a:	1e03      	subs	r3, r0, #0
 8005c3c:	d003      	beq.n	8005c46 <FDCAN_EraseMemory_d+0x1e>
	{
		FDCAN_SendByte(NACK_BYTE);
 8005c3e:	201f      	movs	r0, #31
 8005c40:	f7ff fd44 	bl	80056cc <FDCAN_SendByte>
			FLASH_Erase(data,64);

			FDCAN_SendByte(ACK_BYTE);
		}
	}
}
 8005c44:	e07a      	b.n	8005d3c <FDCAN_EraseMemory_d+0x114>
		FDCAN_SendByte(ACK_BYTE);
 8005c46:	2079      	movs	r0, #121	; 0x79
 8005c48:	f7ff fd40 	bl	80056cc <FDCAN_SendByte>
		data_a = (uint16_t)(header.data[0]) << 8;
 8005c4c:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <FDCAN_EraseMemory_d+0x11c>)
 8005c4e:	2228      	movs	r2, #40	; 0x28
 8005c50:	5c9b      	ldrb	r3, [r3, r2]
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	2058      	movs	r0, #88	; 0x58
 8005c56:	183b      	adds	r3, r7, r0
 8005c58:	0212      	lsls	r2, r2, #8
 8005c5a:	801a      	strh	r2, [r3, #0]
		data_a = data_a | (header.data[1]);
 8005c5c:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <FDCAN_EraseMemory_d+0x11c>)
 8005c5e:	2229      	movs	r2, #41	; 0x29
 8005c60:	5c9b      	ldrb	r3, [r3, r2]
 8005c62:	b299      	uxth	r1, r3
 8005c64:	183b      	adds	r3, r7, r0
 8005c66:	183a      	adds	r2, r7, r0
 8005c68:	8812      	ldrh	r2, [r2, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	801a      	strh	r2, [r3, #0]
		(header.data[0]) = (uint8_t)(data_a & 0x00FFU);
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b2d9      	uxtb	r1, r3
 8005c74:	4b33      	ldr	r3, [pc, #204]	; (8005d44 <FDCAN_EraseMemory_d+0x11c>)
 8005c76:	2228      	movs	r2, #40	; 0x28
 8005c78:	5499      	strb	r1, [r3, r2]
		(header.data[1]) = (uint8_t)((data_a & 0xFF00U) >> 8);
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	b2d9      	uxtb	r1, r3
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <FDCAN_EraseMemory_d+0x11c>)
 8005c86:	2229      	movs	r2, #41	; 0x29
 8005c88:	5499      	strb	r1, [r3, r2]
		data[0] = (header.data[0]);
 8005c8a:	4b2e      	ldr	r3, [pc, #184]	; (8005d44 <FDCAN_EraseMemory_d+0x11c>)
 8005c8c:	2228      	movs	r2, #40	; 0x28
 8005c8e:	5c9a      	ldrb	r2, [r3, r2]
 8005c90:	1d3b      	adds	r3, r7, #4
 8005c92:	701a      	strb	r2, [r3, #0]
		data[1] = (header.data[1]);
 8005c94:	4b2b      	ldr	r3, [pc, #172]	; (8005d44 <FDCAN_EraseMemory_d+0x11c>)
 8005c96:	2229      	movs	r2, #41	; 0x29
 8005c98:	5c9a      	ldrb	r2, [r3, r2]
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	705a      	strb	r2, [r3, #1]
		if ((data_a & 0xFFF0U) != 0xFFF0U)
 8005c9e:	0004      	movs	r4, r0
 8005ca0:	183b      	adds	r3, r7, r0
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	4a28      	ldr	r2, [pc, #160]	; (8005d48 <FDCAN_EraseMemory_d+0x120>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	4a27      	ldr	r2, [pc, #156]	; (8005d48 <FDCAN_EraseMemory_d+0x120>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d046      	beq.n	8005d3c <FDCAN_EraseMemory_d+0x114>
			HAL_Delay(10);
 8005cae:	200a      	movs	r0, #10
 8005cb0:	f7fb f97c 	bl	8000fac <HAL_Delay>
			FDCAN_ReadBytes(&data[2], 64U);
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	3302      	adds	r3, #2
 8005cb8:	2140      	movs	r1, #64	; 0x40
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7ff fd8e 	bl	80057dc <FDCAN_ReadBytes>
			i = 2;
 8005cc0:	235c      	movs	r3, #92	; 0x5c
 8005cc2:	18fb      	adds	r3, r7, r3
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	801a      	strh	r2, [r3, #0]
			for (counter = data_a; counter != (uint16_t)0; counter--)
 8005cc8:	235e      	movs	r3, #94	; 0x5e
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	193a      	adds	r2, r7, r4
 8005cce:	8812      	ldrh	r2, [r2, #0]
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	e026      	b.n	8005d22 <FDCAN_EraseMemory_d+0xfa>
				tempdata = data[i];
 8005cd4:	205c      	movs	r0, #92	; 0x5c
 8005cd6:	183b      	adds	r3, r7, r0
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	2457      	movs	r4, #87	; 0x57
 8005cdc:	193b      	adds	r3, r7, r4
 8005cde:	1d39      	adds	r1, r7, #4
 8005ce0:	5c8a      	ldrb	r2, [r1, r2]
 8005ce2:	701a      	strb	r2, [r3, #0]
				i++;
 8005ce4:	183b      	adds	r3, r7, r0
 8005ce6:	881a      	ldrh	r2, [r3, #0]
 8005ce8:	183b      	adds	r3, r7, r0
 8005cea:	3201      	adds	r2, #1
 8005cec:	801a      	strh	r2, [r3, #0]
				data[i - (uint16_t)1] = data[i];
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	881a      	ldrh	r2, [r3, #0]
 8005cf2:	183b      	adds	r3, r7, r0
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	1d39      	adds	r1, r7, #4
 8005cfa:	5c89      	ldrb	r1, [r1, r2]
 8005cfc:	1d3a      	adds	r2, r7, #4
 8005cfe:	54d1      	strb	r1, [r2, r3]
				data[i] = tempdata;
 8005d00:	183b      	adds	r3, r7, r0
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	1d3a      	adds	r2, r7, #4
 8005d06:	1939      	adds	r1, r7, r4
 8005d08:	7809      	ldrb	r1, [r1, #0]
 8005d0a:	54d1      	strb	r1, [r2, r3]
				i++;
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	881a      	ldrh	r2, [r3, #0]
 8005d10:	183b      	adds	r3, r7, r0
 8005d12:	3201      	adds	r2, #1
 8005d14:	801a      	strh	r2, [r3, #0]
			for (counter = data_a; counter != (uint16_t)0; counter--)
 8005d16:	215e      	movs	r1, #94	; 0x5e
 8005d18:	187b      	adds	r3, r7, r1
 8005d1a:	881a      	ldrh	r2, [r3, #0]
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	235e      	movs	r3, #94	; 0x5e
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1d3      	bne.n	8005cd4 <FDCAN_EraseMemory_d+0xac>
			FLASH_Erase(data,64);
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	2140      	movs	r1, #64	; 0x40
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7ff fbcf 	bl	80054d4 <FLASH_Erase>
			FDCAN_SendByte(ACK_BYTE);
 8005d36:	2079      	movs	r0, #121	; 0x79
 8005d38:	f7ff fcc8 	bl	80056cc <FDCAN_SendByte>
}
 8005d3c:	46c0      	nop			; (mov r8, r8)
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b019      	add	sp, #100	; 0x64
 8005d42:	bd90      	pop	{r4, r7, pc}
 8005d44:	2000026c 	.word	0x2000026c
 8005d48:	0000fff0 	.word	0x0000fff0

08005d4c <FDCAN_Go_d>:

void FDCAN_Go_d(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
	uint32_t address;

	if (GetReadOutProtectionStatus() != RESET)
 8005d52:	f7ff fb65 	bl	8005420 <GetReadOutProtectionStatus>
 8005d56:	1e03      	subs	r3, r0, #0
 8005d58:	d003      	beq.n	8005d62 <FDCAN_Go_d+0x16>
	{
		FDCAN_SendByte(NACK_BYTE);
 8005d5a:	201f      	movs	r0, #31
 8005d5c:	f7ff fcb6 	bl	80056cc <FDCAN_SendByte>
	    {
			FDCAN_SendByte(ACK_BYTE);
			jump_to_app(address);
	    }
	}
}
 8005d60:	e014      	b.n	8005d8c <FDCAN_Go_d+0x40>
		FDCAN_SendByte(ACK_BYTE);
 8005d62:	2079      	movs	r0, #121	; 0x79
 8005d64:	f7ff fcb2 	bl	80056cc <FDCAN_SendByte>
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 8005d68:	1d3b      	adds	r3, r7, #4
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f812 	bl	8005d94 <FDCAN_GetAddress>
 8005d70:	0003      	movs	r3, r0
 8005d72:	2b1f      	cmp	r3, #31
 8005d74:	d103      	bne.n	8005d7e <FDCAN_Go_d+0x32>
			FDCAN_SendByte(NACK_BYTE);
 8005d76:	201f      	movs	r0, #31
 8005d78:	f7ff fca8 	bl	80056cc <FDCAN_SendByte>
}
 8005d7c:	e006      	b.n	8005d8c <FDCAN_Go_d+0x40>
			FDCAN_SendByte(ACK_BYTE);
 8005d7e:	2079      	movs	r0, #121	; 0x79
 8005d80:	f7ff fca4 	bl	80056cc <FDCAN_SendByte>
			jump_to_app(address);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7ff fbec 	bl	8005564 <jump_to_app>
}
 8005d8c:	46c0      	nop			; (mov r8, r8)
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b002      	add	sp, #8
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <FDCAN_GetAddress>:

uint8_t FDCAN_GetAddress(uint32_t *Address)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	uint8_t status;

	*Address = (((((uint32_t) header.data[0]) << 24)  |
 8005d9c:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <FDCAN_GetAddress+0x68>)
 8005d9e:	2228      	movs	r2, #40	; 0x28
 8005da0:	5c9b      	ldrb	r3, [r3, r2]
 8005da2:	061a      	lsls	r2, r3, #24
			   (((uint32_t) header.data[1]) << 16)  |
 8005da4:	4b15      	ldr	r3, [pc, #84]	; (8005dfc <FDCAN_GetAddress+0x68>)
 8005da6:	2129      	movs	r1, #41	; 0x29
 8005da8:	5c5b      	ldrb	r3, [r3, r1]
 8005daa:	041b      	lsls	r3, r3, #16
	*Address = (((((uint32_t) header.data[0]) << 24)  |
 8005dac:	431a      	orrs	r2, r3
			   (((uint32_t) header.data[2]) << 8)   |
 8005dae:	4b13      	ldr	r3, [pc, #76]	; (8005dfc <FDCAN_GetAddress+0x68>)
 8005db0:	212a      	movs	r1, #42	; 0x2a
 8005db2:	5c5b      	ldrb	r3, [r3, r1]
 8005db4:	021b      	lsls	r3, r3, #8
			   (((uint32_t) header.data[1]) << 16)  |
 8005db6:	4313      	orrs	r3, r2
			   (((uint32_t) header.data[3]))));
 8005db8:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <FDCAN_GetAddress+0x68>)
 8005dba:	212b      	movs	r1, #43	; 0x2b
 8005dbc:	5c52      	ldrb	r2, [r2, r1]
			   (((uint32_t) header.data[2]) << 8)   |
 8005dbe:	431a      	orrs	r2, r3
	*Address = (((((uint32_t) header.data[0]) << 24)  |
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]

	/* Check if received address is valid or not */
	if ((*Address >= 0x08000000) && (*Address <= 0x08020000))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	051b      	lsls	r3, r3, #20
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d309      	bcc.n	8005de4 <FDCAN_GetAddress+0x50>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <FDCAN_GetAddress+0x6c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d804      	bhi.n	8005de4 <FDCAN_GetAddress+0x50>
	{
		status = ACK_BYTE;
 8005dda:	230f      	movs	r3, #15
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	2279      	movs	r2, #121	; 0x79
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	e003      	b.n	8005dec <FDCAN_GetAddress+0x58>
	}
	else
	{
		status = NACK_BYTE;
 8005de4:	230f      	movs	r3, #15
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	221f      	movs	r2, #31
 8005dea:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8005dec:	230f      	movs	r3, #15
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	781b      	ldrb	r3, [r3, #0]
}
 8005df2:	0018      	movs	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b004      	add	sp, #16
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	2000026c 	.word	0x2000026c
 8005e00:	08020000 	.word	0x08020000

08005e04 <std>:
 8005e04:	2300      	movs	r3, #0
 8005e06:	b510      	push	{r4, lr}
 8005e08:	0004      	movs	r4, r0
 8005e0a:	6003      	str	r3, [r0, #0]
 8005e0c:	6043      	str	r3, [r0, #4]
 8005e0e:	6083      	str	r3, [r0, #8]
 8005e10:	8181      	strh	r1, [r0, #12]
 8005e12:	6643      	str	r3, [r0, #100]	; 0x64
 8005e14:	81c2      	strh	r2, [r0, #14]
 8005e16:	6103      	str	r3, [r0, #16]
 8005e18:	6143      	str	r3, [r0, #20]
 8005e1a:	6183      	str	r3, [r0, #24]
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	2208      	movs	r2, #8
 8005e20:	305c      	adds	r0, #92	; 0x5c
 8005e22:	f000 fa05 	bl	8006230 <memset>
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <std+0x50>)
 8005e28:	6224      	str	r4, [r4, #32]
 8005e2a:	6263      	str	r3, [r4, #36]	; 0x24
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <std+0x54>)
 8005e2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <std+0x58>)
 8005e32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <std+0x5c>)
 8005e36:	6323      	str	r3, [r4, #48]	; 0x30
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <std+0x60>)
 8005e3a:	429c      	cmp	r4, r3
 8005e3c:	d005      	beq.n	8005e4a <std+0x46>
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <std+0x64>)
 8005e40:	429c      	cmp	r4, r3
 8005e42:	d002      	beq.n	8005e4a <std+0x46>
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <std+0x68>)
 8005e46:	429c      	cmp	r4, r3
 8005e48:	d103      	bne.n	8005e52 <std+0x4e>
 8005e4a:	0020      	movs	r0, r4
 8005e4c:	3058      	adds	r0, #88	; 0x58
 8005e4e:	f000 fa6f 	bl	8006330 <__retarget_lock_init_recursive>
 8005e52:	bd10      	pop	{r4, pc}
 8005e54:	0800604d 	.word	0x0800604d
 8005e58:	08006075 	.word	0x08006075
 8005e5c:	080060ad 	.word	0x080060ad
 8005e60:	080060d9 	.word	0x080060d9
 8005e64:	2000a560 	.word	0x2000a560
 8005e68:	2000a5c8 	.word	0x2000a5c8
 8005e6c:	2000a630 	.word	0x2000a630

08005e70 <stdio_exit_handler>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4a03      	ldr	r2, [pc, #12]	; (8005e80 <stdio_exit_handler+0x10>)
 8005e74:	4903      	ldr	r1, [pc, #12]	; (8005e84 <stdio_exit_handler+0x14>)
 8005e76:	4804      	ldr	r0, [pc, #16]	; (8005e88 <stdio_exit_handler+0x18>)
 8005e78:	f000 f86c 	bl	8005f54 <_fwalk_sglue>
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	20000010 	.word	0x20000010
 8005e84:	08006659 	.word	0x08006659
 8005e88:	2000001c 	.word	0x2000001c

08005e8c <cleanup_stdio>:
 8005e8c:	6841      	ldr	r1, [r0, #4]
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <cleanup_stdio+0x30>)
 8005e90:	b510      	push	{r4, lr}
 8005e92:	0004      	movs	r4, r0
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d001      	beq.n	8005e9c <cleanup_stdio+0x10>
 8005e98:	f000 fbde 	bl	8006658 <_fflush_r>
 8005e9c:	68a1      	ldr	r1, [r4, #8]
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <cleanup_stdio+0x34>)
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	d002      	beq.n	8005eaa <cleanup_stdio+0x1e>
 8005ea4:	0020      	movs	r0, r4
 8005ea6:	f000 fbd7 	bl	8006658 <_fflush_r>
 8005eaa:	68e1      	ldr	r1, [r4, #12]
 8005eac:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <cleanup_stdio+0x38>)
 8005eae:	4299      	cmp	r1, r3
 8005eb0:	d002      	beq.n	8005eb8 <cleanup_stdio+0x2c>
 8005eb2:	0020      	movs	r0, r4
 8005eb4:	f000 fbd0 	bl	8006658 <_fflush_r>
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	2000a560 	.word	0x2000a560
 8005ec0:	2000a5c8 	.word	0x2000a5c8
 8005ec4:	2000a630 	.word	0x2000a630

08005ec8 <global_stdio_init.part.0>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <global_stdio_init.part.0+0x28>)
 8005ecc:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <global_stdio_init.part.0+0x2c>)
 8005ece:	2104      	movs	r1, #4
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	4809      	ldr	r0, [pc, #36]	; (8005ef8 <global_stdio_init.part.0+0x30>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f7ff ff95 	bl	8005e04 <std>
 8005eda:	2201      	movs	r2, #1
 8005edc:	2109      	movs	r1, #9
 8005ede:	4807      	ldr	r0, [pc, #28]	; (8005efc <global_stdio_init.part.0+0x34>)
 8005ee0:	f7ff ff90 	bl	8005e04 <std>
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	2112      	movs	r1, #18
 8005ee8:	4805      	ldr	r0, [pc, #20]	; (8005f00 <global_stdio_init.part.0+0x38>)
 8005eea:	f7ff ff8b 	bl	8005e04 <std>
 8005eee:	bd10      	pop	{r4, pc}
 8005ef0:	2000a698 	.word	0x2000a698
 8005ef4:	08005e71 	.word	0x08005e71
 8005ef8:	2000a560 	.word	0x2000a560
 8005efc:	2000a5c8 	.word	0x2000a5c8
 8005f00:	2000a630 	.word	0x2000a630

08005f04 <__sfp_lock_acquire>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4802      	ldr	r0, [pc, #8]	; (8005f10 <__sfp_lock_acquire+0xc>)
 8005f08:	f000 fa13 	bl	8006332 <__retarget_lock_acquire_recursive>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	2000a6a1 	.word	0x2000a6a1

08005f14 <__sfp_lock_release>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4802      	ldr	r0, [pc, #8]	; (8005f20 <__sfp_lock_release+0xc>)
 8005f18:	f000 fa0c 	bl	8006334 <__retarget_lock_release_recursive>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	2000a6a1 	.word	0x2000a6a1

08005f24 <__sinit>:
 8005f24:	b510      	push	{r4, lr}
 8005f26:	0004      	movs	r4, r0
 8005f28:	f7ff ffec 	bl	8005f04 <__sfp_lock_acquire>
 8005f2c:	6a23      	ldr	r3, [r4, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <__sinit+0x14>
 8005f32:	f7ff ffef 	bl	8005f14 <__sfp_lock_release>
 8005f36:	bd10      	pop	{r4, pc}
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <__sinit+0x28>)
 8005f3a:	6223      	str	r3, [r4, #32]
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <__sinit+0x2c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f6      	bne.n	8005f32 <__sinit+0xe>
 8005f44:	f7ff ffc0 	bl	8005ec8 <global_stdio_init.part.0>
 8005f48:	e7f3      	b.n	8005f32 <__sinit+0xe>
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	08005e8d 	.word	0x08005e8d
 8005f50:	2000a698 	.word	0x2000a698

08005f54 <_fwalk_sglue>:
 8005f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f56:	0014      	movs	r4, r2
 8005f58:	2600      	movs	r6, #0
 8005f5a:	9000      	str	r0, [sp, #0]
 8005f5c:	9101      	str	r1, [sp, #4]
 8005f5e:	68a5      	ldr	r5, [r4, #8]
 8005f60:	6867      	ldr	r7, [r4, #4]
 8005f62:	3f01      	subs	r7, #1
 8005f64:	d504      	bpl.n	8005f70 <_fwalk_sglue+0x1c>
 8005f66:	6824      	ldr	r4, [r4, #0]
 8005f68:	2c00      	cmp	r4, #0
 8005f6a:	d1f8      	bne.n	8005f5e <_fwalk_sglue+0xa>
 8005f6c:	0030      	movs	r0, r6
 8005f6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f70:	89ab      	ldrh	r3, [r5, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d908      	bls.n	8005f88 <_fwalk_sglue+0x34>
 8005f76:	220e      	movs	r2, #14
 8005f78:	5eab      	ldrsh	r3, [r5, r2]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	d004      	beq.n	8005f88 <_fwalk_sglue+0x34>
 8005f7e:	0029      	movs	r1, r5
 8005f80:	9800      	ldr	r0, [sp, #0]
 8005f82:	9b01      	ldr	r3, [sp, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4306      	orrs	r6, r0
 8005f88:	3568      	adds	r5, #104	; 0x68
 8005f8a:	e7ea      	b.n	8005f62 <_fwalk_sglue+0xe>

08005f8c <_puts_r>:
 8005f8c:	6a03      	ldr	r3, [r0, #32]
 8005f8e:	b570      	push	{r4, r5, r6, lr}
 8005f90:	0005      	movs	r5, r0
 8005f92:	000e      	movs	r6, r1
 8005f94:	6884      	ldr	r4, [r0, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <_puts_r+0x12>
 8005f9a:	f7ff ffc3 	bl	8005f24 <__sinit>
 8005f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fa0:	07db      	lsls	r3, r3, #31
 8005fa2:	d405      	bmi.n	8005fb0 <_puts_r+0x24>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	059b      	lsls	r3, r3, #22
 8005fa8:	d402      	bmi.n	8005fb0 <_puts_r+0x24>
 8005faa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fac:	f000 f9c1 	bl	8006332 <__retarget_lock_acquire_recursive>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	071b      	lsls	r3, r3, #28
 8005fb4:	d502      	bpl.n	8005fbc <_puts_r+0x30>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11f      	bne.n	8005ffc <_puts_r+0x70>
 8005fbc:	0021      	movs	r1, r4
 8005fbe:	0028      	movs	r0, r5
 8005fc0:	f000 f8d2 	bl	8006168 <__swsetup_r>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d019      	beq.n	8005ffc <_puts_r+0x70>
 8005fc8:	2501      	movs	r5, #1
 8005fca:	426d      	negs	r5, r5
 8005fcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fce:	07db      	lsls	r3, r3, #31
 8005fd0:	d405      	bmi.n	8005fde <_puts_r+0x52>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	059b      	lsls	r3, r3, #22
 8005fd6:	d402      	bmi.n	8005fde <_puts_r+0x52>
 8005fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fda:	f000 f9ab 	bl	8006334 <__retarget_lock_release_recursive>
 8005fde:	0028      	movs	r0, r5
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da04      	bge.n	8005ff4 <_puts_r+0x68>
 8005fea:	69a2      	ldr	r2, [r4, #24]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	dc16      	bgt.n	800601e <_puts_r+0x92>
 8005ff0:	290a      	cmp	r1, #10
 8005ff2:	d014      	beq.n	800601e <_puts_r+0x92>
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	6022      	str	r2, [r4, #0]
 8005ffa:	7019      	strb	r1, [r3, #0]
 8005ffc:	68a3      	ldr	r3, [r4, #8]
 8005ffe:	7831      	ldrb	r1, [r6, #0]
 8006000:	3b01      	subs	r3, #1
 8006002:	2900      	cmp	r1, #0
 8006004:	d1ed      	bne.n	8005fe2 <_puts_r+0x56>
 8006006:	60a3      	str	r3, [r4, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	da0f      	bge.n	800602c <_puts_r+0xa0>
 800600c:	0028      	movs	r0, r5
 800600e:	0022      	movs	r2, r4
 8006010:	310a      	adds	r1, #10
 8006012:	f000 f867 	bl	80060e4 <__swbuf_r>
 8006016:	250a      	movs	r5, #10
 8006018:	3001      	adds	r0, #1
 800601a:	d1d7      	bne.n	8005fcc <_puts_r+0x40>
 800601c:	e7d4      	b.n	8005fc8 <_puts_r+0x3c>
 800601e:	0022      	movs	r2, r4
 8006020:	0028      	movs	r0, r5
 8006022:	f000 f85f 	bl	80060e4 <__swbuf_r>
 8006026:	3001      	adds	r0, #1
 8006028:	d1e8      	bne.n	8005ffc <_puts_r+0x70>
 800602a:	e7cd      	b.n	8005fc8 <_puts_r+0x3c>
 800602c:	250a      	movs	r5, #10
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	6022      	str	r2, [r4, #0]
 8006034:	701d      	strb	r5, [r3, #0]
 8006036:	e7c9      	b.n	8005fcc <_puts_r+0x40>

08006038 <puts>:
 8006038:	b510      	push	{r4, lr}
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <puts+0x10>)
 800603c:	0001      	movs	r1, r0
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	f7ff ffa4 	bl	8005f8c <_puts_r>
 8006044:	bd10      	pop	{r4, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	20000068 	.word	0x20000068

0800604c <__sread>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	000c      	movs	r4, r1
 8006050:	250e      	movs	r5, #14
 8006052:	5f49      	ldrsh	r1, [r1, r5]
 8006054:	f000 f91a 	bl	800628c <_read_r>
 8006058:	2800      	cmp	r0, #0
 800605a:	db03      	blt.n	8006064 <__sread+0x18>
 800605c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800605e:	181b      	adds	r3, r3, r0
 8006060:	6563      	str	r3, [r4, #84]	; 0x54
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	4a02      	ldr	r2, [pc, #8]	; (8006070 <__sread+0x24>)
 8006068:	4013      	ands	r3, r2
 800606a:	81a3      	strh	r3, [r4, #12]
 800606c:	e7f9      	b.n	8006062 <__sread+0x16>
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	ffffefff 	.word	0xffffefff

08006074 <__swrite>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	001f      	movs	r7, r3
 8006078:	898b      	ldrh	r3, [r1, #12]
 800607a:	0005      	movs	r5, r0
 800607c:	000c      	movs	r4, r1
 800607e:	0016      	movs	r6, r2
 8006080:	05db      	lsls	r3, r3, #23
 8006082:	d505      	bpl.n	8006090 <__swrite+0x1c>
 8006084:	230e      	movs	r3, #14
 8006086:	5ec9      	ldrsh	r1, [r1, r3]
 8006088:	2200      	movs	r2, #0
 800608a:	2302      	movs	r3, #2
 800608c:	f000 f8ea 	bl	8006264 <_lseek_r>
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	4a05      	ldr	r2, [pc, #20]	; (80060a8 <__swrite+0x34>)
 8006094:	0028      	movs	r0, r5
 8006096:	4013      	ands	r3, r2
 8006098:	81a3      	strh	r3, [r4, #12]
 800609a:	0032      	movs	r2, r6
 800609c:	230e      	movs	r3, #14
 800609e:	5ee1      	ldrsh	r1, [r4, r3]
 80060a0:	003b      	movs	r3, r7
 80060a2:	f000 f907 	bl	80062b4 <_write_r>
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a8:	ffffefff 	.word	0xffffefff

080060ac <__sseek>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	000c      	movs	r4, r1
 80060b0:	250e      	movs	r5, #14
 80060b2:	5f49      	ldrsh	r1, [r1, r5]
 80060b4:	f000 f8d6 	bl	8006264 <_lseek_r>
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	1c42      	adds	r2, r0, #1
 80060bc:	d103      	bne.n	80060c6 <__sseek+0x1a>
 80060be:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <__sseek+0x28>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	81a3      	strh	r3, [r4, #12]
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	2280      	movs	r2, #128	; 0x80
 80060c8:	0152      	lsls	r2, r2, #5
 80060ca:	4313      	orrs	r3, r2
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	6560      	str	r0, [r4, #84]	; 0x54
 80060d0:	e7f8      	b.n	80060c4 <__sseek+0x18>
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	ffffefff 	.word	0xffffefff

080060d8 <__sclose>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	230e      	movs	r3, #14
 80060dc:	5ec9      	ldrsh	r1, [r1, r3]
 80060de:	f000 f8af 	bl	8006240 <_close_r>
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <__swbuf_r>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	0006      	movs	r6, r0
 80060e8:	000d      	movs	r5, r1
 80060ea:	0014      	movs	r4, r2
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d004      	beq.n	80060fa <__swbuf_r+0x16>
 80060f0:	6a03      	ldr	r3, [r0, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <__swbuf_r+0x16>
 80060f6:	f7ff ff15 	bl	8005f24 <__sinit>
 80060fa:	69a3      	ldr	r3, [r4, #24]
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	071b      	lsls	r3, r3, #28
 8006102:	d528      	bpl.n	8006156 <__swbuf_r+0x72>
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d025      	beq.n	8006156 <__swbuf_r+0x72>
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	6820      	ldr	r0, [r4, #0]
 800610e:	b2ef      	uxtb	r7, r5
 8006110:	1ac0      	subs	r0, r0, r3
 8006112:	6963      	ldr	r3, [r4, #20]
 8006114:	b2ed      	uxtb	r5, r5
 8006116:	4283      	cmp	r3, r0
 8006118:	dc05      	bgt.n	8006126 <__swbuf_r+0x42>
 800611a:	0021      	movs	r1, r4
 800611c:	0030      	movs	r0, r6
 800611e:	f000 fa9b 	bl	8006658 <_fflush_r>
 8006122:	2800      	cmp	r0, #0
 8006124:	d11d      	bne.n	8006162 <__swbuf_r+0x7e>
 8006126:	68a3      	ldr	r3, [r4, #8]
 8006128:	3001      	adds	r0, #1
 800612a:	3b01      	subs	r3, #1
 800612c:	60a3      	str	r3, [r4, #8]
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	6022      	str	r2, [r4, #0]
 8006134:	701f      	strb	r7, [r3, #0]
 8006136:	6963      	ldr	r3, [r4, #20]
 8006138:	4283      	cmp	r3, r0
 800613a:	d004      	beq.n	8006146 <__swbuf_r+0x62>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	07db      	lsls	r3, r3, #31
 8006140:	d507      	bpl.n	8006152 <__swbuf_r+0x6e>
 8006142:	2d0a      	cmp	r5, #10
 8006144:	d105      	bne.n	8006152 <__swbuf_r+0x6e>
 8006146:	0021      	movs	r1, r4
 8006148:	0030      	movs	r0, r6
 800614a:	f000 fa85 	bl	8006658 <_fflush_r>
 800614e:	2800      	cmp	r0, #0
 8006150:	d107      	bne.n	8006162 <__swbuf_r+0x7e>
 8006152:	0028      	movs	r0, r5
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006156:	0021      	movs	r1, r4
 8006158:	0030      	movs	r0, r6
 800615a:	f000 f805 	bl	8006168 <__swsetup_r>
 800615e:	2800      	cmp	r0, #0
 8006160:	d0d3      	beq.n	800610a <__swbuf_r+0x26>
 8006162:	2501      	movs	r5, #1
 8006164:	426d      	negs	r5, r5
 8006166:	e7f4      	b.n	8006152 <__swbuf_r+0x6e>

08006168 <__swsetup_r>:
 8006168:	4b30      	ldr	r3, [pc, #192]	; (800622c <__swsetup_r+0xc4>)
 800616a:	b570      	push	{r4, r5, r6, lr}
 800616c:	0005      	movs	r5, r0
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	000c      	movs	r4, r1
 8006172:	2800      	cmp	r0, #0
 8006174:	d004      	beq.n	8006180 <__swsetup_r+0x18>
 8006176:	6a03      	ldr	r3, [r0, #32]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <__swsetup_r+0x18>
 800617c:	f7ff fed2 	bl	8005f24 <__sinit>
 8006180:	230c      	movs	r3, #12
 8006182:	5ee2      	ldrsh	r2, [r4, r3]
 8006184:	b293      	uxth	r3, r2
 8006186:	0711      	lsls	r1, r2, #28
 8006188:	d423      	bmi.n	80061d2 <__swsetup_r+0x6a>
 800618a:	06d9      	lsls	r1, r3, #27
 800618c:	d407      	bmi.n	800619e <__swsetup_r+0x36>
 800618e:	2309      	movs	r3, #9
 8006190:	2001      	movs	r0, #1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	3337      	adds	r3, #55	; 0x37
 8006196:	4313      	orrs	r3, r2
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	4240      	negs	r0, r0
 800619c:	bd70      	pop	{r4, r5, r6, pc}
 800619e:	075b      	lsls	r3, r3, #29
 80061a0:	d513      	bpl.n	80061ca <__swsetup_r+0x62>
 80061a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a4:	2900      	cmp	r1, #0
 80061a6:	d008      	beq.n	80061ba <__swsetup_r+0x52>
 80061a8:	0023      	movs	r3, r4
 80061aa:	3344      	adds	r3, #68	; 0x44
 80061ac:	4299      	cmp	r1, r3
 80061ae:	d002      	beq.n	80061b6 <__swsetup_r+0x4e>
 80061b0:	0028      	movs	r0, r5
 80061b2:	f000 f8c9 	bl	8006348 <_free_r>
 80061b6:	2300      	movs	r3, #0
 80061b8:	6363      	str	r3, [r4, #52]	; 0x34
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	4393      	bics	r3, r2
 80061c0:	81a3      	strh	r3, [r4, #12]
 80061c2:	2300      	movs	r3, #0
 80061c4:	6063      	str	r3, [r4, #4]
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	2308      	movs	r3, #8
 80061cc:	89a2      	ldrh	r2, [r4, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <__swsetup_r+0x88>
 80061d8:	21a0      	movs	r1, #160	; 0xa0
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	0089      	lsls	r1, r1, #2
 80061e0:	0092      	lsls	r2, r2, #2
 80061e2:	400b      	ands	r3, r1
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <__swsetup_r+0x88>
 80061e8:	0021      	movs	r1, r4
 80061ea:	0028      	movs	r0, r5
 80061ec:	f000 fa88 	bl	8006700 <__smakebuf_r>
 80061f0:	220c      	movs	r2, #12
 80061f2:	5ea3      	ldrsh	r3, [r4, r2]
 80061f4:	2001      	movs	r0, #1
 80061f6:	001a      	movs	r2, r3
 80061f8:	b299      	uxth	r1, r3
 80061fa:	4002      	ands	r2, r0
 80061fc:	4203      	tst	r3, r0
 80061fe:	d00f      	beq.n	8006220 <__swsetup_r+0xb8>
 8006200:	2200      	movs	r2, #0
 8006202:	60a2      	str	r2, [r4, #8]
 8006204:	6962      	ldr	r2, [r4, #20]
 8006206:	4252      	negs	r2, r2
 8006208:	61a2      	str	r2, [r4, #24]
 800620a:	2000      	movs	r0, #0
 800620c:	6922      	ldr	r2, [r4, #16]
 800620e:	4282      	cmp	r2, r0
 8006210:	d1c4      	bne.n	800619c <__swsetup_r+0x34>
 8006212:	0609      	lsls	r1, r1, #24
 8006214:	d5c2      	bpl.n	800619c <__swsetup_r+0x34>
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	4313      	orrs	r3, r2
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	3801      	subs	r0, #1
 800621e:	e7bd      	b.n	800619c <__swsetup_r+0x34>
 8006220:	0788      	lsls	r0, r1, #30
 8006222:	d400      	bmi.n	8006226 <__swsetup_r+0xbe>
 8006224:	6962      	ldr	r2, [r4, #20]
 8006226:	60a2      	str	r2, [r4, #8]
 8006228:	e7ef      	b.n	800620a <__swsetup_r+0xa2>
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	20000068 	.word	0x20000068

08006230 <memset>:
 8006230:	0003      	movs	r3, r0
 8006232:	1882      	adds	r2, r0, r2
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	7019      	strb	r1, [r3, #0]
 800623c:	3301      	adds	r3, #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <_close_r>:
 8006240:	2300      	movs	r3, #0
 8006242:	b570      	push	{r4, r5, r6, lr}
 8006244:	4d06      	ldr	r5, [pc, #24]	; (8006260 <_close_r+0x20>)
 8006246:	0004      	movs	r4, r0
 8006248:	0008      	movs	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fa fcb1 	bl	8000bb2 <_close>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d103      	bne.n	800625c <_close_r+0x1c>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d000      	beq.n	800625c <_close_r+0x1c>
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	bd70      	pop	{r4, r5, r6, pc}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	2000a69c 	.word	0x2000a69c

08006264 <_lseek_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	0004      	movs	r4, r0
 8006268:	0008      	movs	r0, r1
 800626a:	0011      	movs	r1, r2
 800626c:	001a      	movs	r2, r3
 800626e:	2300      	movs	r3, #0
 8006270:	4d05      	ldr	r5, [pc, #20]	; (8006288 <_lseek_r+0x24>)
 8006272:	602b      	str	r3, [r5, #0]
 8006274:	f7fa fcbe 	bl	8000bf4 <_lseek>
 8006278:	1c43      	adds	r3, r0, #1
 800627a:	d103      	bne.n	8006284 <_lseek_r+0x20>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d000      	beq.n	8006284 <_lseek_r+0x20>
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	bd70      	pop	{r4, r5, r6, pc}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	2000a69c 	.word	0x2000a69c

0800628c <_read_r>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	0004      	movs	r4, r0
 8006290:	0008      	movs	r0, r1
 8006292:	0011      	movs	r1, r2
 8006294:	001a      	movs	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	4d05      	ldr	r5, [pc, #20]	; (80062b0 <_read_r+0x24>)
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	f7fa fc50 	bl	8000b40 <_read>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d103      	bne.n	80062ac <_read_r+0x20>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d000      	beq.n	80062ac <_read_r+0x20>
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	2000a69c 	.word	0x2000a69c

080062b4 <_write_r>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	0004      	movs	r4, r0
 80062b8:	0008      	movs	r0, r1
 80062ba:	0011      	movs	r1, r2
 80062bc:	001a      	movs	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	4d05      	ldr	r5, [pc, #20]	; (80062d8 <_write_r+0x24>)
 80062c2:	602b      	str	r3, [r5, #0]
 80062c4:	f7fa fc59 	bl	8000b7a <_write>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d103      	bne.n	80062d4 <_write_r+0x20>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d000      	beq.n	80062d4 <_write_r+0x20>
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	2000a69c 	.word	0x2000a69c

080062dc <__errno>:
 80062dc:	4b01      	ldr	r3, [pc, #4]	; (80062e4 <__errno+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	4770      	bx	lr
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	20000068 	.word	0x20000068

080062e8 <__libc_init_array>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	2600      	movs	r6, #0
 80062ec:	4c0c      	ldr	r4, [pc, #48]	; (8006320 <__libc_init_array+0x38>)
 80062ee:	4d0d      	ldr	r5, [pc, #52]	; (8006324 <__libc_init_array+0x3c>)
 80062f0:	1b64      	subs	r4, r4, r5
 80062f2:	10a4      	asrs	r4, r4, #2
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	d109      	bne.n	800630c <__libc_init_array+0x24>
 80062f8:	2600      	movs	r6, #0
 80062fa:	f000 fa75 	bl	80067e8 <_init>
 80062fe:	4c0a      	ldr	r4, [pc, #40]	; (8006328 <__libc_init_array+0x40>)
 8006300:	4d0a      	ldr	r5, [pc, #40]	; (800632c <__libc_init_array+0x44>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	42a6      	cmp	r6, r4
 8006308:	d105      	bne.n	8006316 <__libc_init_array+0x2e>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	00b3      	lsls	r3, r6, #2
 800630e:	58eb      	ldr	r3, [r5, r3]
 8006310:	4798      	blx	r3
 8006312:	3601      	adds	r6, #1
 8006314:	e7ee      	b.n	80062f4 <__libc_init_array+0xc>
 8006316:	00b3      	lsls	r3, r6, #2
 8006318:	58eb      	ldr	r3, [r5, r3]
 800631a:	4798      	blx	r3
 800631c:	3601      	adds	r6, #1
 800631e:	e7f2      	b.n	8006306 <__libc_init_array+0x1e>
 8006320:	080068f0 	.word	0x080068f0
 8006324:	080068f0 	.word	0x080068f0
 8006328:	080068f4 	.word	0x080068f4
 800632c:	080068f0 	.word	0x080068f0

08006330 <__retarget_lock_init_recursive>:
 8006330:	4770      	bx	lr

08006332 <__retarget_lock_acquire_recursive>:
 8006332:	4770      	bx	lr

08006334 <__retarget_lock_release_recursive>:
 8006334:	4770      	bx	lr

08006336 <memcpy>:
 8006336:	2300      	movs	r3, #0
 8006338:	b510      	push	{r4, lr}
 800633a:	429a      	cmp	r2, r3
 800633c:	d100      	bne.n	8006340 <memcpy+0xa>
 800633e:	bd10      	pop	{r4, pc}
 8006340:	5ccc      	ldrb	r4, [r1, r3]
 8006342:	54c4      	strb	r4, [r0, r3]
 8006344:	3301      	adds	r3, #1
 8006346:	e7f8      	b.n	800633a <memcpy+0x4>

08006348 <_free_r>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	0005      	movs	r5, r0
 800634c:	2900      	cmp	r1, #0
 800634e:	d010      	beq.n	8006372 <_free_r+0x2a>
 8006350:	1f0c      	subs	r4, r1, #4
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	da00      	bge.n	800635a <_free_r+0x12>
 8006358:	18e4      	adds	r4, r4, r3
 800635a:	0028      	movs	r0, r5
 800635c:	f000 f8e2 	bl	8006524 <__malloc_lock>
 8006360:	4a1d      	ldr	r2, [pc, #116]	; (80063d8 <_free_r+0x90>)
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <_free_r+0x2c>
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	6014      	str	r4, [r2, #0]
 800636c:	0028      	movs	r0, r5
 800636e:	f000 f8e1 	bl	8006534 <__malloc_unlock>
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	42a3      	cmp	r3, r4
 8006376:	d908      	bls.n	800638a <_free_r+0x42>
 8006378:	6820      	ldr	r0, [r4, #0]
 800637a:	1821      	adds	r1, r4, r0
 800637c:	428b      	cmp	r3, r1
 800637e:	d1f3      	bne.n	8006368 <_free_r+0x20>
 8006380:	6819      	ldr	r1, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	1809      	adds	r1, r1, r0
 8006386:	6021      	str	r1, [r4, #0]
 8006388:	e7ee      	b.n	8006368 <_free_r+0x20>
 800638a:	001a      	movs	r2, r3
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <_free_r+0x4e>
 8006392:	42a3      	cmp	r3, r4
 8006394:	d9f9      	bls.n	800638a <_free_r+0x42>
 8006396:	6811      	ldr	r1, [r2, #0]
 8006398:	1850      	adds	r0, r2, r1
 800639a:	42a0      	cmp	r0, r4
 800639c:	d10b      	bne.n	80063b6 <_free_r+0x6e>
 800639e:	6820      	ldr	r0, [r4, #0]
 80063a0:	1809      	adds	r1, r1, r0
 80063a2:	1850      	adds	r0, r2, r1
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	4283      	cmp	r3, r0
 80063a8:	d1e0      	bne.n	800636c <_free_r+0x24>
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	1841      	adds	r1, r0, r1
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	6053      	str	r3, [r2, #4]
 80063b4:	e7da      	b.n	800636c <_free_r+0x24>
 80063b6:	42a0      	cmp	r0, r4
 80063b8:	d902      	bls.n	80063c0 <_free_r+0x78>
 80063ba:	230c      	movs	r3, #12
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	e7d5      	b.n	800636c <_free_r+0x24>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	1821      	adds	r1, r4, r0
 80063c4:	428b      	cmp	r3, r1
 80063c6:	d103      	bne.n	80063d0 <_free_r+0x88>
 80063c8:	6819      	ldr	r1, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	1809      	adds	r1, r1, r0
 80063ce:	6021      	str	r1, [r4, #0]
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	6054      	str	r4, [r2, #4]
 80063d4:	e7ca      	b.n	800636c <_free_r+0x24>
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	2000a6a4 	.word	0x2000a6a4

080063dc <sbrk_aligned>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4e0f      	ldr	r6, [pc, #60]	; (800641c <sbrk_aligned+0x40>)
 80063e0:	000d      	movs	r5, r1
 80063e2:	6831      	ldr	r1, [r6, #0]
 80063e4:	0004      	movs	r4, r0
 80063e6:	2900      	cmp	r1, #0
 80063e8:	d102      	bne.n	80063f0 <sbrk_aligned+0x14>
 80063ea:	f000 f9eb 	bl	80067c4 <_sbrk_r>
 80063ee:	6030      	str	r0, [r6, #0]
 80063f0:	0029      	movs	r1, r5
 80063f2:	0020      	movs	r0, r4
 80063f4:	f000 f9e6 	bl	80067c4 <_sbrk_r>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d00a      	beq.n	8006412 <sbrk_aligned+0x36>
 80063fc:	2303      	movs	r3, #3
 80063fe:	1cc5      	adds	r5, r0, #3
 8006400:	439d      	bics	r5, r3
 8006402:	42a8      	cmp	r0, r5
 8006404:	d007      	beq.n	8006416 <sbrk_aligned+0x3a>
 8006406:	1a29      	subs	r1, r5, r0
 8006408:	0020      	movs	r0, r4
 800640a:	f000 f9db 	bl	80067c4 <_sbrk_r>
 800640e:	3001      	adds	r0, #1
 8006410:	d101      	bne.n	8006416 <sbrk_aligned+0x3a>
 8006412:	2501      	movs	r5, #1
 8006414:	426d      	negs	r5, r5
 8006416:	0028      	movs	r0, r5
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	2000a6a8 	.word	0x2000a6a8

08006420 <_malloc_r>:
 8006420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006422:	2203      	movs	r2, #3
 8006424:	1ccb      	adds	r3, r1, #3
 8006426:	4393      	bics	r3, r2
 8006428:	3308      	adds	r3, #8
 800642a:	0006      	movs	r6, r0
 800642c:	001f      	movs	r7, r3
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d238      	bcs.n	80064a4 <_malloc_r+0x84>
 8006432:	270c      	movs	r7, #12
 8006434:	42b9      	cmp	r1, r7
 8006436:	d837      	bhi.n	80064a8 <_malloc_r+0x88>
 8006438:	0030      	movs	r0, r6
 800643a:	f000 f873 	bl	8006524 <__malloc_lock>
 800643e:	4b38      	ldr	r3, [pc, #224]	; (8006520 <_malloc_r+0x100>)
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	001c      	movs	r4, r3
 8006446:	2c00      	cmp	r4, #0
 8006448:	d133      	bne.n	80064b2 <_malloc_r+0x92>
 800644a:	0039      	movs	r1, r7
 800644c:	0030      	movs	r0, r6
 800644e:	f7ff ffc5 	bl	80063dc <sbrk_aligned>
 8006452:	0004      	movs	r4, r0
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d15e      	bne.n	8006516 <_malloc_r+0xf6>
 8006458:	9b00      	ldr	r3, [sp, #0]
 800645a:	681c      	ldr	r4, [r3, #0]
 800645c:	0025      	movs	r5, r4
 800645e:	2d00      	cmp	r5, #0
 8006460:	d14e      	bne.n	8006500 <_malloc_r+0xe0>
 8006462:	2c00      	cmp	r4, #0
 8006464:	d051      	beq.n	800650a <_malloc_r+0xea>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0029      	movs	r1, r5
 800646a:	18e3      	adds	r3, r4, r3
 800646c:	0030      	movs	r0, r6
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	f000 f9a8 	bl	80067c4 <_sbrk_r>
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	4283      	cmp	r3, r0
 8006478:	d147      	bne.n	800650a <_malloc_r+0xea>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	0030      	movs	r0, r6
 800647e:	1aff      	subs	r7, r7, r3
 8006480:	0039      	movs	r1, r7
 8006482:	f7ff ffab 	bl	80063dc <sbrk_aligned>
 8006486:	3001      	adds	r0, #1
 8006488:	d03f      	beq.n	800650a <_malloc_r+0xea>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	19db      	adds	r3, r3, r7
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d040      	beq.n	800651a <_malloc_r+0xfa>
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	42a2      	cmp	r2, r4
 800649c:	d133      	bne.n	8006506 <_malloc_r+0xe6>
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	e014      	b.n	80064ce <_malloc_r+0xae>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dac5      	bge.n	8006434 <_malloc_r+0x14>
 80064a8:	230c      	movs	r3, #12
 80064aa:	2500      	movs	r5, #0
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	0028      	movs	r0, r5
 80064b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064b2:	6821      	ldr	r1, [r4, #0]
 80064b4:	1bc9      	subs	r1, r1, r7
 80064b6:	d420      	bmi.n	80064fa <_malloc_r+0xda>
 80064b8:	290b      	cmp	r1, #11
 80064ba:	d918      	bls.n	80064ee <_malloc_r+0xce>
 80064bc:	19e2      	adds	r2, r4, r7
 80064be:	6027      	str	r7, [r4, #0]
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d112      	bne.n	80064ea <_malloc_r+0xca>
 80064c4:	9b00      	ldr	r3, [sp, #0]
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	6011      	str	r1, [r2, #0]
 80064cc:	6053      	str	r3, [r2, #4]
 80064ce:	0030      	movs	r0, r6
 80064d0:	0025      	movs	r5, r4
 80064d2:	f000 f82f 	bl	8006534 <__malloc_unlock>
 80064d6:	2207      	movs	r2, #7
 80064d8:	350b      	adds	r5, #11
 80064da:	1d23      	adds	r3, r4, #4
 80064dc:	4395      	bics	r5, r2
 80064de:	1aea      	subs	r2, r5, r3
 80064e0:	429d      	cmp	r5, r3
 80064e2:	d0e4      	beq.n	80064ae <_malloc_r+0x8e>
 80064e4:	1b5b      	subs	r3, r3, r5
 80064e6:	50a3      	str	r3, [r4, r2]
 80064e8:	e7e1      	b.n	80064ae <_malloc_r+0x8e>
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	e7ec      	b.n	80064c8 <_malloc_r+0xa8>
 80064ee:	6862      	ldr	r2, [r4, #4]
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	d1d5      	bne.n	80064a0 <_malloc_r+0x80>
 80064f4:	9b00      	ldr	r3, [sp, #0]
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	e7e9      	b.n	80064ce <_malloc_r+0xae>
 80064fa:	0023      	movs	r3, r4
 80064fc:	6864      	ldr	r4, [r4, #4]
 80064fe:	e7a2      	b.n	8006446 <_malloc_r+0x26>
 8006500:	002c      	movs	r4, r5
 8006502:	686d      	ldr	r5, [r5, #4]
 8006504:	e7ab      	b.n	800645e <_malloc_r+0x3e>
 8006506:	0013      	movs	r3, r2
 8006508:	e7c4      	b.n	8006494 <_malloc_r+0x74>
 800650a:	230c      	movs	r3, #12
 800650c:	0030      	movs	r0, r6
 800650e:	6033      	str	r3, [r6, #0]
 8006510:	f000 f810 	bl	8006534 <__malloc_unlock>
 8006514:	e7cb      	b.n	80064ae <_malloc_r+0x8e>
 8006516:	6027      	str	r7, [r4, #0]
 8006518:	e7d9      	b.n	80064ce <_malloc_r+0xae>
 800651a:	605b      	str	r3, [r3, #4]
 800651c:	deff      	udf	#255	; 0xff
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	2000a6a4 	.word	0x2000a6a4

08006524 <__malloc_lock>:
 8006524:	b510      	push	{r4, lr}
 8006526:	4802      	ldr	r0, [pc, #8]	; (8006530 <__malloc_lock+0xc>)
 8006528:	f7ff ff03 	bl	8006332 <__retarget_lock_acquire_recursive>
 800652c:	bd10      	pop	{r4, pc}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	2000a6a0 	.word	0x2000a6a0

08006534 <__malloc_unlock>:
 8006534:	b510      	push	{r4, lr}
 8006536:	4802      	ldr	r0, [pc, #8]	; (8006540 <__malloc_unlock+0xc>)
 8006538:	f7ff fefc 	bl	8006334 <__retarget_lock_release_recursive>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	2000a6a0 	.word	0x2000a6a0

08006544 <__sflush_r>:
 8006544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006546:	898b      	ldrh	r3, [r1, #12]
 8006548:	0005      	movs	r5, r0
 800654a:	000c      	movs	r4, r1
 800654c:	071a      	lsls	r2, r3, #28
 800654e:	d45c      	bmi.n	800660a <__sflush_r+0xc6>
 8006550:	684a      	ldr	r2, [r1, #4]
 8006552:	2a00      	cmp	r2, #0
 8006554:	dc04      	bgt.n	8006560 <__sflush_r+0x1c>
 8006556:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006558:	2a00      	cmp	r2, #0
 800655a:	dc01      	bgt.n	8006560 <__sflush_r+0x1c>
 800655c:	2000      	movs	r0, #0
 800655e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006560:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006562:	2f00      	cmp	r7, #0
 8006564:	d0fa      	beq.n	800655c <__sflush_r+0x18>
 8006566:	2200      	movs	r2, #0
 8006568:	2080      	movs	r0, #128	; 0x80
 800656a:	682e      	ldr	r6, [r5, #0]
 800656c:	602a      	str	r2, [r5, #0]
 800656e:	001a      	movs	r2, r3
 8006570:	0140      	lsls	r0, r0, #5
 8006572:	6a21      	ldr	r1, [r4, #32]
 8006574:	4002      	ands	r2, r0
 8006576:	4203      	tst	r3, r0
 8006578:	d034      	beq.n	80065e4 <__sflush_r+0xa0>
 800657a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	075b      	lsls	r3, r3, #29
 8006580:	d506      	bpl.n	8006590 <__sflush_r+0x4c>
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	1ac0      	subs	r0, r0, r3
 8006586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <__sflush_r+0x4c>
 800658c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800658e:	1ac0      	subs	r0, r0, r3
 8006590:	0002      	movs	r2, r0
 8006592:	2300      	movs	r3, #0
 8006594:	0028      	movs	r0, r5
 8006596:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006598:	6a21      	ldr	r1, [r4, #32]
 800659a:	47b8      	blx	r7
 800659c:	89a2      	ldrh	r2, [r4, #12]
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d106      	bne.n	80065b0 <__sflush_r+0x6c>
 80065a2:	6829      	ldr	r1, [r5, #0]
 80065a4:	291d      	cmp	r1, #29
 80065a6:	d82c      	bhi.n	8006602 <__sflush_r+0xbe>
 80065a8:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <__sflush_r+0x110>)
 80065aa:	410b      	asrs	r3, r1
 80065ac:	07db      	lsls	r3, r3, #31
 80065ae:	d428      	bmi.n	8006602 <__sflush_r+0xbe>
 80065b0:	2300      	movs	r3, #0
 80065b2:	6063      	str	r3, [r4, #4]
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	04d2      	lsls	r2, r2, #19
 80065ba:	d505      	bpl.n	80065c8 <__sflush_r+0x84>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <__sflush_r+0x82>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d100      	bne.n	80065c8 <__sflush_r+0x84>
 80065c6:	6560      	str	r0, [r4, #84]	; 0x54
 80065c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ca:	602e      	str	r6, [r5, #0]
 80065cc:	2900      	cmp	r1, #0
 80065ce:	d0c5      	beq.n	800655c <__sflush_r+0x18>
 80065d0:	0023      	movs	r3, r4
 80065d2:	3344      	adds	r3, #68	; 0x44
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <__sflush_r+0x9a>
 80065d8:	0028      	movs	r0, r5
 80065da:	f7ff feb5 	bl	8006348 <_free_r>
 80065de:	2000      	movs	r0, #0
 80065e0:	6360      	str	r0, [r4, #52]	; 0x34
 80065e2:	e7bc      	b.n	800655e <__sflush_r+0x1a>
 80065e4:	2301      	movs	r3, #1
 80065e6:	0028      	movs	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d1c6      	bne.n	800657c <__sflush_r+0x38>
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0c3      	beq.n	800657c <__sflush_r+0x38>
 80065f4:	2b1d      	cmp	r3, #29
 80065f6:	d001      	beq.n	80065fc <__sflush_r+0xb8>
 80065f8:	2b16      	cmp	r3, #22
 80065fa:	d101      	bne.n	8006600 <__sflush_r+0xbc>
 80065fc:	602e      	str	r6, [r5, #0]
 80065fe:	e7ad      	b.n	800655c <__sflush_r+0x18>
 8006600:	89a2      	ldrh	r2, [r4, #12]
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	4313      	orrs	r3, r2
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	e7a9      	b.n	800655e <__sflush_r+0x1a>
 800660a:	690e      	ldr	r6, [r1, #16]
 800660c:	2e00      	cmp	r6, #0
 800660e:	d0a5      	beq.n	800655c <__sflush_r+0x18>
 8006610:	680f      	ldr	r7, [r1, #0]
 8006612:	600e      	str	r6, [r1, #0]
 8006614:	1bba      	subs	r2, r7, r6
 8006616:	9201      	str	r2, [sp, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	079b      	lsls	r3, r3, #30
 800661c:	d100      	bne.n	8006620 <__sflush_r+0xdc>
 800661e:	694a      	ldr	r2, [r1, #20]
 8006620:	60a2      	str	r2, [r4, #8]
 8006622:	9b01      	ldr	r3, [sp, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	dd99      	ble.n	800655c <__sflush_r+0x18>
 8006628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800662a:	0032      	movs	r2, r6
 800662c:	001f      	movs	r7, r3
 800662e:	0028      	movs	r0, r5
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	6a21      	ldr	r1, [r4, #32]
 8006634:	47b8      	blx	r7
 8006636:	2800      	cmp	r0, #0
 8006638:	dc06      	bgt.n	8006648 <__sflush_r+0x104>
 800663a:	2340      	movs	r3, #64	; 0x40
 800663c:	2001      	movs	r0, #1
 800663e:	89a2      	ldrh	r2, [r4, #12]
 8006640:	4240      	negs	r0, r0
 8006642:	4313      	orrs	r3, r2
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	e78a      	b.n	800655e <__sflush_r+0x1a>
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	1836      	adds	r6, r6, r0
 800664c:	1a1b      	subs	r3, r3, r0
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	e7e7      	b.n	8006622 <__sflush_r+0xde>
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	dfbffffe 	.word	0xdfbffffe

08006658 <_fflush_r>:
 8006658:	690b      	ldr	r3, [r1, #16]
 800665a:	b570      	push	{r4, r5, r6, lr}
 800665c:	0005      	movs	r5, r0
 800665e:	000c      	movs	r4, r1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d102      	bne.n	800666a <_fflush_r+0x12>
 8006664:	2500      	movs	r5, #0
 8006666:	0028      	movs	r0, r5
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	2800      	cmp	r0, #0
 800666c:	d004      	beq.n	8006678 <_fflush_r+0x20>
 800666e:	6a03      	ldr	r3, [r0, #32]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <_fflush_r+0x20>
 8006674:	f7ff fc56 	bl	8005f24 <__sinit>
 8006678:	220c      	movs	r2, #12
 800667a:	5ea3      	ldrsh	r3, [r4, r2]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f1      	beq.n	8006664 <_fflush_r+0xc>
 8006680:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006682:	07d2      	lsls	r2, r2, #31
 8006684:	d404      	bmi.n	8006690 <_fflush_r+0x38>
 8006686:	059b      	lsls	r3, r3, #22
 8006688:	d402      	bmi.n	8006690 <_fflush_r+0x38>
 800668a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668c:	f7ff fe51 	bl	8006332 <__retarget_lock_acquire_recursive>
 8006690:	0028      	movs	r0, r5
 8006692:	0021      	movs	r1, r4
 8006694:	f7ff ff56 	bl	8006544 <__sflush_r>
 8006698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800669a:	0005      	movs	r5, r0
 800669c:	07db      	lsls	r3, r3, #31
 800669e:	d4e2      	bmi.n	8006666 <_fflush_r+0xe>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	059b      	lsls	r3, r3, #22
 80066a4:	d4df      	bmi.n	8006666 <_fflush_r+0xe>
 80066a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a8:	f7ff fe44 	bl	8006334 <__retarget_lock_release_recursive>
 80066ac:	e7db      	b.n	8006666 <_fflush_r+0xe>
	...

080066b0 <__swhatbuf_r>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	000e      	movs	r6, r1
 80066b4:	001d      	movs	r5, r3
 80066b6:	230e      	movs	r3, #14
 80066b8:	5ec9      	ldrsh	r1, [r1, r3]
 80066ba:	0014      	movs	r4, r2
 80066bc:	b096      	sub	sp, #88	; 0x58
 80066be:	2900      	cmp	r1, #0
 80066c0:	da0c      	bge.n	80066dc <__swhatbuf_r+0x2c>
 80066c2:	89b2      	ldrh	r2, [r6, #12]
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	0011      	movs	r1, r2
 80066c8:	4019      	ands	r1, r3
 80066ca:	421a      	tst	r2, r3
 80066cc:	d013      	beq.n	80066f6 <__swhatbuf_r+0x46>
 80066ce:	2100      	movs	r1, #0
 80066d0:	3b40      	subs	r3, #64	; 0x40
 80066d2:	2000      	movs	r0, #0
 80066d4:	6029      	str	r1, [r5, #0]
 80066d6:	6023      	str	r3, [r4, #0]
 80066d8:	b016      	add	sp, #88	; 0x58
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	466a      	mov	r2, sp
 80066de:	f000 f84d 	bl	800677c <_fstat_r>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	dbed      	blt.n	80066c2 <__swhatbuf_r+0x12>
 80066e6:	23f0      	movs	r3, #240	; 0xf0
 80066e8:	9901      	ldr	r1, [sp, #4]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	4019      	ands	r1, r3
 80066ee:	4b03      	ldr	r3, [pc, #12]	; (80066fc <__swhatbuf_r+0x4c>)
 80066f0:	18c9      	adds	r1, r1, r3
 80066f2:	424b      	negs	r3, r1
 80066f4:	4159      	adcs	r1, r3
 80066f6:	2380      	movs	r3, #128	; 0x80
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	e7ea      	b.n	80066d2 <__swhatbuf_r+0x22>
 80066fc:	ffffe000 	.word	0xffffe000

08006700 <__smakebuf_r>:
 8006700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006702:	2602      	movs	r6, #2
 8006704:	898b      	ldrh	r3, [r1, #12]
 8006706:	0005      	movs	r5, r0
 8006708:	000c      	movs	r4, r1
 800670a:	4233      	tst	r3, r6
 800670c:	d006      	beq.n	800671c <__smakebuf_r+0x1c>
 800670e:	0023      	movs	r3, r4
 8006710:	3347      	adds	r3, #71	; 0x47
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	6123      	str	r3, [r4, #16]
 8006716:	2301      	movs	r3, #1
 8006718:	6163      	str	r3, [r4, #20]
 800671a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800671c:	466a      	mov	r2, sp
 800671e:	ab01      	add	r3, sp, #4
 8006720:	f7ff ffc6 	bl	80066b0 <__swhatbuf_r>
 8006724:	9900      	ldr	r1, [sp, #0]
 8006726:	0007      	movs	r7, r0
 8006728:	0028      	movs	r0, r5
 800672a:	f7ff fe79 	bl	8006420 <_malloc_r>
 800672e:	2800      	cmp	r0, #0
 8006730:	d108      	bne.n	8006744 <__smakebuf_r+0x44>
 8006732:	220c      	movs	r2, #12
 8006734:	5ea3      	ldrsh	r3, [r4, r2]
 8006736:	059a      	lsls	r2, r3, #22
 8006738:	d4ef      	bmi.n	800671a <__smakebuf_r+0x1a>
 800673a:	2203      	movs	r2, #3
 800673c:	4393      	bics	r3, r2
 800673e:	431e      	orrs	r6, r3
 8006740:	81a6      	strh	r6, [r4, #12]
 8006742:	e7e4      	b.n	800670e <__smakebuf_r+0xe>
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	89a2      	ldrh	r2, [r4, #12]
 8006748:	6020      	str	r0, [r4, #0]
 800674a:	4313      	orrs	r3, r2
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	6120      	str	r0, [r4, #16]
 8006752:	6163      	str	r3, [r4, #20]
 8006754:	9b01      	ldr	r3, [sp, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <__smakebuf_r+0x74>
 800675a:	0028      	movs	r0, r5
 800675c:	230e      	movs	r3, #14
 800675e:	5ee1      	ldrsh	r1, [r4, r3]
 8006760:	f000 f81e 	bl	80067a0 <_isatty_r>
 8006764:	2800      	cmp	r0, #0
 8006766:	d005      	beq.n	8006774 <__smakebuf_r+0x74>
 8006768:	2303      	movs	r3, #3
 800676a:	89a2      	ldrh	r2, [r4, #12]
 800676c:	439a      	bics	r2, r3
 800676e:	3b02      	subs	r3, #2
 8006770:	4313      	orrs	r3, r2
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	433b      	orrs	r3, r7
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	e7ce      	b.n	800671a <__smakebuf_r+0x1a>

0800677c <_fstat_r>:
 800677c:	2300      	movs	r3, #0
 800677e:	b570      	push	{r4, r5, r6, lr}
 8006780:	4d06      	ldr	r5, [pc, #24]	; (800679c <_fstat_r+0x20>)
 8006782:	0004      	movs	r4, r0
 8006784:	0008      	movs	r0, r1
 8006786:	0011      	movs	r1, r2
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	f7fa fa1c 	bl	8000bc6 <_fstat>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	d103      	bne.n	800679a <_fstat_r+0x1e>
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d000      	beq.n	800679a <_fstat_r+0x1e>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	2000a69c 	.word	0x2000a69c

080067a0 <_isatty_r>:
 80067a0:	2300      	movs	r3, #0
 80067a2:	b570      	push	{r4, r5, r6, lr}
 80067a4:	4d06      	ldr	r5, [pc, #24]	; (80067c0 <_isatty_r+0x20>)
 80067a6:	0004      	movs	r4, r0
 80067a8:	0008      	movs	r0, r1
 80067aa:	602b      	str	r3, [r5, #0]
 80067ac:	f7fa fa19 	bl	8000be2 <_isatty>
 80067b0:	1c43      	adds	r3, r0, #1
 80067b2:	d103      	bne.n	80067bc <_isatty_r+0x1c>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d000      	beq.n	80067bc <_isatty_r+0x1c>
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	2000a69c 	.word	0x2000a69c

080067c4 <_sbrk_r>:
 80067c4:	2300      	movs	r3, #0
 80067c6:	b570      	push	{r4, r5, r6, lr}
 80067c8:	4d06      	ldr	r5, [pc, #24]	; (80067e4 <_sbrk_r+0x20>)
 80067ca:	0004      	movs	r4, r0
 80067cc:	0008      	movs	r0, r1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fa fa1c 	bl	8000c0c <_sbrk>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d103      	bne.n	80067e0 <_sbrk_r+0x1c>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d000      	beq.n	80067e0 <_sbrk_r+0x1c>
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	2000a69c 	.word	0x2000a69c

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr

08006800 <__FLASH_Program_Fast_veneer>:
 8006800:	b401      	push	{r0}
 8006802:	4802      	ldr	r0, [pc, #8]	; (800680c <__FLASH_Program_Fast_veneer+0xc>)
 8006804:	4684      	mov	ip, r0
 8006806:	bc01      	pop	{r0}
 8006808:	4760      	bx	ip
 800680a:	bf00      	nop
 800680c:	2000006d 	.word	0x2000006d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <size>:
2000000c:	00000190                                ....

20000010 <__sglue>:
20000010:	00000000 00000003 2000a560              ........`.. 

2000001c <_impure_data>:
2000001c:	00000000 2000a560 2000a5c8 2000a630     ....`.. ... 0.. 
	...

20000068 <_impure_ptr>:
20000068:	2000001c                                ... 

2000006c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000006c:	b580      	push	{r7, lr}
2000006e:	b088      	sub	sp, #32
20000070:	af00      	add	r7, sp, #0
20000072:	6078      	str	r0, [r7, #4]
20000074:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000076:	231f      	movs	r3, #31
20000078:	18fb      	adds	r3, r7, r3
2000007a:	2200      	movs	r2, #0
2000007c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000007e:	687b      	ldr	r3, [r7, #4]
20000080:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000082:	683b      	ldr	r3, [r7, #0]
20000084:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000086:	4b1a      	ldr	r3, [pc, #104]	; (200000f0 <FLASH_Program_Fast+0x84>)
20000088:	695a      	ldr	r2, [r3, #20]
2000008a:	4b19      	ldr	r3, [pc, #100]	; (200000f0 <FLASH_Program_Fast+0x84>)
2000008c:	2180      	movs	r1, #128	; 0x80
2000008e:	02c9      	lsls	r1, r1, #11
20000090:	430a      	orrs	r2, r1
20000092:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000094:	f3ef 8310 	mrs	r3, PRIMASK
20000098:	60fb      	str	r3, [r7, #12]
  return(result);
2000009a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000009c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000009e:	b672      	cpsid	i
}
200000a0:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a2:	e00f      	b.n	200000c4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	69bb      	ldr	r3, [r7, #24]
200000a8:	6812      	ldr	r2, [r2, #0]
200000aa:	601a      	str	r2, [r3, #0]
    src += 4U;
200000ac:	697b      	ldr	r3, [r7, #20]
200000ae:	3304      	adds	r3, #4
200000b0:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b2:	69bb      	ldr	r3, [r7, #24]
200000b4:	3304      	adds	r3, #4
200000b6:	61bb      	str	r3, [r7, #24]
    index++;
200000b8:	211f      	movs	r1, #31
200000ba:	187b      	adds	r3, r7, r1
200000bc:	781a      	ldrb	r2, [r3, #0]
200000be:	187b      	adds	r3, r7, r1
200000c0:	3201      	adds	r2, #1
200000c2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c4:	231f      	movs	r3, #31
200000c6:	18fb      	adds	r3, r7, r3
200000c8:	781b      	ldrb	r3, [r3, #0]
200000ca:	2b3f      	cmp	r3, #63	; 0x3f
200000cc:	d9ea      	bls.n	200000a4 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200000ce:	46c0      	nop			; (mov r8, r8)
200000d0:	4b07      	ldr	r3, [pc, #28]	; (200000f0 <FLASH_Program_Fast+0x84>)
200000d2:	691a      	ldr	r2, [r3, #16]
200000d4:	23c0      	movs	r3, #192	; 0xc0
200000d6:	029b      	lsls	r3, r3, #10
200000d8:	4013      	ands	r3, r2
200000da:	d1f9      	bne.n	200000d0 <FLASH_Program_Fast+0x64>
200000dc:	693b      	ldr	r3, [r7, #16]
200000de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e0:	68bb      	ldr	r3, [r7, #8]
200000e2:	f383 8810 	msr	PRIMASK, r3
}
200000e6:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000e8:	46c0      	nop			; (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	b008      	add	sp, #32
200000ee:	bd80      	pop	{r7, pc}
200000f0:	40022000 	.word	0x40022000
