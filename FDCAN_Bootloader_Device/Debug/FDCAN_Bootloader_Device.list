
FDCAN_Bootloader_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb0  08005fb0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000068  08006020  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08006020  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011154  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca8  00000000  00000000  00031227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00033ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ade  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8dc  00000000  00000000  000357f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126d7  00000000  00000000  000530d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8792  00000000  00000000  000657a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003790  00000000  00000000  0011df3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001216cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e48 	.word	0x08005e48

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08005e48 	.word	0x08005e48

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000622:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <MX_FDCAN1_Init+0x8c>)
 8000624:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800062e:	22c0      	movs	r2, #192	; 0xc0
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800063c:	2201      	movs	r2, #1
 800063e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000642:	2200      	movs	r2, #0
 8000644:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000648:	2200      	movs	r2, #0
 800064a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800064e:	2208      	movs	r2, #8
 8000650:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000654:	2203      	movs	r2, #3
 8000656:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800065a:	220c      	movs	r2, #12
 800065c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000660:	2203      	movs	r2, #3
 8000662:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000666:	2202      	movs	r2, #2
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800066c:	2203      	movs	r2, #3
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000672:	220c      	movs	r2, #12
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000678:	2203      	movs	r2, #3
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800067e:	2201      	movs	r2, #1
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000684:	2200      	movs	r2, #0
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 800068a:	2200      	movs	r2, #0
 800068c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_FDCAN1_Init+0x88>)
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fe31 	bl	80012f8 <HAL_FDCAN_Init>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800069a:	f000 f9e5 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	40006400 	.word	0x40006400

080006ac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b09d      	sub	sp, #116	; 0x74
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	235c      	movs	r3, #92	; 0x5c
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	0018      	movs	r0, r3
 80006ba:	2314      	movs	r3, #20
 80006bc:	001a      	movs	r2, r3
 80006be:	2100      	movs	r1, #0
 80006c0:	f005 f8ee 	bl	80058a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	2410      	movs	r4, #16
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	234c      	movs	r3, #76	; 0x4c
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f005 f8e6 	bl	80058a0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a26      	ldr	r2, [pc, #152]	; (8000774 <HAL_FDCAN_MspInit+0xc8>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d146      	bne.n	800076c <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0492      	lsls	r2, r2, #18
 80006e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	f002 febc 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006f8:	f000 f9b6 	bl	8000a68 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <HAL_FDCAN_MspInit+0xcc>)
 80006fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <HAL_FDCAN_MspInit+0xcc>)
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	0149      	lsls	r1, r1, #5
 8000706:	430a      	orrs	r2, r1
 8000708:	63da      	str	r2, [r3, #60]	; 0x3c
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <HAL_FDCAN_MspInit+0xcc>)
 800070c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	015b      	lsls	r3, r3, #5
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_FDCAN_MspInit+0xcc>)
 800071a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_FDCAN_MspInit+0xcc>)
 800071e:	2108      	movs	r1, #8
 8000720:	430a      	orrs	r2, r1
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_FDCAN_MspInit+0xcc>)
 8000726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000728:	2208      	movs	r2, #8
 800072a:	4013      	ands	r3, r2
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000730:	215c      	movs	r1, #92	; 0x5c
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2203      	movs	r2, #3
 8000736:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2203      	movs	r2, #3
 800074e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	187b      	adds	r3, r7, r1
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_FDCAN_MspInit+0xd0>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f001 ffa8 	bl	80026ac <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 1, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2101      	movs	r1, #1
 8000760:	2015      	movs	r0, #21
 8000762:	f000 fccf 	bl	8001104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8000766:	2015      	movs	r0, #21
 8000768:	f000 fce1 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b01d      	add	sp, #116	; 0x74
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	40006400 	.word	0x40006400
 8000778:	40021000 	.word	0x40021000
 800077c:	50000c00 	.word	0x50000c00

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	2414      	movs	r4, #20
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2314      	movs	r3, #20
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f005 f885 	bl	80058a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000796:	4b41      	ldr	r3, [pc, #260]	; (800089c <MX_GPIO_Init+0x11c>)
 8000798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079a:	4b40      	ldr	r3, [pc, #256]	; (800089c <MX_GPIO_Init+0x11c>)
 800079c:	2120      	movs	r1, #32
 800079e:	430a      	orrs	r2, r1
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
 80007a2:	4b3e      	ldr	r3, [pc, #248]	; (800089c <MX_GPIO_Init+0x11c>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a6:	2220      	movs	r2, #32
 80007a8:	4013      	ands	r3, r2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <MX_GPIO_Init+0x11c>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b3a      	ldr	r3, [pc, #232]	; (800089c <MX_GPIO_Init+0x11c>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <MX_GPIO_Init+0x11c>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <MX_GPIO_Init+0x11c>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <MX_GPIO_Init+0x11c>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b32      	ldr	r3, [pc, #200]	; (800089c <MX_GPIO_Init+0x11c>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_GPIO_Init+0x11c>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <MX_GPIO_Init+0x11c>)
 80007e4:	2104      	movs	r1, #4
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_GPIO_Init+0x11c>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	2204      	movs	r2, #4
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_GPIO_Init+0x11c>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_GPIO_Init+0x11c>)
 80007fc:	2108      	movs	r1, #8
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_GPIO_Init+0x11c>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	2208      	movs	r2, #8
 8000808:	4013      	ands	r3, r2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 800080e:	4924      	ldr	r1, [pc, #144]	; (80008a0 <MX_GPIO_Init+0x120>)
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	2200      	movs	r2, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f002 f8b4 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_GPIO_Init+0x124>)
 800081e:	2200      	movs	r2, #0
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0018      	movs	r0, r3
 8000824:	f002 f8ae 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <MX_GPIO_Init+0x120>)
 800082c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2201      	movs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	193a      	adds	r2, r7, r4
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	0011      	movs	r1, r2
 8000848:	0018      	movs	r0, r3
 800084a:	f001 ff2f 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2240      	movs	r2, #64	; 0x40
 8000852:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000860:	193b      	adds	r3, r7, r4
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <MX_GPIO_Init+0x124>)
 8000864:	0019      	movs	r1, r3
 8000866:	0010      	movs	r0, r2
 8000868:	f001 ff20 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 800086c:	0021      	movs	r1, r4
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000886:	187b      	adds	r3, r7, r1
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x124>)
 800088a:	0019      	movs	r1, r3
 800088c:	0010      	movs	r0, r2
 800088e:	f001 ff0d 	bl	80026ac <HAL_GPIO_Init>

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00b      	add	sp, #44	; 0x2c
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000
 80008a0:	00008203 	.word	0x00008203
 80008a4:	50000800 	.word	0x50000800

080008a8 <__io_putchar>:

#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008b0:	2301      	movs	r3, #1
 80008b2:	425b      	negs	r3, r3
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <__io_putchar+0x20>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	f003 f869 	bl	8003990 <HAL_UART_Transmit>
    return ch;
 80008be:	687b      	ldr	r3, [r7, #4]
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000104 	.word	0x20000104

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 faab 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f869 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f7ff ff51 	bl	8000780 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80008de:	f7ff fe9d 	bl	800061c <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 80008e2:	f000 f9c1 	bl	8000c68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("device\n");
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <main+0xc8>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f004 fedd 	bl	80056a8 <puts>
  FDCAN_Enable();
 80008ee:	f004 fbb7 	bl	8005060 <FDCAN_Enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if((isSelectID == 1) && (isCommandID == 1))
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <main+0xcc>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d1fb      	bne.n	80008f2 <main+0x26>
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <main+0xd0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d1f7      	bne.n	80008f2 <main+0x26>
		{
			printf("Select Command ID\n");
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <main+0xd4>)
 8000904:	0018      	movs	r0, r3
 8000906:	f004 fecf 	bl	80056a8 <puts>

			isCommandID = 0;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <main+0xd0>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
			FDCAN_ReadByte();
 8000910:	f004 fbec 	bl	80050ec <FDCAN_ReadByte>
			id = header.RxHeader.Identifier;
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <main+0xd8>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
			switch(id)
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b92      	cmp	r3, #146	; 0x92
 8000922:	d023      	beq.n	800096c <main+0xa0>
 8000924:	dc24      	bgt.n	8000970 <main+0xa4>
 8000926:	2b82      	cmp	r3, #130	; 0x82
 8000928:	d024      	beq.n	8000974 <main+0xa8>
 800092a:	dc21      	bgt.n	8000970 <main+0xa4>
 800092c:	2b73      	cmp	r3, #115	; 0x73
 800092e:	d023      	beq.n	8000978 <main+0xac>
 8000930:	dc1e      	bgt.n	8000970 <main+0xa4>
 8000932:	2b63      	cmp	r3, #99	; 0x63
 8000934:	d022      	beq.n	800097c <main+0xb0>
 8000936:	dc1b      	bgt.n	8000970 <main+0xa4>
 8000938:	2b44      	cmp	r3, #68	; 0x44
 800093a:	d021      	beq.n	8000980 <main+0xb4>
 800093c:	dc18      	bgt.n	8000970 <main+0xa4>
 800093e:	2b21      	cmp	r3, #33	; 0x21
 8000940:	dc08      	bgt.n	8000954 <main+0x88>
 8000942:	2b00      	cmp	r3, #0
 8000944:	db14      	blt.n	8000970 <main+0xa4>
 8000946:	2b21      	cmp	r3, #33	; 0x21
 8000948:	d812      	bhi.n	8000970 <main+0xa4>
 800094a:	009a      	lsls	r2, r3, #2
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <main+0xdc>)
 800094e:	18d3      	adds	r3, r2, r3
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	469f      	mov	pc, r3
 8000954:	2b31      	cmp	r3, #49	; 0x31
 8000956:	d015      	beq.n	8000984 <main+0xb8>
				case 0x82:
					break;
				case 0x92:
					break;
				default:
					break;
 8000958:	e00a      	b.n	8000970 <main+0xa4>
					FDCAN_GetCommand_d();
 800095a:	f004 fc73 	bl	8005244 <FDCAN_GetCommand_d>
					break;
 800095e:	e012      	b.n	8000986 <main+0xba>
					FDCAN_GetID_d();
 8000960:	f004 fc9e 	bl	80052a0 <FDCAN_GetID_d>
					break;
 8000964:	e00f      	b.n	8000986 <main+0xba>
					FDCAN_ReadMemory_d();
 8000966:	f004 fcb3 	bl	80052d0 <FDCAN_ReadMemory_d>
					break;
 800096a:	e00c      	b.n	8000986 <main+0xba>
					break;
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	e00a      	b.n	8000986 <main+0xba>
					break;
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	e008      	b.n	8000986 <main+0xba>
					break;
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	e006      	b.n	8000986 <main+0xba>
					break;
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	e004      	b.n	8000986 <main+0xba>
					break;
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	e002      	b.n	8000986 <main+0xba>
					break;
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	e000      	b.n	8000986 <main+0xba>
					break;
 8000984:	46c0      	nop			; (mov r8, r8)
			}
			isSelectID = 0;
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <main+0xcc>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
			isCommandID = 1;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <main+0xd0>)
 800098e:	2201      	movs	r2, #1
 8000990:	701a      	strb	r2, [r3, #0]
		if((isSelectID == 1) && (isCommandID == 1))
 8000992:	e7ae      	b.n	80008f2 <main+0x26>
 8000994:	08005e60 	.word	0x08005e60
 8000998:	2000019d 	.word	0x2000019d
 800099c:	2000019c 	.word	0x2000019c
 80009a0:	08005e68 	.word	0x08005e68
 80009a4:	20000204 	.word	0x20000204
 80009a8:	08005e88 	.word	0x08005e88

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b095      	sub	sp, #84	; 0x54
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	2414      	movs	r4, #20
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	233c      	movs	r3, #60	; 0x3c
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f004 ff6f 	bl	80058a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2310      	movs	r3, #16
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f004 ff68 	bl	80058a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 fff3 	bl	80029c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009da:	193b      	adds	r3, r7, r4
 80009dc:	2202      	movs	r2, #2
 80009de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009e8:	0021      	movs	r1, r4
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2202      	movs	r2, #2
 80009fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0292      	lsls	r2, r2, #10
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	0492      	lsls	r2, r2, #18
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	0592      	lsls	r2, r2, #22
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 f815 	bl	8002a58 <HAL_RCC_OscConfig>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a32:	f000 f819 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2202      	movs	r2, #2
 8000a40:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2102      	movs	r1, #2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fb60 	bl	8003118 <HAL_RCC_ClockConfig>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a5c:	f000 f804 	bl	8000a68 <Error_Handler>
  }
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b015      	add	sp, #84	; 0x54
 8000a66:	bd90      	pop	{r4, r7, pc}

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	641a      	str	r2, [r3, #64]	; 0x40
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0549      	lsls	r1, r1, #21
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	055b      	lsls	r3, r3, #21
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fa64 	bl	8000f80 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b002      	add	sp, #8
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 fa0a 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 f87a 	bl	8001bf4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	2000009c 	.word	0x2000009c

08000b0c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 ffe0 	bl	8003ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000104 	.word	0x20000104

08000b24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b36:	e000      	b.n	8000b3a <_read+0x16>
 8000b38:	bf00      	nop
 8000b3a:	0001      	movs	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
  }

  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b006      	add	sp, #24
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff fe95 	bl	80008a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
  }
  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b006      	add	sp, #24
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	425b      	negs	r3, r3
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	0192      	lsls	r2, r2, #6
 8000bba:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f004 fe94 	bl	800594c <__errno>
 8000c24:	0003      	movs	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	425b      	negs	r3, r3
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	18d2      	adds	r2, r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20024000 	.word	0x20024000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000100 	.word	0x20000100
 8000c58:	200003b8 	.word	0x200003b8

08000c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <MX_USART3_UART_Init+0x98>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c74:	22e1      	movs	r2, #225	; 0xe1
 8000c76:	0252      	lsls	r2, r2, #9
 8000c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f002 fe16 	bl	80038e4 <HAL_UART_Init>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f7ff fed4 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f004 f869 	bl	8004d9c <HAL_UARTEx_SetTxFifoThreshold>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f7ff fecb 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f004 f8a0 	bl	8004e1c <HAL_UARTEx_SetRxFifoThreshold>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f7ff fec2 	bl	8000a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <MX_USART3_UART_Init+0x94>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 f81e 	bl	8004d28 <HAL_UARTEx_DisableFifoMode>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f7ff feba 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	20000104 	.word	0x20000104
 8000d00:	40004800 	.word	0x40004800

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b09d      	sub	sp, #116	; 0x74
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	235c      	movs	r3, #92	; 0x5c
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	0018      	movs	r0, r3
 8000d12:	2314      	movs	r3, #20
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f004 fdc2 	bl	80058a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	2410      	movs	r4, #16
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	0018      	movs	r0, r3
 8000d22:	234c      	movs	r3, #76	; 0x4c
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f004 fdba 	bl	80058a0 <memset>
  if(uartHandle->Instance==USART3)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <HAL_UART_MspInit+0xc8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d146      	bne.n	8000dc4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2204      	movs	r2, #4
 8000d3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fb91 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff fe8b 	bl	8000a68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	02c9      	lsls	r1, r1, #11
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	02db      	lsls	r3, r3, #11
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d74:	2102      	movs	r1, #2
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_UART_MspInit+0xcc>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d86:	215c      	movs	r1, #92	; 0x5c
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	22c0      	movs	r2, #192	; 0xc0
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2204      	movs	r2, #4
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_UART_MspInit+0xd0>)
 8000dac:	0019      	movs	r1, r3
 8000dae:	0010      	movs	r0, r2
 8000db0:	f001 fc7c 	bl	80026ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 2, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2102      	movs	r1, #2
 8000db8:	201d      	movs	r0, #29
 8000dba:	f000 f9a3 	bl	8001104 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000dbe:	201d      	movs	r0, #29
 8000dc0:	f000 f9b5 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b01d      	add	sp, #116	; 0x74
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	40004800 	.word	0x40004800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	50000400 	.word	0x50000400

08000dd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ddc:	f7ff ff3e 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e06:	f004 fda7 	bl	8005958 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e0a:	f7ff fd5f 	bl	80008cc <main>

08000e0e <LoopForever>:

LoopForever:
  b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   r0, =_estack
 8000e10:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e1c:	08005fb8 	.word	0x08005fb8
  ldr r2, =_sbss
 8000e20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e24:	200003b8 	.word	0x200003b8

08000e28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_COMP_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x3c>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Init+0x3c>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0049      	lsls	r1, r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f810 	bl	8000e6c <HAL_InitTick>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e001      	b.n	8000e5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe0c 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40022000 	.word	0x40022000

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_InitTick+0x88>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d02b      	beq.n	8000edc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_InitTick+0x8c>)
 8000e86:	681c      	ldr	r4, [r3, #0]
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_InitTick+0x88>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	23fa      	movs	r3, #250	; 0xfa
 8000e90:	0098      	lsls	r0, r3, #2
 8000e92:	f7ff f937 	bl	8000104 <__udivsi3>
 8000e96:	0003      	movs	r3, r0
 8000e98:	0019      	movs	r1, r3
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff f932 	bl	8000104 <__udivsi3>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 f953 	bl	800114e <HAL_SYSTICK_Config>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d112      	bne.n	8000ed2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d80a      	bhi.n	8000ec8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	425b      	negs	r3, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 f922 	bl	8001104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_InitTick+0x90>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e00d      	b.n	8000ee4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e008      	b.n	8000ee4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e003      	b.n	8000ee4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	781b      	ldrb	r3, [r3, #0]
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b005      	add	sp, #20
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	18d2      	adds	r2, r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000198 	.word	0x20000198

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000198 	.word	0x20000198

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff0 	bl	8000f24 <HAL_GetTick>
 8000f44:	0003      	movs	r3, r0
 8000f46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	001a      	movs	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	189b      	adds	r3, r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	f7ff ffe0 	bl	8000f24 <HAL_GetTick>
 8000f64:	0002      	movs	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	fffff9ff 	.word	0xfffff9ff

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	1dfb      	adds	r3, r7, #7
 8000fb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000fbe:	d809      	bhi.n	8000fd4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	231f      	movs	r3, #31
 8000fc8:	401a      	ands	r2, r3
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_EnableIRQ+0x30>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	4091      	lsls	r1, r2
 8000fd0:	000a      	movs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff4:	d828      	bhi.n	8001048 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <__NVIC_SetPriority+0xd4>)
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	33c0      	adds	r3, #192	; 0xc0
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	589b      	ldr	r3, [r3, r2]
 8001006:	1dfa      	adds	r2, r7, #7
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	0011      	movs	r1, r2
 800100c:	2203      	movs	r2, #3
 800100e:	400a      	ands	r2, r1
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	21ff      	movs	r1, #255	; 0xff
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	43d2      	mvns	r2, r2
 800101a:	401a      	ands	r2, r3
 800101c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	401a      	ands	r2, r3
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0018      	movs	r0, r3
 800102c:	2303      	movs	r3, #3
 800102e:	4003      	ands	r3, r0
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001034:	481f      	ldr	r0, [pc, #124]	; (80010b4 <__NVIC_SetPriority+0xd4>)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	430a      	orrs	r2, r1
 8001040:	33c0      	adds	r3, #192	; 0xc0
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001046:	e031      	b.n	80010ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <__NVIC_SetPriority+0xd8>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	0019      	movs	r1, r3
 8001050:	230f      	movs	r3, #15
 8001052:	400b      	ands	r3, r1
 8001054:	3b08      	subs	r3, #8
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3306      	adds	r3, #6
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1dfa      	adds	r2, r7, #7
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	0011      	movs	r1, r2
 8001068:	2203      	movs	r2, #3
 800106a:	400a      	ands	r2, r1
 800106c:	00d2      	lsls	r2, r2, #3
 800106e:	21ff      	movs	r1, #255	; 0xff
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	43d2      	mvns	r2, r2
 8001076:	401a      	ands	r2, r3
 8001078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	401a      	ands	r2, r3
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	0018      	movs	r0, r3
 8001088:	2303      	movs	r3, #3
 800108a:	4003      	ands	r3, r0
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <__NVIC_SetPriority+0xd8>)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	001c      	movs	r4, r3
 8001098:	230f      	movs	r3, #15
 800109a:	4023      	ands	r3, r4
 800109c:	3b08      	subs	r3, #8
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	430a      	orrs	r2, r1
 80010a2:	3306      	adds	r3, #6
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	18c3      	adds	r3, r0, r3
 80010a8:	3304      	adds	r3, #4
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b003      	add	sp, #12
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	045b      	lsls	r3, r3, #17
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d301      	bcc.n	80010d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d0:	2301      	movs	r3, #1
 80010d2:	e010      	b.n	80010f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <SysTick_Config+0x44>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	3a01      	subs	r2, #1
 80010da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010dc:	2301      	movs	r3, #1
 80010de:	425b      	negs	r3, r3
 80010e0:	2103      	movs	r1, #3
 80010e2:	0018      	movs	r0, r3
 80010e4:	f7ff ff7c 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x44>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x44>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	210f      	movs	r1, #15
 8001110:	187b      	adds	r3, r7, r1
 8001112:	1c02      	adds	r2, r0, #0
 8001114:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	0002      	movs	r2, r0
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ff33 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff ffaf 	bl	80010bc <SysTick_Config>
 800115e:	0003      	movs	r3, r0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e04f      	b.n	800121a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2225      	movs	r2, #37	; 0x25
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d008      	beq.n	8001198 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2204      	movs	r2, #4
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	2100      	movs	r1, #0
 8001192:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e040      	b.n	800121a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	210e      	movs	r1, #14
 80011a4:	438a      	bics	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	491c      	ldr	r1, [pc, #112]	; (8001224 <HAL_DMA_Abort+0xbc>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	221c      	movs	r2, #28
 80011ce:	401a      	ands	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2101      	movs	r1, #1
 80011d6:	4091      	lsls	r1, r2
 80011d8:	000a      	movs	r2, r1
 80011da:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f8:	490a      	ldr	r1, [pc, #40]	; (8001224 <HAL_DMA_Abort+0xbc>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001206:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2225      	movs	r2, #37	; 0x25
 800120c:	2101      	movs	r1, #1
 800120e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2224      	movs	r2, #36	; 0x24
 8001214:	2100      	movs	r1, #0
 8001216:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	fffffeff 	.word	0xfffffeff

08001228 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001230:	210f      	movs	r1, #15
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2225      	movs	r2, #37	; 0x25
 800123c:	5c9b      	ldrb	r3, [r3, r2]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d006      	beq.n	8001252 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e048      	b.n	80012e4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	210e      	movs	r1, #14
 800125e:	438a      	bics	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	438a      	bics	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127c:	491d      	ldr	r1, [pc, #116]	; (80012f4 <HAL_DMA_Abort_IT+0xcc>)
 800127e:	400a      	ands	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	221c      	movs	r2, #28
 8001288:	401a      	ands	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2101      	movs	r1, #1
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800129e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b2:	4910      	ldr	r1, [pc, #64]	; (80012f4 <HAL_DMA_Abort_IT+0xcc>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2225      	movs	r2, #37	; 0x25
 80012c6:	2101      	movs	r1, #1
 80012c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2224      	movs	r2, #36	; 0x24
 80012ce:	2100      	movs	r1, #0
 80012d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	0010      	movs	r0, r2
 80012e2:	4798      	blx	r3
    }
  }
  return status;
 80012e4:	230f      	movs	r3, #15
 80012e6:	18fb      	adds	r3, r7, r3
 80012e8:	781b      	ldrb	r3, [r3, #0]
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	fffffeff 	.word	0xfffffeff

080012f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e14e      	b.n	80015a8 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	225c      	movs	r2, #92	; 0x5c
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d107      	bne.n	8001326 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	225d      	movs	r2, #93	; 0x5d
 800131a:	2100      	movs	r1, #0
 800131c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff f9c3 	bl	80006ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	699a      	ldr	r2, [r3, #24]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2110      	movs	r1, #16
 8001332:	438a      	bics	r2, r1
 8001334:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001336:	f7ff fdf5 	bl	8000f24 <HAL_GetTick>
 800133a:	0003      	movs	r3, r0
 800133c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800133e:	e012      	b.n	8001366 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001340:	f7ff fdf0 	bl	8000f24 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d90b      	bls.n	8001366 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	2201      	movs	r2, #1
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	225c      	movs	r2, #92	; 0x5c
 800135e:	2103      	movs	r1, #3
 8001360:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e120      	b.n	80015a8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2208      	movs	r2, #8
 800136e:	4013      	ands	r3, r2
 8001370:	2b08      	cmp	r3, #8
 8001372:	d0e5      	beq.n	8001340 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001384:	f7ff fdce 	bl	8000f24 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800138c:	e012      	b.n	80013b4 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800138e:	f7ff fdc9 	bl	8000f24 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b0a      	cmp	r3, #10
 800139a:	d90b      	bls.n	80013b4 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	2201      	movs	r2, #1
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	225c      	movs	r2, #92	; 0x5c
 80013ac:	2103      	movs	r1, #3
 80013ae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0f9      	b.n	80015a8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d0e6      	beq.n	800138e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2102      	movs	r1, #2
 80013cc:	430a      	orrs	r2, r1
 80013ce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <HAL_FDCAN_Init+0x2b8>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d103      	bne.n	80013e2 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80013da:	4a76      	ldr	r2, [pc, #472]	; (80015b4 <HAL_FDCAN_Init+0x2bc>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7c1b      	ldrb	r3, [r3, #16]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d108      	bne.n	80013fc <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2140      	movs	r1, #64	; 0x40
 80013f6:	438a      	bics	r2, r1
 80013f8:	619a      	str	r2, [r3, #24]
 80013fa:	e007      	b.n	800140c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	430a      	orrs	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7c5b      	ldrb	r3, [r3, #17]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d109      	bne.n	8001428 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	01c9      	lsls	r1, r1, #7
 8001422:	430a      	orrs	r2, r1
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	e007      	b.n	8001438 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4961      	ldr	r1, [pc, #388]	; (80015b8 <HAL_FDCAN_Init+0x2c0>)
 8001434:	400a      	ands	r2, r1
 8001436:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7c9b      	ldrb	r3, [r3, #18]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d108      	bne.n	8001452 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	495c      	ldr	r1, [pc, #368]	; (80015bc <HAL_FDCAN_Init+0x2c4>)
 800144c:	400a      	ands	r2, r1
 800144e:	619a      	str	r2, [r3, #24]
 8001450:	e008      	b.n	8001464 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0149      	lsls	r1, r1, #5
 8001460:	430a      	orrs	r2, r1
 8001462:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <HAL_FDCAN_Init+0x2c8>)
 800146c:	4013      	ands	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	21a4      	movs	r1, #164	; 0xa4
 8001488:	438a      	bics	r2, r1
 800148a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2110      	movs	r1, #16
 8001498:	438a      	bics	r2, r1
 800149a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d108      	bne.n	80014b6 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2104      	movs	r1, #4
 80014b0:	430a      	orrs	r2, r1
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	e02c      	b.n	8001510 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d028      	beq.n	8001510 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d01c      	beq.n	8001500 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	430a      	orrs	r2, r1
 80014d4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2110      	movs	r1, #16
 80014e2:	430a      	orrs	r2, r1
 80014e4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d110      	bne.n	8001510 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699a      	ldr	r2, [r3, #24]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2120      	movs	r1, #32
 80014fa:	430a      	orrs	r2, r1
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	e007      	b.n	8001510 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699a      	ldr	r2, [r3, #24]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2120      	movs	r1, #32
 800150c:	430a      	orrs	r2, r1
 800150e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	3b01      	subs	r3, #1
 8001516:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	3b01      	subs	r3, #1
 800151e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001520:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001528:	431a      	orrs	r2, r3
 800152a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	3b01      	subs	r3, #1
 8001532:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001538:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800153a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	23c0      	movs	r3, #192	; 0xc0
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d115      	bne.n	8001574 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	3b01      	subs	r3, #1
 8001554:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001556:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	3b01      	subs	r3, #1
 800155e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001560:	431a      	orrs	r2, r3
 8001562:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	3b01      	subs	r3, #1
 800156a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001570:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001572:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	22c0      	movs	r2, #192	; 0xc0
 800157a:	5899      	ldr	r1, [r3, r2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	21c0      	movs	r1, #192	; 0xc0
 8001588:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0018      	movs	r0, r3
 800158e:	f000 fcbb 	bl	8001f08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	225c      	movs	r2, #92	; 0x5c
 80015a2:	2101      	movs	r1, #1
 80015a4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b004      	add	sp, #16
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40006400 	.word	0x40006400
 80015b4:	40006500 	.word	0x40006500
 80015b8:	ffffbfff 	.word	0xffffbfff
 80015bc:	ffffefff 	.word	0xffffefff
 80015c0:	fffffcff 	.word	0xfffffcff

080015c4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015ce:	2017      	movs	r0, #23
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	215c      	movs	r1, #92	; 0x5c
 80015d6:	5c52      	ldrb	r2, [r2, r1]
 80015d8:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80015da:	0002      	movs	r2, r0
 80015dc:	18bb      	adds	r3, r7, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d003      	beq.n	80015ec <HAL_FDCAN_ConfigFilter+0x28>
 80015e4:	18bb      	adds	r3, r7, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d13d      	bne.n	8001668 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d119      	bne.n	8001628 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001600:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001608:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e01d      	b.n	8001664 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	075a      	lsls	r2, r3, #29
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	079a      	lsls	r2, r3, #30
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3304      	adds	r3, #4
 800165c:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	e006      	b.n	8001676 <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	2202      	movs	r2, #2
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
  }
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b006      	add	sp, #24
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	225c      	movs	r2, #92	; 0x5c
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	0219      	lsls	r1, r3, #8
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e006      	b.n	80016b6 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ac:	2204      	movs	r2, #4
 80016ae:	431a      	orrs	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
  }
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	225c      	movs	r2, #92	; 0x5c
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10a      	bne.n	80016e8 <HAL_FDCAN_EnableTxDelayCompensation+0x2a>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e006      	b.n	80016f6 <HAL_FDCAN_EnableTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ec:	2204      	movs	r2, #4
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
  }
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b002      	add	sp, #8
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	225c      	movs	r2, #92	; 0x5c
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d110      	bne.n	8001734 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	225c      	movs	r2, #92	; 0x5c
 8001716:	2102      	movs	r1, #2
 8001718:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	438a      	bics	r2, r1
 8001728:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e006      	b.n	8001742 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	2204      	movs	r2, #4
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
  }
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	225c      	movs	r2, #92	; 0x5c
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d12d      	bne.n	80017be <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	22c4      	movs	r2, #196	; 0xc4
 8001768:	589a      	ldr	r2, [r3, r2]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	039b      	lsls	r3, r3, #14
 800176e:	4013      	ands	r3, r2
 8001770:	d008      	beq.n	8001784 <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	431a      	orrs	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e023      	b.n	80017cc <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	22c4      	movs	r2, #196	; 0xc4
 800178a:	589b      	ldr	r3, [r3, r2]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	2203      	movs	r2, #3
 8001790:	4013      	ands	r3, r2
 8001792:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 fc20 	bl	8001fe0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	21cc      	movs	r1, #204	; 0xcc
 80017ae:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80017b0:	2201      	movs	r2, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	409a      	lsls	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e006      	b.n	80017cc <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	2208      	movs	r2, #8
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
  }
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b006      	add	sp, #24
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017e6:	201b      	movs	r0, #27
 80017e8:	183b      	adds	r3, r7, r0
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	215c      	movs	r1, #92	; 0x5c
 80017ee:	5c52      	ldrb	r2, [r2, r1]
 80017f0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80017f2:	183b      	adds	r3, r7, r0
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d000      	beq.n	80017fc <HAL_FDCAN_GetRxMessage+0x28>
 80017fa:	e0ec      	b.n	80019d6 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b40      	cmp	r3, #64	; 0x40
 8001800:	d137      	bne.n	8001872 <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2290      	movs	r2, #144	; 0x90
 8001808:	589b      	ldr	r3, [r3, r2]
 800180a:	220f      	movs	r2, #15
 800180c:	4013      	ands	r3, r2
 800180e:	d108      	bne.n	8001822 <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	0052      	lsls	r2, r2, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0e0      	b.n	80019e4 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2290      	movs	r2, #144	; 0x90
 8001828:	589b      	ldr	r3, [r3, r2]
 800182a:	0e1b      	lsrs	r3, r3, #24
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10a      	bne.n	800184a <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	589b      	ldr	r3, [r3, r2]
 800183c:	0a5b      	lsrs	r3, r3, #9
 800183e:	2201      	movs	r2, #1
 8001840:	4013      	ands	r3, r2
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001846:	2301      	movs	r3, #1
 8001848:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2290      	movs	r2, #144	; 0x90
 8001850:	589b      	ldr	r3, [r3, r2]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	2203      	movs	r2, #3
 8001856:	4013      	ands	r3, r2
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	0013      	movs	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	189b      	adds	r3, r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	18cb      	adds	r3, r1, r3
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
 8001870:	e036      	b.n	80018e0 <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2298      	movs	r2, #152	; 0x98
 8001878:	589b      	ldr	r3, [r3, r2]
 800187a:	220f      	movs	r2, #15
 800187c:	4013      	ands	r3, r2
 800187e:	d108      	bne.n	8001892 <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0052      	lsls	r2, r2, #1
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0a8      	b.n	80019e4 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2298      	movs	r2, #152	; 0x98
 8001898:	589b      	ldr	r3, [r3, r2]
 800189a:	0e1b      	lsrs	r3, r3, #24
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10a      	bne.n	80018ba <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2280      	movs	r2, #128	; 0x80
 80018aa:	589b      	ldr	r3, [r3, r2]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2298      	movs	r2, #152	; 0x98
 80018c0:	589b      	ldr	r3, [r3, r2]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	2203      	movs	r2, #3
 80018c6:	4013      	ands	r3, r2
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	18d3      	adds	r3, r2, r3
 80018cc:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	0013      	movs	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	18cb      	adds	r3, r1, r3
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	05db      	lsls	r3, r3, #23
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	055b      	lsls	r3, r3, #21
 80018fe:	0d5a      	lsrs	r2, r3, #21
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e005      	b.n	8001912 <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	059b      	lsls	r3, r3, #22
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0fdb      	lsrs	r3, r3, #31
 8001926:	07da      	lsls	r2, r3, #31
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	3304      	adds	r3, #4
 8001930:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	041b      	lsls	r3, r3, #16
 8001938:	0c1a      	lsrs	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	220f      	movs	r2, #15
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	035b      	lsls	r3, r3, #13
 8001954:	401a      	ands	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	039b      	lsls	r3, r3, #14
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0e1b      	lsrs	r3, r3, #24
 800196e:	227f      	movs	r2, #127	; 0x7f
 8001970:	401a      	ands	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	0fda      	lsrs	r2, r3, #31
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3304      	adds	r3, #4
 8001984:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	e00a      	b.n	80019a6 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	18d2      	adds	r2, r2, r3
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	18cb      	adds	r3, r1, r3
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	3301      	adds	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_FDCAN_GetRxMessage+0x218>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	001a      	movs	r2, r3
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d3ec      	bcc.n	8001990 <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b40      	cmp	r3, #64	; 0x40
 80019ba:	d105      	bne.n	80019c8 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2194      	movs	r1, #148	; 0x94
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	505a      	str	r2, [r3, r1]
 80019c6:	e004      	b.n	80019d2 <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	219c      	movs	r1, #156	; 0x9c
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e006      	b.n	80019e4 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	2208      	movs	r2, #8
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
  }
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b00a      	add	sp, #40	; 0x28
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	08005f70 	.word	0x08005f70

080019f0 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b40      	cmp	r3, #64	; 0x40
 80019fe:	d107      	bne.n	8001a10 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2290      	movs	r2, #144	; 0x90
 8001a06:	589b      	ldr	r3, [r3, r2]
 8001a08:	220f      	movs	r2, #15
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e006      	b.n	8001a1e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2298      	movs	r2, #152	; 0x98
 8001a16:	589b      	ldr	r3, [r3, r2]
 8001a18:	220f      	movs	r2, #15
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	22c4      	movs	r2, #196	; 0xc4
 8001a36:	589b      	ldr	r3, [r3, r2]
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a54:	2017      	movs	r0, #23
 8001a56:	183b      	adds	r3, r7, r0
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	215c      	movs	r1, #92	; 0x5c
 8001a5c:	5c52      	ldrb	r2, [r2, r1]
 8001a5e:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a60:	0002      	movs	r2, r0
 8001a62:	18bb      	adds	r3, r7, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d004      	beq.n	8001a74 <HAL_FDCAN_ActivateNotification+0x2c>
 8001a6a:	18bb      	adds	r3, r7, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d000      	beq.n	8001a74 <HAL_FDCAN_ActivateNotification+0x2c>
 8001a72:	e0b4      	b.n	8001bde <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4013      	ands	r3, r2
 8001a82:	d003      	beq.n	8001a8c <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d034      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2238      	movs	r2, #56	; 0x38
 8001a90:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001a92:	d003      	beq.n	8001a9c <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d02c      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	23e0      	movs	r3, #224	; 0xe0
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001aa4:	d003      	beq.n	8001aae <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d023      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	23f0      	movs	r3, #240	; 0xf0
 8001ab2:	015b      	lsls	r3, r3, #5
 8001ab4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001ab6:	d003      	beq.n	8001ac0 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2208      	movs	r2, #8
 8001abc:	4013      	ands	r3, r2
 8001abe:	d01a      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	23e0      	movs	r3, #224	; 0xe0
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001ac8:	d003      	beq.n	8001ad2 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2210      	movs	r2, #16
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d011      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	23c0      	movs	r3, #192	; 0xc0
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001ada:	d003      	beq.n	8001ae4 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d008      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	23fc      	movs	r3, #252	; 0xfc
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001aec:	d00b      	beq.n	8001b06 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	4013      	ands	r3, r2
 8001af4:	d107      	bne.n	8001b06 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	430a      	orrs	r2, r1
 8001b04:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2207      	movs	r2, #7
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	d134      	bne.n	8001b80 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b1c:	d003      	beq.n	8001b26 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2202      	movs	r2, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	d12c      	bne.n	8001b80 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	23e0      	movs	r3, #224	; 0xe0
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b2e:	d003      	beq.n	8001b38 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2204      	movs	r2, #4
 8001b34:	4013      	ands	r3, r2
 8001b36:	d123      	bne.n	8001b80 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	23f0      	movs	r3, #240	; 0xf0
 8001b3c:	015b      	lsls	r3, r3, #5
 8001b3e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b40:	d003      	beq.n	8001b4a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2208      	movs	r2, #8
 8001b46:	4013      	ands	r3, r2
 8001b48:	d11a      	bne.n	8001b80 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	23e0      	movs	r3, #224	; 0xe0
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001b52:	d003      	beq.n	8001b5c <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2210      	movs	r2, #16
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d111      	bne.n	8001b80 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	23c0      	movs	r3, #192	; 0xc0
 8001b60:	029b      	lsls	r3, r3, #10
 8001b62:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001b64:	d003      	beq.n	8001b6e <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d108      	bne.n	8001b80 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	23fc      	movs	r3, #252	; 0xfc
 8001b72:	041b      	lsls	r3, r3, #16
 8001b74:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001b76:	d00b      	beq.n	8001b90 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d007      	beq.n	8001b90 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	4013      	ands	r3, r2
 8001b96:	d009      	beq.n	8001bac <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	22dc      	movs	r2, #220	; 0xdc
 8001b9e:	5899      	ldr	r1, [r3, r2]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	21dc      	movs	r1, #220	; 0xdc
 8001baa:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	22e0      	movs	r2, #224	; 0xe0
 8001bbc:	5899      	ldr	r1, [r3, r2]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	21e0      	movs	r1, #224	; 0xe0
 8001bc8:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e006      	b.n	8001bec <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	2202      	movs	r2, #2
 8001be4:	431a      	orrs	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
  }
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b006      	add	sp, #24
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c02:	23e0      	movs	r3, #224	; 0xe0
 8001c04:	015b      	lsls	r3, r3, #5
 8001c06:	4013      	ands	r3, r2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c12:	4013      	ands	r3, r2
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	4013      	ands	r3, r2
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	2238      	movs	r2, #56	; 0x38
 8001c36:	4013      	ands	r3, r2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	4013      	ands	r3, r2
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4c:	23f1      	movs	r3, #241	; 0xf1
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	4013      	ands	r3, r2
 8001c52:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c66:	23e0      	movs	r3, #224	; 0xe0
 8001c68:	031b      	lsls	r3, r3, #12
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c88:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2240      	movs	r2, #64	; 0x40
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d00b      	beq.n	8001caa <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	4013      	ands	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 f916 	bl	8001ed6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d01b      	beq.n	8001cec <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d016      	beq.n	8001cec <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	22d8      	movs	r2, #216	; 0xd8
 8001cc4:	589b      	ldr	r3, [r3, r2]
 8001cc6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	22e0      	movs	r2, #224	; 0xe0
 8001cce:	589a      	ldr	r2, [r3, r2]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0011      	movs	r1, r2
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f8dc 	bl	8001ea4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x112>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0011      	movs	r1, r2
 8001d00:	0018      	movs	r0, r3
 8001d02:	f000 f8ac 	bl	8001e5e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d009      	beq.n	8001d20 <HAL_FDCAN_IRQHandler+0x12c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d12:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0011      	movs	r1, r2
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f003 fa6c 	bl	80051f8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_FDCAN_IRQHandler+0x146>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	0011      	movs	r1, r2
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f89b 	bl	8001e70 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_FDCAN_IRQHandler+0x16c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d008      	beq.n	8001d60 <HAL_FDCAN_IRQHandler+0x16c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f000 f891 	bl	8001e82 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	4013      	ands	r3, r2
 8001d66:	d019      	beq.n	8001d9c <HAL_FDCAN_IRQHandler+0x1a8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d015      	beq.n	8001d9c <HAL_FDCAN_IRQHandler+0x1a8>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	22d4      	movs	r2, #212	; 0xd4
 8001d76:	589b      	ldr	r3, [r3, r2]
 8001d78:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	22dc      	movs	r2, #220	; 0xdc
 8001d80:	589a      	ldr	r2, [r3, r2]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0011      	movs	r1, r2
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f87b 	bl	8001e92 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	4013      	ands	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	019b      	lsls	r3, r3, #6
 8001dac:	4013      	ands	r3, r2
 8001dae:	d008      	beq.n	8001dc2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	0192      	lsls	r2, r2, #6
 8001db8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 f87a 	bl	8001eb6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_FDCAN_IRQHandler+0x1f4>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d008      	beq.n	8001de8 <HAL_FDCAN_IRQHandler+0x1f4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	0212      	lsls	r2, r2, #8
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f86f 	bl	8001ec6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	01db      	lsls	r3, r3, #7
 8001dee:	4013      	ands	r3, r2
 8001df0:	d00f      	beq.n	8001e12 <HAL_FDCAN_IRQHandler+0x21e>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	01db      	lsls	r3, r3, #7
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d00a      	beq.n	8001e12 <HAL_FDCAN_IRQHandler+0x21e>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	01d2      	lsls	r2, r2, #7
 8001e04:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_FDCAN_IRQHandler+0x238>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0011      	movs	r1, r2
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 f865 	bl	8001ef6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_FDCAN_IRQHandler+0x252>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a3a      	ldr	r2, [r7, #32]
 8001e38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_FDCAN_IRQHandler+0x262>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f848 	bl	8001ee6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b00c      	add	sp, #48	; 0x30
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b002      	add	sp, #8
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b002      	add	sp, #8
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8001f12:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2e      	ldr	r2, [pc, #184]	; (8001fd4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d105      	bne.n	8001f2a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	22d4      	movs	r2, #212	; 0xd4
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4694      	mov	ip, r2
 8001f26:	4463      	add	r3, ip
 8001f28:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	589b      	ldr	r3, [r3, r2]
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f42:	041a      	lsls	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3370      	adds	r3, #112	; 0x70
 8001f52:	001a      	movs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2280      	movs	r2, #128	; 0x80
 8001f5e:	589b      	ldr	r3, [r3, r2]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	061a      	lsls	r2, r3, #24
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	33b0      	adds	r3, #176	; 0xb0
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3389      	adds	r3, #137	; 0x89
 8001f84:	33ff      	adds	r3, #255	; 0xff
 8001f86:	001a      	movs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2298      	movs	r2, #152	; 0x98
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	189a      	adds	r2, r3, r2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	229e      	movs	r2, #158	; 0x9e
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	189a      	adds	r2, r3, r2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	e005      	b.n	8001fb6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	22d4      	movs	r2, #212	; 0xd4
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	4694      	mov	ip, r2
 8001fbe:	4463      	add	r3, ip
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3f1      	bcc.n	8001faa <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	4000b400 	.word	0x4000b400
 8001fd4:	40006800 	.word	0x40006800
 8001fd8:	ffe0ffff 	.word	0xffe0ffff
 8001fdc:	f0ffffff 	.word	0xf0ffffff

08001fe0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10a      	bne.n	800200c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ffe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002006:	4313      	orrs	r3, r2
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e00b      	b.n	8002024 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002014:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800201a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	05d2      	lsls	r2, r2, #23
 8002020:	4313      	orrs	r3, r2
 8002022:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800202e:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002034:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800203a:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	0013      	movs	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	189b      	adds	r3, r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	18cb      	adds	r3, r1, r3
 8002056:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3304      	adds	r3, #4
 8002062:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	3304      	adds	r3, #4
 800206e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e020      	b.n	80020b8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3303      	adds	r3, #3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3302      	adds	r3, #2
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	18cb      	adds	r3, r1, r3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800208e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	18cb      	adds	r3, r1, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800209c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	188a      	adds	r2, r1, r2
 80020a4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80020a6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	3304      	adds	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3304      	adds	r3, #4
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <FDCAN_CopyMessageToRAM+0xf4>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	001a      	movs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d3d6      	bcc.n	8002076 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b008      	add	sp, #32
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	08005f70 	.word	0x08005f70

080020d8 <HAL_FLASHEx_OBGetConfig>:
  *                  configuration information. The fields pOBInit->WRPArea should
  *                  indicate which area is requested for the WRP.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	221f      	movs	r2, #31
 80020e4:	601a      	str	r2, [r3, #0]

  /* Get write protection on the selected area */
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6858      	ldr	r0, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3308      	adds	r3, #8
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	330c      	adds	r3, #12
 80020f4:	001a      	movs	r2, r3
 80020f6:	f000 f851 	bl	800219c <FLASH_OB_GetWRP>

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80020fa:	f000 f89b 	bl	8002234 <FLASH_OB_GetRDP>
 80020fe:	0002      	movs	r2, r0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002104:	f000 f8ae 	bl	8002264 <FLASH_OB_GetUser>
 8002108:	0002      	movs	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
  pOBInit->USERType = OB_USER_ALL;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_FLASHEx_OBGetConfig+0xc0>)
 8002112:	615a      	str	r2, [r3, #20]

#if defined(FLASH_PCROP_SUPPORT)
  /* Get the Proprietary code readout protection */
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	331c      	adds	r3, #28
 8002118:	0018      	movs	r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3320      	adds	r3, #32
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3324      	adds	r3, #36	; 0x24
 8002124:	001a      	movs	r2, r3
 8002126:	f000 f8af 	bl	8002288 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3328      	adds	r3, #40	; 0x28
 800212e:	001a      	movs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	332c      	adds	r3, #44	; 0x2c
 8002134:	0019      	movs	r1, r3
 8002136:	0010      	movs	r0, r2
 8002138:	f000 f93a 	bl	80023b0 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2203      	movs	r2, #3
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	61da      	str	r2, [r3, #28]
#if defined(FLASH_DBANK_SUPPORT)
  FLASH_OB_GetPCROP2A(&(pOBInit->PCROP2AStartAddr), &(pOBInit->PCROP2AEndAddr));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3330      	adds	r3, #48	; 0x30
 800214c:	001a      	movs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3334      	adds	r3, #52	; 0x34
 8002152:	0019      	movs	r1, r3
 8002154:	0010      	movs	r0, r2
 8002156:	f000 f9af 	bl	80024b8 <FLASH_OB_GetPCROP2A>
  FLASH_OB_GetPCROP2B(&(pOBInit->PCROP2BStartAddr), &(pOBInit->PCROP2BEndAddr));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	001a      	movs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	333c      	adds	r3, #60	; 0x3c
 8002164:	0019      	movs	r1, r3
 8002166:	0010      	movs	r0, r2
 8002168:	f000 fa12 	bl	8002590 <FLASH_OB_GetPCROP2B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE2_A | OB_PCROP_ZONE2_B);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	220c      	movs	r2, #12
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	61da      	str	r2, [r3, #28]
#endif /* FLASH_PCROP_SUPPORT */

#if defined(FLASH_SECURABLE_MEMORY_SUPPORT)
#if defined(FLASH_DBANK_SUPPORT)
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize), &(pOBInit->SecSize2));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3340      	adds	r3, #64	; 0x40
 800217c:	0018      	movs	r0, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3344      	adds	r3, #68	; 0x44
 8002182:	0019      	movs	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3348      	adds	r3, #72	; 0x48
 8002188:	001a      	movs	r2, r3
 800218a:	f000 fa6d 	bl	8002668 <FLASH_OB_GetSecMem>
#else
  /* Get the Securable Memory Area protection */
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
#endif /* FLASH_DBANK_SUPPORT */
#endif /* FLASH_SECURABLE_MEMORY_SUPPORT */
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	3f7fff00 	.word	0x3f7fff00

0800219c <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset  Dpecifies the address where to copied the end page of
  *                        the write protected area
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_WRPAREA(WRPArea));

  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_ZONE_A)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10d      	bne.n	80021ca <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	227f      	movs	r2, #127	; 0x7f
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	0c1b      	lsrs	r3, r3, #16
 80021c0:	227f      	movs	r2, #127	; 0x7f
 80021c2:	401a      	ands	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	601a      	str	r2, [r3, #0]
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
  }
}
 80021c8:	e02e      	b.n	8002228 <FLASH_OB_GetWRP+0x8c>
  else if (WRPArea == OB_WRPAREA_ZONE2_A)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d10d      	bne.n	80021ec <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	227f      	movs	r2, #127	; 0x7f
 80021d6:	401a      	ands	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	227f      	movs	r2, #127	; 0x7f
 80021e4:	401a      	ands	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	e01d      	b.n	8002228 <FLASH_OB_GetWRP+0x8c>
  else if (WRPArea == OB_WRPAREA_ZONE2_B)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d10d      	bne.n	800220e <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	227f      	movs	r2, #127	; 0x7f
 80021f8:	401a      	ands	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 80021fe:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 8002200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	227f      	movs	r2, #127	; 0x7f
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	e00c      	b.n	8002228 <FLASH_OB_GetWRP+0x8c>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	227f      	movs	r2, #127	; 0x7f
 8002214:	401a      	ands	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <FLASH_OB_GetWRP+0x94>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	227f      	movs	r2, #127	; 0x7f
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40022000 	.word	0x40022000

08002234 <FLASH_OB_GetRDP>:
  *           @arg @ref OB_RDP_LEVEL_0 No protection
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <FLASH_OB_GetRDP+0x2c>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	22ff      	movs	r2, #255	; 0xff
 8002240:	4013      	ands	r3, r2
 8002242:	607b      	str	r3, [r7, #4]

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2baa      	cmp	r3, #170	; 0xaa
 8002248:	d004      	beq.n	8002254 <FLASH_OB_GetRDP+0x20>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2bcc      	cmp	r3, #204	; 0xcc
 800224e:	d001      	beq.n	8002254 <FLASH_OB_GetRDP+0x20>
  {
    return (OB_RDP_LEVEL_1);
 8002250:	23bb      	movs	r3, #187	; 0xbb
 8002252:	e000      	b.n	8002256 <FLASH_OB_GetRDP+0x22>
  }
  else
  {
    return rdplvl;
 8002254:	687b      	ldr	r3, [r7, #4]
  }
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b002      	add	sp, #8
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	40022000 	.word	0x40022000

08002264 <FLASH_OB_GetUser>:
  *           @arg @ref FLASH_OB_USER_nBOOT0
  *           @arg @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <FLASH_OB_GetUser+0x1c>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <FLASH_OB_GetUser+0x20>)
 8002270:	4013      	ands	r3, r2
 8002272:	607b      	str	r3, [r7, #4]
  return user;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	40022000 	.word	0x40022000
 8002284:	3f7fff00 	.word	0x3f7fff00

08002288 <FLASH_OB_GetPCROP1A>:
  * @param  PCROP1AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t pcrop;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 8002294:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <FLASH_OB_GetPCROP1A+0x108>)
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	035b      	lsls	r3, r3, #13
 800229c:	401a      	ands	r2, r3
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	035b      	lsls	r3, r3, #13
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d03f      	beq.n	8002326 <FLASH_OB_GetPCROP1A+0x9e>
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <FLASH_OB_GetPCROP1A+0x10c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	049b      	lsls	r3, r3, #18
 80022ae:	4013      	ands	r3, r2
 80022b0:	d039      	beq.n	8002326 <FLASH_OB_GetPCROP1A+0x9e>
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <FLASH_OB_GetPCROP1A+0x10c>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	049b      	lsls	r3, r3, #18
 80022ba:	401a      	ands	r2, r3
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	045b      	lsls	r3, r3, #17
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d105      	bne.n	80022d0 <FLASH_OB_GetPCROP1A+0x48>
 80022c4:	4b34      	ldr	r3, [pc, #208]	; (8002398 <FLASH_OB_GetPCROP1A+0x110>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	039b      	lsls	r3, r3, #14
 80022cc:	4013      	ands	r3, r2
 80022ce:	d02a      	beq.n	8002326 <FLASH_OB_GetPCROP1A+0x9e>
  {
    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <FLASH_OB_GetPCROP1A+0x10c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	23c0      	movs	r3, #192	; 0xc0
 80022d6:	049b      	lsls	r3, r3, #18
 80022d8:	4013      	ands	r3, r2
 80022da:	d00e      	beq.n	80022fa <FLASH_OB_GetPCROP1A+0x72>
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <FLASH_OB_GetPCROP1A+0x10c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	049b      	lsls	r3, r3, #18
 80022e4:	401a      	ands	r2, r3
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	045b      	lsls	r3, r3, #17
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d10f      	bne.n	800230e <FLASH_OB_GetPCROP1A+0x86>
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <FLASH_OB_GetPCROP1A+0x110>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	039b      	lsls	r3, r3, #14
 80022f6:	4013      	ands	r3, r2
 80022f8:	d109      	bne.n	800230e <FLASH_OB_GetPCROP1A+0x86>
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <FLASH_OB_GetPCROP1A+0x114>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <FLASH_OB_GetPCROP1A+0x118>)
 8002302:	4013      	ands	r3, r2
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	0512      	lsls	r2, r2, #20
 8002308:	4694      	mov	ip, r2
 800230a:	4463      	add	r3, ip
 800230c:	e009      	b.n	8002322 <FLASH_OB_GetPCROP1A+0x9a>
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <FLASH_OB_GetPCROP1A+0x114>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	029b      	lsls	r3, r3, #10
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <FLASH_OB_GetPCROP1A+0x11c>)
 8002318:	4013      	ands	r3, r2
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0512      	lsls	r2, r2, #20
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e002      	b.n	800232c <FLASH_OB_GetPCROP1A+0xa4>
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	051b      	lsls	r3, r3, #20
 800232a:	617b      	str	r3, [r7, #20]
  }

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <FLASH_OB_GetPCROP1A+0x108>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	05db      	lsls	r3, r3, #23
 8002332:	0ddb      	lsrs	r3, r3, #23
 8002334:	613b      	str	r3, [r7, #16]
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	025a      	lsls	r2, r3, #9
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	601a      	str	r2, [r3, #0]
  *PCROP1AStartAddr += ropbase;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	18d2      	adds	r2, r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	601a      	str	r2, [r3, #0]

  pcrop = FLASH->PCROP1AER;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <FLASH_OB_GetPCROP1A+0x108>)
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	613b      	str	r3, [r7, #16]
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <FLASH_OB_GetPCROP1A+0x120>)
 8002356:	401a      	ands	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	601a      	str	r2, [r3, #0]
  *PCROP1AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	18d3      	adds	r3, r2, r3
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <FLASH_OB_GetPCROP1A+0x124>)
 8002366:	189a      	adds	r2, r3, r2
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	601a      	str	r2, [r3, #0]

  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	085a      	lsrs	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	0fdb      	lsrs	r3, r3, #31
 8002380:	07db      	lsls	r3, r3, #31
 8002382:	431a      	orrs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b006      	add	sp, #24
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40022000 	.word	0x40022000
 8002394:	1fff7500 	.word	0x1fff7500
 8002398:	40022020 	.word	0x40022020
 800239c:	1fff75e0 	.word	0x1fff75e0
 80023a0:	000ffc00 	.word	0x000ffc00
 80023a4:	0007fe00 	.word	0x0007fe00
 80023a8:	0003fe00 	.word	0x0003fe00
 80023ac:	000001ff 	.word	0x000001ff

080023b0 <FLASH_OB_GetPCROP1B>:
  * @param  PCROP1BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 1B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if banks are swapped (valid if only one bank) */
  if (((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != FLASH_OPTR_nSWAP_BANK) && (FLASH_BANK_NB == 2U))
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <FLASH_OB_GetPCROP1B+0xec>)
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	035b      	lsls	r3, r3, #13
 80023c2:	401a      	ands	r2, r3
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	035b      	lsls	r3, r3, #13
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d03f      	beq.n	800244c <FLASH_OB_GetPCROP1B+0x9c>
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <FLASH_OB_GetPCROP1B+0xf0>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	23c0      	movs	r3, #192	; 0xc0
 80023d2:	049b      	lsls	r3, r3, #18
 80023d4:	4013      	ands	r3, r2
 80023d6:	d039      	beq.n	800244c <FLASH_OB_GetPCROP1B+0x9c>
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <FLASH_OB_GetPCROP1B+0xf0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	23c0      	movs	r3, #192	; 0xc0
 80023de:	049b      	lsls	r3, r3, #18
 80023e0:	401a      	ands	r2, r3
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	045b      	lsls	r3, r3, #17
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d105      	bne.n	80023f6 <FLASH_OB_GetPCROP1B+0x46>
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <FLASH_OB_GetPCROP1B+0xf4>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	039b      	lsls	r3, r3, #14
 80023f2:	4013      	ands	r3, r2
 80023f4:	d02a      	beq.n	800244c <FLASH_OB_GetPCROP1B+0x9c>
  {
    /* Bank swap, bank 1 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <FLASH_OB_GetPCROP1B+0xf0>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	23c0      	movs	r3, #192	; 0xc0
 80023fc:	049b      	lsls	r3, r3, #18
 80023fe:	4013      	ands	r3, r2
 8002400:	d00e      	beq.n	8002420 <FLASH_OB_GetPCROP1B+0x70>
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <FLASH_OB_GetPCROP1B+0xf0>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	23c0      	movs	r3, #192	; 0xc0
 8002408:	049b      	lsls	r3, r3, #18
 800240a:	401a      	ands	r2, r3
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	045b      	lsls	r3, r3, #17
 8002410:	429a      	cmp	r2, r3
 8002412:	d10f      	bne.n	8002434 <FLASH_OB_GetPCROP1B+0x84>
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <FLASH_OB_GetPCROP1B+0xf4>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	039b      	lsls	r3, r3, #14
 800241c:	4013      	ands	r3, r2
 800241e:	d109      	bne.n	8002434 <FLASH_OB_GetPCROP1B+0x84>
 8002420:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <FLASH_OB_GetPCROP1B+0xf8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	029b      	lsls	r3, r3, #10
 8002426:	4a21      	ldr	r2, [pc, #132]	; (80024ac <FLASH_OB_GetPCROP1B+0xfc>)
 8002428:	4013      	ands	r3, r2
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0512      	lsls	r2, r2, #20
 800242e:	4694      	mov	ip, r2
 8002430:	4463      	add	r3, ip
 8002432:	e009      	b.n	8002448 <FLASH_OB_GetPCROP1B+0x98>
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <FLASH_OB_GetPCROP1B+0xf8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <FLASH_OB_GetPCROP1B+0x100>)
 800243e:	4013      	ands	r3, r2
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	0512      	lsls	r2, r2, #20
 8002444:	4694      	mov	ip, r2
 8002446:	4463      	add	r3, ip
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e002      	b.n	8002452 <FLASH_OB_GetPCROP1B+0xa2>
  }
  else
#endif /* FLASH_DBANK_SUPPORT */
  {
    /* No Bank swap, bank 1 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	051b      	lsls	r3, r3, #20
 8002450:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <FLASH_OB_GetPCROP1B+0xec>)
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	05db      	lsls	r3, r3, #23
 8002458:	0ddb      	lsrs	r3, r3, #23
 800245a:	60bb      	str	r3, [r7, #8]
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	025a      	lsls	r2, r3, #9
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	601a      	str	r2, [r3, #0]
  *PCROP1BStartAddr += ropbase;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	18d2      	adds	r2, r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <FLASH_OB_GetPCROP1B+0xec>)
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	0ddb      	lsrs	r3, r3, #23
 8002478:	60bb      	str	r3, [r7, #8]
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	025a      	lsls	r2, r3, #9
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	601a      	str	r2, [r3, #0]
  *PCROP1BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <FLASH_OB_GetPCROP1B+0x104>)
 800248c:	189a      	adds	r2, r3, r2
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	40022000 	.word	0x40022000
 80024a0:	1fff7500 	.word	0x1fff7500
 80024a4:	40022020 	.word	0x40022020
 80024a8:	1fff75e0 	.word	0x1fff75e0
 80024ac:	000ffc00 	.word	0x000ffc00
 80024b0:	0007fe00 	.word	0x0007fe00
 80024b4:	000001ff 	.word	0x000001ff

080024b8 <FLASH_OB_GetPCROP2A>:
  * @param  PCROP2AEndAddr [out]  Specifies the address where to copied the end address of
  *         the 2A Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP2A(uint32_t *PCROP2AStartAddr, uint32_t *PCROP2AEndAddr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 80024c2:	4b2c      	ldr	r3, [pc, #176]	; (8002574 <FLASH_OB_GetPCROP2A+0xbc>)
 80024c4:	6a1a      	ldr	r2, [r3, #32]
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	035b      	lsls	r3, r3, #13
 80024ca:	4013      	ands	r3, r2
 80024cc:	d02a      	beq.n	8002524 <FLASH_OB_GetPCROP2A+0x6c>
  {
    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 80024ce:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <FLASH_OB_GetPCROP2A+0xc0>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	23c0      	movs	r3, #192	; 0xc0
 80024d4:	049b      	lsls	r3, r3, #18
 80024d6:	4013      	ands	r3, r2
 80024d8:	d00e      	beq.n	80024f8 <FLASH_OB_GetPCROP2A+0x40>
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <FLASH_OB_GetPCROP2A+0xc0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	23c0      	movs	r3, #192	; 0xc0
 80024e0:	049b      	lsls	r3, r3, #18
 80024e2:	401a      	ands	r2, r3
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	045b      	lsls	r3, r3, #17
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10f      	bne.n	800250c <FLASH_OB_GetPCROP2A+0x54>
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <FLASH_OB_GetPCROP2A+0xc4>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	039b      	lsls	r3, r3, #14
 80024f4:	4013      	ands	r3, r2
 80024f6:	d109      	bne.n	800250c <FLASH_OB_GetPCROP2A+0x54>
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <FLASH_OB_GetPCROP2A+0xc8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4a21      	ldr	r2, [pc, #132]	; (8002584 <FLASH_OB_GetPCROP2A+0xcc>)
 8002500:	4013      	ands	r3, r2
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	0512      	lsls	r2, r2, #20
 8002506:	4694      	mov	ip, r2
 8002508:	4463      	add	r3, ip
 800250a:	e009      	b.n	8002520 <FLASH_OB_GetPCROP2A+0x68>
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <FLASH_OB_GetPCROP2A+0xc8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	029b      	lsls	r3, r3, #10
 8002512:	085b      	lsrs	r3, r3, #1
 8002514:	4a1c      	ldr	r2, [pc, #112]	; (8002588 <FLASH_OB_GetPCROP2A+0xd0>)
 8002516:	4013      	ands	r3, r2
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0512      	lsls	r2, r2, #20
 800251c:	4694      	mov	ip, r2
 800251e:	4463      	add	r3, ip
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e002      	b.n	800252a <FLASH_OB_GetPCROP2A+0x72>
  }
  else
  {
    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	051b      	lsls	r3, r3, #20
 8002528:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP2ASR & FLASH_PCROP2ASR_PCROP2A_STRT);
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <FLASH_OB_GetPCROP2A+0xbc>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	05db      	lsls	r3, r3, #23
 8002530:	0ddb      	lsrs	r3, r3, #23
 8002532:	60bb      	str	r3, [r7, #8]
  *PCROP2AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	025a      	lsls	r2, r3, #9
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	601a      	str	r2, [r3, #0]
  *PCROP2AStartAddr += ropbase;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	18d2      	adds	r2, r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP2AER & FLASH_PCROP2AER_PCROP2A_END);
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <FLASH_OB_GetPCROP2A+0xbc>)
 800254a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254c:	05db      	lsls	r3, r3, #23
 800254e:	0ddb      	lsrs	r3, r3, #23
 8002550:	60bb      	str	r3, [r7, #8]
  *PCROP2AEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	025a      	lsls	r2, r3, #9
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	601a      	str	r2, [r3, #0]
  *PCROP2AEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	18d3      	adds	r3, r2, r3
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <FLASH_OB_GetPCROP2A+0xd4>)
 8002564:	189a      	adds	r2, r3, r2
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b004      	add	sp, #16
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40022000 	.word	0x40022000
 8002578:	1fff7500 	.word	0x1fff7500
 800257c:	40022020 	.word	0x40022020
 8002580:	1fff75e0 	.word	0x1fff75e0
 8002584:	000ffc00 	.word	0x000ffc00
 8002588:	0007fe00 	.word	0x0007fe00
 800258c:	000001ff 	.word	0x000001ff

08002590 <FLASH_OB_GetPCROP2B>:
  * @param  PCROP2BEndAddr [out]  Specifies the address where to copied the end address of
  *         the 2B Proprietary code readout protection
  * @retval None
  */
static void FLASH_OB_GetPCROP2B(uint32_t *PCROP2BStartAddr, uint32_t *PCROP2BEndAddr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t pcrop;
  uint32_t ropbase;

  /* Check if banks are swapped */
  if ((FLASH->OPTR & FLASH_OPTR_nSWAP_BANK) != 0x00u)
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <FLASH_OB_GetPCROP2B+0xbc>)
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	035b      	lsls	r3, r3, #13
 80025a2:	4013      	ands	r3, r2
 80025a4:	d02a      	beq.n	80025fc <FLASH_OB_GetPCROP2B+0x6c>
  {
    /* No Bank swap, bank 2 read only protection is on second half of Flash */
    ropbase = (FLASH_BASE + FLASH_BANK_SIZE);
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <FLASH_OB_GetPCROP2B+0xc0>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	049b      	lsls	r3, r3, #18
 80025ae:	4013      	ands	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <FLASH_OB_GetPCROP2B+0x40>
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <FLASH_OB_GetPCROP2B+0xc0>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	23c0      	movs	r3, #192	; 0xc0
 80025b8:	049b      	lsls	r3, r3, #18
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	045b      	lsls	r3, r3, #17
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d10f      	bne.n	80025e4 <FLASH_OB_GetPCROP2B+0x54>
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <FLASH_OB_GetPCROP2B+0xc4>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	039b      	lsls	r3, r3, #14
 80025cc:	4013      	ands	r3, r2
 80025ce:	d109      	bne.n	80025e4 <FLASH_OB_GetPCROP2B+0x54>
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <FLASH_OB_GetPCROP2B+0xc8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <FLASH_OB_GetPCROP2B+0xcc>)
 80025d8:	4013      	ands	r3, r2
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	0512      	lsls	r2, r2, #20
 80025de:	4694      	mov	ip, r2
 80025e0:	4463      	add	r3, ip
 80025e2:	e009      	b.n	80025f8 <FLASH_OB_GetPCROP2B+0x68>
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <FLASH_OB_GetPCROP2B+0xc8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	029b      	lsls	r3, r3, #10
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <FLASH_OB_GetPCROP2B+0xd0>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0512      	lsls	r2, r2, #20
 80025f4:	4694      	mov	ip, r2
 80025f6:	4463      	add	r3, ip
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e002      	b.n	8002602 <FLASH_OB_GetPCROP2B+0x72>
  }
  else
  {
    /* Bank swap, bank 2 read only protection is on first half of Flash */
    ropbase = FLASH_BASE;
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	60fb      	str	r3, [r7, #12]
  }

  pcrop = (FLASH->PCROP2BSR & FLASH_PCROP2BSR_PCROP2B_STRT);
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <FLASH_OB_GetPCROP2B+0xbc>)
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	05db      	lsls	r3, r3, #23
 8002608:	0ddb      	lsrs	r3, r3, #23
 800260a:	60bb      	str	r3, [r7, #8]
  *PCROP2BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	025a      	lsls	r2, r3, #9
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]
  *PCROP2BStartAddr += ropbase;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	18d2      	adds	r2, r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	601a      	str	r2, [r3, #0]

  pcrop = (FLASH->PCROP2BER & FLASH_PCROP2BER_PCROP2B_END);
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <FLASH_OB_GetPCROP2B+0xbc>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	05db      	lsls	r3, r3, #23
 8002626:	0ddb      	lsrs	r3, r3, #23
 8002628:	60bb      	str	r3, [r7, #8]
  *PCROP2BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	025a      	lsls	r2, r3, #9
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	601a      	str	r2, [r3, #0]
  *PCROP2BEndAddr += (ropbase + FLASH_PCROP_GRANULARITY - 1U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	18d3      	adds	r3, r2, r3
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <FLASH_OB_GetPCROP2B+0xd4>)
 800263c:	189a      	adds	r2, r3, r2
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b004      	add	sp, #16
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	40022000 	.word	0x40022000
 8002650:	1fff7500 	.word	0x1fff7500
 8002654:	40022020 	.word	0x40022020
 8002658:	1fff75e0 	.word	0x1fff75e0
 800265c:	000ffc00 	.word	0x000ffc00
 8002660:	0007fe00 	.word	0x0007fe00
 8002664:	000001ff 	.word	0x000001ff

08002668 <FLASH_OB_GetSecMem>:
  * @param  SecSize2 specifies number of pages to protect as secure memory area, starting from
  *         beginning of Bank2 (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize, uint32_t *SecSize2)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t secmem = FLASH->SECR;
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <FLASH_OB_GetSecMem+0x40>)
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	58d3      	ldr	r3, [r2, r3]
 800267a:	617b      	str	r3, [r7, #20]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	025b      	lsls	r3, r3, #9
 8002682:	401a      	ands	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	401a      	ands	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	601a      	str	r2, [r3, #0]
  *SecSize2 = (secmem & FLASH_SECR_SEC_SIZE2) >> FLASH_SECR_SEC_SIZE2_Pos;
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	0d1b      	lsrs	r3, r3, #20
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	401a      	ands	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	601a      	str	r2, [r3, #0]
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b006      	add	sp, #24
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ba:	e14d      	b.n	8002958 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4091      	lsls	r1, r2
 80026c6:	000a      	movs	r2, r1
 80026c8:	4013      	ands	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <HAL_GPIO_Init+0x28>
 80026d2:	e13e      	b.n	8002952 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2203      	movs	r2, #3
 80026da:	4013      	ands	r3, r2
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d005      	beq.n	80026ec <HAL_GPIO_Init+0x40>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	409a      	lsls	r2, r3
 80026fa:	0013      	movs	r3, r2
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	409a      	lsls	r2, r3
 800270e:	0013      	movs	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	43da      	mvns	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	2201      	movs	r2, #1
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	4013      	ands	r3, r2
 8002756:	2b03      	cmp	r3, #3
 8002758:	d017      	beq.n	800278a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	409a      	lsls	r2, r3
 8002768:	0013      	movs	r3, r2
 800276a:	43da      	mvns	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	409a      	lsls	r2, r3
 800277c:	0013      	movs	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	4013      	ands	r3, r2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d123      	bne.n	80027de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	58d3      	ldr	r3, [r2, r3]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2207      	movs	r2, #7
 80027a8:	4013      	ands	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	409a      	lsls	r2, r3
 80027b0:	0013      	movs	r3, r2
 80027b2:	43da      	mvns	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2107      	movs	r1, #7
 80027c2:	400b      	ands	r3, r1
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	409a      	lsls	r2, r3
 80027c8:	0013      	movs	r3, r2
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	6939      	ldr	r1, [r7, #16]
 80027dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	409a      	lsls	r2, r3
 80027ec:	0013      	movs	r3, r2
 80027ee:	43da      	mvns	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	401a      	ands	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	23c0      	movs	r3, #192	; 0xc0
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d100      	bne.n	8002820 <HAL_GPIO_Init+0x174>
 800281e:	e098      	b.n	8002952 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002820:	4a53      	ldr	r2, [pc, #332]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3318      	adds	r3, #24
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	589b      	ldr	r3, [r3, r2]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2203      	movs	r2, #3
 8002832:	4013      	ands	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	220f      	movs	r2, #15
 8002838:	409a      	lsls	r2, r3
 800283a:	0013      	movs	r3, r2
 800283c:	43da      	mvns	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	23a0      	movs	r3, #160	; 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	429a      	cmp	r2, r3
 800284c:	d019      	beq.n	8002882 <HAL_GPIO_Init+0x1d6>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a48      	ldr	r2, [pc, #288]	; (8002974 <HAL_GPIO_Init+0x2c8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0x1d2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_GPIO_Init+0x2cc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00d      	beq.n	800287a <HAL_GPIO_Init+0x1ce>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a46      	ldr	r2, [pc, #280]	; (800297c <HAL_GPIO_Init+0x2d0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x1ca>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a45      	ldr	r2, [pc, #276]	; (8002980 <HAL_GPIO_Init+0x2d4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_GPIO_Init+0x1c6>
 800286e:	2304      	movs	r3, #4
 8002870:	e008      	b.n	8002884 <HAL_GPIO_Init+0x1d8>
 8002872:	2305      	movs	r3, #5
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x1d8>
 8002876:	2303      	movs	r3, #3
 8002878:	e004      	b.n	8002884 <HAL_GPIO_Init+0x1d8>
 800287a:	2302      	movs	r3, #2
 800287c:	e002      	b.n	8002884 <HAL_GPIO_Init+0x1d8>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x1d8>
 8002882:	2300      	movs	r3, #0
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	2103      	movs	r1, #3
 8002888:	400a      	ands	r2, r1
 800288a:	00d2      	lsls	r2, r2, #3
 800288c:	4093      	lsls	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002894:	4936      	ldr	r1, [pc, #216]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3318      	adds	r3, #24
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43da      	mvns	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	035b      	lsls	r3, r3, #13
 80028ba:	4013      	ands	r3, r2
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43da      	mvns	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	039b      	lsls	r3, r3, #14
 80028e4:	4013      	ands	r3, r2
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028f0:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 80028f8:	2384      	movs	r3, #132	; 0x84
 80028fa:	58d3      	ldr	r3, [r2, r3]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43da      	mvns	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	4013      	ands	r3, r2
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800291c:	4914      	ldr	r1, [pc, #80]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 800291e:	2284      	movs	r2, #132	; 0x84
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002924:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	58d3      	ldr	r3, [r2, r3]
 800292a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43da      	mvns	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	025b      	lsls	r3, r3, #9
 800293e:	4013      	ands	r3, r2
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800294a:	4909      	ldr	r1, [pc, #36]	; (8002970 <HAL_GPIO_Init+0x2c4>)
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	40da      	lsrs	r2, r3
 8002960:	1e13      	subs	r3, r2, #0
 8002962:	d000      	beq.n	8002966 <HAL_GPIO_Init+0x2ba>
 8002964:	e6aa      	b.n	80026bc <HAL_GPIO_Init+0x10>
  }
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021800 	.word	0x40021800
 8002974:	50000400 	.word	0x50000400
 8002978:	50000800 	.word	0x50000800
 800297c:	50000c00 	.word	0x50000c00
 8002980:	50001000 	.word	0x50001000

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	0008      	movs	r0, r1
 800298e:	0011      	movs	r1, r2
 8002990:	1cbb      	adds	r3, r7, #2
 8002992:	1c02      	adds	r2, r0, #0
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	1c7b      	adds	r3, r7, #1
 8002998:	1c0a      	adds	r2, r1, #0
 800299a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800299c:	1c7b      	adds	r3, r7, #1
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029a4:	1cbb      	adds	r3, r7, #2
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ac:	e003      	b.n	80029b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ae:	1cbb      	adds	r3, r7, #2
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b002      	add	sp, #8
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d11f      	bne.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	0013      	movs	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4912      	ldr	r1, [pc, #72]	; (8002a3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7fd fb86 	bl	8000104 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	3301      	adds	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029fe:	e008      	b.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e001      	b.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e009      	b.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d0ed      	beq.n	8002a00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40007000 	.word	0x40007000
 8002a34:	fffff9ff 	.word	0xfffff9ff
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	000f4240 	.word	0x000f4240

08002a40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	23e0      	movs	r3, #224	; 0xe0
 8002a4a:	01db      	lsls	r3, r3, #7
 8002a4c:	4013      	ands	r3, r2
}
 8002a4e:	0018      	movs	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f000 fb50 	bl	800310c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d100      	bne.n	8002a78 <HAL_RCC_OscConfig+0x20>
 8002a76:	e07c      	b.n	8002b72 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a78:	4bc3      	ldr	r3, [pc, #780]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2238      	movs	r2, #56	; 0x38
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a82:	4bc1      	ldr	r3, [pc, #772]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2203      	movs	r2, #3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b10      	cmp	r3, #16
 8002a90:	d102      	bne.n	8002a98 <HAL_RCC_OscConfig+0x40>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d002      	beq.n	8002a9e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9e:	4bba      	ldr	r3, [pc, #744]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	029b      	lsls	r3, r3, #10
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d062      	beq.n	8002b70 <HAL_RCC_OscConfig+0x118>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d15e      	bne.n	8002b70 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e32a      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	025b      	lsls	r3, r3, #9
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x7a>
 8002ac2:	4bb1      	ldr	r3, [pc, #708]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4bb0      	ldr	r3, [pc, #704]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0249      	lsls	r1, r1, #9
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e020      	b.n	8002b14 <HAL_RCC_OscConfig+0xbc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	23a0      	movs	r3, #160	; 0xa0
 8002ad8:	02db      	lsls	r3, r3, #11
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d10e      	bne.n	8002afc <HAL_RCC_OscConfig+0xa4>
 8002ade:	4baa      	ldr	r3, [pc, #680]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4ba9      	ldr	r3, [pc, #676]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	02c9      	lsls	r1, r1, #11
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	4ba6      	ldr	r3, [pc, #664]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4ba5      	ldr	r3, [pc, #660]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	0249      	lsls	r1, r1, #9
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xbc>
 8002afc:	4ba2      	ldr	r3, [pc, #648]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4ba1      	ldr	r3, [pc, #644]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b02:	49a2      	ldr	r1, [pc, #648]	; (8002d8c <HAL_RCC_OscConfig+0x334>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b9f      	ldr	r3, [pc, #636]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b9e      	ldr	r3, [pc, #632]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b0e:	49a0      	ldr	r1, [pc, #640]	; (8002d90 <HAL_RCC_OscConfig+0x338>)
 8002b10:	400a      	ands	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d014      	beq.n	8002b46 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fa02 	bl	8000f24 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b26:	f7fe f9fd 	bl	8000f24 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e2e9      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b38:	4b93      	ldr	r3, [pc, #588]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0xce>
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe f9ed 	bl	8000f24 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe f9e8 	bl	8000f24 <HAL_GetTick>
 8002b54:	0002      	movs	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e2d4      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b62:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	029b      	lsls	r3, r3, #10
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0xf8>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <HAL_RCC_OscConfig+0x126>
 8002b7c:	e099      	b.n	8002cb2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7e:	4b82      	ldr	r3, [pc, #520]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2238      	movs	r2, #56	; 0x38
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b88:	4b7f      	ldr	r3, [pc, #508]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d102      	bne.n	8002b9e <HAL_RCC_OscConfig+0x146>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d135      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba4:	4b78      	ldr	r3, [pc, #480]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4013      	ands	r3, r2
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x164>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e2a7      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b72      	ldr	r3, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a74      	ldr	r2, [pc, #464]	; (8002d94 <HAL_RCC_OscConfig+0x33c>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	021a      	lsls	r2, r3, #8
 8002bcc:	4b6e      	ldr	r3, [pc, #440]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bd8:	4b6b      	ldr	r3, [pc, #428]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6e      	ldr	r2, [pc, #440]	; (8002d98 <HAL_RCC_OscConfig+0x340>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0adb      	lsrs	r3, r3, #11
 8002bf2:	2207      	movs	r2, #7
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	4a69      	ldr	r2, [pc, #420]	; (8002d9c <HAL_RCC_OscConfig+0x344>)
 8002bf8:	40da      	lsrs	r2, r3
 8002bfa:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <HAL_RCC_OscConfig+0x348>)
 8002bfc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bfe:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x34c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7fe f932 	bl	8000e6c <HAL_InitTick>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d051      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e27d      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d030      	beq.n	8002c7a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c18:	4b5b      	ldr	r3, [pc, #364]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x340>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	4b58      	ldr	r3, [pc, #352]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002c2c:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b55      	ldr	r3, [pc, #340]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0049      	lsls	r1, r1, #1
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f973 	bl	8000f24 <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe f96e 	bl	8000f24 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e25a      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c56:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b49      	ldr	r3, [pc, #292]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <HAL_RCC_OscConfig+0x33c>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002c80:	4949      	ldr	r1, [pc, #292]	; (8002da8 <HAL_RCC_OscConfig+0x350>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe f94d 	bl	8000f24 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe f948 	bl	8000f24 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e234      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x238>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2208      	movs	r2, #8
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d047      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cbc:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2238      	movs	r2, #56	; 0x38
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b18      	cmp	r3, #24
 8002cc6:	d10a      	bne.n	8002cde <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d03c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2f4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d138      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e216      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cea:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f917 	bl	8000f24 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f912 	bl	8000f24 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1fe      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d0f1      	beq.n	8002cfc <HAL_RCC_OscConfig+0x2a4>
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	438a      	bics	r2, r1
 8002d24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe f8fd 	bl	8000f24 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe f8f8 	bl	8000f24 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1e4      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d1f1      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2204      	movs	r2, #4
 8002d52:	4013      	ands	r3, r2
 8002d54:	d100      	bne.n	8002d58 <HAL_RCC_OscConfig+0x300>
 8002d56:	e0c7      	b.n	8002ee8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	231f      	movs	r3, #31
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2238      	movs	r2, #56	; 0x38
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d11f      	bne.n	8002dac <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_RCC_OscConfig+0x330>)
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d100      	bne.n	8002d78 <HAL_RCC_OscConfig+0x320>
 8002d76:	e0b7      	b.n	8002ee8 <HAL_RCC_OscConfig+0x490>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d000      	beq.n	8002d82 <HAL_RCC_OscConfig+0x32a>
 8002d80:	e0b2      	b.n	8002ee8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1c2      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	fffeffff 	.word	0xfffeffff
 8002d90:	fffbffff 	.word	0xfffbffff
 8002d94:	ffff80ff 	.word	0xffff80ff
 8002d98:	ffffc7ff 	.word	0xffffc7ff
 8002d9c:	00f42400 	.word	0x00f42400
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000004 	.word	0x20000004
 8002da8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dac:	4bb5      	ldr	r3, [pc, #724]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	4013      	ands	r3, r2
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_OscConfig+0x364>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x366>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d011      	beq.n	8002de6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4bb0      	ldr	r3, [pc, #704]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc6:	4baf      	ldr	r3, [pc, #700]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	0549      	lsls	r1, r1, #21
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dd0:	4bac      	ldr	r3, [pc, #688]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	055b      	lsls	r3, r3, #21
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002dde:	231f      	movs	r3, #31
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4ba8      	ldr	r3, [pc, #672]	; (8003088 <HAL_RCC_OscConfig+0x630>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	d11a      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df2:	4ba5      	ldr	r3, [pc, #660]	; (8003088 <HAL_RCC_OscConfig+0x630>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4ba4      	ldr	r3, [pc, #656]	; (8003088 <HAL_RCC_OscConfig+0x630>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0049      	lsls	r1, r1, #1
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002e00:	f7fe f890 	bl	8000f24 <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7fe f88b 	bl	8000f24 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e177      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1c:	4b9a      	ldr	r3, [pc, #616]	; (8003088 <HAL_RCC_OscConfig+0x630>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3e6>
 8002e30:	4b94      	ldr	r3, [pc, #592]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e34:	4b93      	ldr	r3, [pc, #588]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e3c:	e01c      	b.n	8002e78 <HAL_RCC_OscConfig+0x420>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b05      	cmp	r3, #5
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x408>
 8002e46:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e52:	4b8c      	ldr	r3, [pc, #560]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e58:	2101      	movs	r1, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0x420>
 8002e60:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e64:	4b87      	ldr	r3, [pc, #540]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e6c:	4b85      	ldr	r3, [pc, #532]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e70:	4b84      	ldr	r3, [pc, #528]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002e72:	2104      	movs	r1, #4
 8002e74:	438a      	bics	r2, r1
 8002e76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d014      	beq.n	8002eaa <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe f850 	bl	8000f24 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f84b 	bl	8000f24 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a7d      	ldr	r2, [pc, #500]	; (800308c <HAL_RCC_OscConfig+0x634>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e136      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e9e:	4b79      	ldr	r3, [pc, #484]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x432>
 8002ea8:	e013      	b.n	8002ed2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe f83b 	bl	8000f24 <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb2:	e009      	b.n	8002ec8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe f836 	bl	8000f24 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	4a73      	ldr	r2, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x634>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e121      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec8:	4b6e      	ldr	r3, [pc, #440]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	2202      	movs	r2, #2
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002ed2:	231f      	movs	r3, #31
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002edc:	4b69      	ldr	r3, [pc, #420]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002ee2:	496b      	ldr	r1, [pc, #428]	; (8003090 <HAL_RCC_OscConfig+0x638>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2220      	movs	r2, #32
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d039      	beq.n	8002f66 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	03c9      	lsls	r1, r1, #15
 8002f04:	430a      	orrs	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe f80c 	bl	8000f24 <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f12:	f7fe f807 	bl	8000f24 <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0f3      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002f24:	4b57      	ldr	r3, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4ba>
 8002f30:	e019      	b.n	8002f66 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f32:	4b54      	ldr	r3, [pc, #336]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f38:	4956      	ldr	r1, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x63c>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fd fff1 	bl	8000f24 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f48:	f7fd ffec 	bl	8000f24 <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e0d8      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d100      	bne.n	8002f70 <HAL_RCC_OscConfig+0x518>
 8002f6e:	e0cc      	b.n	800310a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f70:	4b44      	ldr	r3, [pc, #272]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2238      	movs	r2, #56	; 0x38
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d100      	bne.n	8002f7e <HAL_RCC_OscConfig+0x526>
 8002f7c:	e07b      	b.n	8003076 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d156      	bne.n	8003034 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002f8c:	4942      	ldr	r1, [pc, #264]	; (8003098 <HAL_RCC_OscConfig+0x640>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fd ffc7 	bl	8000f24 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7fd ffc2 	bl	8000f24 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0ae      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	049b      	lsls	r3, r3, #18
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a37      	ldr	r2, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x644>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002fea:	430a      	orrs	r2, r1
 8002fec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	0449      	lsls	r1, r1, #17
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	0549      	lsls	r1, r1, #21
 8003006:	430a      	orrs	r2, r1
 8003008:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fd ff8b 	bl	8000f24 <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fd ff86 	bl	8000f24 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e072      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	049b      	lsls	r3, r3, #18
 800302e:	4013      	ands	r3, r2
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x5bc>
 8003032:	e06a      	b.n	800310a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 800303a:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCC_OscConfig+0x640>)
 800303c:	400a      	ands	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fd ff70 	bl	8000f24 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7fd ff6b 	bl	8000f24 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e057      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	049b      	lsls	r3, r3, #18
 8003064:	4013      	ands	r3, r2
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_OscConfig+0x62c>)
 800306e:	490c      	ldr	r1, [pc, #48]	; (80030a0 <HAL_RCC_OscConfig+0x648>)
 8003070:	400a      	ands	r2, r1
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	e049      	b.n	800310a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e044      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	40021000 	.word	0x40021000
 8003088:	40007000 	.word	0x40007000
 800308c:	00001388 	.word	0x00001388
 8003090:	efffffff 	.word	0xefffffff
 8003094:	ffbfffff 	.word	0xffbfffff
 8003098:	feffffff 	.word	0xfeffffff
 800309c:	11c1808c 	.word	0x11c1808c
 80030a0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x6bc>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2203      	movs	r2, #3
 80030ae:	401a      	ands	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d126      	bne.n	8003106 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2270      	movs	r2, #112	; 0x70
 80030bc:	401a      	ands	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d11f      	bne.n	8003106 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	23fe      	movs	r3, #254	; 0xfe
 80030ca:	01db      	lsls	r3, r3, #7
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d116      	bne.n	8003106 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	23f8      	movs	r3, #248	; 0xf8
 80030dc:	039b      	lsls	r3, r3, #14
 80030de:	401a      	ands	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d10e      	bne.n	8003106 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	23e0      	movs	r3, #224	; 0xe0
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	401a      	ands	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	0f5b      	lsrs	r3, r3, #29
 80030fc:	075a      	lsls	r2, r3, #29
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	b008      	add	sp, #32
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0e9      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b76      	ldr	r3, [pc, #472]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2207      	movs	r2, #7
 8003132:	4013      	ands	r3, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d91e      	bls.n	8003178 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b73      	ldr	r3, [pc, #460]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2207      	movs	r2, #7
 8003140:	4393      	bics	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	4b70      	ldr	r3, [pc, #448]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800314c:	f7fd feea 	bl	8000f24 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003154:	e009      	b.n	800316a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003156:	f7fd fee5 	bl	8000f24 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	4a6a      	ldr	r2, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x1f4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0ca      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800316a:	4b67      	ldr	r3, [pc, #412]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2207      	movs	r2, #7
 8003170:	4013      	ands	r3, r2
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d1ee      	bne.n	8003156 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2202      	movs	r2, #2
 800317e:	4013      	ands	r3, r2
 8003180:	d015      	beq.n	80031ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	d006      	beq.n	800319a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800318c:	4b60      	ldr	r3, [pc, #384]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b5f      	ldr	r3, [pc, #380]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 8003192:	21e0      	movs	r1, #224	; 0xe0
 8003194:	01c9      	lsls	r1, r1, #7
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4a5d      	ldr	r2, [pc, #372]	; (8003314 <HAL_RCC_ClockConfig+0x1fc>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	d057      	beq.n	8003268 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	029b      	lsls	r3, r3, #10
 80031c8:	4013      	ands	r3, r2
 80031ca:	d12b      	bne.n	8003224 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e097      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d8:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	049b      	lsls	r3, r3, #18
 80031e0:	4013      	ands	r3, r2
 80031e2:	d11f      	bne.n	8003224 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e08b      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4013      	ands	r3, r2
 80031fa:	d113      	bne.n	8003224 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e07f      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d106      	bne.n	8003216 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d108      	bne.n	8003224 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e074      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	2202      	movs	r2, #2
 800321c:	4013      	ands	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e06d      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003224:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2207      	movs	r2, #7
 800322a:	4393      	bics	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4b37      	ldr	r3, [pc, #220]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003238:	f7fd fe74 	bl	8000f24 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003240:	e009      	b.n	8003256 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003242:	f7fd fe6f 	bl	8000f24 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	4a2f      	ldr	r2, [pc, #188]	; (800330c <HAL_RCC_ClockConfig+0x1f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e054      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2238      	movs	r2, #56	; 0x38
 800325c:	401a      	ands	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	429a      	cmp	r2, r3
 8003266:	d1ec      	bne.n	8003242 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d21e      	bcs.n	80032b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2207      	movs	r2, #7
 800327c:	4393      	bics	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	4b21      	ldr	r3, [pc, #132]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003288:	f7fd fe4c 	bl	8000f24 <HAL_GetTick>
 800328c:	0003      	movs	r3, r0
 800328e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003290:	e009      	b.n	80032a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7fd fe47 	bl	8000f24 <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_RCC_ClockConfig+0x1f4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e02c      	b.n	8003300 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2207      	movs	r2, #7
 80032ac:	4013      	ands	r3, r2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <HAL_RCC_ClockConfig+0x200>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	430a      	orrs	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80032d2:	f000 f829 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032d6:	0001      	movs	r1, r0
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_RCC_ClockConfig+0x1f8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	220f      	movs	r2, #15
 80032e0:	401a      	ands	r2, r3
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCC_ClockConfig+0x204>)
 80032e4:	0092      	lsls	r2, r2, #2
 80032e6:	58d3      	ldr	r3, [r2, r3]
 80032e8:	221f      	movs	r2, #31
 80032ea:	4013      	ands	r3, r2
 80032ec:	000a      	movs	r2, r1
 80032ee:	40da      	lsrs	r2, r3
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x208>)
 80032f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_ClockConfig+0x20c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7fd fdb7 	bl	8000e6c <HAL_InitTick>
 80032fe:	0003      	movs	r3, r0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40022000 	.word	0x40022000
 800330c:	00001388 	.word	0x00001388
 8003310:	40021000 	.word	0x40021000
 8003314:	fffff0ff 	.word	0xfffff0ff
 8003318:	ffff8fff 	.word	0xffff8fff
 800331c:	08005f10 	.word	0x08005f10
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2238      	movs	r2, #56	; 0x38
 8003334:	4013      	ands	r3, r2
 8003336:	d10f      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003338:	4b39      	ldr	r3, [pc, #228]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0adb      	lsrs	r3, r3, #11
 800333e:	2207      	movs	r2, #7
 8003340:	4013      	ands	r3, r2
 8003342:	2201      	movs	r2, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	0013      	movs	r3, r2
 8003348:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800334a:	6839      	ldr	r1, [r7, #0]
 800334c:	4835      	ldr	r0, [pc, #212]	; (8003424 <HAL_RCC_GetSysClockFreq+0xfc>)
 800334e:	f7fc fed9 	bl	8000104 <__udivsi3>
 8003352:	0003      	movs	r3, r0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e05d      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2238      	movs	r2, #56	; 0x38
 800335e:	4013      	ands	r3, r2
 8003360:	2b08      	cmp	r3, #8
 8003362:	d102      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003364:	4b30      	ldr	r3, [pc, #192]	; (8003428 <HAL_RCC_GetSysClockFreq+0x100>)
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	e054      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336a:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2238      	movs	r2, #56	; 0x38
 8003370:	4013      	ands	r3, r2
 8003372:	2b10      	cmp	r3, #16
 8003374:	d138      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2203      	movs	r2, #3
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	2207      	movs	r2, #7
 8003388:	4013      	ands	r3, r2
 800338a:	3301      	adds	r3, #1
 800338c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	4824      	ldr	r0, [pc, #144]	; (8003428 <HAL_RCC_GetSysClockFreq+0x100>)
 8003398:	f7fc feb4 	bl	8000104 <__udivsi3>
 800339c:	0003      	movs	r3, r0
 800339e:	0019      	movs	r1, r3
 80033a0:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	227f      	movs	r2, #127	; 0x7f
 80033a8:	4013      	ands	r3, r2
 80033aa:	434b      	muls	r3, r1
 80033ac:	617b      	str	r3, [r7, #20]
        break;
 80033ae:	e00d      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	481c      	ldr	r0, [pc, #112]	; (8003424 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033b4:	f7fc fea6 	bl	8000104 <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	0019      	movs	r1, r3
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	227f      	movs	r2, #127	; 0x7f
 80033c4:	4013      	ands	r3, r2
 80033c6:	434b      	muls	r3, r1
 80033c8:	617b      	str	r3, [r7, #20]
        break;
 80033ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0f5b      	lsrs	r3, r3, #29
 80033d2:	2207      	movs	r2, #7
 80033d4:	4013      	ands	r3, r2
 80033d6:	3301      	adds	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	f7fc fe91 	bl	8000104 <__udivsi3>
 80033e2:	0003      	movs	r3, r0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	e015      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2238      	movs	r2, #56	; 0x38
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d103      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2238      	movs	r2, #56	; 0x38
 8003402:	4013      	ands	r3, r2
 8003404:	2b18      	cmp	r3, #24
 8003406:	d103      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003408:	23fa      	movs	r3, #250	; 0xfa
 800340a:	01db      	lsls	r3, r3, #7
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	e001      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003414:	693b      	ldr	r3, [r7, #16]
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b006      	add	sp, #24
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40021000 	.word	0x40021000
 8003424:	00f42400 	.word	0x00f42400
 8003428:	007a1200 	.word	0x007a1200

0800342c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <HAL_RCC_GetHCLKFreq+0x10>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	20000000 	.word	0x20000000

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003444:	f7ff fff2 	bl	800342c <HAL_RCC_GetHCLKFreq>
 8003448:	0004      	movs	r4, r0
 800344a:	f7ff faf9 	bl	8002a40 <LL_RCC_GetAPB1Prescaler>
 800344e:	0003      	movs	r3, r0
 8003450:	0b1a      	lsrs	r2, r3, #12
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003454:	0092      	lsls	r2, r2, #2
 8003456:	58d3      	ldr	r3, [r2, r3]
 8003458:	221f      	movs	r2, #31
 800345a:	4013      	ands	r3, r2
 800345c:	40dc      	lsrs	r4, r3
 800345e:	0023      	movs	r3, r4
}
 8003460:	0018      	movs	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	08005f50 	.word	0x08005f50

0800346c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003474:	2313      	movs	r3, #19
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800347c:	2312      	movs	r3, #18
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	029b      	lsls	r3, r3, #10
 800348c:	4013      	ands	r3, r2
 800348e:	d100      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003490:	e0ad      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2011      	movs	r0, #17
 8003494:	183b      	adds	r3, r7, r0
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800349c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	055b      	lsls	r3, r3, #21
 80034a2:	4013      	ands	r3, r2
 80034a4:	d110      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034aa:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	0549      	lsls	r1, r1, #21
 80034b0:	430a      	orrs	r2, r1
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80034b4:	4b40      	ldr	r3, [pc, #256]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80034b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	055b      	lsls	r3, r3, #21
 80034bc:	4013      	ands	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c8:	4b3c      	ldr	r3, [pc, #240]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	0049      	lsls	r1, r1, #1
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034d6:	f7fd fd25 	bl	8000f24 <HAL_GetTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034de:	e00b      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7fd fd20 	bl	8000f24 <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d904      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80034ee:	2313      	movs	r3, #19
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2203      	movs	r2, #3
 80034f4:	701a      	strb	r2, [r3, #0]
        break;
 80034f6:	e005      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d0ed      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003504:	2313      	movs	r3, #19
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d15e      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003512:	23c0      	movs	r3, #192	; 0xc0
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4013      	ands	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d019      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	429a      	cmp	r2, r3
 8003528:	d014      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003530:	4013      	ands	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	0249      	lsls	r1, r1, #9
 800353e:	430a      	orrs	r2, r1
 8003540:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003546:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003548:	491e      	ldr	r1, [pc, #120]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800354a:	400a      	ands	r2, r1
 800354c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2201      	movs	r2, #1
 8003558:	4013      	ands	r3, r2
 800355a:	d016      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fd fce2 	bl	8000f24 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003564:	e00c      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003566:	f7fd fcdd 	bl	8000f24 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d904      	bls.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003576:	2313      	movs	r3, #19
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2203      	movs	r2, #3
 800357c:	701a      	strb	r2, [r3, #0]
            break;
 800357e:	e004      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2202      	movs	r2, #2
 8003586:	4013      	ands	r3, r2
 8003588:	d0ed      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800358a:	2313      	movs	r3, #19
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80035a8:	e016      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035aa:	2312      	movs	r3, #18
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	2213      	movs	r2, #19
 80035b0:	18ba      	adds	r2, r7, r2
 80035b2:	7812      	ldrb	r2, [r2, #0]
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e00f      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
 80035c0:	fffffcff 	.word	0xfffffcff
 80035c4:	fffeffff 	.word	0xfffeffff
 80035c8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	2312      	movs	r3, #18
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2213      	movs	r2, #19
 80035d2:	18ba      	adds	r2, r7, r2
 80035d4:	7812      	ldrb	r2, [r2, #0]
 80035d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d8:	2311      	movs	r3, #17
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4bb6      	ldr	r3, [pc, #728]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e6:	4bb5      	ldr	r3, [pc, #724]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e8:	49b5      	ldr	r1, [pc, #724]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80035ea:	400a      	ands	r2, r1
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f8:	4bb0      	ldr	r3, [pc, #704]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	2203      	movs	r2, #3
 80035fe:	4393      	bics	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	4bad      	ldr	r3, [pc, #692]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003608:	430a      	orrs	r2, r1
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003616:	4ba9      	ldr	r3, [pc, #676]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361a:	220c      	movs	r2, #12
 800361c:	4393      	bics	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	4ba5      	ldr	r3, [pc, #660]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003626:	430a      	orrs	r2, r1
 8003628:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2204      	movs	r2, #4
 8003630:	4013      	ands	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003634:	4ba1      	ldr	r3, [pc, #644]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	2230      	movs	r2, #48	; 0x30
 800363a:	4393      	bics	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	4b9e      	ldr	r3, [pc, #632]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003644:	430a      	orrs	r2, r1
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2210      	movs	r2, #16
 800364e:	4013      	ands	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003652:	4b9a      	ldr	r3, [pc, #616]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	4a9b      	ldr	r2, [pc, #620]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003658:	4013      	ands	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	4b96      	ldr	r3, [pc, #600]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003662:	430a      	orrs	r2, r1
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	015b      	lsls	r3, r3, #5
 800366e:	4013      	ands	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003672:	4b92      	ldr	r3, [pc, #584]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	4a94      	ldr	r2, [pc, #592]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003678:	4013      	ands	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	4b8e      	ldr	r3, [pc, #568]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003682:	430a      	orrs	r2, r1
 8003684:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003692:	4b8a      	ldr	r3, [pc, #552]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	4a8d      	ldr	r2, [pc, #564]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a0:	4b86      	ldr	r3, [pc, #536]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036a2:	430a      	orrs	r2, r1
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4013      	ands	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036b2:	4b82      	ldr	r3, [pc, #520]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	4a86      	ldr	r2, [pc, #536]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4b7e      	ldr	r3, [pc, #504]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036c2:	430a      	orrs	r2, r1
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2220      	movs	r2, #32
 80036cc:	4013      	ands	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d0:	4b7a      	ldr	r3, [pc, #488]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	4a7f      	ldr	r2, [pc, #508]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	4b77      	ldr	r3, [pc, #476]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	4013      	ands	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ee:	4b73      	ldr	r3, [pc, #460]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	4a79      	ldr	r2, [pc, #484]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	0019      	movs	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	4b6f      	ldr	r3, [pc, #444]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036fe:	430a      	orrs	r2, r1
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	01db      	lsls	r3, r3, #7
 800370a:	4013      	ands	r3, r2
 800370c:	d015      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800370e:	4b6b      	ldr	r3, [pc, #428]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	0899      	lsrs	r1, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371a:	4b68      	ldr	r3, [pc, #416]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800371c:	430a      	orrs	r2, r1
 800371e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	05db      	lsls	r3, r3, #23
 8003728:	429a      	cmp	r2, r3
 800372a:	d106      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800372c:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	4b62      	ldr	r3, [pc, #392]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	0249      	lsls	r1, r1, #9
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	4013      	ands	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003746:	4b5d      	ldr	r3, [pc, #372]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	4393      	bics	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003756:	430a      	orrs	r2, r1
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	039b      	lsls	r3, r3, #14
 8003762:	4013      	ands	r3, r2
 8003764:	d016      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003766:	4b55      	ldr	r3, [pc, #340]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	4a5c      	ldr	r2, [pc, #368]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800376c:	4013      	ands	r3, r2
 800376e:	0019      	movs	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003774:	4b51      	ldr	r3, [pc, #324]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003776:	430a      	orrs	r2, r1
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	03db      	lsls	r3, r3, #15
 8003782:	429a      	cmp	r2, r3
 8003784:	d106      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003786:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	0449      	lsls	r1, r1, #17
 8003790:	430a      	orrs	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	03db      	lsls	r3, r3, #15
 800379c:	4013      	ands	r3, r2
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ae:	4b43      	ldr	r3, [pc, #268]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	045b      	lsls	r3, r3, #17
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037c0:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037c6:	2180      	movs	r1, #128	; 0x80
 80037c8:	0449      	lsls	r1, r1, #17
 80037ca:	430a      	orrs	r2, r1
 80037cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4013      	ands	r3, r2
 80037d8:	d014      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	2203      	movs	r2, #3
 80037e0:	4393      	bics	r3, r2
 80037e2:	0019      	movs	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037ea:	430a      	orrs	r2, r1
 80037ec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d106      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80037fc:	2180      	movs	r1, #128	; 0x80
 80037fe:	0249      	lsls	r1, r1, #9
 8003800:	430a      	orrs	r2, r1
 8003802:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	019b      	lsls	r3, r3, #6
 800380c:	4013      	ands	r3, r2
 800380e:	d014      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003810:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	220c      	movs	r2, #12
 8003816:	4393      	bics	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800381e:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003820:	430a      	orrs	r2, r1
 8003822:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	2b04      	cmp	r3, #4
 800382a:	d106      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b22      	ldr	r3, [pc, #136]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003832:	2180      	movs	r1, #128	; 0x80
 8003834:	0249      	lsls	r1, r1, #9
 8003836:	430a      	orrs	r2, r1
 8003838:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	045b      	lsls	r3, r3, #17
 8003842:	4013      	ands	r3, r2
 8003844:	d016      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800384c:	4013      	ands	r3, r2
 800384e:	0019      	movs	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003856:	430a      	orrs	r2, r1
 8003858:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	429a      	cmp	r2, r3
 8003864:	d106      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800386c:	2180      	movs	r1, #128	; 0x80
 800386e:	0449      	lsls	r1, r1, #17
 8003870:	430a      	orrs	r2, r1
 8003872:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	049b      	lsls	r3, r3, #18
 800387c:	4013      	ands	r3, r2
 800387e:	d016      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003886:	4013      	ands	r3, r2
 8003888:	0019      	movs	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003890:	430a      	orrs	r2, r1
 8003892:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	429a      	cmp	r2, r3
 800389e:	d106      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	0449      	lsls	r1, r1, #17
 80038aa:	430a      	orrs	r2, r1
 80038ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80038ae:	2312      	movs	r3, #18
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	781b      	ldrb	r3, [r3, #0]
}
 80038b4:	0018      	movs	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b006      	add	sp, #24
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000
 80038c0:	efffffff 	.word	0xefffffff
 80038c4:	fffff3ff 	.word	0xfffff3ff
 80038c8:	fffffcff 	.word	0xfffffcff
 80038cc:	fff3ffff 	.word	0xfff3ffff
 80038d0:	ffcfffff 	.word	0xffcfffff
 80038d4:	ffffcfff 	.word	0xffffcfff
 80038d8:	ffff3fff 	.word	0xffff3fff
 80038dc:	ffbfffff 	.word	0xffbfffff
 80038e0:	feffffff 	.word	0xfeffffff

080038e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e046      	b.n	8003984 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2288      	movs	r2, #136	; 0x88
 80038fa:	589b      	ldr	r3, [r3, r2]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2284      	movs	r2, #132	; 0x84
 8003904:	2100      	movs	r1, #0
 8003906:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0018      	movs	r0, r3
 800390c:	f7fd f9fa 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2288      	movs	r2, #136	; 0x88
 8003914:	2124      	movs	r1, #36	; 0x24
 8003916:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	438a      	bics	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 ff68 	bl	8004808 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f000 fc0e 	bl	800415c <UART_SetConfig>
 8003940:	0003      	movs	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01c      	b.n	8003984 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	490d      	ldr	r1, [pc, #52]	; (800398c <HAL_UART_Init+0xa8>)
 8003956:	400a      	ands	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	212a      	movs	r1, #42	; 0x2a
 8003966:	438a      	bics	r2, r1
 8003968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2101      	movs	r1, #1
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f000 fff7 	bl	8004970 <UART_CheckIdleState>
 8003982:	0003      	movs	r3, r0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}
 800398c:	ffffb7ff 	.word	0xffffb7ff

08003990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	1dbb      	adds	r3, r7, #6
 800399e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2288      	movs	r2, #136	; 0x88
 80039a4:	589b      	ldr	r3, [r3, r2]
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d000      	beq.n	80039ac <HAL_UART_Transmit+0x1c>
 80039aa:	e090      	b.n	8003ace <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_UART_Transmit+0x2a>
 80039b2:	1dbb      	adds	r3, r7, #6
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e088      	b.n	8003ad0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	015b      	lsls	r3, r3, #5
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d109      	bne.n	80039de <HAL_UART_Transmit+0x4e>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2201      	movs	r2, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	d001      	beq.n	80039de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e078      	b.n	8003ad0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2290      	movs	r2, #144	; 0x90
 80039e2:	2100      	movs	r1, #0
 80039e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2288      	movs	r2, #136	; 0x88
 80039ea:	2121      	movs	r1, #33	; 0x21
 80039ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fa99 	bl	8000f24 <HAL_GetTick>
 80039f2:	0003      	movs	r3, r0
 80039f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1dba      	adds	r2, r7, #6
 80039fa:	2154      	movs	r1, #84	; 0x54
 80039fc:	8812      	ldrh	r2, [r2, #0]
 80039fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1dba      	adds	r2, r7, #6
 8003a04:	2156      	movs	r1, #86	; 0x56
 8003a06:	8812      	ldrh	r2, [r2, #0]
 8003a08:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	015b      	lsls	r3, r3, #5
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d108      	bne.n	8003a28 <HAL_UART_Transmit+0x98>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e003      	b.n	8003a30 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a30:	e030      	b.n	8003a94 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	0013      	movs	r3, r2
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2180      	movs	r1, #128	; 0x80
 8003a40:	f001 f840 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8003a44:	1e03      	subs	r3, r0, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2288      	movs	r2, #136	; 0x88
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e03d      	b.n	8003ad0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	001a      	movs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	05d2      	lsls	r2, r2, #23
 8003a66:	0dd2      	lsrs	r2, r2, #23
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e007      	b.n	8003a82 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2256      	movs	r2, #86	; 0x56
 8003a86:	5a9b      	ldrh	r3, [r3, r2]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b299      	uxth	r1, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2256      	movs	r2, #86	; 0x56
 8003a92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2256      	movs	r2, #86	; 0x56
 8003a98:	5a9b      	ldrh	r3, [r3, r2]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1c8      	bne.n	8003a32 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	f001 f809 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2288      	movs	r2, #136	; 0x88
 8003aba:	2120      	movs	r1, #32
 8003abc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e006      	b.n	8003ad0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2288      	movs	r2, #136	; 0x88
 8003ac6:	2120      	movs	r1, #32
 8003ac8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003ace:	2302      	movs	r3, #2
  }
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b008      	add	sp, #32
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	b0aa      	sub	sp, #168	; 0xa8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	22a4      	movs	r2, #164	; 0xa4
 8003ae8:	18b9      	adds	r1, r7, r2
 8003aea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	20a0      	movs	r0, #160	; 0xa0
 8003af4:	1839      	adds	r1, r7, r0
 8003af6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	249c      	movs	r4, #156	; 0x9c
 8003b00:	1939      	adds	r1, r7, r4
 8003b02:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b04:	0011      	movs	r1, r2
 8003b06:	18bb      	adds	r3, r7, r2
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4aa2      	ldr	r2, [pc, #648]	; (8003d94 <HAL_UART_IRQHandler+0x2bc>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2298      	movs	r2, #152	; 0x98
 8003b10:	18bd      	adds	r5, r7, r2
 8003b12:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003b14:	18bb      	adds	r3, r7, r2
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11a      	bne.n	8003b52 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2220      	movs	r2, #32
 8003b22:	4013      	ands	r3, r2
 8003b24:	d015      	beq.n	8003b52 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d105      	bne.n	8003b3c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	055b      	lsls	r3, r3, #21
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00a      	beq.n	8003b52 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d100      	bne.n	8003b46 <HAL_UART_IRQHandler+0x6e>
 8003b44:	e2dc      	b.n	8004100 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	0010      	movs	r0, r2
 8003b4e:	4798      	blx	r3
      }
      return;
 8003b50:	e2d6      	b.n	8004100 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b52:	2398      	movs	r3, #152	; 0x98
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d100      	bne.n	8003b5e <HAL_UART_IRQHandler+0x86>
 8003b5c:	e122      	b.n	8003da4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b5e:	239c      	movs	r3, #156	; 0x9c
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a8c      	ldr	r2, [pc, #560]	; (8003d98 <HAL_UART_IRQHandler+0x2c0>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b6a:	23a0      	movs	r3, #160	; 0xa0
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a8a      	ldr	r2, [pc, #552]	; (8003d9c <HAL_UART_IRQHandler+0x2c4>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	d100      	bne.n	8003b78 <HAL_UART_IRQHandler+0xa0>
 8003b76:	e115      	b.n	8003da4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b78:	23a4      	movs	r3, #164	; 0xa4
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d012      	beq.n	8003baa <HAL_UART_IRQHandler+0xd2>
 8003b84:	23a0      	movs	r3, #160	; 0xa0
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d00b      	beq.n	8003baa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2290      	movs	r2, #144	; 0x90
 8003b9e:	589b      	ldr	r3, [r3, r2]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2190      	movs	r1, #144	; 0x90
 8003ba8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003baa:	23a4      	movs	r3, #164	; 0xa4
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d011      	beq.n	8003bda <HAL_UART_IRQHandler+0x102>
 8003bb6:	239c      	movs	r3, #156	; 0x9c
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2290      	movs	r2, #144	; 0x90
 8003bce:	589b      	ldr	r3, [r3, r2]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2190      	movs	r1, #144	; 0x90
 8003bd8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bda:	23a4      	movs	r3, #164	; 0xa4
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2204      	movs	r2, #4
 8003be2:	4013      	ands	r3, r2
 8003be4:	d011      	beq.n	8003c0a <HAL_UART_IRQHandler+0x132>
 8003be6:	239c      	movs	r3, #156	; 0x9c
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2201      	movs	r2, #1
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2290      	movs	r2, #144	; 0x90
 8003bfe:	589b      	ldr	r3, [r3, r2]
 8003c00:	2202      	movs	r2, #2
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2190      	movs	r1, #144	; 0x90
 8003c08:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c0a:	23a4      	movs	r3, #164	; 0xa4
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	4013      	ands	r3, r2
 8003c14:	d017      	beq.n	8003c46 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c16:	23a0      	movs	r3, #160	; 0xa0
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d105      	bne.n	8003c2e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c22:	239c      	movs	r3, #156	; 0x9c
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a5b      	ldr	r2, [pc, #364]	; (8003d98 <HAL_UART_IRQHandler+0x2c0>)
 8003c2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c2c:	d00b      	beq.n	8003c46 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2208      	movs	r2, #8
 8003c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2290      	movs	r2, #144	; 0x90
 8003c3a:	589b      	ldr	r3, [r3, r2]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2190      	movs	r1, #144	; 0x90
 8003c44:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c46:	23a4      	movs	r3, #164	; 0xa4
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4013      	ands	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_UART_IRQHandler+0x1a4>
 8003c54:	23a0      	movs	r3, #160	; 0xa0
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	04db      	lsls	r3, r3, #19
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00c      	beq.n	8003c7c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2290      	movs	r2, #144	; 0x90
 8003c70:	589b      	ldr	r3, [r3, r2]
 8003c72:	2220      	movs	r2, #32
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2190      	movs	r1, #144	; 0x90
 8003c7a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2290      	movs	r2, #144	; 0x90
 8003c80:	589b      	ldr	r3, [r3, r2]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d100      	bne.n	8003c88 <HAL_UART_IRQHandler+0x1b0>
 8003c86:	e23d      	b.n	8004104 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c88:	23a4      	movs	r3, #164	; 0xa4
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	4013      	ands	r3, r2
 8003c92:	d015      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c94:	23a0      	movs	r3, #160	; 0xa0
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d106      	bne.n	8003cae <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ca0:	239c      	movs	r3, #156	; 0x9c
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	055b      	lsls	r3, r3, #21
 8003caa:	4013      	ands	r3, r2
 8003cac:	d008      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2290      	movs	r2, #144	; 0x90
 8003cc4:	589b      	ldr	r3, [r3, r2]
 8003cc6:	2194      	movs	r1, #148	; 0x94
 8003cc8:	187a      	adds	r2, r7, r1
 8003cca:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d004      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2228      	movs	r2, #40	; 0x28
 8003ce0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce2:	d04c      	beq.n	8003d7e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 ff5c 	bl	8004ba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2240      	movs	r2, #64	; 0x40
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d13c      	bne.n	8003d74 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfe:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d02:	2090      	movs	r0, #144	; 0x90
 8003d04:	183a      	adds	r2, r7, r0
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0e:	f383 8810 	msr	PRIMASK, r3
}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2140      	movs	r1, #64	; 0x40
 8003d20:	438a      	bics	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	589b      	ldr	r3, [r3, r2]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	589b      	ldr	r3, [r3, r2]
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <HAL_UART_IRQHandler+0x2c8>)
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	589b      	ldr	r3, [r3, r2]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7fd fa6b 	bl	8001228 <HAL_DMA_Abort_IT>
 8003d52:	1e03      	subs	r3, r0, #0
 8003d54:	d01c      	beq.n	8003d90 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	5852      	ldr	r2, [r2, r1]
 8003d64:	0010      	movs	r0, r2
 8003d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d68:	e012      	b.n	8003d90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 f9e1 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d72:	e00d      	b.n	8003d90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f9dc 	bl	8004134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	e008      	b.n	8003d90 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 f9d7 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2290      	movs	r2, #144	; 0x90
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003d8e:	e1b9      	b.n	8004104 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	46c0      	nop			; (mov r8, r8)
    return;
 8003d92:	e1b7      	b.n	8004104 <HAL_UART_IRQHandler+0x62c>
 8003d94:	0000080f 	.word	0x0000080f
 8003d98:	10000001 	.word	0x10000001
 8003d9c:	04000120 	.word	0x04000120
 8003da0:	08004c71 	.word	0x08004c71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d000      	beq.n	8003dae <HAL_UART_IRQHandler+0x2d6>
 8003dac:	e13e      	b.n	800402c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dae:	23a4      	movs	r3, #164	; 0xa4
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	4013      	ands	r3, r2
 8003db8:	d100      	bne.n	8003dbc <HAL_UART_IRQHandler+0x2e4>
 8003dba:	e137      	b.n	800402c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dbc:	23a0      	movs	r3, #160	; 0xa0
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d100      	bne.n	8003dca <HAL_UART_IRQHandler+0x2f2>
 8003dc8:	e130      	b.n	800402c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2240      	movs	r2, #64	; 0x40
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d000      	beq.n	8003de2 <HAL_UART_IRQHandler+0x30a>
 8003de0:	e0a4      	b.n	8003f2c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	589b      	ldr	r3, [r3, r2]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	217e      	movs	r1, #126	; 0x7e
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003df2:	187b      	adds	r3, r7, r1
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d100      	bne.n	8003dfc <HAL_UART_IRQHandler+0x324>
 8003dfa:	e185      	b.n	8004108 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	225c      	movs	r2, #92	; 0x5c
 8003e00:	5a9b      	ldrh	r3, [r3, r2]
 8003e02:	187a      	adds	r2, r7, r1
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d300      	bcc.n	8003e0c <HAL_UART_IRQHandler+0x334>
 8003e0a:	e17d      	b.n	8004108 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	187a      	adds	r2, r7, r1
 8003e10:	215e      	movs	r1, #94	; 0x5e
 8003e12:	8812      	ldrh	r2, [r2, #0]
 8003e14:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	589b      	ldr	r3, [r3, r2]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2220      	movs	r2, #32
 8003e22:	4013      	ands	r3, r2
 8003e24:	d170      	bne.n	8003f08 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e30:	2301      	movs	r3, #1
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	49b4      	ldr	r1, [pc, #720]	; (8004118 <HAL_UART_IRQHandler+0x640>)
 8003e48:	400a      	ands	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e58:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	677b      	str	r3, [r7, #116]	; 0x74
 8003e62:	2301      	movs	r3, #1
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	438a      	bics	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e92:	673b      	str	r3, [r7, #112]	; 0x70
 8003e94:	2301      	movs	r3, #1
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	438a      	bics	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	228c      	movs	r2, #140	; 0x8c
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2110      	movs	r1, #16
 8003eec:	438a      	bics	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	589b      	ldr	r3, [r3, r2]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7fd f930 	bl	8001168 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	225c      	movs	r2, #92	; 0x5c
 8003f12:	5a9a      	ldrh	r2, [r3, r2]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	215e      	movs	r1, #94	; 0x5e
 8003f18:	5a5b      	ldrh	r3, [r3, r1]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f000 f90d 	bl	8004144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f2a:	e0ed      	b.n	8004108 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	225c      	movs	r2, #92	; 0x5c
 8003f30:	5a99      	ldrh	r1, [r3, r2]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	225e      	movs	r2, #94	; 0x5e
 8003f36:	5a9b      	ldrh	r3, [r3, r2]
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	208e      	movs	r0, #142	; 0x8e
 8003f3c:	183b      	adds	r3, r7, r0
 8003f3e:	1a8a      	subs	r2, r1, r2
 8003f40:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	225e      	movs	r2, #94	; 0x5e
 8003f46:	5a9b      	ldrh	r3, [r3, r2]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d100      	bne.n	8003f50 <HAL_UART_IRQHandler+0x478>
 8003f4e:	e0dd      	b.n	800410c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d100      	bne.n	8003f5a <HAL_UART_IRQHandler+0x482>
 8003f58:	e0d8      	b.n	800410c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f60:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f62:	2488      	movs	r4, #136	; 0x88
 8003f64:	193a      	adds	r2, r7, r4
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f383 8810 	msr	PRIMASK, r3
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4967      	ldr	r1, [pc, #412]	; (800411c <HAL_UART_IRQHandler+0x644>)
 8003f80:	400a      	ands	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	193b      	adds	r3, r7, r4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f98:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f9a:	2484      	movs	r4, #132	; 0x84
 8003f9c:	193a      	adds	r2, r7, r4
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	495a      	ldr	r1, [pc, #360]	; (8004120 <HAL_UART_IRQHandler+0x648>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	193b      	adds	r3, r7, r4
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	228c      	movs	r2, #140	; 0x8c
 8003fce:	2120      	movs	r1, #32
 8003fd0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fde:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe6:	2480      	movs	r4, #128	; 0x80
 8003fe8:	193a      	adds	r2, r7, r4
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	2301      	movs	r3, #1
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	f383 8810 	msr	PRIMASK, r3
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2110      	movs	r1, #16
 8004004:	438a      	bics	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	193b      	adds	r3, r7, r4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800401c:	183b      	adds	r3, r7, r0
 800401e:	881a      	ldrh	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	0011      	movs	r1, r2
 8004024:	0018      	movs	r0, r3
 8004026:	f000 f88d 	bl	8004144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800402a:	e06f      	b.n	800410c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800402c:	23a4      	movs	r3, #164	; 0xa4
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	035b      	lsls	r3, r3, #13
 8004036:	4013      	ands	r3, r2
 8004038:	d010      	beq.n	800405c <HAL_UART_IRQHandler+0x584>
 800403a:	239c      	movs	r3, #156	; 0x9c
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	03db      	lsls	r3, r3, #15
 8004044:	4013      	ands	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	0352      	lsls	r2, r2, #13
 8004050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f000 fe4e 	bl	8004cf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800405a:	e05a      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800405c:	23a4      	movs	r3, #164	; 0xa4
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2280      	movs	r2, #128	; 0x80
 8004064:	4013      	ands	r3, r2
 8004066:	d016      	beq.n	8004096 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004068:	23a0      	movs	r3, #160	; 0xa0
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	4013      	ands	r3, r2
 8004072:	d106      	bne.n	8004082 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004074:	239c      	movs	r3, #156	; 0x9c
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	4013      	ands	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004086:	2b00      	cmp	r3, #0
 8004088:	d042      	beq.n	8004110 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	0010      	movs	r0, r2
 8004092:	4798      	blx	r3
    }
    return;
 8004094:	e03c      	b.n	8004110 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004096:	23a4      	movs	r3, #164	; 0xa4
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2240      	movs	r2, #64	; 0x40
 800409e:	4013      	ands	r3, r2
 80040a0:	d00a      	beq.n	80040b8 <HAL_UART_IRQHandler+0x5e0>
 80040a2:	23a0      	movs	r3, #160	; 0xa0
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2240      	movs	r2, #64	; 0x40
 80040aa:	4013      	ands	r3, r2
 80040ac:	d004      	beq.n	80040b8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 fdf4 	bl	8004c9e <UART_EndTransmit_IT>
    return;
 80040b6:	e02c      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040b8:	23a4      	movs	r3, #164	; 0xa4
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	4013      	ands	r3, r2
 80040c4:	d00b      	beq.n	80040de <HAL_UART_IRQHandler+0x606>
 80040c6:	23a0      	movs	r3, #160	; 0xa0
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	4013      	ands	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f000 fe1d 	bl	8004d16 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040dc:	e019      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80040de:	23a4      	movs	r3, #164	; 0xa4
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	045b      	lsls	r3, r3, #17
 80040e8:	4013      	ands	r3, r2
 80040ea:	d012      	beq.n	8004112 <HAL_UART_IRQHandler+0x63a>
 80040ec:	23a0      	movs	r3, #160	; 0xa0
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da0d      	bge.n	8004112 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 fe04 	bl	8004d06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040fe:	e008      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
      return;
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	e006      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
    return;
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	e004      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
      return;
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	e002      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
      return;
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	e000      	b.n	8004112 <HAL_UART_IRQHandler+0x63a>
    return;
 8004110:	46c0      	nop			; (mov r8, r8)
  }
}
 8004112:	46bd      	mov	sp, r7
 8004114:	b02a      	add	sp, #168	; 0xa8
 8004116:	bdb0      	pop	{r4, r5, r7, pc}
 8004118:	fffffeff 	.word	0xfffffeff
 800411c:	fffffedf 	.word	0xfffffedf
 8004120:	effffffe 	.word	0xeffffffe

08004124 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	000a      	movs	r2, r1
 800414e:	1cbb      	adds	r3, r7, #2
 8004150:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	b5b0      	push	{r4, r5, r7, lr}
 800415e:	b090      	sub	sp, #64	; 0x40
 8004160:	af00      	add	r7, sp, #0
 8004162:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004164:	231a      	movs	r3, #26
 8004166:	2220      	movs	r2, #32
 8004168:	189b      	adds	r3, r3, r2
 800416a:	19db      	adds	r3, r3, r7
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4ac1      	ldr	r2, [pc, #772]	; (8004494 <UART_SetConfig+0x338>)
 8004190:	4013      	ands	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	430b      	orrs	r3, r1
 800419c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4abc      	ldr	r2, [pc, #752]	; (8004498 <UART_SetConfig+0x33c>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0018      	movs	r0, r3
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	0003      	movs	r3, r0
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4ab6      	ldr	r2, [pc, #728]	; (800449c <UART_SetConfig+0x340>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <UART_SetConfig+0x80>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4ab4      	ldr	r2, [pc, #720]	; (80044a0 <UART_SetConfig+0x344>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d8:	4313      	orrs	r3, r2
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4ab0      	ldr	r2, [pc, #704]	; (80044a4 <UART_SetConfig+0x348>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	0019      	movs	r1, r3
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ee:	430b      	orrs	r3, r1
 80041f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	220f      	movs	r2, #15
 80041fa:	4393      	bics	r3, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	0003      	movs	r3, r0
 8004208:	430b      	orrs	r3, r1
 800420a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4aa5      	ldr	r2, [pc, #660]	; (80044a8 <UART_SetConfig+0x34c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d131      	bne.n	800427a <UART_SetConfig+0x11e>
 8004216:	4ba5      	ldr	r3, [pc, #660]	; (80044ac <UART_SetConfig+0x350>)
 8004218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421a:	2203      	movs	r2, #3
 800421c:	4013      	ands	r3, r2
 800421e:	2b03      	cmp	r3, #3
 8004220:	d01d      	beq.n	800425e <UART_SetConfig+0x102>
 8004222:	d823      	bhi.n	800426c <UART_SetConfig+0x110>
 8004224:	2b02      	cmp	r3, #2
 8004226:	d00c      	beq.n	8004242 <UART_SetConfig+0xe6>
 8004228:	d820      	bhi.n	800426c <UART_SetConfig+0x110>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <UART_SetConfig+0xd8>
 800422e:	2b01      	cmp	r3, #1
 8004230:	d00e      	beq.n	8004250 <UART_SetConfig+0xf4>
 8004232:	e01b      	b.n	800426c <UART_SetConfig+0x110>
 8004234:	231b      	movs	r3, #27
 8004236:	2220      	movs	r2, #32
 8004238:	189b      	adds	r3, r3, r2
 800423a:	19db      	adds	r3, r3, r7
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e154      	b.n	80044ec <UART_SetConfig+0x390>
 8004242:	231b      	movs	r3, #27
 8004244:	2220      	movs	r2, #32
 8004246:	189b      	adds	r3, r3, r2
 8004248:	19db      	adds	r3, r3, r7
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e14d      	b.n	80044ec <UART_SetConfig+0x390>
 8004250:	231b      	movs	r3, #27
 8004252:	2220      	movs	r2, #32
 8004254:	189b      	adds	r3, r3, r2
 8004256:	19db      	adds	r3, r3, r7
 8004258:	2204      	movs	r2, #4
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e146      	b.n	80044ec <UART_SetConfig+0x390>
 800425e:	231b      	movs	r3, #27
 8004260:	2220      	movs	r2, #32
 8004262:	189b      	adds	r3, r3, r2
 8004264:	19db      	adds	r3, r3, r7
 8004266:	2208      	movs	r2, #8
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e13f      	b.n	80044ec <UART_SetConfig+0x390>
 800426c:	231b      	movs	r3, #27
 800426e:	2220      	movs	r2, #32
 8004270:	189b      	adds	r3, r3, r2
 8004272:	19db      	adds	r3, r3, r7
 8004274:	2210      	movs	r2, #16
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e138      	b.n	80044ec <UART_SetConfig+0x390>
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a8c      	ldr	r2, [pc, #560]	; (80044b0 <UART_SetConfig+0x354>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d131      	bne.n	80042e8 <UART_SetConfig+0x18c>
 8004284:	4b89      	ldr	r3, [pc, #548]	; (80044ac <UART_SetConfig+0x350>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	220c      	movs	r2, #12
 800428a:	4013      	ands	r3, r2
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d01d      	beq.n	80042cc <UART_SetConfig+0x170>
 8004290:	d823      	bhi.n	80042da <UART_SetConfig+0x17e>
 8004292:	2b08      	cmp	r3, #8
 8004294:	d00c      	beq.n	80042b0 <UART_SetConfig+0x154>
 8004296:	d820      	bhi.n	80042da <UART_SetConfig+0x17e>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <UART_SetConfig+0x146>
 800429c:	2b04      	cmp	r3, #4
 800429e:	d00e      	beq.n	80042be <UART_SetConfig+0x162>
 80042a0:	e01b      	b.n	80042da <UART_SetConfig+0x17e>
 80042a2:	231b      	movs	r3, #27
 80042a4:	2220      	movs	r2, #32
 80042a6:	189b      	adds	r3, r3, r2
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e11d      	b.n	80044ec <UART_SetConfig+0x390>
 80042b0:	231b      	movs	r3, #27
 80042b2:	2220      	movs	r2, #32
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	19db      	adds	r3, r3, r7
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e116      	b.n	80044ec <UART_SetConfig+0x390>
 80042be:	231b      	movs	r3, #27
 80042c0:	2220      	movs	r2, #32
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	19db      	adds	r3, r3, r7
 80042c6:	2204      	movs	r2, #4
 80042c8:	701a      	strb	r2, [r3, #0]
 80042ca:	e10f      	b.n	80044ec <UART_SetConfig+0x390>
 80042cc:	231b      	movs	r3, #27
 80042ce:	2220      	movs	r2, #32
 80042d0:	189b      	adds	r3, r3, r2
 80042d2:	19db      	adds	r3, r3, r7
 80042d4:	2208      	movs	r2, #8
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	e108      	b.n	80044ec <UART_SetConfig+0x390>
 80042da:	231b      	movs	r3, #27
 80042dc:	2220      	movs	r2, #32
 80042de:	189b      	adds	r3, r3, r2
 80042e0:	19db      	adds	r3, r3, r7
 80042e2:	2210      	movs	r2, #16
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e101      	b.n	80044ec <UART_SetConfig+0x390>
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a71      	ldr	r2, [pc, #452]	; (80044b4 <UART_SetConfig+0x358>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d131      	bne.n	8004356 <UART_SetConfig+0x1fa>
 80042f2:	4b6e      	ldr	r3, [pc, #440]	; (80044ac <UART_SetConfig+0x350>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	2230      	movs	r2, #48	; 0x30
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b30      	cmp	r3, #48	; 0x30
 80042fc:	d01d      	beq.n	800433a <UART_SetConfig+0x1de>
 80042fe:	d823      	bhi.n	8004348 <UART_SetConfig+0x1ec>
 8004300:	2b20      	cmp	r3, #32
 8004302:	d00c      	beq.n	800431e <UART_SetConfig+0x1c2>
 8004304:	d820      	bhi.n	8004348 <UART_SetConfig+0x1ec>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <UART_SetConfig+0x1b4>
 800430a:	2b10      	cmp	r3, #16
 800430c:	d00e      	beq.n	800432c <UART_SetConfig+0x1d0>
 800430e:	e01b      	b.n	8004348 <UART_SetConfig+0x1ec>
 8004310:	231b      	movs	r3, #27
 8004312:	2220      	movs	r2, #32
 8004314:	189b      	adds	r3, r3, r2
 8004316:	19db      	adds	r3, r3, r7
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e0e6      	b.n	80044ec <UART_SetConfig+0x390>
 800431e:	231b      	movs	r3, #27
 8004320:	2220      	movs	r2, #32
 8004322:	189b      	adds	r3, r3, r2
 8004324:	19db      	adds	r3, r3, r7
 8004326:	2202      	movs	r2, #2
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	e0df      	b.n	80044ec <UART_SetConfig+0x390>
 800432c:	231b      	movs	r3, #27
 800432e:	2220      	movs	r2, #32
 8004330:	189b      	adds	r3, r3, r2
 8004332:	19db      	adds	r3, r3, r7
 8004334:	2204      	movs	r2, #4
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e0d8      	b.n	80044ec <UART_SetConfig+0x390>
 800433a:	231b      	movs	r3, #27
 800433c:	2220      	movs	r2, #32
 800433e:	189b      	adds	r3, r3, r2
 8004340:	19db      	adds	r3, r3, r7
 8004342:	2208      	movs	r2, #8
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e0d1      	b.n	80044ec <UART_SetConfig+0x390>
 8004348:	231b      	movs	r3, #27
 800434a:	2220      	movs	r2, #32
 800434c:	189b      	adds	r3, r3, r2
 800434e:	19db      	adds	r3, r3, r7
 8004350:	2210      	movs	r2, #16
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e0ca      	b.n	80044ec <UART_SetConfig+0x390>
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <UART_SetConfig+0x35c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d106      	bne.n	800436e <UART_SetConfig+0x212>
 8004360:	231b      	movs	r3, #27
 8004362:	2220      	movs	r2, #32
 8004364:	189b      	adds	r3, r3, r2
 8004366:	19db      	adds	r3, r3, r7
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e0be      	b.n	80044ec <UART_SetConfig+0x390>
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a52      	ldr	r2, [pc, #328]	; (80044bc <UART_SetConfig+0x360>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d106      	bne.n	8004386 <UART_SetConfig+0x22a>
 8004378:	231b      	movs	r3, #27
 800437a:	2220      	movs	r2, #32
 800437c:	189b      	adds	r3, r3, r2
 800437e:	19db      	adds	r3, r3, r7
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e0b2      	b.n	80044ec <UART_SetConfig+0x390>
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a4d      	ldr	r2, [pc, #308]	; (80044c0 <UART_SetConfig+0x364>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d106      	bne.n	800439e <UART_SetConfig+0x242>
 8004390:	231b      	movs	r3, #27
 8004392:	2220      	movs	r2, #32
 8004394:	189b      	adds	r3, r3, r2
 8004396:	19db      	adds	r3, r3, r7
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e0a6      	b.n	80044ec <UART_SetConfig+0x390>
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3e      	ldr	r2, [pc, #248]	; (800449c <UART_SetConfig+0x340>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d13e      	bne.n	8004426 <UART_SetConfig+0x2ca>
 80043a8:	4b40      	ldr	r3, [pc, #256]	; (80044ac <UART_SetConfig+0x350>)
 80043aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ac:	23c0      	movs	r3, #192	; 0xc0
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	4013      	ands	r3, r2
 80043b2:	22c0      	movs	r2, #192	; 0xc0
 80043b4:	0112      	lsls	r2, r2, #4
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d027      	beq.n	800440a <UART_SetConfig+0x2ae>
 80043ba:	22c0      	movs	r2, #192	; 0xc0
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	4293      	cmp	r3, r2
 80043c0:	d82a      	bhi.n	8004418 <UART_SetConfig+0x2bc>
 80043c2:	2280      	movs	r2, #128	; 0x80
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d011      	beq.n	80043ee <UART_SetConfig+0x292>
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d822      	bhi.n	8004418 <UART_SetConfig+0x2bc>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <UART_SetConfig+0x284>
 80043d6:	2280      	movs	r2, #128	; 0x80
 80043d8:	00d2      	lsls	r2, r2, #3
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <UART_SetConfig+0x2a0>
 80043de:	e01b      	b.n	8004418 <UART_SetConfig+0x2bc>
 80043e0:	231b      	movs	r3, #27
 80043e2:	2220      	movs	r2, #32
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	19db      	adds	r3, r3, r7
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e07e      	b.n	80044ec <UART_SetConfig+0x390>
 80043ee:	231b      	movs	r3, #27
 80043f0:	2220      	movs	r2, #32
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e077      	b.n	80044ec <UART_SetConfig+0x390>
 80043fc:	231b      	movs	r3, #27
 80043fe:	2220      	movs	r2, #32
 8004400:	189b      	adds	r3, r3, r2
 8004402:	19db      	adds	r3, r3, r7
 8004404:	2204      	movs	r2, #4
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e070      	b.n	80044ec <UART_SetConfig+0x390>
 800440a:	231b      	movs	r3, #27
 800440c:	2220      	movs	r2, #32
 800440e:	189b      	adds	r3, r3, r2
 8004410:	19db      	adds	r3, r3, r7
 8004412:	2208      	movs	r2, #8
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e069      	b.n	80044ec <UART_SetConfig+0x390>
 8004418:	231b      	movs	r3, #27
 800441a:	2220      	movs	r2, #32
 800441c:	189b      	adds	r3, r3, r2
 800441e:	19db      	adds	r3, r3, r7
 8004420:	2210      	movs	r2, #16
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e062      	b.n	80044ec <UART_SetConfig+0x390>
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <UART_SetConfig+0x344>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d157      	bne.n	80044e0 <UART_SetConfig+0x384>
 8004430:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <UART_SetConfig+0x350>)
 8004432:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004434:	23c0      	movs	r3, #192	; 0xc0
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4013      	ands	r3, r2
 800443a:	22c0      	movs	r2, #192	; 0xc0
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <UART_SetConfig+0x368>
 8004442:	22c0      	movs	r2, #192	; 0xc0
 8004444:	0092      	lsls	r2, r2, #2
 8004446:	4293      	cmp	r3, r2
 8004448:	d843      	bhi.n	80044d2 <UART_SetConfig+0x376>
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	0092      	lsls	r2, r2, #2
 800444e:	4293      	cmp	r3, r2
 8004450:	d011      	beq.n	8004476 <UART_SetConfig+0x31a>
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	0092      	lsls	r2, r2, #2
 8004456:	4293      	cmp	r3, r2
 8004458:	d83b      	bhi.n	80044d2 <UART_SetConfig+0x376>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <UART_SetConfig+0x30c>
 800445e:	2280      	movs	r2, #128	; 0x80
 8004460:	0052      	lsls	r2, r2, #1
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <UART_SetConfig+0x328>
 8004466:	e034      	b.n	80044d2 <UART_SetConfig+0x376>
 8004468:	231b      	movs	r3, #27
 800446a:	2220      	movs	r2, #32
 800446c:	189b      	adds	r3, r3, r2
 800446e:	19db      	adds	r3, r3, r7
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e03a      	b.n	80044ec <UART_SetConfig+0x390>
 8004476:	231b      	movs	r3, #27
 8004478:	2220      	movs	r2, #32
 800447a:	189b      	adds	r3, r3, r2
 800447c:	19db      	adds	r3, r3, r7
 800447e:	2202      	movs	r2, #2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e033      	b.n	80044ec <UART_SetConfig+0x390>
 8004484:	231b      	movs	r3, #27
 8004486:	2220      	movs	r2, #32
 8004488:	189b      	adds	r3, r3, r2
 800448a:	19db      	adds	r3, r3, r7
 800448c:	2204      	movs	r2, #4
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e02c      	b.n	80044ec <UART_SetConfig+0x390>
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	cfff69f3 	.word	0xcfff69f3
 8004498:	ffffcfff 	.word	0xffffcfff
 800449c:	40008000 	.word	0x40008000
 80044a0:	40008400 	.word	0x40008400
 80044a4:	11fff4ff 	.word	0x11fff4ff
 80044a8:	40013800 	.word	0x40013800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40004400 	.word	0x40004400
 80044b4:	40004800 	.word	0x40004800
 80044b8:	40004c00 	.word	0x40004c00
 80044bc:	40005000 	.word	0x40005000
 80044c0:	40013c00 	.word	0x40013c00
 80044c4:	231b      	movs	r3, #27
 80044c6:	2220      	movs	r2, #32
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	2208      	movs	r2, #8
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e00c      	b.n	80044ec <UART_SetConfig+0x390>
 80044d2:	231b      	movs	r3, #27
 80044d4:	2220      	movs	r2, #32
 80044d6:	189b      	adds	r3, r3, r2
 80044d8:	19db      	adds	r3, r3, r7
 80044da:	2210      	movs	r2, #16
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e005      	b.n	80044ec <UART_SetConfig+0x390>
 80044e0:	231b      	movs	r3, #27
 80044e2:	2220      	movs	r2, #32
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	19db      	adds	r3, r3, r7
 80044e8:	2210      	movs	r2, #16
 80044ea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4ac1      	ldr	r2, [pc, #772]	; (80047f8 <UART_SetConfig+0x69c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d005      	beq.n	8004502 <UART_SetConfig+0x3a6>
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4ac0      	ldr	r2, [pc, #768]	; (80047fc <UART_SetConfig+0x6a0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d000      	beq.n	8004502 <UART_SetConfig+0x3a6>
 8004500:	e093      	b.n	800462a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004502:	231b      	movs	r3, #27
 8004504:	2220      	movs	r2, #32
 8004506:	189b      	adds	r3, r3, r2
 8004508:	19db      	adds	r3, r3, r7
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d015      	beq.n	800453c <UART_SetConfig+0x3e0>
 8004510:	dc18      	bgt.n	8004544 <UART_SetConfig+0x3e8>
 8004512:	2b04      	cmp	r3, #4
 8004514:	d00d      	beq.n	8004532 <UART_SetConfig+0x3d6>
 8004516:	dc15      	bgt.n	8004544 <UART_SetConfig+0x3e8>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <UART_SetConfig+0x3c6>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d005      	beq.n	800452c <UART_SetConfig+0x3d0>
 8004520:	e010      	b.n	8004544 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004522:	f7fe ff8d 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8004526:	0003      	movs	r3, r0
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800452a:	e014      	b.n	8004556 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4bb4      	ldr	r3, [pc, #720]	; (8004800 <UART_SetConfig+0x6a4>)
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004530:	e011      	b.n	8004556 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe fef9 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 8004536:	0003      	movs	r3, r0
 8004538:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800453a:	e00c      	b.n	8004556 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004542:	e008      	b.n	8004556 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004548:	231a      	movs	r3, #26
 800454a:	2220      	movs	r2, #32
 800454c:	189b      	adds	r3, r3, r2
 800454e:	19db      	adds	r3, r3, r7
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
        break;
 8004554:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <UART_SetConfig+0x402>
 800455c:	e135      	b.n	80047ca <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004562:	4ba8      	ldr	r3, [pc, #672]	; (8004804 <UART_SetConfig+0x6a8>)
 8004564:	0052      	lsls	r2, r2, #1
 8004566:	5ad3      	ldrh	r3, [r2, r3]
 8004568:	0019      	movs	r1, r3
 800456a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800456c:	f7fb fdca 	bl	8000104 <__udivsi3>
 8004570:	0003      	movs	r3, r0
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	0013      	movs	r3, r2
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	189b      	adds	r3, r3, r2
 800457e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004580:	429a      	cmp	r2, r3
 8004582:	d305      	bcc.n	8004590 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800458a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458c:	429a      	cmp	r2, r3
 800458e:	d906      	bls.n	800459e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004590:	231a      	movs	r3, #26
 8004592:	2220      	movs	r2, #32
 8004594:	189b      	adds	r3, r3, r2
 8004596:	19db      	adds	r3, r3, r7
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e044      	b.n	8004628 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045aa:	4b96      	ldr	r3, [pc, #600]	; (8004804 <UART_SetConfig+0x6a8>)
 80045ac:	0052      	lsls	r2, r2, #1
 80045ae:	5ad3      	ldrh	r3, [r2, r3]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	69b8      	ldr	r0, [r7, #24]
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	f7fb ff17 	bl	80003f0 <__aeabi_uldivmod>
 80045c2:	0002      	movs	r2, r0
 80045c4:	000b      	movs	r3, r1
 80045c6:	0e11      	lsrs	r1, r2, #24
 80045c8:	021d      	lsls	r5, r3, #8
 80045ca:	430d      	orrs	r5, r1
 80045cc:	0214      	lsls	r4, r2, #8
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	1900      	adds	r0, r0, r4
 80045e0:	4169      	adcs	r1, r5
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f7fb fefe 	bl	80003f0 <__aeabi_uldivmod>
 80045f4:	0002      	movs	r2, r0
 80045f6:	000b      	movs	r3, r1
 80045f8:	0013      	movs	r3, r2
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fe:	23c0      	movs	r3, #192	; 0xc0
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	429a      	cmp	r2, r3
 8004604:	d309      	bcc.n	800461a <UART_SetConfig+0x4be>
 8004606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	035b      	lsls	r3, r3, #13
 800460c:	429a      	cmp	r2, r3
 800460e:	d204      	bcs.n	800461a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e006      	b.n	8004628 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800461a:	231a      	movs	r3, #26
 800461c:	2220      	movs	r2, #32
 800461e:	189b      	adds	r3, r3, r2
 8004620:	19db      	adds	r3, r3, r7
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004626:	e0d0      	b.n	80047ca <UART_SetConfig+0x66e>
 8004628:	e0cf      	b.n	80047ca <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	69da      	ldr	r2, [r3, #28]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	429a      	cmp	r2, r3
 8004634:	d000      	beq.n	8004638 <UART_SetConfig+0x4dc>
 8004636:	e070      	b.n	800471a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004638:	231b      	movs	r3, #27
 800463a:	2220      	movs	r2, #32
 800463c:	189b      	adds	r3, r3, r2
 800463e:	19db      	adds	r3, r3, r7
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b08      	cmp	r3, #8
 8004644:	d015      	beq.n	8004672 <UART_SetConfig+0x516>
 8004646:	dc18      	bgt.n	800467a <UART_SetConfig+0x51e>
 8004648:	2b04      	cmp	r3, #4
 800464a:	d00d      	beq.n	8004668 <UART_SetConfig+0x50c>
 800464c:	dc15      	bgt.n	800467a <UART_SetConfig+0x51e>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <UART_SetConfig+0x4fc>
 8004652:	2b02      	cmp	r3, #2
 8004654:	d005      	beq.n	8004662 <UART_SetConfig+0x506>
 8004656:	e010      	b.n	800467a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7fe fef2 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 800465c:	0003      	movs	r3, r0
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004660:	e014      	b.n	800468c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004662:	4b67      	ldr	r3, [pc, #412]	; (8004800 <UART_SetConfig+0x6a4>)
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004666:	e011      	b.n	800468c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004668:	f7fe fe5e 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800466c:	0003      	movs	r3, r0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004670:	e00c      	b.n	800468c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004678:	e008      	b.n	800468c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800467e:	231a      	movs	r3, #26
 8004680:	2220      	movs	r2, #32
 8004682:	189b      	adds	r3, r3, r2
 8004684:	19db      	adds	r3, r3, r7
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
        break;
 800468a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	2b00      	cmp	r3, #0
 8004690:	d100      	bne.n	8004694 <UART_SetConfig+0x538>
 8004692:	e09a      	b.n	80047ca <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004698:	4b5a      	ldr	r3, [pc, #360]	; (8004804 <UART_SetConfig+0x6a8>)
 800469a:	0052      	lsls	r2, r2, #1
 800469c:	5ad3      	ldrh	r3, [r2, r3]
 800469e:	0019      	movs	r1, r3
 80046a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046a2:	f7fb fd2f 	bl	8000104 <__udivsi3>
 80046a6:	0003      	movs	r3, r0
 80046a8:	005a      	lsls	r2, r3, #1
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	18d2      	adds	r2, r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	0019      	movs	r1, r3
 80046b8:	0010      	movs	r0, r2
 80046ba:	f7fb fd23 	bl	8000104 <__udivsi3>
 80046be:	0003      	movs	r3, r0
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	2b0f      	cmp	r3, #15
 80046c6:	d921      	bls.n	800470c <UART_SetConfig+0x5b0>
 80046c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	025b      	lsls	r3, r3, #9
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d21c      	bcs.n	800470c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	200e      	movs	r0, #14
 80046d8:	2420      	movs	r4, #32
 80046da:	1903      	adds	r3, r0, r4
 80046dc:	19db      	adds	r3, r3, r7
 80046de:	210f      	movs	r1, #15
 80046e0:	438a      	bics	r2, r1
 80046e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2207      	movs	r2, #7
 80046ec:	4013      	ands	r3, r2
 80046ee:	b299      	uxth	r1, r3
 80046f0:	1903      	adds	r3, r0, r4
 80046f2:	19db      	adds	r3, r3, r7
 80046f4:	1902      	adds	r2, r0, r4
 80046f6:	19d2      	adds	r2, r2, r7
 80046f8:	8812      	ldrh	r2, [r2, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	1902      	adds	r2, r0, r4
 8004704:	19d2      	adds	r2, r2, r7
 8004706:	8812      	ldrh	r2, [r2, #0]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	e05e      	b.n	80047ca <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800470c:	231a      	movs	r3, #26
 800470e:	2220      	movs	r2, #32
 8004710:	189b      	adds	r3, r3, r2
 8004712:	19db      	adds	r3, r3, r7
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e057      	b.n	80047ca <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800471a:	231b      	movs	r3, #27
 800471c:	2220      	movs	r2, #32
 800471e:	189b      	adds	r3, r3, r2
 8004720:	19db      	adds	r3, r3, r7
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d015      	beq.n	8004754 <UART_SetConfig+0x5f8>
 8004728:	dc18      	bgt.n	800475c <UART_SetConfig+0x600>
 800472a:	2b04      	cmp	r3, #4
 800472c:	d00d      	beq.n	800474a <UART_SetConfig+0x5ee>
 800472e:	dc15      	bgt.n	800475c <UART_SetConfig+0x600>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <UART_SetConfig+0x5de>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d005      	beq.n	8004744 <UART_SetConfig+0x5e8>
 8004738:	e010      	b.n	800475c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473a:	f7fe fe81 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 800473e:	0003      	movs	r3, r0
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004742:	e014      	b.n	800476e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004744:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <UART_SetConfig+0x6a4>)
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004748:	e011      	b.n	800476e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474a:	f7fe fded 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800474e:	0003      	movs	r3, r0
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004752:	e00c      	b.n	800476e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800475a:	e008      	b.n	800476e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004760:	231a      	movs	r3, #26
 8004762:	2220      	movs	r2, #32
 8004764:	189b      	adds	r3, r3, r2
 8004766:	19db      	adds	r3, r3, r7
 8004768:	2201      	movs	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
        break;
 800476c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800476e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02a      	beq.n	80047ca <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004778:	4b22      	ldr	r3, [pc, #136]	; (8004804 <UART_SetConfig+0x6a8>)
 800477a:	0052      	lsls	r2, r2, #1
 800477c:	5ad3      	ldrh	r3, [r2, r3]
 800477e:	0019      	movs	r1, r3
 8004780:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004782:	f7fb fcbf 	bl	8000104 <__udivsi3>
 8004786:	0003      	movs	r3, r0
 8004788:	001a      	movs	r2, r3
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	18d2      	adds	r2, r2, r3
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	0019      	movs	r1, r3
 8004798:	0010      	movs	r0, r2
 800479a:	f7fb fcb3 	bl	8000104 <__udivsi3>
 800479e:	0003      	movs	r3, r0
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	d90a      	bls.n	80047be <UART_SetConfig+0x662>
 80047a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	025b      	lsls	r3, r3, #9
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d205      	bcs.n	80047be <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e005      	b.n	80047ca <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80047be:	231a      	movs	r3, #26
 80047c0:	2220      	movs	r2, #32
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	19db      	adds	r3, r3, r7
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	226a      	movs	r2, #106	; 0x6a
 80047ce:	2101      	movs	r1, #1
 80047d0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	2268      	movs	r2, #104	; 0x68
 80047d6:	2101      	movs	r1, #1
 80047d8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2200      	movs	r2, #0
 80047de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2200      	movs	r2, #0
 80047e4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80047e6:	231a      	movs	r3, #26
 80047e8:	2220      	movs	r2, #32
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	19db      	adds	r3, r3, r7
 80047ee:	781b      	ldrb	r3, [r3, #0]
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b010      	add	sp, #64	; 0x40
 80047f6:	bdb0      	pop	{r4, r5, r7, pc}
 80047f8:	40008000 	.word	0x40008000
 80047fc:	40008400 	.word	0x40008400
 8004800:	00f42400 	.word	0x00f42400
 8004804:	08005f80 	.word	0x08005f80

08004808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	2208      	movs	r2, #8
 8004816:	4013      	ands	r3, r2
 8004818:	d00b      	beq.n	8004832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a4a      	ldr	r2, [pc, #296]	; (800494c <UART_AdvFeatureConfig+0x144>)
 8004822:	4013      	ands	r3, r2
 8004824:	0019      	movs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	2201      	movs	r2, #1
 8004838:	4013      	ands	r3, r2
 800483a:	d00b      	beq.n	8004854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a43      	ldr	r2, [pc, #268]	; (8004950 <UART_AdvFeatureConfig+0x148>)
 8004844:	4013      	ands	r3, r2
 8004846:	0019      	movs	r1, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	2202      	movs	r2, #2
 800485a:	4013      	ands	r3, r2
 800485c:	d00b      	beq.n	8004876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <UART_AdvFeatureConfig+0x14c>)
 8004866:	4013      	ands	r3, r2
 8004868:	0019      	movs	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	2204      	movs	r2, #4
 800487c:	4013      	ands	r3, r2
 800487e:	d00b      	beq.n	8004898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4a34      	ldr	r2, [pc, #208]	; (8004958 <UART_AdvFeatureConfig+0x150>)
 8004888:	4013      	ands	r3, r2
 800488a:	0019      	movs	r1, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	2210      	movs	r2, #16
 800489e:	4013      	ands	r3, r2
 80048a0:	d00b      	beq.n	80048ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a2c      	ldr	r2, [pc, #176]	; (800495c <UART_AdvFeatureConfig+0x154>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	2220      	movs	r2, #32
 80048c0:	4013      	ands	r3, r2
 80048c2:	d00b      	beq.n	80048dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4a25      	ldr	r2, [pc, #148]	; (8004960 <UART_AdvFeatureConfig+0x158>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	2240      	movs	r2, #64	; 0x40
 80048e2:	4013      	ands	r3, r2
 80048e4:	d01d      	beq.n	8004922 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <UART_AdvFeatureConfig+0x15c>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	0019      	movs	r1, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	035b      	lsls	r3, r3, #13
 8004906:	429a      	cmp	r2, r3
 8004908:	d10b      	bne.n	8004922 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <UART_AdvFeatureConfig+0x160>)
 8004912:	4013      	ands	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	4013      	ands	r3, r2
 800492a:	d00b      	beq.n	8004944 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <UART_AdvFeatureConfig+0x164>)
 8004934:	4013      	ands	r3, r2
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b002      	add	sp, #8
 800494a:	bd80      	pop	{r7, pc}
 800494c:	ffff7fff 	.word	0xffff7fff
 8004950:	fffdffff 	.word	0xfffdffff
 8004954:	fffeffff 	.word	0xfffeffff
 8004958:	fffbffff 	.word	0xfffbffff
 800495c:	ffffefff 	.word	0xffffefff
 8004960:	ffffdfff 	.word	0xffffdfff
 8004964:	ffefffff 	.word	0xffefffff
 8004968:	ff9fffff 	.word	0xff9fffff
 800496c:	fff7ffff 	.word	0xfff7ffff

08004970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b092      	sub	sp, #72	; 0x48
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2290      	movs	r2, #144	; 0x90
 800497c:	2100      	movs	r1, #0
 800497e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004980:	f7fc fad0 	bl	8000f24 <HAL_GetTick>
 8004984:	0003      	movs	r3, r0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2208      	movs	r2, #8
 8004990:	4013      	ands	r3, r2
 8004992:	2b08      	cmp	r3, #8
 8004994:	d12d      	bne.n	80049f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004998:	2280      	movs	r2, #128	; 0x80
 800499a:	0391      	lsls	r1, r2, #14
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4a47      	ldr	r2, [pc, #284]	; (8004abc <UART_CheckIdleState+0x14c>)
 80049a0:	9200      	str	r2, [sp, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f000 f88e 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d022      	beq.n	80049f2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ac:	f3ef 8310 	mrs	r3, PRIMASK
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b6:	2301      	movs	r3, #1
 80049b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	438a      	bics	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	f383 8810 	msr	PRIMASK, r3
}
 80049dc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2288      	movs	r2, #136	; 0x88
 80049e2:	2120      	movs	r1, #32
 80049e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2284      	movs	r2, #132	; 0x84
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e060      	b.n	8004ab4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2204      	movs	r2, #4
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d146      	bne.n	8004a8e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	03d1      	lsls	r1, r2, #15
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <UART_CheckIdleState+0x14c>)
 8004a0a:	9200      	str	r2, [sp, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f000 f859 	bl	8004ac4 <UART_WaitOnFlagUntilTimeout>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d03b      	beq.n	8004a8e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a16:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a20:	2301      	movs	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4922      	ldr	r1, [pc, #136]	; (8004ac0 <UART_CheckIdleState+0x150>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f383 8810 	msr	PRIMASK, r3
}
 8004a46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a48:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
 8004a52:	2301      	movs	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	438a      	bics	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f383 8810 	msr	PRIMASK, r3
}
 8004a78:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	228c      	movs	r2, #140	; 0x8c
 8004a7e:	2120      	movs	r1, #32
 8004a80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2284      	movs	r2, #132	; 0x84
 8004a86:	2100      	movs	r1, #0
 8004a88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e012      	b.n	8004ab4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2288      	movs	r2, #136	; 0x88
 8004a92:	2120      	movs	r1, #32
 8004a94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	228c      	movs	r2, #140	; 0x8c
 8004a9a:	2120      	movs	r1, #32
 8004a9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2284      	movs	r2, #132	; 0x84
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b010      	add	sp, #64	; 0x40
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	01ffffff 	.word	0x01ffffff
 8004ac0:	fffffedf 	.word	0xfffffedf

08004ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	1dfb      	adds	r3, r7, #7
 8004ad2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	e051      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	d04e      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004adc:	f7fc fa22 	bl	8000f24 <HAL_GetTick>
 8004ae0:	0002      	movs	r2, r0
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e051      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2204      	movs	r2, #4
 8004afe:	4013      	ands	r3, r2
 8004b00:	d03b      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d038      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d035      	beq.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	2208      	movs	r2, #8
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d111      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2208      	movs	r2, #8
 8004b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 f83c 	bl	8004ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2290      	movs	r2, #144	; 0x90
 8004b30:	2108      	movs	r1, #8
 8004b32:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2284      	movs	r2, #132	; 0x84
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e02c      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d112      	bne.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f81f 	bl	8004ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2290      	movs	r2, #144	; 0x90
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2284      	movs	r2, #132	; 0x84
 8004b72:	2100      	movs	r1, #0
 8004b74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	4013      	ands	r3, r2
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	425a      	negs	r2, r3
 8004b8a:	4153      	adcs	r3, r2
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	001a      	movs	r2, r3
 8004b90:	1dfb      	adds	r3, r7, #7
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d09e      	beq.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08e      	sub	sp, #56	; 0x38
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bac:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	f383 8810 	msr	PRIMASK, r3
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4926      	ldr	r1, [pc, #152]	; (8004c68 <UART_EndRxTransfer+0xc4>)
 8004bce:	400a      	ands	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	623b      	str	r3, [r7, #32]
  return(result);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
 8004be8:	2301      	movs	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	491b      	ldr	r1, [pc, #108]	; (8004c6c <UART_EndRxTransfer+0xc8>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d118      	bne.n	8004c4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c22:	2301      	movs	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2110      	movs	r1, #16
 8004c3a:	438a      	bics	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	228c      	movs	r2, #140	; 0x8c
 8004c4e:	2120      	movs	r1, #32
 8004c50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b00e      	add	sp, #56	; 0x38
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	fffffedf 	.word	0xfffffedf
 8004c6c:	effffffe 	.word	0xeffffffe

08004c70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	225e      	movs	r2, #94	; 0x5e
 8004c82:	2100      	movs	r1, #0
 8004c84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2256      	movs	r2, #86	; 0x56
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7ff fa4f 	bl	8004134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8004caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f383 8810 	msr	PRIMASK, r3
}
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2140      	movs	r1, #64	; 0x40
 8004cc8:	438a      	bics	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f383 8810 	msr	PRIMASK, r3
}
 8004cd6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2288      	movs	r2, #136	; 0x88
 8004cdc:	2120      	movs	r1, #32
 8004cde:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f7ff fa1b 	bl	8004124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b006      	add	sp, #24
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b002      	add	sp, #8
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2284      	movs	r2, #132	; 0x84
 8004d34:	5c9b      	ldrb	r3, [r3, r2]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e027      	b.n	8004d8e <HAL_UARTEx_DisableFifoMode+0x66>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2284      	movs	r2, #132	; 0x84
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2288      	movs	r2, #136	; 0x88
 8004d4a:	2124      	movs	r1, #36	; 0x24
 8004d4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2101      	movs	r1, #1
 8004d62:	438a      	bics	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2288      	movs	r2, #136	; 0x88
 8004d80:	2120      	movs	r1, #32
 8004d82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2284      	movs	r2, #132	; 0x84
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b004      	add	sp, #16
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	dfffffff 	.word	0xdfffffff

08004d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2284      	movs	r2, #132	; 0x84
 8004daa:	5c9b      	ldrb	r3, [r3, r2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e02e      	b.n	8004e12 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2284      	movs	r2, #132	; 0x84
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2288      	movs	r2, #136	; 0x88
 8004dc0:	2124      	movs	r1, #36	; 0x24
 8004dc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	438a      	bics	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	08d9      	lsrs	r1, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f000 f854 	bl	8004ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2288      	movs	r2, #136	; 0x88
 8004e04:	2120      	movs	r1, #32
 8004e06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2284      	movs	r2, #132	; 0x84
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2284      	movs	r2, #132	; 0x84
 8004e2a:	5c9b      	ldrb	r3, [r3, r2]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e02f      	b.n	8004e94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2284      	movs	r2, #132	; 0x84
 8004e38:	2101      	movs	r1, #1
 8004e3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2288      	movs	r2, #136	; 0x88
 8004e40:	2124      	movs	r1, #36	; 0x24
 8004e42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2101      	movs	r1, #1
 8004e58:	438a      	bics	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	0019      	movs	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0018      	movs	r0, r3
 8004e76:	f000 f813 	bl	8004ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2288      	movs	r2, #136	; 0x88
 8004e86:	2120      	movs	r1, #32
 8004e88:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2284      	movs	r2, #132	; 0x84
 8004e8e:	2100      	movs	r1, #0
 8004e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b004      	add	sp, #16
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	f1ffffff 	.word	0xf1ffffff

08004ea0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d108      	bne.n	8004ec2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	226a      	movs	r2, #106	; 0x6a
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2268      	movs	r2, #104	; 0x68
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ec0:	e043      	b.n	8004f4a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ec2:	260f      	movs	r6, #15
 8004ec4:	19bb      	adds	r3, r7, r6
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eca:	200e      	movs	r0, #14
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	2208      	movs	r2, #8
 8004ed0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	0e5b      	lsrs	r3, r3, #25
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	240d      	movs	r4, #13
 8004ede:	193b      	adds	r3, r7, r4
 8004ee0:	2107      	movs	r1, #7
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	0f5b      	lsrs	r3, r3, #29
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	250c      	movs	r5, #12
 8004ef2:	197b      	adds	r3, r7, r5
 8004ef4:	2107      	movs	r1, #7
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004efa:	183b      	adds	r3, r7, r0
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	197a      	adds	r2, r7, r5
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	4914      	ldr	r1, [pc, #80]	; (8004f54 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f04:	5c8a      	ldrb	r2, [r1, r2]
 8004f06:	435a      	muls	r2, r3
 8004f08:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f0a:	197b      	adds	r3, r7, r5
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <UARTEx_SetNbDataToProcess+0xb8>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f12:	0019      	movs	r1, r3
 8004f14:	f7fb f980 	bl	8000218 <__divsi3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	b299      	uxth	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	226a      	movs	r2, #106	; 0x6a
 8004f20:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f22:	19bb      	adds	r3, r7, r6
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	193a      	adds	r2, r7, r4
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	490a      	ldr	r1, [pc, #40]	; (8004f54 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f2c:	5c8a      	ldrb	r2, [r1, r2]
 8004f2e:	435a      	muls	r2, r3
 8004f30:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <UARTEx_SetNbDataToProcess+0xb8>)
 8004f38:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f3a:	0019      	movs	r1, r3
 8004f3c:	f7fb f96c 	bl	8000218 <__divsi3>
 8004f40:	0003      	movs	r3, r0
 8004f42:	b299      	uxth	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2268      	movs	r2, #104	; 0x68
 8004f48:	5299      	strh	r1, [r3, r2]
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b005      	add	sp, #20
 8004f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	08005f98 	.word	0x08005f98
 8004f58:	08005fa0 	.word	0x08005fa0

08004f5c <enterNormalMode>:
{
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
}

void enterNormalMode(void)									//正常模式
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_SET);		//CAN1_STB
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <enterNormalMode+0x28>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7fd fd0c 	bl	8002984 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FDCAN1_EN_GPIO_Port, FDCAN1_EN_Pin, GPIO_PIN_SET);		//CAN1_EN
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	0219      	lsls	r1, r3, #8
 8004f70:	23a0      	movs	r3, #160	; 0xa0
 8004f72:	05db      	lsls	r3, r3, #23
 8004f74:	2201      	movs	r2, #1
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7fd fd04 	bl	8002984 <HAL_GPIO_WritePin>
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	50000800 	.word	0x50000800

08004f88 <GetReadOutProtectionStatus>:

FlagStatus GetReadOutProtectionStatus(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	FlagStatus status;

	if (FLASH_GetReadOutProtectionLevel() != OB_RDP_LEVEL_0)
 8004f8e:	f000 f810 	bl	8004fb2 <FLASH_GetReadOutProtectionLevel>
 8004f92:	0003      	movs	r3, r0
 8004f94:	2baa      	cmp	r3, #170	; 0xaa
 8004f96:	d003      	beq.n	8004fa0 <GetReadOutProtectionStatus+0x18>
	{
		status = SET;
 8004f98:	1dfb      	adds	r3, r7, #7
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e002      	b.n	8004fa6 <GetReadOutProtectionStatus+0x1e>
	}
	else
	{
		status = RESET;
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004fa6:	1dfb      	adds	r3, r7, #7
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <FLASH_GetReadOutProtectionLevel>:

uint32_t FLASH_GetReadOutProtectionLevel(void)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b094      	sub	sp, #80	; 0x50
 8004fb6:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef flash_ob;

	/* Get the Option bytes configuration */
	HAL_FLASHEx_OBGetConfig(&flash_ob);
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7fd f88c 	bl	80020d8 <HAL_FLASHEx_OBGetConfig>

	return flash_ob.RDPLevel;
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	691b      	ldr	r3, [r3, #16]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b014      	add	sp, #80	; 0x50
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <FLASH_Read>:

uint8_t FLASH_Read(uint32_t Address)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return (*(uint8_t *)(Address));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
}
 8004fd8:	0018      	movs	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b002      	add	sp, #8
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <FDCAN_Config>:
uint8_t TxData[64];
FDCAN_TxHeaderTypeDef TxHeader;
FDCanRxHeader header;

void FDCAN_Config(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <FDCAN_Config+0x74>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
	hfdcan_filter.FilterIndex = 0;
 8004fea:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <FDCAN_Config+0x74>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	605a      	str	r2, [r3, #4]
	hfdcan_filter.FilterType = FDCAN_FILTER_MASK;
 8004ff0:	4b18      	ldr	r3, [pc, #96]	; (8005054 <FDCAN_Config+0x74>)
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	609a      	str	r2, [r3, #8]
	hfdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004ff6:	4b17      	ldr	r3, [pc, #92]	; (8005054 <FDCAN_Config+0x74>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	60da      	str	r2, [r3, #12]
	hfdcan_filter.FilterID1 = 0x111;
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <FDCAN_Config+0x74>)
 8004ffe:	2212      	movs	r2, #18
 8005000:	32ff      	adds	r2, #255	; 0xff
 8005002:	611a      	str	r2, [r3, #16]
	hfdcan_filter.FilterID2 = 0x7FF;
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <FDCAN_Config+0x74>)
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <FDCAN_Config+0x78>)
 8005008:	615a      	str	r2, [r3, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <FDCAN_Config+0x74>)
 800500c:	4b13      	ldr	r3, [pc, #76]	; (800505c <FDCAN_Config+0x7c>)
 800500e:	0011      	movs	r1, r2
 8005010:	0018      	movs	r0, r3
 8005012:	f7fc fad7 	bl	80015c4 <HAL_FDCAN_ConfigFilter>
 8005016:	1e03      	subs	r3, r0, #0
 8005018:	d001      	beq.n	800501e <FDCAN_Config+0x3e>
	{
		Error_Handler();
 800501a:	f7fb fd25 	bl	8000a68 <Error_Handler>
	}

	/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, hfdcan1.Init.DataPrescaler * hfdcan1.Init.DataTimeSeg1, 0) != HAL_OK)
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <FDCAN_Config+0x7c>)
 8005020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005022:	4b0e      	ldr	r3, [pc, #56]	; (800505c <FDCAN_Config+0x7c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4353      	muls	r3, r2
 8005028:	0019      	movs	r1, r3
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <FDCAN_Config+0x7c>)
 800502c:	2200      	movs	r2, #0
 800502e:	0018      	movs	r0, r3
 8005030:	f7fc fb25 	bl	800167e <HAL_FDCAN_ConfigTxDelayCompensation>
 8005034:	1e03      	subs	r3, r0, #0
 8005036:	d001      	beq.n	800503c <FDCAN_Config+0x5c>
	{
		Error_Handler();
 8005038:	f7fb fd16 	bl	8000a68 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <FDCAN_Config+0x7c>)
 800503e:	0018      	movs	r0, r3
 8005040:	f7fc fb3d 	bl	80016be <HAL_FDCAN_EnableTxDelayCompensation>
 8005044:	1e03      	subs	r3, r0, #0
 8005046:	d001      	beq.n	800504c <FDCAN_Config+0x6c>
	{
		Error_Handler();
 8005048:	f7fb fd0e 	bl	8000a68 <Error_Handler>
	}
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	20000084 	.word	0x20000084
 8005058:	000007ff 	.word	0x000007ff
 800505c:	2000009c 	.word	0x2000009c

08005060 <FDCAN_Enable>:

void FDCAN_Enable(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	FDCAN_Config();
 8005064:	f7ff ffbc 	bl	8004fe0 <FDCAN_Config>
	enterNormalMode();											//CAN收发器正常模�?????
 8005068:	f7ff ff78 	bl	8004f5c <enterNormalMode>
	HAL_Delay(5);
 800506c:	2005      	movs	r0, #5
 800506e:	f7fb ff63 	bl	8000f38 <HAL_Delay>

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)		//使能FIFO0新消息中�?????
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <FDCAN_Enable+0x80>)
 8005074:	2200      	movs	r2, #0
 8005076:	2101      	movs	r1, #1
 8005078:	0018      	movs	r0, r3
 800507a:	f7fc fce5 	bl	8001a48 <HAL_FDCAN_ActivateNotification>
 800507e:	1e03      	subs	r3, r0, #0
 8005080:	d001      	beq.n	8005086 <FDCAN_Enable+0x26>
	{
		Error_Handler();
 8005082:	f7fb fcf1 	bl	8000a68 <Error_Handler>
	}
	if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)														//使能FDCAN
 8005086:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <FDCAN_Enable+0x80>)
 8005088:	0018      	movs	r0, r3
 800508a:	f7fc fb38 	bl	80016fe <HAL_FDCAN_Start>
 800508e:	1e03      	subs	r3, r0, #0
 8005090:	d001      	beq.n	8005096 <FDCAN_Enable+0x36>
	{
		Error_Handler();
 8005092:	f7fb fce9 	bl	8000a68 <Error_Handler>
	}

	isCommandID = 1;
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <FDCAN_Enable+0x84>)
 8005098:	2201      	movs	r2, #1
 800509a:	701a      	strb	r2, [r3, #0]

	TxHeader.Identifier = 0x111;
 800509c:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <FDCAN_Enable+0x88>)
 800509e:	2212      	movs	r2, #18
 80050a0:	32ff      	adds	r2, #255	; 0xff
 80050a2:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <FDCAN_Enable+0x88>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <FDCAN_Enable+0x88>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <FDCAN_Enable+0x88>)
 80050b2:	220f      	movs	r2, #15
 80050b4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <FDCAN_Enable+0x88>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <FDCAN_Enable+0x88>)
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	0352      	lsls	r2, r2, #13
 80050c2:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <FDCAN_Enable+0x88>)
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	0392      	lsls	r2, r2, #14
 80050ca:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <FDCAN_Enable+0x88>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker       = 0;
 80050d2:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <FDCAN_Enable+0x88>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	2000009c 	.word	0x2000009c
 80050e4:	2000019c 	.word	0x2000019c
 80050e8:	200001e0 	.word	0x200001e0

080050ec <FDCAN_ReadByte>:
	header->TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
	header->MessageMarker       = 0;
}

uint8_t FDCAN_ReadByte(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
	/* check if FIFO 0 receive at least one message */
	while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) < 1);
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <FDCAN_ReadByte+0x2c>)
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7fc fc7a 	bl	80019f0 <HAL_FDCAN_GetRxFifoFillLevel>
 80050fc:	1e03      	subs	r3, r0, #0
 80050fe:	d0f8      	beq.n	80050f2 <FDCAN_ReadByte+0x6>

	/* Retrieve Rx messages from RX FIFO0 */
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <FDCAN_ReadByte+0x30>)
 8005102:	4a07      	ldr	r2, [pc, #28]	; (8005120 <FDCAN_ReadByte+0x34>)
 8005104:	4804      	ldr	r0, [pc, #16]	; (8005118 <FDCAN_ReadByte+0x2c>)
 8005106:	2140      	movs	r1, #64	; 0x40
 8005108:	f7fc fb64 	bl	80017d4 <HAL_FDCAN_GetRxMessage>

	return *(header.data);
 800510c:	4b04      	ldr	r3, [pc, #16]	; (8005120 <FDCAN_ReadByte+0x34>)
 800510e:	2228      	movs	r2, #40	; 0x28
 8005110:	5c9b      	ldrb	r3, [r3, r2]
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2000009c 	.word	0x2000009c
 800511c:	2000022c 	.word	0x2000022c
 8005120:	20000204 	.word	0x20000204

08005124 <FDCAN_SendByte>:

void FDCAN_SendByte(uint8_t byte)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	0002      	movs	r2, r0
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	701a      	strb	r2, [r3, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <FDCAN_SendByte+0x64>)
 8005132:	2201      	movs	r2, #1
 8005134:	60da      	str	r2, [r3, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <FDCAN_SendByte+0x68>)
 800513a:	0018      	movs	r0, r3
 800513c:	f7fc fc74 	bl	8001a28 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005140:	1e03      	subs	r3, r0, #0
 8005142:	d0f9      	beq.n	8005138 <FDCAN_SendByte+0x14>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,&byte);
 8005144:	1dfa      	adds	r2, r7, #7
 8005146:	4910      	ldr	r1, [pc, #64]	; (8005188 <FDCAN_SendByte+0x64>)
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <FDCAN_SendByte+0x68>)
 800514a:	0018      	movs	r0, r3
 800514c:	f7fc fafd 	bl	800174a <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE );
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <FDCAN_SendByte+0x68>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	401a      	ands	r2, r3
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	429a      	cmp	r2, r3
 8005164:	d1f5      	bne.n	8005152 <FDCAN_SendByte+0x2e>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <FDCAN_SendByte+0x68>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <FDCAN_SendByte+0x68>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2280      	movs	r2, #128	; 0x80
 8005172:	0092      	lsls	r2, r2, #2
 8005174:	400a      	ands	r2, r1
 8005176:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8005178:	2001      	movs	r0, #1
 800517a:	f7fb fedd 	bl	8000f38 <HAL_Delay>
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	200001e0 	.word	0x200001e0
 800518c:	2000009c 	.word	0x2000009c

08005190 <FDCAN_SendBytes>:

void FDCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	TxHeader.DataLength = BufferSize;
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <FDCAN_SendBytes+0x60>)
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	60da      	str	r2, [r3, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <FDCAN_SendBytes+0x64>)
 80051a4:	0018      	movs	r0, r3
 80051a6:	f7fc fc3f 	bl	8001a28 <HAL_FDCAN_GetTxFifoFreeLevel>
 80051aa:	1e03      	subs	r3, r0, #0
 80051ac:	d0f9      	beq.n	80051a2 <FDCAN_SendBytes+0x12>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Buffer);
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	490f      	ldr	r1, [pc, #60]	; (80051f0 <FDCAN_SendBytes+0x60>)
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <FDCAN_SendBytes+0x64>)
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fc fac8 	bl	800174a <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE);
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <FDCAN_SendBytes+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	401a      	ands	r2, r3
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d1f5      	bne.n	80051bc <FDCAN_SendBytes+0x2c>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <FDCAN_SendBytes+0x64>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <FDCAN_SendBytes+0x64>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2280      	movs	r2, #128	; 0x80
 80051dc:	0092      	lsls	r2, r2, #2
 80051de:	400a      	ands	r2, r1
 80051e0:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7fb fea8 	bl	8000f38 <HAL_Delay>
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200001e0 	.word	0x200001e0
 80051f4:	2000009c 	.word	0x2000009c

080051f8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)			//接收中断回调函数重写
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	d00d      	beq.n	8005226 <HAL_FDCAN_RxFifo0Callback+0x2e>
	{
	  /* Retrieve Rx messages from RX FIFO0 */
		if(isCommandID == 1)
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d103      	bne.n	800521a <HAL_FDCAN_RxFifo0Callback+0x22>
		{
			isSelectID = 1;
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
		else
		{
			HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
		}
	}
}
 8005218:	e005      	b.n	8005226 <HAL_FDCAN_RxFifo0Callback+0x2e>
			HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800521c:	4a07      	ldr	r2, [pc, #28]	; (800523c <HAL_FDCAN_RxFifo0Callback+0x44>)
 800521e:	4808      	ldr	r0, [pc, #32]	; (8005240 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	f7fc fad7 	bl	80017d4 <HAL_FDCAN_GetRxMessage>
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b002      	add	sp, #8
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	2000019c 	.word	0x2000019c
 8005234:	2000019d 	.word	0x2000019d
 8005238:	2000022c 	.word	0x2000022c
 800523c:	20000204 	.word	0x20000204
 8005240:	2000009c 	.word	0x2000009c

08005244 <FDCAN_GetCommand_d>:

void FDCAN_GetCommand_d(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
	uint32_t counter;
	const uint8_t a_FDCAN_CommandsList[OPENBL_FDCAN_COMMANDS_NB] =
 800524a:	003b      	movs	r3, r7
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <FDCAN_GetCommand_d+0x58>)
 800524e:	ca03      	ldmia	r2!, {r0, r1}
 8005250:	c303      	stmia	r3!, {r0, r1}
 8005252:	8811      	ldrh	r1, [r2, #0]
 8005254:	8019      	strh	r1, [r3, #0]
 8005256:	7892      	ldrb	r2, [r2, #2]
 8005258:	709a      	strb	r2, [r3, #2]
		WRDS,
		RDEN,
		RDDS
	};

	FDCAN_SendByte(ACK_BYTE);
 800525a:	2079      	movs	r0, #121	; 0x79
 800525c:	f7ff ff62 	bl	8005124 <FDCAN_SendByte>
	/*Send 1 message: number of bytes*/
	FDCAN_SendByte(OPENBL_FDCAN_COMMANDS_NB);
 8005260:	200b      	movs	r0, #11
 8005262:	f7ff ff5f 	bl	8005124 <FDCAN_SendByte>
	/*Send 1 message: protocol version*/
	FDCAN_SendByte(0x01);
 8005266:	2001      	movs	r0, #1
 8005268:	f7ff ff5c 	bl	8005124 <FDCAN_SendByte>
	/*Send 12 messages (message by message): command opcodes */
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e009      	b.n	8005286 <FDCAN_GetCommand_d+0x42>
	{
		FDCAN_SendByte(a_FDCAN_CommandsList[i]);
 8005272:	003a      	movs	r2, r7
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff ff52 	bl	8005124 <FDCAN_SendByte>
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b0a      	cmp	r3, #10
 800528a:	d9f2      	bls.n	8005272 <FDCAN_GetCommand_d+0x2e>
	}

	FDCAN_SendByte(ACK_BYTE);
 800528c:	2079      	movs	r0, #121	; 0x79
 800528e:	f7ff ff49 	bl	8005124 <FDCAN_SendByte>
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b004      	add	sp, #16
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	08005e7c 	.word	0x08005e7c

080052a0 <FDCAN_GetID_d>:

void FDCAN_GetID_d(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
	FDCAN_SendByte(ACK_BYTE);
 80052a4:	2079      	movs	r0, #121	; 0x79
 80052a6:	f7ff ff3d 	bl	8005124 <FDCAN_SendByte>

	TxData[0] = DEVICE_ID_MSB;
 80052aa:	4b08      	ldr	r3, [pc, #32]	; (80052cc <FDCAN_GetID_d+0x2c>)
 80052ac:	2204      	movs	r2, #4
 80052ae:	701a      	strb	r2, [r3, #0]
	TxData[1] = DEVICE_ID_LSB;
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <FDCAN_GetID_d+0x2c>)
 80052b2:	2267      	movs	r2, #103	; 0x67
 80052b4:	705a      	strb	r2, [r3, #1]
	//STM32 product ID
	FDCAN_SendBytes(TxData,FDCAN_DLC_BYTES_2);
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <FDCAN_GetID_d+0x2c>)
 80052b8:	2102      	movs	r1, #2
 80052ba:	0018      	movs	r0, r3
 80052bc:	f7ff ff68 	bl	8005190 <FDCAN_SendBytes>

	FDCAN_SendByte(ACK_BYTE);
 80052c0:	2079      	movs	r0, #121	; 0x79
 80052c2:	f7ff ff2f 	bl	8005124 <FDCAN_SendByte>
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	200001a0 	.word	0x200001a0

080052d0 <FDCAN_ReadMemory_d>:

void FDCAN_ReadMemory_d(void)
{
 80052d0:	b5b0      	push	{r4, r5, r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
	uint32_t count;
	uint32_t single;
	uint8_t  data_length;

	/* Check memory protection then send adequate response */
	if (GetReadOutProtectionStatus() != RESET)
 80052d6:	f7ff fe57 	bl	8004f88 <GetReadOutProtectionStatus>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d003      	beq.n	80052e6 <FDCAN_ReadMemory_d+0x16>
	{
		FDCAN_SendByte(NACK_BYTE);
 80052de:	201f      	movs	r0, #31
 80052e0:	f7ff ff20 	bl	8005124 <FDCAN_SendByte>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
			}
			FDCAN_SendByte(ACK_BYTE);
		}
	}
}
 80052e4:	e086      	b.n	80053f4 <FDCAN_ReadMemory_d+0x124>
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 80052e6:	003b      	movs	r3, r7
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f88b 	bl	8005404 <FDCAN_GetAddress>
 80052ee:	0003      	movs	r3, r0
 80052f0:	2b1f      	cmp	r3, #31
 80052f2:	d103      	bne.n	80052fc <FDCAN_ReadMemory_d+0x2c>
			FDCAN_SendByte(NACK_BYTE);
 80052f4:	201f      	movs	r0, #31
 80052f6:	f7ff ff15 	bl	8005124 <FDCAN_SendByte>
}
 80052fa:	e07b      	b.n	80053f4 <FDCAN_ReadMemory_d+0x124>
			FDCAN_SendByte(ACK_BYTE);
 80052fc:	2079      	movs	r0, #121	; 0x79
 80052fe:	f7ff ff11 	bl	8005124 <FDCAN_SendByte>
			number_of_bytes = (uint32_t)(header.data[4]) + 1U;
 8005302:	4b3e      	ldr	r3, [pc, #248]	; (80053fc <FDCAN_ReadMemory_d+0x12c>)
 8005304:	222c      	movs	r2, #44	; 0x2c
 8005306:	5c9b      	ldrb	r3, [r3, r2]
 8005308:	3301      	adds	r3, #1
 800530a:	60bb      	str	r3, [r7, #8]
			count  = number_of_bytes / 64U;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	613b      	str	r3, [r7, #16]
			single = (uint32_t)(number_of_bytes % 64U);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	223f      	movs	r2, #63	; 0x3f
 8005316:	4013      	ands	r3, r2
 8005318:	607b      	str	r3, [r7, #4]
			while (count != 0U)
 800531a:	e027      	b.n	800536c <FDCAN_ReadMemory_d+0x9c>
				data_length = 0;
 800531c:	230f      	movs	r3, #15
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
				for (counter = 64U ; counter > 0U; counter--)
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e015      	b.n	8005356 <FDCAN_ReadMemory_d+0x86>
					TxData[data_length] = FLASH_Read(address);
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	250f      	movs	r5, #15
 800532e:	197b      	adds	r3, r7, r5
 8005330:	781c      	ldrb	r4, [r3, #0]
 8005332:	0010      	movs	r0, r2
 8005334:	f7ff fe4a 	bl	8004fcc <FLASH_Read>
 8005338:	0003      	movs	r3, r0
 800533a:	001a      	movs	r2, r3
 800533c:	4b30      	ldr	r3, [pc, #192]	; (8005400 <FDCAN_ReadMemory_d+0x130>)
 800533e:	551a      	strb	r2, [r3, r4]
					data_length++;
 8005340:	197b      	adds	r3, r7, r5
 8005342:	781a      	ldrb	r2, [r3, #0]
 8005344:	197b      	adds	r3, r7, r5
 8005346:	3201      	adds	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
					address++;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	603b      	str	r3, [r7, #0]
				for (counter = 64U ; counter > 0U; counter--)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	3b01      	subs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e6      	bne.n	800532a <FDCAN_ReadMemory_d+0x5a>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <FDCAN_ReadMemory_d+0x130>)
 800535e:	210f      	movs	r1, #15
 8005360:	0018      	movs	r0, r3
 8005362:	f7ff ff15 	bl	8005190 <FDCAN_SendBytes>
				count--;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3b01      	subs	r3, #1
 800536a:	613b      	str	r3, [r7, #16]
			while (count != 0U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1d4      	bne.n	800531c <FDCAN_ReadMemory_d+0x4c>
			if (single != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d03a      	beq.n	80053ee <FDCAN_ReadMemory_d+0x11e>
				data_length = 0U;
 8005378:	230f      	movs	r3, #15
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
				for (counter = single ; counter > 0U; counter--)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e015      	b.n	80053b2 <FDCAN_ReadMemory_d+0xe2>
					TxData[data_length] = FLASH_Read(address);
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	250f      	movs	r5, #15
 800538a:	197b      	adds	r3, r7, r5
 800538c:	781c      	ldrb	r4, [r3, #0]
 800538e:	0010      	movs	r0, r2
 8005390:	f7ff fe1c 	bl	8004fcc <FLASH_Read>
 8005394:	0003      	movs	r3, r0
 8005396:	001a      	movs	r2, r3
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <FDCAN_ReadMemory_d+0x130>)
 800539a:	551a      	strb	r2, [r3, r4]
					data_length++;
 800539c:	197b      	adds	r3, r7, r5
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	197b      	adds	r3, r7, r5
 80053a2:	3201      	adds	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
					address++;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	603b      	str	r3, [r7, #0]
				for (counter = single ; counter > 0U; counter--)
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e6      	bne.n	8005386 <FDCAN_ReadMemory_d+0xb6>
				for (counter = (64U - single) ; counter > 0U; counter--)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e00d      	b.n	80053de <FDCAN_ReadMemory_d+0x10e>
					TxData[data_length] = 0xFF;
 80053c2:	200f      	movs	r0, #15
 80053c4:	183b      	adds	r3, r7, r0
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <FDCAN_ReadMemory_d+0x130>)
 80053ca:	21ff      	movs	r1, #255	; 0xff
 80053cc:	54d1      	strb	r1, [r2, r3]
					data_length++;
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	183b      	adds	r3, r7, r0
 80053d4:	3201      	adds	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
				for (counter = (64U - single) ; counter > 0U; counter--)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	3b01      	subs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ee      	bne.n	80053c2 <FDCAN_ReadMemory_d+0xf2>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <FDCAN_ReadMemory_d+0x130>)
 80053e6:	210f      	movs	r1, #15
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7ff fed1 	bl	8005190 <FDCAN_SendBytes>
			FDCAN_SendByte(ACK_BYTE);
 80053ee:	2079      	movs	r0, #121	; 0x79
 80053f0:	f7ff fe98 	bl	8005124 <FDCAN_SendByte>
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b006      	add	sp, #24
 80053fa:	bdb0      	pop	{r4, r5, r7, pc}
 80053fc:	20000204 	.word	0x20000204
 8005400:	200001a0 	.word	0x200001a0

08005404 <FDCAN_GetAddress>:

uint8_t FDCAN_GetAddress(uint32_t *Address)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	uint8_t status;

	*Address = (((((uint32_t) header.data[0]) << 24)  |
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <FDCAN_GetAddress+0x68>)
 800540e:	2228      	movs	r2, #40	; 0x28
 8005410:	5c9b      	ldrb	r3, [r3, r2]
 8005412:	061a      	lsls	r2, r3, #24
			   (((uint32_t) header.data[1]) << 16)  |
 8005414:	4b15      	ldr	r3, [pc, #84]	; (800546c <FDCAN_GetAddress+0x68>)
 8005416:	2129      	movs	r1, #41	; 0x29
 8005418:	5c5b      	ldrb	r3, [r3, r1]
 800541a:	041b      	lsls	r3, r3, #16
	*Address = (((((uint32_t) header.data[0]) << 24)  |
 800541c:	431a      	orrs	r2, r3
			   (((uint32_t) header.data[2]) << 8)   |
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <FDCAN_GetAddress+0x68>)
 8005420:	212a      	movs	r1, #42	; 0x2a
 8005422:	5c5b      	ldrb	r3, [r3, r1]
 8005424:	021b      	lsls	r3, r3, #8
			   (((uint32_t) header.data[1]) << 16)  |
 8005426:	4313      	orrs	r3, r2
			   (((uint32_t) header.data[3]))));
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <FDCAN_GetAddress+0x68>)
 800542a:	212b      	movs	r1, #43	; 0x2b
 800542c:	5c52      	ldrb	r2, [r2, r1]
			   (((uint32_t) header.data[2]) << 8)   |
 800542e:	431a      	orrs	r2, r3
	*Address = (((((uint32_t) header.data[0]) << 24)  |
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]

	/* Check if received address is valid or not */
	if ((*Address >= 0x08000000) && (*Address <= 0x08020000))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	051b      	lsls	r3, r3, #20
 800543c:	429a      	cmp	r2, r3
 800543e:	d309      	bcc.n	8005454 <FDCAN_GetAddress+0x50>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <FDCAN_GetAddress+0x6c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d804      	bhi.n	8005454 <FDCAN_GetAddress+0x50>
	{
		status = ACK_BYTE;
 800544a:	230f      	movs	r3, #15
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	2279      	movs	r2, #121	; 0x79
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	e003      	b.n	800545c <FDCAN_GetAddress+0x58>
	}
	else
	{
		status = NACK_BYTE;
 8005454:	230f      	movs	r3, #15
 8005456:	18fb      	adds	r3, r7, r3
 8005458:	221f      	movs	r2, #31
 800545a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800545c:	230f      	movs	r3, #15
 800545e:	18fb      	adds	r3, r7, r3
 8005460:	781b      	ldrb	r3, [r3, #0]
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	20000204 	.word	0x20000204
 8005470:	08020000 	.word	0x08020000

08005474 <std>:
 8005474:	2300      	movs	r3, #0
 8005476:	b510      	push	{r4, lr}
 8005478:	0004      	movs	r4, r0
 800547a:	6003      	str	r3, [r0, #0]
 800547c:	6043      	str	r3, [r0, #4]
 800547e:	6083      	str	r3, [r0, #8]
 8005480:	8181      	strh	r1, [r0, #12]
 8005482:	6643      	str	r3, [r0, #100]	; 0x64
 8005484:	81c2      	strh	r2, [r0, #14]
 8005486:	6103      	str	r3, [r0, #16]
 8005488:	6143      	str	r3, [r0, #20]
 800548a:	6183      	str	r3, [r0, #24]
 800548c:	0019      	movs	r1, r3
 800548e:	2208      	movs	r2, #8
 8005490:	305c      	adds	r0, #92	; 0x5c
 8005492:	f000 fa05 	bl	80058a0 <memset>
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <std+0x50>)
 8005498:	6224      	str	r4, [r4, #32]
 800549a:	6263      	str	r3, [r4, #36]	; 0x24
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <std+0x54>)
 800549e:	62a3      	str	r3, [r4, #40]	; 0x28
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <std+0x58>)
 80054a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <std+0x5c>)
 80054a6:	6323      	str	r3, [r4, #48]	; 0x30
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <std+0x60>)
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d005      	beq.n	80054ba <std+0x46>
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <std+0x64>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d002      	beq.n	80054ba <std+0x46>
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <std+0x68>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	d103      	bne.n	80054c2 <std+0x4e>
 80054ba:	0020      	movs	r0, r4
 80054bc:	3058      	adds	r0, #88	; 0x58
 80054be:	f000 fa6f 	bl	80059a0 <__retarget_lock_init_recursive>
 80054c2:	bd10      	pop	{r4, pc}
 80054c4:	080056bd 	.word	0x080056bd
 80054c8:	080056e5 	.word	0x080056e5
 80054cc:	0800571d 	.word	0x0800571d
 80054d0:	08005749 	.word	0x08005749
 80054d4:	2000026c 	.word	0x2000026c
 80054d8:	200002d4 	.word	0x200002d4
 80054dc:	2000033c 	.word	0x2000033c

080054e0 <stdio_exit_handler>:
 80054e0:	b510      	push	{r4, lr}
 80054e2:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <stdio_exit_handler+0x10>)
 80054e4:	4903      	ldr	r1, [pc, #12]	; (80054f4 <stdio_exit_handler+0x14>)
 80054e6:	4804      	ldr	r0, [pc, #16]	; (80054f8 <stdio_exit_handler+0x18>)
 80054e8:	f000 f86c 	bl	80055c4 <_fwalk_sglue>
 80054ec:	bd10      	pop	{r4, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	08005cb9 	.word	0x08005cb9
 80054f8:	20000018 	.word	0x20000018

080054fc <cleanup_stdio>:
 80054fc:	6841      	ldr	r1, [r0, #4]
 80054fe:	4b0b      	ldr	r3, [pc, #44]	; (800552c <cleanup_stdio+0x30>)
 8005500:	b510      	push	{r4, lr}
 8005502:	0004      	movs	r4, r0
 8005504:	4299      	cmp	r1, r3
 8005506:	d001      	beq.n	800550c <cleanup_stdio+0x10>
 8005508:	f000 fbd6 	bl	8005cb8 <_fflush_r>
 800550c:	68a1      	ldr	r1, [r4, #8]
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <cleanup_stdio+0x34>)
 8005510:	4299      	cmp	r1, r3
 8005512:	d002      	beq.n	800551a <cleanup_stdio+0x1e>
 8005514:	0020      	movs	r0, r4
 8005516:	f000 fbcf 	bl	8005cb8 <_fflush_r>
 800551a:	68e1      	ldr	r1, [r4, #12]
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <cleanup_stdio+0x38>)
 800551e:	4299      	cmp	r1, r3
 8005520:	d002      	beq.n	8005528 <cleanup_stdio+0x2c>
 8005522:	0020      	movs	r0, r4
 8005524:	f000 fbc8 	bl	8005cb8 <_fflush_r>
 8005528:	bd10      	pop	{r4, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	2000026c 	.word	0x2000026c
 8005530:	200002d4 	.word	0x200002d4
 8005534:	2000033c 	.word	0x2000033c

08005538 <global_stdio_init.part.0>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <global_stdio_init.part.0+0x28>)
 800553c:	4a09      	ldr	r2, [pc, #36]	; (8005564 <global_stdio_init.part.0+0x2c>)
 800553e:	2104      	movs	r1, #4
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	4809      	ldr	r0, [pc, #36]	; (8005568 <global_stdio_init.part.0+0x30>)
 8005544:	2200      	movs	r2, #0
 8005546:	f7ff ff95 	bl	8005474 <std>
 800554a:	2201      	movs	r2, #1
 800554c:	2109      	movs	r1, #9
 800554e:	4807      	ldr	r0, [pc, #28]	; (800556c <global_stdio_init.part.0+0x34>)
 8005550:	f7ff ff90 	bl	8005474 <std>
 8005554:	2202      	movs	r2, #2
 8005556:	2112      	movs	r1, #18
 8005558:	4805      	ldr	r0, [pc, #20]	; (8005570 <global_stdio_init.part.0+0x38>)
 800555a:	f7ff ff8b 	bl	8005474 <std>
 800555e:	bd10      	pop	{r4, pc}
 8005560:	200003a4 	.word	0x200003a4
 8005564:	080054e1 	.word	0x080054e1
 8005568:	2000026c 	.word	0x2000026c
 800556c:	200002d4 	.word	0x200002d4
 8005570:	2000033c 	.word	0x2000033c

08005574 <__sfp_lock_acquire>:
 8005574:	b510      	push	{r4, lr}
 8005576:	4802      	ldr	r0, [pc, #8]	; (8005580 <__sfp_lock_acquire+0xc>)
 8005578:	f000 fa13 	bl	80059a2 <__retarget_lock_acquire_recursive>
 800557c:	bd10      	pop	{r4, pc}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	200003ad 	.word	0x200003ad

08005584 <__sfp_lock_release>:
 8005584:	b510      	push	{r4, lr}
 8005586:	4802      	ldr	r0, [pc, #8]	; (8005590 <__sfp_lock_release+0xc>)
 8005588:	f000 fa0c 	bl	80059a4 <__retarget_lock_release_recursive>
 800558c:	bd10      	pop	{r4, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	200003ad 	.word	0x200003ad

08005594 <__sinit>:
 8005594:	b510      	push	{r4, lr}
 8005596:	0004      	movs	r4, r0
 8005598:	f7ff ffec 	bl	8005574 <__sfp_lock_acquire>
 800559c:	6a23      	ldr	r3, [r4, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <__sinit+0x14>
 80055a2:	f7ff ffef 	bl	8005584 <__sfp_lock_release>
 80055a6:	bd10      	pop	{r4, pc}
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <__sinit+0x28>)
 80055aa:	6223      	str	r3, [r4, #32]
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <__sinit+0x2c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f6      	bne.n	80055a2 <__sinit+0xe>
 80055b4:	f7ff ffc0 	bl	8005538 <global_stdio_init.part.0>
 80055b8:	e7f3      	b.n	80055a2 <__sinit+0xe>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	080054fd 	.word	0x080054fd
 80055c0:	200003a4 	.word	0x200003a4

080055c4 <_fwalk_sglue>:
 80055c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c6:	0014      	movs	r4, r2
 80055c8:	2600      	movs	r6, #0
 80055ca:	9000      	str	r0, [sp, #0]
 80055cc:	9101      	str	r1, [sp, #4]
 80055ce:	68a5      	ldr	r5, [r4, #8]
 80055d0:	6867      	ldr	r7, [r4, #4]
 80055d2:	3f01      	subs	r7, #1
 80055d4:	d504      	bpl.n	80055e0 <_fwalk_sglue+0x1c>
 80055d6:	6824      	ldr	r4, [r4, #0]
 80055d8:	2c00      	cmp	r4, #0
 80055da:	d1f8      	bne.n	80055ce <_fwalk_sglue+0xa>
 80055dc:	0030      	movs	r0, r6
 80055de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055e0:	89ab      	ldrh	r3, [r5, #12]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d908      	bls.n	80055f8 <_fwalk_sglue+0x34>
 80055e6:	220e      	movs	r2, #14
 80055e8:	5eab      	ldrsh	r3, [r5, r2]
 80055ea:	3301      	adds	r3, #1
 80055ec:	d004      	beq.n	80055f8 <_fwalk_sglue+0x34>
 80055ee:	0029      	movs	r1, r5
 80055f0:	9800      	ldr	r0, [sp, #0]
 80055f2:	9b01      	ldr	r3, [sp, #4]
 80055f4:	4798      	blx	r3
 80055f6:	4306      	orrs	r6, r0
 80055f8:	3568      	adds	r5, #104	; 0x68
 80055fa:	e7ea      	b.n	80055d2 <_fwalk_sglue+0xe>

080055fc <_puts_r>:
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b570      	push	{r4, r5, r6, lr}
 8005600:	0005      	movs	r5, r0
 8005602:	000e      	movs	r6, r1
 8005604:	6884      	ldr	r4, [r0, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <_puts_r+0x12>
 800560a:	f7ff ffc3 	bl	8005594 <__sinit>
 800560e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005610:	07db      	lsls	r3, r3, #31
 8005612:	d405      	bmi.n	8005620 <_puts_r+0x24>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	059b      	lsls	r3, r3, #22
 8005618:	d402      	bmi.n	8005620 <_puts_r+0x24>
 800561a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561c:	f000 f9c1 	bl	80059a2 <__retarget_lock_acquire_recursive>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	071b      	lsls	r3, r3, #28
 8005624:	d502      	bpl.n	800562c <_puts_r+0x30>
 8005626:	6923      	ldr	r3, [r4, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d11f      	bne.n	800566c <_puts_r+0x70>
 800562c:	0021      	movs	r1, r4
 800562e:	0028      	movs	r0, r5
 8005630:	f000 f8d2 	bl	80057d8 <__swsetup_r>
 8005634:	2800      	cmp	r0, #0
 8005636:	d019      	beq.n	800566c <_puts_r+0x70>
 8005638:	2501      	movs	r5, #1
 800563a:	426d      	negs	r5, r5
 800563c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800563e:	07db      	lsls	r3, r3, #31
 8005640:	d405      	bmi.n	800564e <_puts_r+0x52>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	059b      	lsls	r3, r3, #22
 8005646:	d402      	bmi.n	800564e <_puts_r+0x52>
 8005648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564a:	f000 f9ab 	bl	80059a4 <__retarget_lock_release_recursive>
 800564e:	0028      	movs	r0, r5
 8005650:	bd70      	pop	{r4, r5, r6, pc}
 8005652:	3601      	adds	r6, #1
 8005654:	60a3      	str	r3, [r4, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da04      	bge.n	8005664 <_puts_r+0x68>
 800565a:	69a2      	ldr	r2, [r4, #24]
 800565c:	429a      	cmp	r2, r3
 800565e:	dc16      	bgt.n	800568e <_puts_r+0x92>
 8005660:	290a      	cmp	r1, #10
 8005662:	d014      	beq.n	800568e <_puts_r+0x92>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	7019      	strb	r1, [r3, #0]
 800566c:	68a3      	ldr	r3, [r4, #8]
 800566e:	7831      	ldrb	r1, [r6, #0]
 8005670:	3b01      	subs	r3, #1
 8005672:	2900      	cmp	r1, #0
 8005674:	d1ed      	bne.n	8005652 <_puts_r+0x56>
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	da0f      	bge.n	800569c <_puts_r+0xa0>
 800567c:	0028      	movs	r0, r5
 800567e:	0022      	movs	r2, r4
 8005680:	310a      	adds	r1, #10
 8005682:	f000 f867 	bl	8005754 <__swbuf_r>
 8005686:	250a      	movs	r5, #10
 8005688:	3001      	adds	r0, #1
 800568a:	d1d7      	bne.n	800563c <_puts_r+0x40>
 800568c:	e7d4      	b.n	8005638 <_puts_r+0x3c>
 800568e:	0022      	movs	r2, r4
 8005690:	0028      	movs	r0, r5
 8005692:	f000 f85f 	bl	8005754 <__swbuf_r>
 8005696:	3001      	adds	r0, #1
 8005698:	d1e8      	bne.n	800566c <_puts_r+0x70>
 800569a:	e7cd      	b.n	8005638 <_puts_r+0x3c>
 800569c:	250a      	movs	r5, #10
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	6022      	str	r2, [r4, #0]
 80056a4:	701d      	strb	r5, [r3, #0]
 80056a6:	e7c9      	b.n	800563c <_puts_r+0x40>

080056a8 <puts>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <puts+0x10>)
 80056ac:	0001      	movs	r1, r0
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	f7ff ffa4 	bl	80055fc <_puts_r>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	20000064 	.word	0x20000064

080056bc <__sread>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	000c      	movs	r4, r1
 80056c0:	250e      	movs	r5, #14
 80056c2:	5f49      	ldrsh	r1, [r1, r5]
 80056c4:	f000 f91a 	bl	80058fc <_read_r>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	db03      	blt.n	80056d4 <__sread+0x18>
 80056cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80056ce:	181b      	adds	r3, r3, r0
 80056d0:	6563      	str	r3, [r4, #84]	; 0x54
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	4a02      	ldr	r2, [pc, #8]	; (80056e0 <__sread+0x24>)
 80056d8:	4013      	ands	r3, r2
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	e7f9      	b.n	80056d2 <__sread+0x16>
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	ffffefff 	.word	0xffffefff

080056e4 <__swrite>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	001f      	movs	r7, r3
 80056e8:	898b      	ldrh	r3, [r1, #12]
 80056ea:	0005      	movs	r5, r0
 80056ec:	000c      	movs	r4, r1
 80056ee:	0016      	movs	r6, r2
 80056f0:	05db      	lsls	r3, r3, #23
 80056f2:	d505      	bpl.n	8005700 <__swrite+0x1c>
 80056f4:	230e      	movs	r3, #14
 80056f6:	5ec9      	ldrsh	r1, [r1, r3]
 80056f8:	2200      	movs	r2, #0
 80056fa:	2302      	movs	r3, #2
 80056fc:	f000 f8ea 	bl	80058d4 <_lseek_r>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	4a05      	ldr	r2, [pc, #20]	; (8005718 <__swrite+0x34>)
 8005704:	0028      	movs	r0, r5
 8005706:	4013      	ands	r3, r2
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	0032      	movs	r2, r6
 800570c:	230e      	movs	r3, #14
 800570e:	5ee1      	ldrsh	r1, [r4, r3]
 8005710:	003b      	movs	r3, r7
 8005712:	f000 f907 	bl	8005924 <_write_r>
 8005716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005718:	ffffefff 	.word	0xffffefff

0800571c <__sseek>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	000c      	movs	r4, r1
 8005720:	250e      	movs	r5, #14
 8005722:	5f49      	ldrsh	r1, [r1, r5]
 8005724:	f000 f8d6 	bl	80058d4 <_lseek_r>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	1c42      	adds	r2, r0, #1
 800572c:	d103      	bne.n	8005736 <__sseek+0x1a>
 800572e:	4a05      	ldr	r2, [pc, #20]	; (8005744 <__sseek+0x28>)
 8005730:	4013      	ands	r3, r2
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	0152      	lsls	r2, r2, #5
 800573a:	4313      	orrs	r3, r2
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	6560      	str	r0, [r4, #84]	; 0x54
 8005740:	e7f8      	b.n	8005734 <__sseek+0x18>
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	ffffefff 	.word	0xffffefff

08005748 <__sclose>:
 8005748:	b510      	push	{r4, lr}
 800574a:	230e      	movs	r3, #14
 800574c:	5ec9      	ldrsh	r1, [r1, r3]
 800574e:	f000 f8af 	bl	80058b0 <_close_r>
 8005752:	bd10      	pop	{r4, pc}

08005754 <__swbuf_r>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	0006      	movs	r6, r0
 8005758:	000d      	movs	r5, r1
 800575a:	0014      	movs	r4, r2
 800575c:	2800      	cmp	r0, #0
 800575e:	d004      	beq.n	800576a <__swbuf_r+0x16>
 8005760:	6a03      	ldr	r3, [r0, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <__swbuf_r+0x16>
 8005766:	f7ff ff15 	bl	8005594 <__sinit>
 800576a:	69a3      	ldr	r3, [r4, #24]
 800576c:	60a3      	str	r3, [r4, #8]
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	071b      	lsls	r3, r3, #28
 8005772:	d528      	bpl.n	80057c6 <__swbuf_r+0x72>
 8005774:	6923      	ldr	r3, [r4, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d025      	beq.n	80057c6 <__swbuf_r+0x72>
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	b2ef      	uxtb	r7, r5
 8005780:	1ac0      	subs	r0, r0, r3
 8005782:	6963      	ldr	r3, [r4, #20]
 8005784:	b2ed      	uxtb	r5, r5
 8005786:	4283      	cmp	r3, r0
 8005788:	dc05      	bgt.n	8005796 <__swbuf_r+0x42>
 800578a:	0021      	movs	r1, r4
 800578c:	0030      	movs	r0, r6
 800578e:	f000 fa93 	bl	8005cb8 <_fflush_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	d11d      	bne.n	80057d2 <__swbuf_r+0x7e>
 8005796:	68a3      	ldr	r3, [r4, #8]
 8005798:	3001      	adds	r0, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	60a3      	str	r3, [r4, #8]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	701f      	strb	r7, [r3, #0]
 80057a6:	6963      	ldr	r3, [r4, #20]
 80057a8:	4283      	cmp	r3, r0
 80057aa:	d004      	beq.n	80057b6 <__swbuf_r+0x62>
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	07db      	lsls	r3, r3, #31
 80057b0:	d507      	bpl.n	80057c2 <__swbuf_r+0x6e>
 80057b2:	2d0a      	cmp	r5, #10
 80057b4:	d105      	bne.n	80057c2 <__swbuf_r+0x6e>
 80057b6:	0021      	movs	r1, r4
 80057b8:	0030      	movs	r0, r6
 80057ba:	f000 fa7d 	bl	8005cb8 <_fflush_r>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d107      	bne.n	80057d2 <__swbuf_r+0x7e>
 80057c2:	0028      	movs	r0, r5
 80057c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c6:	0021      	movs	r1, r4
 80057c8:	0030      	movs	r0, r6
 80057ca:	f000 f805 	bl	80057d8 <__swsetup_r>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d0d3      	beq.n	800577a <__swbuf_r+0x26>
 80057d2:	2501      	movs	r5, #1
 80057d4:	426d      	negs	r5, r5
 80057d6:	e7f4      	b.n	80057c2 <__swbuf_r+0x6e>

080057d8 <__swsetup_r>:
 80057d8:	4b30      	ldr	r3, [pc, #192]	; (800589c <__swsetup_r+0xc4>)
 80057da:	b570      	push	{r4, r5, r6, lr}
 80057dc:	0005      	movs	r5, r0
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	000c      	movs	r4, r1
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d004      	beq.n	80057f0 <__swsetup_r+0x18>
 80057e6:	6a03      	ldr	r3, [r0, #32]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <__swsetup_r+0x18>
 80057ec:	f7ff fed2 	bl	8005594 <__sinit>
 80057f0:	230c      	movs	r3, #12
 80057f2:	5ee2      	ldrsh	r2, [r4, r3]
 80057f4:	b293      	uxth	r3, r2
 80057f6:	0711      	lsls	r1, r2, #28
 80057f8:	d423      	bmi.n	8005842 <__swsetup_r+0x6a>
 80057fa:	06d9      	lsls	r1, r3, #27
 80057fc:	d407      	bmi.n	800580e <__swsetup_r+0x36>
 80057fe:	2309      	movs	r3, #9
 8005800:	2001      	movs	r0, #1
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	3337      	adds	r3, #55	; 0x37
 8005806:	4313      	orrs	r3, r2
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	4240      	negs	r0, r0
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	075b      	lsls	r3, r3, #29
 8005810:	d513      	bpl.n	800583a <__swsetup_r+0x62>
 8005812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005814:	2900      	cmp	r1, #0
 8005816:	d008      	beq.n	800582a <__swsetup_r+0x52>
 8005818:	0023      	movs	r3, r4
 800581a:	3344      	adds	r3, #68	; 0x44
 800581c:	4299      	cmp	r1, r3
 800581e:	d002      	beq.n	8005826 <__swsetup_r+0x4e>
 8005820:	0028      	movs	r0, r5
 8005822:	f000 f8c1 	bl	80059a8 <_free_r>
 8005826:	2300      	movs	r3, #0
 8005828:	6363      	str	r3, [r4, #52]	; 0x34
 800582a:	2224      	movs	r2, #36	; 0x24
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	4393      	bics	r3, r2
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	2300      	movs	r3, #0
 8005834:	6063      	str	r3, [r4, #4]
 8005836:	6923      	ldr	r3, [r4, #16]
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	2308      	movs	r3, #8
 800583c:	89a2      	ldrh	r2, [r4, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <__swsetup_r+0x88>
 8005848:	21a0      	movs	r1, #160	; 0xa0
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	89a3      	ldrh	r3, [r4, #12]
 800584e:	0089      	lsls	r1, r1, #2
 8005850:	0092      	lsls	r2, r2, #2
 8005852:	400b      	ands	r3, r1
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <__swsetup_r+0x88>
 8005858:	0021      	movs	r1, r4
 800585a:	0028      	movs	r0, r5
 800585c:	f000 fa80 	bl	8005d60 <__smakebuf_r>
 8005860:	220c      	movs	r2, #12
 8005862:	5ea3      	ldrsh	r3, [r4, r2]
 8005864:	2001      	movs	r0, #1
 8005866:	001a      	movs	r2, r3
 8005868:	b299      	uxth	r1, r3
 800586a:	4002      	ands	r2, r0
 800586c:	4203      	tst	r3, r0
 800586e:	d00f      	beq.n	8005890 <__swsetup_r+0xb8>
 8005870:	2200      	movs	r2, #0
 8005872:	60a2      	str	r2, [r4, #8]
 8005874:	6962      	ldr	r2, [r4, #20]
 8005876:	4252      	negs	r2, r2
 8005878:	61a2      	str	r2, [r4, #24]
 800587a:	2000      	movs	r0, #0
 800587c:	6922      	ldr	r2, [r4, #16]
 800587e:	4282      	cmp	r2, r0
 8005880:	d1c4      	bne.n	800580c <__swsetup_r+0x34>
 8005882:	0609      	lsls	r1, r1, #24
 8005884:	d5c2      	bpl.n	800580c <__swsetup_r+0x34>
 8005886:	2240      	movs	r2, #64	; 0x40
 8005888:	4313      	orrs	r3, r2
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	3801      	subs	r0, #1
 800588e:	e7bd      	b.n	800580c <__swsetup_r+0x34>
 8005890:	0788      	lsls	r0, r1, #30
 8005892:	d400      	bmi.n	8005896 <__swsetup_r+0xbe>
 8005894:	6962      	ldr	r2, [r4, #20]
 8005896:	60a2      	str	r2, [r4, #8]
 8005898:	e7ef      	b.n	800587a <__swsetup_r+0xa2>
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	20000064 	.word	0x20000064

080058a0 <memset>:
 80058a0:	0003      	movs	r3, r0
 80058a2:	1882      	adds	r2, r0, r2
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d100      	bne.n	80058aa <memset+0xa>
 80058a8:	4770      	bx	lr
 80058aa:	7019      	strb	r1, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	e7f9      	b.n	80058a4 <memset+0x4>

080058b0 <_close_r>:
 80058b0:	2300      	movs	r3, #0
 80058b2:	b570      	push	{r4, r5, r6, lr}
 80058b4:	4d06      	ldr	r5, [pc, #24]	; (80058d0 <_close_r+0x20>)
 80058b6:	0004      	movs	r4, r0
 80058b8:	0008      	movs	r0, r1
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	f7fb f96b 	bl	8000b96 <_close>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d103      	bne.n	80058cc <_close_r+0x1c>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d000      	beq.n	80058cc <_close_r+0x1c>
 80058ca:	6023      	str	r3, [r4, #0]
 80058cc:	bd70      	pop	{r4, r5, r6, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	200003a8 	.word	0x200003a8

080058d4 <_lseek_r>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	0004      	movs	r4, r0
 80058d8:	0008      	movs	r0, r1
 80058da:	0011      	movs	r1, r2
 80058dc:	001a      	movs	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	4d05      	ldr	r5, [pc, #20]	; (80058f8 <_lseek_r+0x24>)
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f7fb f978 	bl	8000bd8 <_lseek>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d103      	bne.n	80058f4 <_lseek_r+0x20>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d000      	beq.n	80058f4 <_lseek_r+0x20>
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	200003a8 	.word	0x200003a8

080058fc <_read_r>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	0004      	movs	r4, r0
 8005900:	0008      	movs	r0, r1
 8005902:	0011      	movs	r1, r2
 8005904:	001a      	movs	r2, r3
 8005906:	2300      	movs	r3, #0
 8005908:	4d05      	ldr	r5, [pc, #20]	; (8005920 <_read_r+0x24>)
 800590a:	602b      	str	r3, [r5, #0]
 800590c:	f7fb f90a 	bl	8000b24 <_read>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d103      	bne.n	800591c <_read_r+0x20>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d000      	beq.n	800591c <_read_r+0x20>
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	bd70      	pop	{r4, r5, r6, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	200003a8 	.word	0x200003a8

08005924 <_write_r>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	0004      	movs	r4, r0
 8005928:	0008      	movs	r0, r1
 800592a:	0011      	movs	r1, r2
 800592c:	001a      	movs	r2, r3
 800592e:	2300      	movs	r3, #0
 8005930:	4d05      	ldr	r5, [pc, #20]	; (8005948 <_write_r+0x24>)
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb f913 	bl	8000b5e <_write>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d103      	bne.n	8005944 <_write_r+0x20>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d000      	beq.n	8005944 <_write_r+0x20>
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	bd70      	pop	{r4, r5, r6, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	200003a8 	.word	0x200003a8

0800594c <__errno>:
 800594c:	4b01      	ldr	r3, [pc, #4]	; (8005954 <__errno+0x8>)
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	20000064 	.word	0x20000064

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	2600      	movs	r6, #0
 800595c:	4c0c      	ldr	r4, [pc, #48]	; (8005990 <__libc_init_array+0x38>)
 800595e:	4d0d      	ldr	r5, [pc, #52]	; (8005994 <__libc_init_array+0x3c>)
 8005960:	1b64      	subs	r4, r4, r5
 8005962:	10a4      	asrs	r4, r4, #2
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	2600      	movs	r6, #0
 800596a:	f000 fa6d 	bl	8005e48 <_init>
 800596e:	4c0a      	ldr	r4, [pc, #40]	; (8005998 <__libc_init_array+0x40>)
 8005970:	4d0a      	ldr	r5, [pc, #40]	; (800599c <__libc_init_array+0x44>)
 8005972:	1b64      	subs	r4, r4, r5
 8005974:	10a4      	asrs	r4, r4, #2
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	00b3      	lsls	r3, r6, #2
 800597e:	58eb      	ldr	r3, [r5, r3]
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	00b3      	lsls	r3, r6, #2
 8005988:	58eb      	ldr	r3, [r5, r3]
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08005fb0 	.word	0x08005fb0
 8005994:	08005fb0 	.word	0x08005fb0
 8005998:	08005fb4 	.word	0x08005fb4
 800599c:	08005fb0 	.word	0x08005fb0

080059a0 <__retarget_lock_init_recursive>:
 80059a0:	4770      	bx	lr

080059a2 <__retarget_lock_acquire_recursive>:
 80059a2:	4770      	bx	lr

080059a4 <__retarget_lock_release_recursive>:
 80059a4:	4770      	bx	lr
	...

080059a8 <_free_r>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	0005      	movs	r5, r0
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d010      	beq.n	80059d2 <_free_r+0x2a>
 80059b0:	1f0c      	subs	r4, r1, #4
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	da00      	bge.n	80059ba <_free_r+0x12>
 80059b8:	18e4      	adds	r4, r4, r3
 80059ba:	0028      	movs	r0, r5
 80059bc:	f000 f8e2 	bl	8005b84 <__malloc_lock>
 80059c0:	4a1d      	ldr	r2, [pc, #116]	; (8005a38 <_free_r+0x90>)
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d105      	bne.n	80059d4 <_free_r+0x2c>
 80059c8:	6063      	str	r3, [r4, #4]
 80059ca:	6014      	str	r4, [r2, #0]
 80059cc:	0028      	movs	r0, r5
 80059ce:	f000 f8e1 	bl	8005b94 <__malloc_unlock>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	d908      	bls.n	80059ea <_free_r+0x42>
 80059d8:	6820      	ldr	r0, [r4, #0]
 80059da:	1821      	adds	r1, r4, r0
 80059dc:	428b      	cmp	r3, r1
 80059de:	d1f3      	bne.n	80059c8 <_free_r+0x20>
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	1809      	adds	r1, r1, r0
 80059e6:	6021      	str	r1, [r4, #0]
 80059e8:	e7ee      	b.n	80059c8 <_free_r+0x20>
 80059ea:	001a      	movs	r2, r3
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <_free_r+0x4e>
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	d9f9      	bls.n	80059ea <_free_r+0x42>
 80059f6:	6811      	ldr	r1, [r2, #0]
 80059f8:	1850      	adds	r0, r2, r1
 80059fa:	42a0      	cmp	r0, r4
 80059fc:	d10b      	bne.n	8005a16 <_free_r+0x6e>
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	1809      	adds	r1, r1, r0
 8005a02:	1850      	adds	r0, r2, r1
 8005a04:	6011      	str	r1, [r2, #0]
 8005a06:	4283      	cmp	r3, r0
 8005a08:	d1e0      	bne.n	80059cc <_free_r+0x24>
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	1841      	adds	r1, r0, r1
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	6053      	str	r3, [r2, #4]
 8005a14:	e7da      	b.n	80059cc <_free_r+0x24>
 8005a16:	42a0      	cmp	r0, r4
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x78>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	e7d5      	b.n	80059cc <_free_r+0x24>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	1821      	adds	r1, r4, r0
 8005a24:	428b      	cmp	r3, r1
 8005a26:	d103      	bne.n	8005a30 <_free_r+0x88>
 8005a28:	6819      	ldr	r1, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	1809      	adds	r1, r1, r0
 8005a2e:	6021      	str	r1, [r4, #0]
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	6054      	str	r4, [r2, #4]
 8005a34:	e7ca      	b.n	80059cc <_free_r+0x24>
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	200003b0 	.word	0x200003b0

08005a3c <sbrk_aligned>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4e0f      	ldr	r6, [pc, #60]	; (8005a7c <sbrk_aligned+0x40>)
 8005a40:	000d      	movs	r5, r1
 8005a42:	6831      	ldr	r1, [r6, #0]
 8005a44:	0004      	movs	r4, r0
 8005a46:	2900      	cmp	r1, #0
 8005a48:	d102      	bne.n	8005a50 <sbrk_aligned+0x14>
 8005a4a:	f000 f9eb 	bl	8005e24 <_sbrk_r>
 8005a4e:	6030      	str	r0, [r6, #0]
 8005a50:	0029      	movs	r1, r5
 8005a52:	0020      	movs	r0, r4
 8005a54:	f000 f9e6 	bl	8005e24 <_sbrk_r>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d00a      	beq.n	8005a72 <sbrk_aligned+0x36>
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	1cc5      	adds	r5, r0, #3
 8005a60:	439d      	bics	r5, r3
 8005a62:	42a8      	cmp	r0, r5
 8005a64:	d007      	beq.n	8005a76 <sbrk_aligned+0x3a>
 8005a66:	1a29      	subs	r1, r5, r0
 8005a68:	0020      	movs	r0, r4
 8005a6a:	f000 f9db 	bl	8005e24 <_sbrk_r>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d101      	bne.n	8005a76 <sbrk_aligned+0x3a>
 8005a72:	2501      	movs	r5, #1
 8005a74:	426d      	negs	r5, r5
 8005a76:	0028      	movs	r0, r5
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	200003b4 	.word	0x200003b4

08005a80 <_malloc_r>:
 8005a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a82:	2203      	movs	r2, #3
 8005a84:	1ccb      	adds	r3, r1, #3
 8005a86:	4393      	bics	r3, r2
 8005a88:	3308      	adds	r3, #8
 8005a8a:	0006      	movs	r6, r0
 8005a8c:	001f      	movs	r7, r3
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d238      	bcs.n	8005b04 <_malloc_r+0x84>
 8005a92:	270c      	movs	r7, #12
 8005a94:	42b9      	cmp	r1, r7
 8005a96:	d837      	bhi.n	8005b08 <_malloc_r+0x88>
 8005a98:	0030      	movs	r0, r6
 8005a9a:	f000 f873 	bl	8005b84 <__malloc_lock>
 8005a9e:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <_malloc_r+0x100>)
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	001c      	movs	r4, r3
 8005aa6:	2c00      	cmp	r4, #0
 8005aa8:	d133      	bne.n	8005b12 <_malloc_r+0x92>
 8005aaa:	0039      	movs	r1, r7
 8005aac:	0030      	movs	r0, r6
 8005aae:	f7ff ffc5 	bl	8005a3c <sbrk_aligned>
 8005ab2:	0004      	movs	r4, r0
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d15e      	bne.n	8005b76 <_malloc_r+0xf6>
 8005ab8:	9b00      	ldr	r3, [sp, #0]
 8005aba:	681c      	ldr	r4, [r3, #0]
 8005abc:	0025      	movs	r5, r4
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	d14e      	bne.n	8005b60 <_malloc_r+0xe0>
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	d051      	beq.n	8005b6a <_malloc_r+0xea>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	0029      	movs	r1, r5
 8005aca:	18e3      	adds	r3, r4, r3
 8005acc:	0030      	movs	r0, r6
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	f000 f9a8 	bl	8005e24 <_sbrk_r>
 8005ad4:	9b01      	ldr	r3, [sp, #4]
 8005ad6:	4283      	cmp	r3, r0
 8005ad8:	d147      	bne.n	8005b6a <_malloc_r+0xea>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0030      	movs	r0, r6
 8005ade:	1aff      	subs	r7, r7, r3
 8005ae0:	0039      	movs	r1, r7
 8005ae2:	f7ff ffab 	bl	8005a3c <sbrk_aligned>
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d03f      	beq.n	8005b6a <_malloc_r+0xea>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	19db      	adds	r3, r3, r7
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	9b00      	ldr	r3, [sp, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d040      	beq.n	8005b7a <_malloc_r+0xfa>
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	42a2      	cmp	r2, r4
 8005afc:	d133      	bne.n	8005b66 <_malloc_r+0xe6>
 8005afe:	2200      	movs	r2, #0
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	e014      	b.n	8005b2e <_malloc_r+0xae>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dac5      	bge.n	8005a94 <_malloc_r+0x14>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	6033      	str	r3, [r6, #0]
 8005b0e:	0028      	movs	r0, r5
 8005b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b12:	6821      	ldr	r1, [r4, #0]
 8005b14:	1bc9      	subs	r1, r1, r7
 8005b16:	d420      	bmi.n	8005b5a <_malloc_r+0xda>
 8005b18:	290b      	cmp	r1, #11
 8005b1a:	d918      	bls.n	8005b4e <_malloc_r+0xce>
 8005b1c:	19e2      	adds	r2, r4, r7
 8005b1e:	6027      	str	r7, [r4, #0]
 8005b20:	42a3      	cmp	r3, r4
 8005b22:	d112      	bne.n	8005b4a <_malloc_r+0xca>
 8005b24:	9b00      	ldr	r3, [sp, #0]
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	6863      	ldr	r3, [r4, #4]
 8005b2a:	6011      	str	r1, [r2, #0]
 8005b2c:	6053      	str	r3, [r2, #4]
 8005b2e:	0030      	movs	r0, r6
 8005b30:	0025      	movs	r5, r4
 8005b32:	f000 f82f 	bl	8005b94 <__malloc_unlock>
 8005b36:	2207      	movs	r2, #7
 8005b38:	350b      	adds	r5, #11
 8005b3a:	1d23      	adds	r3, r4, #4
 8005b3c:	4395      	bics	r5, r2
 8005b3e:	1aea      	subs	r2, r5, r3
 8005b40:	429d      	cmp	r5, r3
 8005b42:	d0e4      	beq.n	8005b0e <_malloc_r+0x8e>
 8005b44:	1b5b      	subs	r3, r3, r5
 8005b46:	50a3      	str	r3, [r4, r2]
 8005b48:	e7e1      	b.n	8005b0e <_malloc_r+0x8e>
 8005b4a:	605a      	str	r2, [r3, #4]
 8005b4c:	e7ec      	b.n	8005b28 <_malloc_r+0xa8>
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d1d5      	bne.n	8005b00 <_malloc_r+0x80>
 8005b54:	9b00      	ldr	r3, [sp, #0]
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e7e9      	b.n	8005b2e <_malloc_r+0xae>
 8005b5a:	0023      	movs	r3, r4
 8005b5c:	6864      	ldr	r4, [r4, #4]
 8005b5e:	e7a2      	b.n	8005aa6 <_malloc_r+0x26>
 8005b60:	002c      	movs	r4, r5
 8005b62:	686d      	ldr	r5, [r5, #4]
 8005b64:	e7ab      	b.n	8005abe <_malloc_r+0x3e>
 8005b66:	0013      	movs	r3, r2
 8005b68:	e7c4      	b.n	8005af4 <_malloc_r+0x74>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	0030      	movs	r0, r6
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	f000 f810 	bl	8005b94 <__malloc_unlock>
 8005b74:	e7cb      	b.n	8005b0e <_malloc_r+0x8e>
 8005b76:	6027      	str	r7, [r4, #0]
 8005b78:	e7d9      	b.n	8005b2e <_malloc_r+0xae>
 8005b7a:	605b      	str	r3, [r3, #4]
 8005b7c:	deff      	udf	#255	; 0xff
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	200003b0 	.word	0x200003b0

08005b84 <__malloc_lock>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4802      	ldr	r0, [pc, #8]	; (8005b90 <__malloc_lock+0xc>)
 8005b88:	f7ff ff0b 	bl	80059a2 <__retarget_lock_acquire_recursive>
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	200003ac 	.word	0x200003ac

08005b94 <__malloc_unlock>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4802      	ldr	r0, [pc, #8]	; (8005ba0 <__malloc_unlock+0xc>)
 8005b98:	f7ff ff04 	bl	80059a4 <__retarget_lock_release_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	200003ac 	.word	0x200003ac

08005ba4 <__sflush_r>:
 8005ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ba6:	898b      	ldrh	r3, [r1, #12]
 8005ba8:	0005      	movs	r5, r0
 8005baa:	000c      	movs	r4, r1
 8005bac:	071a      	lsls	r2, r3, #28
 8005bae:	d45c      	bmi.n	8005c6a <__sflush_r+0xc6>
 8005bb0:	684a      	ldr	r2, [r1, #4]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	dc04      	bgt.n	8005bc0 <__sflush_r+0x1c>
 8005bb6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	dc01      	bgt.n	8005bc0 <__sflush_r+0x1c>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	d0fa      	beq.n	8005bbc <__sflush_r+0x18>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2080      	movs	r0, #128	; 0x80
 8005bca:	682e      	ldr	r6, [r5, #0]
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	001a      	movs	r2, r3
 8005bd0:	0140      	lsls	r0, r0, #5
 8005bd2:	6a21      	ldr	r1, [r4, #32]
 8005bd4:	4002      	ands	r2, r0
 8005bd6:	4203      	tst	r3, r0
 8005bd8:	d034      	beq.n	8005c44 <__sflush_r+0xa0>
 8005bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	075b      	lsls	r3, r3, #29
 8005be0:	d506      	bpl.n	8005bf0 <__sflush_r+0x4c>
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	1ac0      	subs	r0, r0, r3
 8005be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <__sflush_r+0x4c>
 8005bec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bee:	1ac0      	subs	r0, r0, r3
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	0028      	movs	r0, r5
 8005bf6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005bf8:	6a21      	ldr	r1, [r4, #32]
 8005bfa:	47b8      	blx	r7
 8005bfc:	89a2      	ldrh	r2, [r4, #12]
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d106      	bne.n	8005c10 <__sflush_r+0x6c>
 8005c02:	6829      	ldr	r1, [r5, #0]
 8005c04:	291d      	cmp	r1, #29
 8005c06:	d82c      	bhi.n	8005c62 <__sflush_r+0xbe>
 8005c08:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <__sflush_r+0x110>)
 8005c0a:	410b      	asrs	r3, r1
 8005c0c:	07db      	lsls	r3, r3, #31
 8005c0e:	d428      	bmi.n	8005c62 <__sflush_r+0xbe>
 8005c10:	2300      	movs	r3, #0
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	04d2      	lsls	r2, r2, #19
 8005c1a:	d505      	bpl.n	8005c28 <__sflush_r+0x84>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <__sflush_r+0x82>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d100      	bne.n	8005c28 <__sflush_r+0x84>
 8005c26:	6560      	str	r0, [r4, #84]	; 0x54
 8005c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c2a:	602e      	str	r6, [r5, #0]
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d0c5      	beq.n	8005bbc <__sflush_r+0x18>
 8005c30:	0023      	movs	r3, r4
 8005c32:	3344      	adds	r3, #68	; 0x44
 8005c34:	4299      	cmp	r1, r3
 8005c36:	d002      	beq.n	8005c3e <__sflush_r+0x9a>
 8005c38:	0028      	movs	r0, r5
 8005c3a:	f7ff feb5 	bl	80059a8 <_free_r>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	6360      	str	r0, [r4, #52]	; 0x34
 8005c42:	e7bc      	b.n	8005bbe <__sflush_r+0x1a>
 8005c44:	2301      	movs	r3, #1
 8005c46:	0028      	movs	r0, r5
 8005c48:	47b8      	blx	r7
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	d1c6      	bne.n	8005bdc <__sflush_r+0x38>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0c3      	beq.n	8005bdc <__sflush_r+0x38>
 8005c54:	2b1d      	cmp	r3, #29
 8005c56:	d001      	beq.n	8005c5c <__sflush_r+0xb8>
 8005c58:	2b16      	cmp	r3, #22
 8005c5a:	d101      	bne.n	8005c60 <__sflush_r+0xbc>
 8005c5c:	602e      	str	r6, [r5, #0]
 8005c5e:	e7ad      	b.n	8005bbc <__sflush_r+0x18>
 8005c60:	89a2      	ldrh	r2, [r4, #12]
 8005c62:	2340      	movs	r3, #64	; 0x40
 8005c64:	4313      	orrs	r3, r2
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	e7a9      	b.n	8005bbe <__sflush_r+0x1a>
 8005c6a:	690e      	ldr	r6, [r1, #16]
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	d0a5      	beq.n	8005bbc <__sflush_r+0x18>
 8005c70:	680f      	ldr	r7, [r1, #0]
 8005c72:	600e      	str	r6, [r1, #0]
 8005c74:	1bba      	subs	r2, r7, r6
 8005c76:	9201      	str	r2, [sp, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d100      	bne.n	8005c80 <__sflush_r+0xdc>
 8005c7e:	694a      	ldr	r2, [r1, #20]
 8005c80:	60a2      	str	r2, [r4, #8]
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dd99      	ble.n	8005bbc <__sflush_r+0x18>
 8005c88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c8a:	0032      	movs	r2, r6
 8005c8c:	001f      	movs	r7, r3
 8005c8e:	0028      	movs	r0, r5
 8005c90:	9b01      	ldr	r3, [sp, #4]
 8005c92:	6a21      	ldr	r1, [r4, #32]
 8005c94:	47b8      	blx	r7
 8005c96:	2800      	cmp	r0, #0
 8005c98:	dc06      	bgt.n	8005ca8 <__sflush_r+0x104>
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	89a2      	ldrh	r2, [r4, #12]
 8005ca0:	4240      	negs	r0, r0
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	e78a      	b.n	8005bbe <__sflush_r+0x1a>
 8005ca8:	9b01      	ldr	r3, [sp, #4]
 8005caa:	1836      	adds	r6, r6, r0
 8005cac:	1a1b      	subs	r3, r3, r0
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	e7e7      	b.n	8005c82 <__sflush_r+0xde>
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	dfbffffe 	.word	0xdfbffffe

08005cb8 <_fflush_r>:
 8005cb8:	690b      	ldr	r3, [r1, #16]
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	0005      	movs	r5, r0
 8005cbe:	000c      	movs	r4, r1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <_fflush_r+0x12>
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	0028      	movs	r0, r5
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d004      	beq.n	8005cd8 <_fflush_r+0x20>
 8005cce:	6a03      	ldr	r3, [r0, #32]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <_fflush_r+0x20>
 8005cd4:	f7ff fc5e 	bl	8005594 <__sinit>
 8005cd8:	220c      	movs	r2, #12
 8005cda:	5ea3      	ldrsh	r3, [r4, r2]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f1      	beq.n	8005cc4 <_fflush_r+0xc>
 8005ce0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ce2:	07d2      	lsls	r2, r2, #31
 8005ce4:	d404      	bmi.n	8005cf0 <_fflush_r+0x38>
 8005ce6:	059b      	lsls	r3, r3, #22
 8005ce8:	d402      	bmi.n	8005cf0 <_fflush_r+0x38>
 8005cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cec:	f7ff fe59 	bl	80059a2 <__retarget_lock_acquire_recursive>
 8005cf0:	0028      	movs	r0, r5
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	f7ff ff56 	bl	8005ba4 <__sflush_r>
 8005cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cfa:	0005      	movs	r5, r0
 8005cfc:	07db      	lsls	r3, r3, #31
 8005cfe:	d4e2      	bmi.n	8005cc6 <_fflush_r+0xe>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	059b      	lsls	r3, r3, #22
 8005d04:	d4df      	bmi.n	8005cc6 <_fflush_r+0xe>
 8005d06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d08:	f7ff fe4c 	bl	80059a4 <__retarget_lock_release_recursive>
 8005d0c:	e7db      	b.n	8005cc6 <_fflush_r+0xe>
	...

08005d10 <__swhatbuf_r>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	000e      	movs	r6, r1
 8005d14:	001d      	movs	r5, r3
 8005d16:	230e      	movs	r3, #14
 8005d18:	5ec9      	ldrsh	r1, [r1, r3]
 8005d1a:	0014      	movs	r4, r2
 8005d1c:	b096      	sub	sp, #88	; 0x58
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	da0c      	bge.n	8005d3c <__swhatbuf_r+0x2c>
 8005d22:	89b2      	ldrh	r2, [r6, #12]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	0011      	movs	r1, r2
 8005d28:	4019      	ands	r1, r3
 8005d2a:	421a      	tst	r2, r3
 8005d2c:	d013      	beq.n	8005d56 <__swhatbuf_r+0x46>
 8005d2e:	2100      	movs	r1, #0
 8005d30:	3b40      	subs	r3, #64	; 0x40
 8005d32:	2000      	movs	r0, #0
 8005d34:	6029      	str	r1, [r5, #0]
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	b016      	add	sp, #88	; 0x58
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	466a      	mov	r2, sp
 8005d3e:	f000 f84d 	bl	8005ddc <_fstat_r>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	dbed      	blt.n	8005d22 <__swhatbuf_r+0x12>
 8005d46:	23f0      	movs	r3, #240	; 0xf0
 8005d48:	9901      	ldr	r1, [sp, #4]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	4019      	ands	r1, r3
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <__swhatbuf_r+0x4c>)
 8005d50:	18c9      	adds	r1, r1, r3
 8005d52:	424b      	negs	r3, r1
 8005d54:	4159      	adcs	r1, r3
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	e7ea      	b.n	8005d32 <__swhatbuf_r+0x22>
 8005d5c:	ffffe000 	.word	0xffffe000

08005d60 <__smakebuf_r>:
 8005d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d62:	2602      	movs	r6, #2
 8005d64:	898b      	ldrh	r3, [r1, #12]
 8005d66:	0005      	movs	r5, r0
 8005d68:	000c      	movs	r4, r1
 8005d6a:	4233      	tst	r3, r6
 8005d6c:	d006      	beq.n	8005d7c <__smakebuf_r+0x1c>
 8005d6e:	0023      	movs	r3, r4
 8005d70:	3347      	adds	r3, #71	; 0x47
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	2301      	movs	r3, #1
 8005d78:	6163      	str	r3, [r4, #20]
 8005d7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005d7c:	466a      	mov	r2, sp
 8005d7e:	ab01      	add	r3, sp, #4
 8005d80:	f7ff ffc6 	bl	8005d10 <__swhatbuf_r>
 8005d84:	9900      	ldr	r1, [sp, #0]
 8005d86:	0007      	movs	r7, r0
 8005d88:	0028      	movs	r0, r5
 8005d8a:	f7ff fe79 	bl	8005a80 <_malloc_r>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d108      	bne.n	8005da4 <__smakebuf_r+0x44>
 8005d92:	220c      	movs	r2, #12
 8005d94:	5ea3      	ldrsh	r3, [r4, r2]
 8005d96:	059a      	lsls	r2, r3, #22
 8005d98:	d4ef      	bmi.n	8005d7a <__smakebuf_r+0x1a>
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	431e      	orrs	r6, r3
 8005da0:	81a6      	strh	r6, [r4, #12]
 8005da2:	e7e4      	b.n	8005d6e <__smakebuf_r+0xe>
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	89a2      	ldrh	r2, [r4, #12]
 8005da8:	6020      	str	r0, [r4, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	9b00      	ldr	r3, [sp, #0]
 8005db0:	6120      	str	r0, [r4, #16]
 8005db2:	6163      	str	r3, [r4, #20]
 8005db4:	9b01      	ldr	r3, [sp, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <__smakebuf_r+0x74>
 8005dba:	0028      	movs	r0, r5
 8005dbc:	230e      	movs	r3, #14
 8005dbe:	5ee1      	ldrsh	r1, [r4, r3]
 8005dc0:	f000 f81e 	bl	8005e00 <_isatty_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d005      	beq.n	8005dd4 <__smakebuf_r+0x74>
 8005dc8:	2303      	movs	r3, #3
 8005dca:	89a2      	ldrh	r2, [r4, #12]
 8005dcc:	439a      	bics	r2, r3
 8005dce:	3b02      	subs	r3, #2
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	433b      	orrs	r3, r7
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	e7ce      	b.n	8005d7a <__smakebuf_r+0x1a>

08005ddc <_fstat_r>:
 8005ddc:	2300      	movs	r3, #0
 8005dde:	b570      	push	{r4, r5, r6, lr}
 8005de0:	4d06      	ldr	r5, [pc, #24]	; (8005dfc <_fstat_r+0x20>)
 8005de2:	0004      	movs	r4, r0
 8005de4:	0008      	movs	r0, r1
 8005de6:	0011      	movs	r1, r2
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	f7fa fede 	bl	8000baa <_fstat>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	d103      	bne.n	8005dfa <_fstat_r+0x1e>
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d000      	beq.n	8005dfa <_fstat_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	200003a8 	.word	0x200003a8

08005e00 <_isatty_r>:
 8005e00:	2300      	movs	r3, #0
 8005e02:	b570      	push	{r4, r5, r6, lr}
 8005e04:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_isatty_r+0x20>)
 8005e06:	0004      	movs	r4, r0
 8005e08:	0008      	movs	r0, r1
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	f7fa fedb 	bl	8000bc6 <_isatty>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d103      	bne.n	8005e1c <_isatty_r+0x1c>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d000      	beq.n	8005e1c <_isatty_r+0x1c>
 8005e1a:	6023      	str	r3, [r4, #0]
 8005e1c:	bd70      	pop	{r4, r5, r6, pc}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	200003a8 	.word	0x200003a8

08005e24 <_sbrk_r>:
 8005e24:	2300      	movs	r3, #0
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	4d06      	ldr	r5, [pc, #24]	; (8005e44 <_sbrk_r+0x20>)
 8005e2a:	0004      	movs	r4, r0
 8005e2c:	0008      	movs	r0, r1
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	f7fa fede 	bl	8000bf0 <_sbrk>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d103      	bne.n	8005e40 <_sbrk_r+0x1c>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d000      	beq.n	8005e40 <_sbrk_r+0x1c>
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	bd70      	pop	{r4, r5, r6, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	200003a8 	.word	0x200003a8

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
