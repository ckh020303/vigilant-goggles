
FDCAN_Bootloader_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da4  08002da4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002da4  08002da4  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002da4  08002da4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000a5b8  200000a4  08002e50  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a65c  08002e50  0002a65c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140a3  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000389e  00000000  00000000  000341b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00005c07  00000000  00000000  00037a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c98  00000000  00000000  0003d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c72  00000000  00000000  0003e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d8f4  00000000  00000000  0003ef62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001574b  00000000  00000000  0005c856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b8918  00000000  00000000  00071fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002790  00000000  00000000  0012a8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0012d04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ca8 	.word	0x08002ca8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	08002ca8 	.word	0x08002ca8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_FDCAN1_Init>:
  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003f4:	22c0      	movs	r2, #192	; 0xc0
  hfdcan1.Instance = FDCAN1;
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <MX_FDCAN1_Init+0x48>)
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_FDCAN1_Init+0x4c>)
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003fa:	0092      	lsls	r2, r2, #2
{
 80003fc:	b570      	push	{r4, r5, r6, lr}
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80003fe:	2101      	movs	r1, #1
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000400:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 8;
 8000402:	2208      	movs	r2, #8
  hfdcan1.Init.NominalSyncJumpWidth = 3;
  hfdcan1.Init.NominalTimeSeg1 = 12;
 8000404:	240c      	movs	r4, #12
  hfdcan1.Init.NominalTimeSeg2 = 3;
  hfdcan1.Init.DataPrescaler = 2;
 8000406:	2502      	movs	r5, #2
  hfdcan1.Instance = FDCAN1;
 8000408:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800040a:	2300      	movs	r3, #0
  hfdcan1.Init.NominalPrescaler = 8;
 800040c:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800040e:	8201      	strh	r1, [r0, #16]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000410:	3a05      	subs	r2, #5
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000412:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000414:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000416:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000418:	6182      	str	r2, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800041a:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 800041c:	6202      	str	r2, [r0, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800041e:	6245      	str	r5, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 3;
 8000420:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000422:	62c4      	str	r4, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8000424:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000426:	6341      	str	r1, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000428:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800042a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800042c:	f000 fb4a 	bl	8000ac4 <HAL_FDCAN_Init>
 8000430:	2800      	cmp	r0, #0
 8000432:	d001      	beq.n	8000438 <MX_FDCAN1_Init+0x44>
  {
    Error_Handler();
 8000434:	f000 f960 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	200000c0 	.word	0x200000c0
 8000440:	40006400 	.word	0x40006400

08000444 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000444:	b510      	push	{r4, lr}
 8000446:	0004      	movs	r4, r0
 8000448:	b09a      	sub	sp, #104	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	2214      	movs	r2, #20
 800044c:	2100      	movs	r1, #0
 800044e:	a802      	add	r0, sp, #8
 8000450:	f002 f94e 	bl	80026f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000454:	224c      	movs	r2, #76	; 0x4c
 8000456:	2100      	movs	r1, #0
 8000458:	a807      	add	r0, sp, #28
 800045a:	f002 f949 	bl	80026f0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <HAL_FDCAN_MspInit+0x88>)
 8000460:	6822      	ldr	r2, [r4, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d12f      	bne.n	80004c6 <HAL_FDCAN_MspInit+0x82>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000466:	2380      	movs	r3, #128	; 0x80
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000468:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800046a:	049b      	lsls	r3, r3, #18
 800046c:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046e:	f001 f92b 	bl	80016c8 <HAL_RCCEx_PeriphCLKConfig>
 8000472:	2800      	cmp	r0, #0
 8000474:	d001      	beq.n	800047a <HAL_FDCAN_MspInit+0x36>
    {
      Error_Handler();
 8000476:	f000 f93f 	bl	80006f8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <HAL_FDCAN_MspInit+0x8c>)
 800047e:	0149      	lsls	r1, r1, #5
 8000480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2400      	movs	r4, #0
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000484:	430a      	orrs	r2, r1
 8000486:	63da      	str	r2, [r3, #60]	; 0x3c
 8000488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800048a:	4812      	ldr	r0, [pc, #72]	; (80004d4 <HAL_FDCAN_MspInit+0x90>)
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800048c:	400a      	ands	r2, r1
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800048e:	2108      	movs	r1, #8
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000490:	9200      	str	r2, [sp, #0]
 8000492:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000496:	430a      	orrs	r2, r1
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
 800049a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800049e:	400b      	ands	r3, r1
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004aa:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80004ac:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004b2:	f000 feab 	bl	800120c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 1, 0);
 80004b6:	2015      	movs	r0, #21
 80004b8:	0022      	movs	r2, r4
 80004ba:	2101      	movs	r1, #1
 80004bc:	f000 fab2 	bl	8000a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80004c0:	2015      	movs	r0, #21
 80004c2:	f000 fad9 	bl	8000a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80004c6:	b01a      	add	sp, #104	; 0x68
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40006400 	.word	0x40006400
 80004d0:	40021000 	.word	0x40021000
 80004d4:	50000c00 	.word	0x50000c00

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2214      	movs	r2, #20
 80004de:	2100      	movs	r1, #0
 80004e0:	a805      	add	r0, sp, #20
 80004e2:	f002 f905 	bl	80026f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e6:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	2501      	movs	r5, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 80004ec:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 80004f0:	4c27      	ldr	r4, [pc, #156]	; (8000590 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	430a      	orrs	r2, r1
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
 80004f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 80004f8:	4e26      	ldr	r6, [pc, #152]	; (8000594 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	400a      	ands	r2, r1
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	391e      	subs	r1, #30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	432a      	orrs	r2, r5
 8000506:	635a      	str	r2, [r3, #52]	; 0x34
 8000508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 800050a:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	402a      	ands	r2, r5
 800050e:	9201      	str	r2, [sp, #4]
 8000510:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000514:	0038      	movs	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	430a      	orrs	r2, r1
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
 800051a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051c:	400a      	ands	r2, r1
 800051e:	9202      	str	r2, [sp, #8]
 8000520:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000524:	3102      	adds	r1, #2
 8000526:	430a      	orrs	r2, r1
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
 800052a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052c:	400a      	ands	r2, r1
 800052e:	9203      	str	r2, [sp, #12]
 8000530:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000534:	3104      	adds	r1, #4
 8000536:	430a      	orrs	r2, r1
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
 800053a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053e:	400b      	ands	r3, r1
 8000540:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000542:	0021      	movs	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000544:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin, GPIO_PIN_RESET);
 8000546:	f000 fea7 	bl	8001298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	0030      	movs	r0, r6
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	f000 fea2 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|RELAY_CTRL_Pin|FDCAN1_EN_Pin;
 8000554:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	0038      	movs	r0, r7
 800055a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f000 fe53 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 8000566:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000568:	0030      	movs	r0, r6
 800056a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = FDCAN1_ERR_Pin;
 800056c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000570:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(FDCAN1_ERR_GPIO_Port, &GPIO_InitStruct);
 8000572:	f000 fe4b 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000576:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000578:	0030      	movs	r0, r6
 800057a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 800057c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000584:	f000 fe42 	bl	800120c <HAL_GPIO_Init>

}
 8000588:	b00b      	add	sp, #44	; 0x2c
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	00008203 	.word	0x00008203
 8000594:	50000800 	.word	0x50000800

08000598 <__io_putchar>:
#ifdef __cplusplus
extern "C" {
#endif
PUTCHAR_PROTOTYPE
{
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000598:	2301      	movs	r3, #1
{
 800059a:	b507      	push	{r0, r1, r2, lr}
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800059c:	425b      	negs	r3, r3
{
 800059e:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(&huart3 , (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a0:	2201      	movs	r2, #1
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <__io_putchar+0x18>)
 80005a4:	a901      	add	r1, sp, #4
 80005a6:	f001 f9f1 	bl	800198c <HAL_UART_Transmit>
    return ch;
 80005aa:	9801      	ldr	r0, [sp, #4]
}
 80005ac:	bd0e      	pop	{r1, r2, r3, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000140 	.word	0x20000140

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b510      	push	{r4, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b8:	223c      	movs	r2, #60	; 0x3c
 80005ba:	2100      	movs	r1, #0
 80005bc:	a805      	add	r0, sp, #20
 80005be:	f002 f897 	bl	80026f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	2210      	movs	r2, #16
 80005c4:	2100      	movs	r1, #0
 80005c6:	a801      	add	r0, sp, #4
 80005c8:	f002 f892 	bl	80026f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2080      	movs	r0, #128	; 0x80
 80005ce:	0080      	lsls	r0, r0, #2
 80005d0:	f000 fe68 	bl	80012a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005de:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005e0:	3308      	adds	r3, #8
 80005e2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	029b      	lsls	r3, r3, #10
 80005e8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	049b      	lsls	r3, r3, #18
 80005ee:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f0:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fa:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000602:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f000 fed4 	bl	80013b0 <HAL_RCC_OscConfig>
 8000608:	2800      	cmp	r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060e:	e7fe      	b.n	800060e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000616:	0021      	movs	r1, r4
 8000618:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061e:	f000 ff91 	bl	8001544 <HAL_RCC_ClockConfig>
 8000622:	2800      	cmp	r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x76>
 8000626:	b672      	cpsid	i
  while (1)
 8000628:	e7fe      	b.n	8000628 <SystemClock_Config+0x74>
}
 800062a:	b014      	add	sp, #80	; 0x50
 800062c:	bd10      	pop	{r4, pc}
	...

08000630 <main>:
{
 8000630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000632:	f000 f9b3 	bl	800099c <HAL_Init>
  SystemClock_Config();
 8000636:	f7ff ffbd 	bl	80005b4 <SystemClock_Config>
  MX_GPIO_Init();
 800063a:	f7ff ff4d 	bl	80004d8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800063e:	f7ff fed9 	bl	80003f4 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8000642:	f000 f8cd 	bl	80007e0 <MX_USART3_UART_Init>
  printf("device\n");
 8000646:	4826      	ldr	r0, [pc, #152]	; (80006e0 <main+0xb0>)
 8000648:	f001 ff56 	bl	80024f8 <puts>
  FDCAN_Enable();
 800064c:	f001 fbdc 	bl	8001e08 <FDCAN_Enable>
  starttime = HAL_GetTick();
 8000650:	f000 f9c4 	bl	80009dc <HAL_GetTick>
			if(endtime - starttime > 4000)
 8000654:	27fa      	movs	r7, #250	; 0xfa
  starttime = HAL_GetTick();
 8000656:	0004      	movs	r4, r0
			if(endtime - starttime > 4000)
 8000658:	013f      	lsls	r7, r7, #4
		if((isSelectID == 1) && (isCommandID == 1))
 800065a:	4e22      	ldr	r6, [pc, #136]	; (80006e4 <main+0xb4>)
 800065c:	7833      	ldrb	r3, [r6, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d134      	bne.n	80006cc <main+0x9c>
 8000662:	4d21      	ldr	r5, [pc, #132]	; (80006e8 <main+0xb8>)
 8000664:	782b      	ldrb	r3, [r5, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d130      	bne.n	80006cc <main+0x9c>
			starttime = HAL_GetTick();
 800066a:	f000 f9b7 	bl	80009dc <HAL_GetTick>
 800066e:	0004      	movs	r4, r0
			printf("Select Command ID\n");
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <main+0xbc>)
 8000672:	f001 ff41 	bl	80024f8 <puts>
			isCommandID = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	702b      	strb	r3, [r5, #0]
			FDCAN_ReadByte();
 800067a:	f001 fcc9 	bl	8002010 <FDCAN_ReadByte>
			id = header.RxHeader.Identifier;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <main+0xc0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
			switch(id)
 8000684:	2b21      	cmp	r3, #33	; 0x21
 8000686:	d01b      	beq.n	80006c0 <main+0x90>
 8000688:	d80a      	bhi.n	80006a0 <main+0x70>
 800068a:	2b02      	cmp	r3, #2
 800068c:	d012      	beq.n	80006b4 <main+0x84>
 800068e:	2b11      	cmp	r3, #17
 8000690:	d013      	beq.n	80006ba <main+0x8a>
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00b      	beq.n	80006ae <main+0x7e>
			isSelectID = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	7033      	strb	r3, [r6, #0]
			isCommandID = 1;
 800069a:	3301      	adds	r3, #1
 800069c:	702b      	strb	r3, [r5, #0]
 800069e:	e7dc      	b.n	800065a <main+0x2a>
			switch(id)
 80006a0:	2b31      	cmp	r3, #49	; 0x31
 80006a2:	d010      	beq.n	80006c6 <main+0x96>
 80006a4:	2b44      	cmp	r3, #68	; 0x44
 80006a6:	d1f6      	bne.n	8000696 <main+0x66>
					FDCAN_EraseMemory_d();
 80006a8:	f001 fd12 	bl	80020d0 <FDCAN_EraseMemory_d>
					break;
 80006ac:	e7f3      	b.n	8000696 <main+0x66>
					FDCAN_GetCommand_d();
 80006ae:	f001 fcdb 	bl	8002068 <FDCAN_GetCommand_d>
					break;
 80006b2:	e7f0      	b.n	8000696 <main+0x66>
					FDCAN_GetID_d();
 80006b4:	f001 fcf8 	bl	80020a8 <FDCAN_GetID_d>
					break;
 80006b8:	e7ed      	b.n	8000696 <main+0x66>
					FDCAN_ReadMemory_d();
 80006ba:	f001 fd5b 	bl	8002174 <FDCAN_ReadMemory_d>
					break;
 80006be:	e7ea      	b.n	8000696 <main+0x66>
					FDCAN_Go_d();
 80006c0:	f001 fde8 	bl	8002294 <FDCAN_Go_d>
					break;
 80006c4:	e7e7      	b.n	8000696 <main+0x66>
					FDCAN_WriteMemory_d();
 80006c6:	f001 fda7 	bl	8002218 <FDCAN_WriteMemory_d>
					break;
 80006ca:	e7e4      	b.n	8000696 <main+0x66>
			endtime = HAL_GetTick();
 80006cc:	f000 f986 	bl	80009dc <HAL_GetTick>
			if(endtime - starttime > 4000)
 80006d0:	1b00      	subs	r0, r0, r4
 80006d2:	42b8      	cmp	r0, r7
 80006d4:	d9c1      	bls.n	800065a <main+0x2a>
				jump_to_app(address);
 80006d6:	4807      	ldr	r0, [pc, #28]	; (80006f4 <main+0xc4>)
 80006d8:	f001 fb4a 	bl	8001d70 <jump_to_app>
 80006dc:	e7bd      	b.n	800065a <main+0x2a>
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	08002cdb 	.word	0x08002cdb
 80006e4:	2000a505 	.word	0x2000a505
 80006e8:	2000a504 	.word	0x2000a504
 80006ec:	08002ce2 	.word	0x08002ce2
 80006f0:	2000a49c 	.word	0x2000a49c
 80006f4:	08003000 	.word	0x08003000

080006f8 <Error_Handler>:
 80006f8:	b672      	cpsid	i
  while (1)
 80006fa:	e7fe      	b.n	80006fa <Error_Handler+0x2>

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2101      	movs	r1, #1
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_MspInit+0x30>)

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000702:	20c0      	movs	r0, #192	; 0xc0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000706:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000708:	430a      	orrs	r2, r1
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
 800070c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800070e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000718:	0549      	lsls	r1, r1, #21
 800071a:	430a      	orrs	r2, r1
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
 800071e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000720:	400b      	ands	r3, r1
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000726:	f000 f971 	bl	8000a0c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bd07      	pop	{r0, r1, r2, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler>

08000732 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler>

08000734 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073a:	f000 f943 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073e:	bd10      	pop	{r4, pc}

08000740 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8000740:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <TIM16_FDCAN_IT0_IRQHandler+0xc>)
 8000744:	f000 fc54 	bl	8000ff0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8000748:	bd10      	pop	{r4, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000c0 	.word	0x200000c0

08000750 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	000e      	movs	r6, r1
 8000754:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	2500      	movs	r5, #0
 8000758:	42a5      	cmp	r5, r4
 800075a:	db01      	blt.n	8000760 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800075c:	0020      	movs	r0, r4
 800075e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000760:	e000      	b.n	8000764 <_read+0x14>
 8000762:	bf00      	nop
 8000764:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	3501      	adds	r5, #1
 8000768:	e7f6      	b.n	8000758 <_read+0x8>

0800076a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076a:	b570      	push	{r4, r5, r6, lr}
 800076c:	000e      	movs	r6, r1
 800076e:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000770:	2500      	movs	r5, #0
 8000772:	42a5      	cmp	r5, r4
 8000774:	db01      	blt.n	800077a <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000776:	0020      	movs	r0, r4
 8000778:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800077a:	5d70      	ldrb	r0, [r6, r5]
 800077c:	f7ff ff0c 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	3501      	adds	r5, #1
 8000782:	e7f6      	b.n	8000772 <_write+0x8>

08000784 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8000784:	2001      	movs	r0, #1
}
 8000786:	4240      	negs	r0, r0
 8000788:	4770      	bx	lr

0800078a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	019b      	lsls	r3, r3, #6
  return 0;
}
 800078e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000790:	604b      	str	r3, [r1, #4]
}
 8000792:	4770      	bx	lr

08000794 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000794:	2001      	movs	r0, #1
 8000796:	4770      	bx	lr

08000798 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000798:	2000      	movs	r0, #0
 800079a:	4770      	bx	lr

0800079c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	490b      	ldr	r1, [pc, #44]	; (80007cc <_sbrk+0x30>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <_sbrk+0x34>)
{
 80007a0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a2:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	490b      	ldr	r1, [pc, #44]	; (80007d4 <_sbrk+0x38>)
{
 80007a6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80007a8:	6808      	ldr	r0, [r1, #0]
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d101      	bne.n	80007b2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <_sbrk+0x3c>)
 80007b0:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	6808      	ldr	r0, [r1, #0]
 80007b4:	18c3      	adds	r3, r0, r3
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d906      	bls.n	80007c8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80007ba:	f001 ffef 	bl	800279c <__errno>
 80007be:	230c      	movs	r3, #12
 80007c0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80007c2:	2001      	movs	r0, #1
 80007c4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80007c6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80007c8:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80007ca:	e7fc      	b.n	80007c6 <_sbrk+0x2a>
 80007cc:	00000400 	.word	0x00000400
 80007d0:	20024000 	.word	0x20024000
 80007d4:	2000013c 	.word	0x2000013c
 80007d8:	2000a660 	.word	0x2000a660

080007dc <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	4770      	bx	lr
	...

080007e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007e0:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_USART3_UART_Init+0x64>)
 80007e4:	4c18      	ldr	r4, [pc, #96]	; (8000848 <MX_USART3_UART_Init+0x68>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e6:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 80007e8:	6023      	str	r3, [r4, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	23e1      	movs	r3, #225	; 0xe1
 80007ec:	025b      	lsls	r3, r3, #9
 80007ee:	6063      	str	r3, [r4, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f0:	2300      	movs	r3, #0
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f2:	0020      	movs	r0, r4
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f4:	60a3      	str	r3, [r4, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f6:	60e3      	str	r3, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f8:	6123      	str	r3, [r4, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fa:	6162      	str	r2, [r4, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fc:	61a3      	str	r3, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fe:	61e3      	str	r3, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000800:	6223      	str	r3, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000802:	6263      	str	r3, [r4, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000806:	f001 f991 	bl	8001b2c <HAL_UART_Init>
 800080a:	2800      	cmp	r0, #0
 800080c:	d001      	beq.n	8000812 <MX_USART3_UART_Init+0x32>
  {
    Error_Handler();
 800080e:	f7ff ff73 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	0020      	movs	r0, r4
 8000816:	f001 fa03 	bl	8001c20 <HAL_UARTEx_SetTxFifoThreshold>
 800081a:	2800      	cmp	r0, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x42>
  {
    Error_Handler();
 800081e:	f7ff ff6b 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	0020      	movs	r0, r4
 8000826:	f001 fa1b 	bl	8001c60 <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	2800      	cmp	r0, #0
 800082c:	d001      	beq.n	8000832 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f7ff ff63 	bl	80006f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000832:	0020      	movs	r0, r4
 8000834:	f001 f9d6 	bl	8001be4 <HAL_UARTEx_DisableFifoMode>
 8000838:	2800      	cmp	r0, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x60>
  {
    Error_Handler();
 800083c:	f7ff ff5c 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bd10      	pop	{r4, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40004800 	.word	0x40004800
 8000848:	20000140 	.word	0x20000140

0800084c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800084c:	b510      	push	{r4, lr}
 800084e:	0004      	movs	r4, r0
 8000850:	b09a      	sub	sp, #104	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2214      	movs	r2, #20
 8000854:	2100      	movs	r1, #0
 8000856:	a802      	add	r0, sp, #8
 8000858:	f001 ff4a 	bl	80026f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085c:	224c      	movs	r2, #76	; 0x4c
 800085e:	2100      	movs	r1, #0
 8000860:	a807      	add	r0, sp, #28
 8000862:	f001 ff45 	bl	80026f0 <memset>
  if(uartHandle->Instance==USART3)
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0x78>)
 8000868:	6822      	ldr	r2, [r4, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	d127      	bne.n	80008be <HAL_UART_MspInit+0x72>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800086e:	2304      	movs	r3, #4
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000872:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	f000 ff28 	bl	80016c8 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 800087c:	f7ff ff3c 	bl	80006f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_UART_MspInit+0x7c>)
 8000884:	02c9      	lsls	r1, r1, #11
 8000886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800088a:	430a      	orrs	r2, r1
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
 800088e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000890:	400a      	ands	r2, r1
 8000892:	9200      	str	r2, [sp, #0]
 8000894:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2202      	movs	r2, #2
 8000898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800089a:	4311      	orrs	r1, r2
 800089c:	6359      	str	r1, [r3, #52]	; 0x34
 800089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4013      	ands	r3, r2
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008a8:	23c0      	movs	r3, #192	; 0xc0
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80008b4:	3304      	adds	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80008b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f000 fca7 	bl	800120c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008be:	b01a      	add	sp, #104	; 0x68
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40004800 	.word	0x40004800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	50000400 	.word	0x50000400

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff ff82 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fe:	f001 ff53 	bl	80027a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000902:	f7ff fe95 	bl	8000630 <main>

08000906 <LoopForever>:

LoopForever:
  b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000914:	08002dac 	.word	0x08002dac
  ldr r2, =_sbss
 8000918:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800091c:	2000a65c 	.word	0x2000a65c

08000920 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_COMP_IRQHandler>

08000922 <HAL_MspDeInit>:
 8000922:	4770      	bx	lr

08000924 <HAL_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000924:	2201      	movs	r2, #1
{
 8000926:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_RELEASE_RESET();
 8000928:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <HAL_DeInit+0x24>)
 800092c:	4252      	negs	r2, r2
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000930:	62dc      	str	r4, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8000934:	631c      	str	r4, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000938:	629c      	str	r4, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 800093c:	625c      	str	r4, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800093e:	f7ff fff0 	bl	8000922 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 8000942:	0020      	movs	r0, r4
 8000944:	bd10      	pop	{r4, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_InitTick+0x44>)
{
 8000950:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000952:	7819      	ldrb	r1, [r3, #0]
 8000954:	2900      	cmp	r1, #0
 8000956:	d101      	bne.n	800095c <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000958:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800095a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800095c:	20fa      	movs	r0, #250	; 0xfa
 800095e:	0080      	lsls	r0, r0, #2
 8000960:	f7ff fbd2 	bl	8000108 <__udivsi3>
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <HAL_InitTick+0x48>)
 8000966:	0001      	movs	r1, r0
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	f7ff fbcd 	bl	8000108 <__udivsi3>
 800096e:	f000 f88f 	bl	8000a90 <HAL_SYSTICK_Config>
 8000972:	1e04      	subs	r4, r0, #0
 8000974:	d1f0      	bne.n	8000958 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	2d03      	cmp	r5, #3
 8000978:	d8ee      	bhi.n	8000958 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097a:	0002      	movs	r2, r0
 800097c:	2001      	movs	r0, #1
 800097e:	0029      	movs	r1, r5
 8000980:	4240      	negs	r0, r0
 8000982:	f000 f84f 	bl	8000a24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <HAL_InitTick+0x4c>)
 8000988:	0020      	movs	r0, r4
 800098a:	601d      	str	r5, [r3, #0]
  return status;
 800098c:	e7e5      	b.n	800095a <HAL_InitTick+0xe>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000004 	.word	0x20000004
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_Init+0x24>)
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	6811      	ldr	r1, [r2, #0]
{
 80009a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a6:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009aa:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ac:	f7ff ffce 	bl	800094c <HAL_InitTick>
 80009b0:	1e04      	subs	r4, r0, #0
 80009b2:	d103      	bne.n	80009bc <HAL_Init+0x20>
  HAL_MspInit();
 80009b4:	f7ff fea2 	bl	80006fc <HAL_MspInit>
}
 80009b8:	0020      	movs	r0, r4
 80009ba:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80009bc:	2401      	movs	r4, #1
 80009be:	e7fb      	b.n	80009b8 <HAL_Init+0x1c>
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_IncTick+0x10>)
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_IncTick+0x14>)
 80009c8:	6811      	ldr	r1, [r2, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	185b      	adds	r3, r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	4770      	bx	lr
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200001d4 	.word	0x200001d4
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009dc:	4b01      	ldr	r3, [pc, #4]	; (80009e4 <HAL_GetTick+0x8>)
 80009de:	6818      	ldr	r0, [r3, #0]
}
 80009e0:	4770      	bx	lr
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	200001d4 	.word	0x200001d4

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff fff6 	bl	80009dc <HAL_GetTick>
 80009f0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	1c63      	adds	r3, r4, #1
 80009f4:	d002      	beq.n	80009fc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <HAL_Delay+0x20>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fc:	f7ff ffee 	bl	80009dc <HAL_GetTick>
 8000a00:	1b40      	subs	r0, r0, r5
 8000a02:	42a0      	cmp	r0, r4
 8000a04:	d3fa      	bcc.n	80009fc <HAL_Delay+0x14>
  {
  }
}
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8000a0e:	4904      	ldr	r1, [pc, #16]	; (8000a20 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	400b      	ands	r3, r1
 8000a14:	4303      	orrs	r3, r0
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	fffff9ff 	.word	0xfffff9ff

08000a24 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a26:	25ff      	movs	r5, #255	; 0xff
 8000a28:	2403      	movs	r4, #3
 8000a2a:	002a      	movs	r2, r5
 8000a2c:	4004      	ands	r4, r0
 8000a2e:	00e4      	lsls	r4, r4, #3
 8000a30:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a32:	0189      	lsls	r1, r1, #6
 8000a34:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a36:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a38:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3a:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	db0a      	blt.n	8000a56 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	24c0      	movs	r4, #192	; 0xc0
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_NVIC_SetPriority+0x4c>)
 8000a44:	0880      	lsrs	r0, r0, #2
 8000a46:	0080      	lsls	r0, r0, #2
 8000a48:	18c0      	adds	r0, r0, r3
 8000a4a:	00a4      	lsls	r4, r4, #2
 8000a4c:	5903      	ldr	r3, [r0, r4]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	430b      	orrs	r3, r1
 8000a52:	5103      	str	r3, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000a54:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a56:	200f      	movs	r0, #15
 8000a58:	4003      	ands	r3, r0
 8000a5a:	3b08      	subs	r3, #8
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_NVIC_SetPriority+0x50>)
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	181b      	adds	r3, r3, r0
 8000a64:	69d8      	ldr	r0, [r3, #28]
 8000a66:	4002      	ands	r2, r0
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	61da      	str	r2, [r3, #28]
 8000a6c:	e7f2      	b.n	8000a54 <HAL_NVIC_SetPriority+0x30>
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	db05      	blt.n	8000a88 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7c:	231f      	movs	r3, #31
 8000a7e:	4018      	ands	r0, r3
 8000a80:	3b1e      	subs	r3, #30
 8000a82:	4083      	lsls	r3, r0
 8000a84:	4a01      	ldr	r2, [pc, #4]	; (8000a8c <HAL_NVIC_EnableIRQ+0x14>)
 8000a86:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a88:	4770      	bx	lr
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	1e43      	subs	r3, r0, #1
 8000a94:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d20d      	bcs.n	8000ab8 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa4:	6a03      	ldr	r3, [r0, #32]
 8000aa6:	0609      	lsls	r1, r1, #24
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000ab8:	4770      	bx	lr
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	e000e010 	.word	0xe000e010
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
  {
    return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
  if (hfdcan == NULL)
 8000aca:	2c00      	cmp	r4, #0
 8000acc:	d100      	bne.n	8000ad0 <HAL_FDCAN_Init+0xc>
 8000ace:	e0a4      	b.n	8000c1a <HAL_FDCAN_Init+0x156>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000ad0:	0025      	movs	r5, r4
 8000ad2:	355c      	adds	r5, #92	; 0x5c
 8000ad4:	782b      	ldrb	r3, [r5, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d105      	bne.n	8000ae8 <HAL_FDCAN_Init+0x24>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000adc:	0023      	movs	r3, r4
 8000ade:	335d      	adds	r3, #93	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ae0:	0020      	movs	r0, r4
    hfdcan->Lock = HAL_UNLOCKED;
 8000ae2:	701a      	strb	r2, [r3, #0]
    HAL_FDCAN_MspInit(hfdcan);
 8000ae4:	f7ff fcae 	bl	8000444 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ae8:	2110      	movs	r1, #16
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	438a      	bics	r2, r1
 8000af0:	619a      	str	r2, [r3, #24]

  /* Get tick */
//  tickstart = HAL_GetTick();

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000af2:	2208      	movs	r2, #8
 8000af4:	6999      	ldr	r1, [r3, #24]
 8000af6:	4211      	tst	r1, r2
 8000af8:	d1fc      	bne.n	8000af4 <HAL_FDCAN_Init+0x30>
//      return HAL_ERROR;
//    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000afa:	2101      	movs	r1, #1
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	619a      	str	r2, [r3, #24]

  /* Get tick */
//  tickstart = HAL_GetTick();

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000b02:	699a      	ldr	r2, [r3, #24]
 8000b04:	420a      	tst	r2, r1
 8000b06:	d0fc      	beq.n	8000b02 <HAL_FDCAN_Init+0x3e>
//      return HAL_ERROR;
//    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000b08:	2202      	movs	r2, #2
 8000b0a:	6999      	ldr	r1, [r3, #24]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000b10:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <HAL_FDCAN_Init+0x158>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d102      	bne.n	8000b1c <HAL_FDCAN_Init+0x58>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000b16:	6861      	ldr	r1, [r4, #4]
 8000b18:	4a41      	ldr	r2, [pc, #260]	; (8000c20 <HAL_FDCAN_Init+0x15c>)
 8000b1a:	6011      	str	r1, [r2, #0]
  }

  /* Set the no automatic retransmission */
//  if (hfdcan->Init.AutoRetransmission == ENABLE)
//  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	699a      	ldr	r2, [r3, #24]
//  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
//  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b20:	4840      	ldr	r0, [pc, #256]	; (8000c24 <HAL_FDCAN_Init+0x160>)
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b22:	438a      	bics	r2, r1
 8000b24:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	493f      	ldr	r1, [pc, #252]	; (8000c28 <HAL_FDCAN_Init+0x164>)
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	619a      	str	r2, [r3, #24]
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	6999      	ldr	r1, [r3, #24]
 8000b32:	0152      	lsls	r2, r2, #5
 8000b34:	430a      	orrs	r2, r1
 8000b36:	619a      	str	r2, [r3, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b38:	699a      	ldr	r2, [r3, #24]
 8000b3a:	68a1      	ldr	r1, [r4, #8]
 8000b3c:	4002      	ands	r2, r0

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b3e:	20a4      	movs	r0, #164	; 0xa4
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b40:	430a      	orrs	r2, r1
 8000b42:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b44:	699a      	ldr	r2, [r3, #24]
 8000b46:	4382      	bics	r2, r0
 8000b48:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b4a:	691a      	ldr	r2, [r3, #16]
 8000b4c:	3894      	subs	r0, #148	; 0x94
 8000b4e:	4382      	bics	r2, r0
 8000b50:	611a      	str	r2, [r3, #16]
//    /* Nothing to do: normal mode */
//  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b52:	69e0      	ldr	r0, [r4, #28]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b54:	69a2      	ldr	r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b56:	3801      	subs	r0, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b58:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b5a:	0200      	lsls	r0, r0, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b5c:	0652      	lsls	r2, r2, #25
 8000b5e:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b60:	6a20      	ldr	r0, [r4, #32]
 8000b62:	3801      	subs	r0, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b64:	4302      	orrs	r2, r0
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b66:	6960      	ldr	r0, [r4, #20]
 8000b68:	3801      	subs	r0, #1
 8000b6a:	0400      	lsls	r0, r0, #16
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b6c:	4302      	orrs	r2, r0
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b6e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b70:	22c0      	movs	r2, #192	; 0xc0
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	4291      	cmp	r1, r2
 8000b76:	d10e      	bne.n	8000b96 <HAL_FDCAN_Init+0xd2>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b7c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b7e:	3901      	subs	r1, #1
 8000b80:	0109      	lsls	r1, r1, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b82:	0212      	lsls	r2, r2, #8
 8000b84:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b88:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b8a:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b8e:	3901      	subs	r1, #1
 8000b90:	0409      	lsls	r1, r1, #16
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b92:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b94:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000b96:	0019      	movs	r1, r3
 8000b98:	31c0      	adds	r1, #192	; 0xc0
 8000b9a:	680a      	ldr	r2, [r1, #0]
 8000b9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000b9e:	4e23      	ldr	r6, [pc, #140]	; (8000c2c <HAL_FDCAN_Init+0x168>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ba0:	4302      	orrs	r2, r0
 8000ba2:	600a      	str	r2, [r1, #0]
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000ba4:	4a22      	ldr	r2, [pc, #136]	; (8000c30 <HAL_FDCAN_Init+0x16c>)
 8000ba6:	189a      	adds	r2, r3, r2
 8000ba8:	1e51      	subs	r1, r2, #1
 8000baa:	418a      	sbcs	r2, r1
 8000bac:	4921      	ldr	r1, [pc, #132]	; (8000c34 <HAL_FDCAN_Init+0x170>)
 8000bae:	4252      	negs	r2, r2
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	4921      	ldr	r1, [pc, #132]	; (8000c38 <HAL_FDCAN_Init+0x174>)
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    SramCanInstanceBase += SRAMCAN_SIZE;
 8000bb8:	1852      	adds	r2, r2, r1
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bbc:	4030      	ands	r0, r6
 8000bbe:	0409      	lsls	r1, r1, #16
 8000bc0:	4301      	orrs	r1, r0
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000bc2:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000bc4:	67d9      	str	r1, [r3, #124]	; 0x7c

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	3170      	adds	r1, #112	; 0x70

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000bca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000bcc:	6461      	str	r1, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000bce:	4e1b      	ldr	r6, [pc, #108]	; (8000c3c <HAL_FDCAN_Init+0x178>)
 8000bd0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000bd2:	4030      	ands	r0, r6
 8000bd4:	0609      	lsls	r1, r1, #24
 8000bd6:	4301      	orrs	r1, r0
 8000bd8:	67d9      	str	r1, [r3, #124]	; 0x7c

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000bda:	0013      	movs	r3, r2
 8000bdc:	33b0      	adds	r3, #176	; 0xb0
 8000bde:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000be0:	33d8      	adds	r3, #216	; 0xd8
 8000be2:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000be4:	2398      	movs	r3, #152	; 0x98
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	18d3      	adds	r3, r2, r3
 8000bea:	6523      	str	r3, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000bec:	239e      	movs	r3, #158	; 0x9e
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	6563      	str	r3, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000bf4:	23d4      	movs	r3, #212	; 0xd4
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	18d0      	adds	r0, r2, r3
 8000bfa:	1d11      	adds	r1, r2, #4
 8000bfc:	23d4      	movs	r3, #212	; 0xd4
 8000bfe:	4288      	cmp	r0, r1
 8000c00:	d200      	bcs.n	8000c04 <HAL_FDCAN_Init+0x140>
 8000c02:	3bd3      	subs	r3, #211	; 0xd3
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000c04:	2100      	movs	r1, #0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	189b      	adds	r3, r3, r2
 8000c0a:	c202      	stmia	r2!, {r1}
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d1fc      	bne.n	8000c0a <HAL_FDCAN_Init+0x146>
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c10:	2301      	movs	r3, #1
  return HAL_OK;
 8000c12:	2000      	movs	r0, #0
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c14:	65a1      	str	r1, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c16:	6621      	str	r1, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c18:	702b      	strb	r3, [r5, #0]
}
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	40006400 	.word	0x40006400
 8000c20:	40006500 	.word	0x40006500
 8000c24:	fffffcff 	.word	0xfffffcff
 8000c28:	ffffbfff 	.word	0xffffbfff
 8000c2c:	ffe0ffff 	.word	0xffe0ffff
 8000c30:	bfff9800 	.word	0xbfff9800
 8000c34:	fffffcb0 	.word	0xfffffcb0
 8000c38:	4000b750 	.word	0x4000b750
 8000c3c:	f0ffffff 	.word	0xf0ffffff

08000c40 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c40:	0003      	movs	r3, r0
{
 8000c42:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c44:	335c      	adds	r3, #92	; 0x5c
 8000c46:	781b      	ldrb	r3, [r3, #0]
{
 8000c48:	0007      	movs	r7, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d81a      	bhi.n	8000c86 <HAL_FDCAN_ConfigFilter+0x46>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c50:	688c      	ldr	r4, [r1, #8]
                         (sFilterConfig->FilterConfig << 27U) |
 8000c52:	68cb      	ldr	r3, [r1, #12]
                         (sFilterConfig->FilterID1 << 16U)    |
 8000c54:	690d      	ldr	r5, [r1, #16]
                         sFilterConfig->FilterID2);
 8000c56:	694e      	ldr	r6, [r1, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c58:	07a4      	lsls	r4, r4, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000c5a:	c905      	ldmia	r1!, {r0, r2}
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d108      	bne.n	8000c72 <HAL_FDCAN_ConfigFilter+0x32>
                         (sFilterConfig->FilterConfig << 27U) |
 8000c60:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c62:	4323      	orrs	r3, r4
      *FilterAddress = FilterElementW1;
 8000c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c66:	4333      	orrs	r3, r6
                         (sFilterConfig->FilterID1 << 16U)    |
 8000c68:	042d      	lsls	r5, r5, #16
      *FilterAddress = FilterElementW1;
 8000c6a:	0092      	lsls	r2, r2, #2
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c6c:	432b      	orrs	r3, r5
      *FilterAddress = FilterElementW1;
 8000c6e:	5053      	str	r3, [r2, r1]
}
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000c72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000c74:	00d2      	lsls	r2, r2, #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000c76:	075b      	lsls	r3, r3, #29
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000c78:	1852      	adds	r2, r2, r1
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000c7a:	432b      	orrs	r3, r5
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000c7c:	4334      	orrs	r4, r6
    return HAL_OK;
 8000c7e:	2000      	movs	r0, #0
      *FilterAddress = FilterElementW1;
 8000c80:	6013      	str	r3, [r2, #0]
      *FilterAddress = FilterElementW2;
 8000c82:	6054      	str	r4, [r2, #4]
 8000c84:	e7f4      	b.n	8000c70 <HAL_FDCAN_ConfigFilter+0x30>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000c86:	2302      	movs	r3, #2
 8000c88:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	e7ee      	b.n	8000c70 <HAL_FDCAN_ConfigFilter+0x30>

08000c92 <HAL_FDCAN_ConfigTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000c92:	0003      	movs	r3, r0
 8000c94:	335c      	adds	r3, #92	; 0x5c
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <HAL_FDCAN_ConfigTxDelayCompensation+0x16>
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8000c9c:	6803      	ldr	r3, [r0, #0]
    return HAL_OK;
 8000c9e:	2000      	movs	r0, #0
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8000ca0:	0209      	lsls	r1, r1, #8
 8000ca2:	4311      	orrs	r1, r2
 8000ca4:	6499      	str	r1, [r3, #72]	; 0x48
}
 8000ca6:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000cac:	4313      	orrs	r3, r2
 8000cae:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	e7f8      	b.n	8000ca6 <HAL_FDCAN_ConfigTxDelayCompensation+0x14>

08000cb4 <HAL_FDCAN_EnableTxDelayCompensation>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	335c      	adds	r3, #92	; 0x5c
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d107      	bne.n	8000cce <HAL_FDCAN_EnableTxDelayCompensation+0x1a>
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	6802      	ldr	r2, [r0, #0]
    return HAL_OK;
 8000cc2:	2000      	movs	r0, #0
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8000cc4:	68d1      	ldr	r1, [r2, #12]
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e7f8      	b.n	8000ccc <HAL_FDCAN_EnableTxDelayCompensation+0x18>

08000cda <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000cda:	0002      	movs	r2, r0
 8000cdc:	325c      	adds	r2, #92	; 0x5c
 8000cde:	7811      	ldrb	r1, [r2, #0]
{
 8000ce0:	0003      	movs	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000ce2:	b2c8      	uxtb	r0, r1
 8000ce4:	2901      	cmp	r1, #1
 8000ce6:	d108      	bne.n	8000cfa <HAL_FDCAN_Start+0x20>
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000ce8:	3101      	adds	r1, #1
 8000cea:	7011      	strb	r1, [r2, #0]
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000cec:	6819      	ldr	r1, [r3, #0]
 8000cee:	698a      	ldr	r2, [r1, #24]
 8000cf0:	4382      	bics	r2, r0
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000cf2:	2000      	movs	r0, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000cf4:	618a      	str	r2, [r1, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000cf6:	6618      	str	r0, [r3, #96]	; 0x60
}
 8000cf8:	4770      	bx	lr
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	6e19      	ldr	r1, [r3, #96]	; 0x60
    return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d00:	430a      	orrs	r2, r1
 8000d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_ERROR;
 8000d04:	e7f8      	b.n	8000cf8 <HAL_FDCAN_Start+0x1e>
	...

08000d08 <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000d08:	0003      	movs	r3, r0
{
 8000d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000d0c:	335c      	adds	r3, #92	; 0x5c
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d158      	bne.n	8000dc6 <HAL_FDCAN_AddMessageToTxFifoQ+0xbe>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000d14:	6805      	ldr	r5, [r0, #0]
 8000d16:	002b      	movs	r3, r5
 8000d18:	33c4      	adds	r3, #196	; 0xc4
 8000d1a:	681c      	ldr	r4, [r3, #0]
 8000d1c:	02a4      	lsls	r4, r4, #10
 8000d1e:	d506      	bpl.n	8000d2e <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000d24:	009b      	lsls	r3, r3, #2
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000d26:	4313      	orrs	r3, r2
 8000d28:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	e036      	b.n	8000d9c <HAL_FDCAN_AddMessageToTxFifoQ+0x94>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d2e:	681c      	ldr	r4, [r3, #0]
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d30:	690f      	ldr	r7, [r1, #16]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d32:	03a4      	lsls	r4, r4, #14
 8000d34:	0fa3      	lsrs	r3, r4, #30
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000d36:	684c      	ldr	r4, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d38:	9300      	str	r3, [sp, #0]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8000d3a:	688e      	ldr	r6, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8000d3c:	680b      	ldr	r3, [r1, #0]
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d12d      	bne.n	8000d9e <HAL_FDCAN_AddMessageToTxFifoQ+0x96>
                   FDCAN_STANDARD_ID |
 8000d42:	4337      	orrs	r7, r6
                   (pTxHeader->Identifier << 18U));
 8000d44:	049b      	lsls	r3, r3, #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 8000d46:	698e      	ldr	r6, [r1, #24]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d48:	431f      	orrs	r7, r3
                 pTxHeader->FDFormat |
 8000d4a:	69cb      	ldr	r3, [r1, #28]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000d4c:	9c00      	ldr	r4, [sp, #0]
                 pTxHeader->FDFormat |
 8000d4e:	4333      	orrs	r3, r6
 8000d50:	694e      	ldr	r6, [r1, #20]
 8000d52:	4333      	orrs	r3, r6
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d54:	6a0e      	ldr	r6, [r1, #32]
 8000d56:	0636      	lsls	r6, r6, #24
                 pTxHeader->FDFormat |
 8000d58:	4333      	orrs	r3, r6
                 (pTxHeader->DataLength << 16U));
 8000d5a:	68ce      	ldr	r6, [r1, #12]
 8000d5c:	0436      	lsls	r6, r6, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d5e:	4333      	orrs	r3, r6
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000d60:	2648      	movs	r6, #72	; 0x48
 8000d62:	4366      	muls	r6, r4
 8000d64:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000d66:	46a4      	mov	ip, r4
 8000d68:	4466      	add	r6, ip

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
  TxAddress++;
  *TxAddress = TxElementW2;
 8000d6a:	6073      	str	r3, [r6, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000d6c:	2308      	movs	r3, #8
  *TxAddress = TxElementW1;
 8000d6e:	6037      	str	r7, [r6, #0]
  TxAddress++;
 8000d70:	0037      	movs	r7, r6
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000d72:	425b      	negs	r3, r3
 8000d74:	1b9e      	subs	r6, r3, r6
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_FDCAN_AddMessageToTxFifoQ+0xc4>)
  TxAddress++;
 8000d78:	3708      	adds	r7, #8
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	68cc      	ldr	r4, [r1, #12]
 8000d7e:	46a4      	mov	ip, r4
 8000d80:	4663      	mov	r3, ip
 8000d82:	9c01      	ldr	r4, [sp, #4]
 8000d84:	5ce3      	ldrb	r3, [r4, r3]
 8000d86:	469c      	mov	ip, r3
 8000d88:	19bb      	adds	r3, r7, r6
 8000d8a:	4563      	cmp	r3, ip
 8000d8c:	d30c      	bcc.n	8000da8 <HAL_FDCAN_AddMessageToTxFifoQ+0xa0>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000d8e:	2301      	movs	r3, #1
 8000d90:	9a00      	ldr	r2, [sp, #0]
 8000d92:	35cc      	adds	r5, #204	; 0xcc
 8000d94:	4093      	lsls	r3, r2
 8000d96:	602b      	str	r3, [r5, #0]
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000d98:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8000d9a:	2000      	movs	r0, #0
}
 8000d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8000d9e:	433b      	orrs	r3, r7
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000da0:	2780      	movs	r7, #128	; 0x80
                   pTxHeader->TxFrameType |
 8000da2:	4333      	orrs	r3, r6
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000da4:	05ff      	lsls	r7, r7, #23
 8000da6:	e7ce      	b.n	8000d46 <HAL_FDCAN_AddMessageToTxFifoQ+0x3e>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000da8:	78d3      	ldrb	r3, [r2, #3]
 8000daa:	061b      	lsls	r3, r3, #24
 8000dac:	469c      	mov	ip, r3
 8000dae:	4664      	mov	r4, ip
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000db0:	7893      	ldrb	r3, [r2, #2]
 8000db2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000db4:	4323      	orrs	r3, r4
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8000db6:	7814      	ldrb	r4, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000db8:	4323      	orrs	r3, r4
 8000dba:	7854      	ldrb	r4, [r2, #1]
 8000dbc:	3204      	adds	r2, #4
 8000dbe:	0224      	lsls	r4, r4, #8
 8000dc0:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000dc2:	c708      	stmia	r7!, {r3}
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8000dc4:	e7da      	b.n	8000d7c <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000dca:	e7ac      	b.n	8000d26 <HAL_FDCAN_AddMessageToTxFifoQ+0x1e>
 8000dcc:	08002d54 	.word	0x08002d54

08000dd0 <HAL_FDCAN_GetRxMessage>:
{
 8000dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000dd2:	0004      	movs	r4, r0
{
 8000dd4:	9301      	str	r3, [sp, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000dd6:	345c      	adds	r4, #92	; 0x5c
 8000dd8:	7824      	ldrb	r4, [r4, #0]
  if (state == HAL_FDCAN_STATE_BUSY)
 8000dda:	2c02      	cmp	r4, #2
 8000ddc:	d000      	beq.n	8000de0 <HAL_FDCAN_GetRxMessage+0x10>
 8000dde:	e080      	b.n	8000ee2 <HAL_FDCAN_GetRxMessage+0x112>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000de0:	260f      	movs	r6, #15
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000de2:	6804      	ldr	r4, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000de4:	2940      	cmp	r1, #64	; 0x40
 8000de6:	d15b      	bne.n	8000ea0 <HAL_FDCAN_GetRxMessage+0xd0>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000de8:	0027      	movs	r7, r4
 8000dea:	3790      	adds	r7, #144	; 0x90
 8000dec:	683d      	ldr	r5, [r7, #0]
 8000dee:	4235      	tst	r5, r6
 8000df0:	d106      	bne.n	8000e00 <HAL_FDCAN_GetRxMessage+0x30>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000df6:	005b      	lsls	r3, r3, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	e04e      	b.n	8000e9e <HAL_FDCAN_GetRxMessage+0xce>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000e00:	2601      	movs	r6, #1
 8000e02:	46b4      	mov	ip, r6
 8000e04:	4663      	mov	r3, ip
 8000e06:	683d      	ldr	r5, [r7, #0]
 8000e08:	0e2d      	lsrs	r5, r5, #24
 8000e0a:	402e      	ands	r6, r5
 8000e0c:	421d      	tst	r5, r3
 8000e0e:	d003      	beq.n	8000e18 <HAL_FDCAN_GetRxMessage+0x48>
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000e10:	3404      	adds	r4, #4
 8000e12:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8000e14:	0a76      	lsrs	r6, r6, #9
 8000e16:	401e      	ands	r6, r3
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000e18:	2448      	movs	r4, #72	; 0x48
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000e1a:	683d      	ldr	r5, [r7, #0]
 8000e1c:	05ad      	lsls	r5, r5, #22
 8000e1e:	0fad      	lsrs	r5, r5, #30
 8000e20:	19ad      	adds	r5, r5, r6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000e22:	436c      	muls	r4, r5
 8000e24:	6c86      	ldr	r6, [r0, #72]	; 0x48
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000e26:	19a4      	adds	r4, r4, r6
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000e28:	2680      	movs	r6, #128	; 0x80
 8000e2a:	6827      	ldr	r7, [r4, #0]
 8000e2c:	05f6      	lsls	r6, r6, #23
 8000e2e:	4037      	ands	r7, r6
 8000e30:	6057      	str	r7, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000e32:	6826      	ldr	r6, [r4, #0]
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000e34:	00f6      	lsls	r6, r6, #3
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000e36:	2f00      	cmp	r7, #0
 8000e38:	d14a      	bne.n	8000ed0 <HAL_FDCAN_GetRxMessage+0x100>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000e3a:	0d76      	lsrs	r6, r6, #21
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000e3c:	2780      	movs	r7, #128	; 0x80
 8000e3e:	6016      	str	r6, [r2, #0]
 8000e40:	6826      	ldr	r6, [r4, #0]
 8000e42:	05bf      	lsls	r7, r7, #22
 8000e44:	403e      	ands	r6, r7
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e46:	2780      	movs	r7, #128	; 0x80
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000e48:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000e4a:	6826      	ldr	r6, [r4, #0]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e4c:	037f      	lsls	r7, r7, #13
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000e4e:	0ff6      	lsrs	r6, r6, #31
 8000e50:	07f6      	lsls	r6, r6, #31
 8000e52:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000e54:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_FDCAN_GetRxMessage+0x118>)
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000e58:	b2b6      	uxth	r6, r6
 8000e5a:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000e5c:	6866      	ldr	r6, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000e5e:	469c      	mov	ip, r3
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000e60:	0336      	lsls	r6, r6, #12
 8000e62:	0f36      	lsrs	r6, r6, #28
 8000e64:	60d6      	str	r6, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e66:	6866      	ldr	r6, [r4, #4]
 8000e68:	403e      	ands	r6, r7
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000e6a:	2780      	movs	r7, #128	; 0x80
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e6c:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000e6e:	6866      	ldr	r6, [r4, #4]
 8000e70:	03bf      	lsls	r7, r7, #14
 8000e72:	403e      	ands	r6, r7
 8000e74:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000e76:	6866      	ldr	r6, [r4, #4]
 8000e78:	0076      	lsls	r6, r6, #1
 8000e7a:	0e76      	lsrs	r6, r6, #25
 8000e7c:	6216      	str	r6, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000e7e:	6866      	ldr	r6, [r4, #4]
      pRxData[ByteCounter] = pData[ByteCounter];
 8000e80:	3408      	adds	r4, #8
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000e82:	0ff6      	lsrs	r6, r6, #31
 8000e84:	6256      	str	r6, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000e86:	2600      	movs	r6, #0
 8000e88:	4663      	mov	r3, ip
 8000e8a:	68d7      	ldr	r7, [r2, #12]
 8000e8c:	5ddf      	ldrb	r7, [r3, r7]
 8000e8e:	42b7      	cmp	r7, r6
 8000e90:	d820      	bhi.n	8000ed4 <HAL_FDCAN_GetRxMessage+0x104>
      hfdcan->Instance->RXF0A = GetIndex;
 8000e92:	6803      	ldr	r3, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000e94:	2940      	cmp	r1, #64	; 0x40
 8000e96:	d122      	bne.n	8000ede <HAL_FDCAN_GetRxMessage+0x10e>
      hfdcan->Instance->RXF0A = GetIndex;
 8000e98:	3394      	adds	r3, #148	; 0x94
    return HAL_OK;
 8000e9a:	2000      	movs	r0, #0
      hfdcan->Instance->RXF1A = GetIndex;
 8000e9c:	601d      	str	r5, [r3, #0]
}
 8000e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000ea0:	0025      	movs	r5, r4
 8000ea2:	3598      	adds	r5, #152	; 0x98
 8000ea4:	682f      	ldr	r7, [r5, #0]
 8000ea6:	4237      	tst	r7, r6
 8000ea8:	d0a3      	beq.n	8000df2 <HAL_FDCAN_GetRxMessage+0x22>
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000eaa:	682e      	ldr	r6, [r5, #0]
 8000eac:	2701      	movs	r7, #1
 8000eae:	0e33      	lsrs	r3, r6, #24
 8000eb0:	001e      	movs	r6, r3
 8000eb2:	403e      	ands	r6, r7
 8000eb4:	423b      	tst	r3, r7
 8000eb6:	d003      	beq.n	8000ec0 <HAL_FDCAN_GetRxMessage+0xf0>
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000eb8:	3404      	adds	r4, #4
 8000eba:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8000ebc:	0a36      	lsrs	r6, r6, #8
 8000ebe:	403e      	ands	r6, r7
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000ec0:	2448      	movs	r4, #72	; 0x48
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000ec2:	682d      	ldr	r5, [r5, #0]
 8000ec4:	05ad      	lsls	r5, r5, #22
 8000ec6:	0fad      	lsrs	r5, r5, #30
 8000ec8:	19ad      	adds	r5, r5, r6
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000eca:	436c      	muls	r4, r5
 8000ecc:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8000ece:	e7aa      	b.n	8000e26 <HAL_FDCAN_GetRxMessage+0x56>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000ed0:	08f6      	lsrs	r6, r6, #3
 8000ed2:	e7b3      	b.n	8000e3c <HAL_FDCAN_GetRxMessage+0x6c>
      pRxData[ByteCounter] = pData[ByteCounter];
 8000ed4:	5da7      	ldrb	r7, [r4, r6]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
 8000ed8:	559f      	strb	r7, [r3, r6]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000eda:	3601      	adds	r6, #1
 8000edc:	e7d4      	b.n	8000e88 <HAL_FDCAN_GetRxMessage+0xb8>
      hfdcan->Instance->RXF1A = GetIndex;
 8000ede:	339c      	adds	r3, #156	; 0x9c
 8000ee0:	e7db      	b.n	8000e9a <HAL_FDCAN_GetRxMessage+0xca>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000ee2:	2308      	movs	r3, #8
 8000ee4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000ee6:	e787      	b.n	8000df8 <HAL_FDCAN_GetRxMessage+0x28>
 8000ee8:	08002d54 	.word	0x08002d54

08000eec <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8000eec:	6803      	ldr	r3, [r0, #0]
 8000eee:	33c4      	adds	r3, #196	; 0xc4
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	4018      	ands	r0, r3
}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000ef8:	0003      	movs	r3, r0
{
 8000efa:	b570      	push	{r4, r5, r6, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000efc:	335c      	adds	r3, #92	; 0x5c
 8000efe:	781b      	ldrb	r3, [r3, #0]
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f00:	3b01      	subs	r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d900      	bls.n	8000f08 <HAL_FDCAN_ActivateNotification+0x10>
 8000f06:	e06d      	b.n	8000fe4 <HAL_FDCAN_ActivateNotification+0xec>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f08:	2407      	movs	r4, #7
 8000f0a:	000d      	movs	r5, r1
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000f0c:	6800      	ldr	r0, [r0, #0]
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f0e:	4025      	ands	r5, r4
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000f10:	6d83      	ldr	r3, [r0, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f12:	4221      	tst	r1, r4
 8000f14:	d001      	beq.n	8000f1a <HAL_FDCAN_ActivateNotification+0x22>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000f16:	07dc      	lsls	r4, r3, #31
 8000f18:	d522      	bpl.n	8000f60 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000f1a:	2438      	movs	r4, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000f1c:	4221      	tst	r1, r4
 8000f1e:	d001      	beq.n	8000f24 <HAL_FDCAN_ActivateNotification+0x2c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000f20:	079c      	lsls	r4, r3, #30
 8000f22:	d51d      	bpl.n	8000f60 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000f24:	24e0      	movs	r4, #224	; 0xe0
 8000f26:	0064      	lsls	r4, r4, #1
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000f28:	4221      	tst	r1, r4
 8000f2a:	d001      	beq.n	8000f30 <HAL_FDCAN_ActivateNotification+0x38>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000f2c:	075c      	lsls	r4, r3, #29
 8000f2e:	d517      	bpl.n	8000f60 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000f30:	24f0      	movs	r4, #240	; 0xf0
 8000f32:	0164      	lsls	r4, r4, #5
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000f34:	4221      	tst	r1, r4
 8000f36:	d001      	beq.n	8000f3c <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000f38:	071c      	lsls	r4, r3, #28
 8000f3a:	d511      	bpl.n	8000f60 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000f3c:	24e0      	movs	r4, #224	; 0xe0
 8000f3e:	0224      	lsls	r4, r4, #8
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000f40:	4221      	tst	r1, r4
 8000f42:	d001      	beq.n	8000f48 <HAL_FDCAN_ActivateNotification+0x50>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000f44:	06dc      	lsls	r4, r3, #27
 8000f46:	d50b      	bpl.n	8000f60 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8000f48:	24c0      	movs	r4, #192	; 0xc0
 8000f4a:	02a4      	lsls	r4, r4, #10
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000f4c:	4221      	tst	r1, r4
 8000f4e:	d001      	beq.n	8000f54 <HAL_FDCAN_ActivateNotification+0x5c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000f50:	069c      	lsls	r4, r3, #26
 8000f52:	d505      	bpl.n	8000f60 <HAL_FDCAN_ActivateNotification+0x68>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8000f54:	24fc      	movs	r4, #252	; 0xfc
 8000f56:	0424      	lsls	r4, r4, #16
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000f58:	4221      	tst	r1, r4
 8000f5a:	d005      	beq.n	8000f68 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000f5c:	065c      	lsls	r4, r3, #25
 8000f5e:	d403      	bmi.n	8000f68 <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000f60:	2401      	movs	r4, #1
 8000f62:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8000f64:	4334      	orrs	r4, r6
 8000f66:	65c4      	str	r4, [r0, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8000f6c:	07dc      	lsls	r4, r3, #31
 8000f6e:	d422      	bmi.n	8000fb6 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000f70:	2438      	movs	r4, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8000f72:	4221      	tst	r1, r4
 8000f74:	d001      	beq.n	8000f7a <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000f76:	079c      	lsls	r4, r3, #30
 8000f78:	d41d      	bmi.n	8000fb6 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000f7a:	24e0      	movs	r4, #224	; 0xe0
 8000f7c:	0064      	lsls	r4, r4, #1
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8000f7e:	4221      	tst	r1, r4
 8000f80:	d001      	beq.n	8000f86 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000f82:	075c      	lsls	r4, r3, #29
 8000f84:	d417      	bmi.n	8000fb6 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000f86:	24f0      	movs	r4, #240	; 0xf0
 8000f88:	0164      	lsls	r4, r4, #5
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8000f8a:	4221      	tst	r1, r4
 8000f8c:	d001      	beq.n	8000f92 <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000f8e:	071c      	lsls	r4, r3, #28
 8000f90:	d411      	bmi.n	8000fb6 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000f92:	24e0      	movs	r4, #224	; 0xe0
 8000f94:	0224      	lsls	r4, r4, #8
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8000f96:	4221      	tst	r1, r4
 8000f98:	d001      	beq.n	8000f9e <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000f9a:	06dc      	lsls	r4, r3, #27
 8000f9c:	d40b      	bmi.n	8000fb6 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8000f9e:	24c0      	movs	r4, #192	; 0xc0
 8000fa0:	02a4      	lsls	r4, r4, #10
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8000fa2:	4221      	tst	r1, r4
 8000fa4:	d001      	beq.n	8000faa <HAL_FDCAN_ActivateNotification+0xb2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000fa6:	069c      	lsls	r4, r3, #26
 8000fa8:	d405      	bmi.n	8000fb6 <HAL_FDCAN_ActivateNotification+0xbe>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8000faa:	24fc      	movs	r4, #252	; 0xfc
 8000fac:	0424      	lsls	r4, r4, #16
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8000fae:	4221      	tst	r1, r4
 8000fb0:	d005      	beq.n	8000fbe <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8000fb2:	065b      	lsls	r3, r3, #25
 8000fb4:	d503      	bpl.n	8000fbe <HAL_FDCAN_ActivateNotification+0xc6>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8000fba:	4323      	orrs	r3, r4
 8000fbc:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8000fbe:	060b      	lsls	r3, r1, #24
 8000fc0:	d504      	bpl.n	8000fcc <HAL_FDCAN_ActivateNotification+0xd4>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8000fc2:	0004      	movs	r4, r0
 8000fc4:	34dc      	adds	r4, #220	; 0xdc
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	6023      	str	r3, [r4, #0]
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8000fcc:	05cb      	lsls	r3, r1, #23
 8000fce:	d504      	bpl.n	8000fda <HAL_FDCAN_ActivateNotification+0xe2>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8000fd0:	0004      	movs	r4, r0
 8000fd2:	34e0      	adds	r4, #224	; 0xe0
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	6023      	str	r3, [r4, #0]
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8000fda:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_OK;
 8000fe0:	2000      	movs	r0, #0
}
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e7f8      	b.n	8000fe2 <HAL_FDCAN_ActivateNotification+0xea>

08000ff0 <HAL_FDCAN_IRQHandler>:
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000ff0:	6802      	ldr	r2, [r0, #0]
{
 8000ff2:	b510      	push	{r4, lr}
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000ff4:	6d11      	ldr	r1, [r2, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000ff6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000ff8:	2407      	movs	r4, #7
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	4021      	ands	r1, r4
  if (RxFifo0ITs != 0U)
 8001000:	4223      	tst	r3, r4
 8001002:	d002      	beq.n	800100a <HAL_FDCAN_IRQHandler+0x1a>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001004:	6511      	str	r1, [r2, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001006:	f000 ffa7 	bl	8001f58 <HAL_FDCAN_RxFifo0Callback>
}
 800100a:	bd10      	pop	{r4, pc}

0800100c <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	2000      	movs	r0, #0

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_FLASH_Unlock+0x18>)
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	4282      	cmp	r2, r0
 8001014:	da05      	bge.n	8001022 <HAL_FLASH_Unlock+0x16>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_FLASH_Unlock+0x1c>)
 8001018:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_FLASH_Unlock+0x20>)
 800101c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800101e:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	0fc0      	lsrs	r0, r0, #31
      status = HAL_ERROR;
    }
  }

  return status;
}
 8001022:	4770      	bx	lr
 8001024:	40022000 	.word	0x40022000
 8001028:	45670123 	.word	0x45670123
 800102c:	cdef89ab 	.word	0xcdef89ab

08001030 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	0004      	movs	r4, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fcd2 	bl	80009dc <HAL_GetTick>
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8001038:	27c0      	movs	r7, #192	; 0xc0
  uint32_t tickstart = HAL_GetTick();
 800103a:	0006      	movs	r6, r0
  while ((FLASH->SR & error) != 0x00U)
 800103c:	02bf      	lsls	r7, r7, #10
 800103e:	4d14      	ldr	r5, [pc, #80]	; (8001090 <FLASH_WaitForLastOperation+0x60>)
 8001040:	692b      	ldr	r3, [r5, #16]
 8001042:	423b      	tst	r3, r7
 8001044:	d116      	bne.n	8001074 <FLASH_WaitForLastOperation+0x44>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8001046:	692a      	ldr	r2, [r5, #16]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <FLASH_WaitForLastOperation+0x64>)
 800104a:	0011      	movs	r1, r2

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <FLASH_WaitForLastOperation+0x68>)
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800104e:	4019      	ands	r1, r3
  FLASH->SR = FLASH_SR_CLEAR;
 8001050:	6128      	str	r0, [r5, #16]

  if (error != 0x00U)
 8001052:	421a      	tst	r2, r3
 8001054:	d117      	bne.n	8001086 <FLASH_WaitForLastOperation+0x56>
    pFlash.ErrorCode = error;
    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001056:	2780      	movs	r7, #128	; 0x80
 8001058:	02ff      	lsls	r7, r7, #11
 800105a:	692b      	ldr	r3, [r5, #16]
 800105c:	0018      	movs	r0, r3
 800105e:	4038      	ands	r0, r7
 8001060:	423b      	tst	r3, r7
 8001062:	d00f      	beq.n	8001084 <FLASH_WaitForLastOperation+0x54>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001064:	1c63      	adds	r3, r4, #1
 8001066:	d0f8      	beq.n	800105a <FLASH_WaitForLastOperation+0x2a>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001068:	f7ff fcb8 	bl	80009dc <HAL_GetTick>
 800106c:	1b80      	subs	r0, r0, r6
 800106e:	42a0      	cmp	r0, r4
 8001070:	d3f3      	bcc.n	800105a <FLASH_WaitForLastOperation+0x2a>
 8001072:	e006      	b.n	8001082 <FLASH_WaitForLastOperation+0x52>
    if(Timeout != HAL_MAX_DELAY)
 8001074:	1c63      	adds	r3, r4, #1
 8001076:	d0e3      	beq.n	8001040 <FLASH_WaitForLastOperation+0x10>
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001078:	f7ff fcb0 	bl	80009dc <HAL_GetTick>
 800107c:	1b80      	subs	r0, r0, r6
 800107e:	42a0      	cmp	r0, r4
 8001080:	d3dd      	bcc.n	800103e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8001084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pFlash.ErrorCode = error;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <FLASH_WaitForLastOperation+0x6c>)
    return HAL_ERROR;
 8001088:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800108a:	6059      	str	r1, [r3, #4]
    return HAL_ERROR;
 800108c:	e7fa      	b.n	8001084 <FLASH_WaitForLastOperation+0x54>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	40022000 	.word	0x40022000
 8001094:	0000c3fa 	.word	0x0000c3fa
 8001098:	0008c3fb 	.word	0x0008c3fb
 800109c:	200001d8 	.word	0x200001d8

080010a0 <HAL_FLASH_Program>:
{
 80010a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80010a2:	4e17      	ldr	r6, [pc, #92]	; (8001100 <HAL_FLASH_Program+0x60>)
{
 80010a4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 80010a6:	7833      	ldrb	r3, [r6, #0]
{
 80010a8:	0004      	movs	r4, r0
 80010aa:	000d      	movs	r5, r1
  __HAL_LOCK(&pFlash);
 80010ac:	2002      	movs	r0, #2
{
 80010ae:	9200      	str	r2, [sp, #0]
  __HAL_LOCK(&pFlash);
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d01e      	beq.n	80010f2 <HAL_FLASH_Program+0x52>
 80010b4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010b6:	20fa      	movs	r0, #250	; 0xfa
  __HAL_LOCK(&pFlash);
 80010b8:	7033      	strb	r3, [r6, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010ba:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010bc:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010be:	6073      	str	r3, [r6, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010c0:	f7ff ffb6 	bl	8001030 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d112      	bne.n	80010ee <HAL_FLASH_Program+0x4e>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80010c8:	4f0e      	ldr	r7, [pc, #56]	; (8001104 <HAL_FLASH_Program+0x64>)
 80010ca:	2c01      	cmp	r4, #1
 80010cc:	d112      	bne.n	80010f4 <HAL_FLASH_Program+0x54>
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4323      	orrs	r3, r4
 80010d2:	617b      	str	r3, [r7, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80010d4:	9b00      	ldr	r3, [sp, #0]
 80010d6:	602b      	str	r3, [r5, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80010d8:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80010dc:	9b01      	ldr	r3, [sp, #4]
 80010de:	606b      	str	r3, [r5, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010e0:	20fa      	movs	r0, #250	; 0xfa
 80010e2:	0080      	lsls	r0, r0, #2
 80010e4:	f7ff ffa4 	bl	8001030 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	43a3      	bics	r3, r4
 80010ec:	617b      	str	r3, [r7, #20]
  __HAL_UNLOCK(&pFlash);
 80010ee:	2300      	movs	r3, #0
 80010f0:	7033      	strb	r3, [r6, #0]
}
 80010f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80010f4:	0028      	movs	r0, r5
 80010f6:	9900      	ldr	r1, [sp, #0]
 80010f8:	f001 fde2 	bl	8002cc0 <__FLASH_Program_Fast_veneer>
 80010fc:	e7f0      	b.n	80010e0 <HAL_FLASH_Program+0x40>
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	200001d8 	.word	0x200001d8
 8001104:	40022000 	.word	0x40022000

08001108 <HAL_FLASH_Lock>:
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001108:	20fa      	movs	r0, #250	; 0xfa
{
 800110a:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800110c:	0080      	lsls	r0, r0, #2
 800110e:	f7ff ff8f 	bl	8001030 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_FLASH_Lock+0x20>)
 8001116:	0612      	lsls	r2, r2, #24
 8001118:	6959      	ldr	r1, [r3, #20]
 800111a:	430a      	orrs	r2, r1
 800111c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800111e:	6958      	ldr	r0, [r3, #20]
 8001120:	43c0      	mvns	r0, r0
  return status;
 8001122:	0fc0      	lsrs	r0, r0, #31
}
 8001124:	bd10      	pop	{r4, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_FLASHEx_OBGetConfig>:
  *           @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *           @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_FLASHEx_OBGetConfig+0x14>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	b2db      	uxtb	r3, r3

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8001132:	2baa      	cmp	r3, #170	; 0xaa
 8001134:	d002      	beq.n	800113c <HAL_FLASHEx_OBGetConfig+0x10>
 8001136:	2bcc      	cmp	r3, #204	; 0xcc
 8001138:	d000      	beq.n	800113c <HAL_FLASHEx_OBGetConfig+0x10>
  {
    return (OB_RDP_LEVEL_1);
 800113a:	23bb      	movs	r3, #187	; 0xbb
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800113c:	6103      	str	r3, [r0, #16]
}
 800113e:	4770      	bx	lr
 8001140:	40022000 	.word	0x40022000

08001144 <FLASH_PageErase>:
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <FLASH_PageErase+0x24>)
 8001146:	6953      	ldr	r3, [r2, #20]
  if (Banks != FLASH_BANK_1)
 8001148:	2804      	cmp	r0, #4
 800114a:	d00a      	beq.n	8001162 <FLASH_PageErase+0x1e>
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <FLASH_PageErase+0x28>)
 800114e:	4003      	ands	r3, r0
    tmp |= FLASH_CR_BKER;
 8001150:	2080      	movs	r0, #128	; 0x80
 8001152:	0180      	lsls	r0, r0, #6
 8001154:	4303      	orrs	r3, r0
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001156:	00c9      	lsls	r1, r1, #3
 8001158:	4319      	orrs	r1, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <FLASH_PageErase+0x2c>)
 800115c:	430b      	orrs	r3, r1
 800115e:	6153      	str	r3, [r2, #20]
}
 8001160:	4770      	bx	lr
    tmp &= ~FLASH_CR_BKER;
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <FLASH_PageErase+0x30>)
 8001164:	4003      	ands	r3, r0
 8001166:	e7f6      	b.n	8001156 <FLASH_PageErase+0x12>
 8001168:	40022000 	.word	0x40022000
 800116c:	ffffe007 	.word	0xffffe007
 8001170:	00010002 	.word	0x00010002
 8001174:	ffffc007 	.word	0xffffc007

08001178 <HAL_FLASHEx_Erase>:
{
 8001178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800117a:	4f22      	ldr	r7, [pc, #136]	; (8001204 <HAL_FLASHEx_Erase+0x8c>)
{
 800117c:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 800117e:	783b      	ldrb	r3, [r7, #0]
 8001180:	2402      	movs	r4, #2
{
 8001182:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(&pFlash);
 8001184:	2b01      	cmp	r3, #1
 8001186:	d01b      	beq.n	80011c0 <HAL_FLASHEx_Erase+0x48>
 8001188:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800118a:	20fa      	movs	r0, #250	; 0xfa
  __HAL_LOCK(&pFlash);
 800118c:	703b      	strb	r3, [r7, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800118e:	2300      	movs	r3, #0
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001190:	0080      	lsls	r0, r0, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001192:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001194:	f7ff ff4c 	bl	8001030 <FLASH_WaitForLastOperation>
 8001198:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 800119a:	d10f      	bne.n	80011bc <HAL_FLASHEx_Erase+0x44>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d110      	bne.n	80011c4 <HAL_FLASHEx_Erase+0x4c>
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80011a2:	4919      	ldr	r1, [pc, #100]	; (8001208 <HAL_FLASHEx_Erase+0x90>)
 80011a4:	686b      	ldr	r3, [r5, #4]
 80011a6:	694a      	ldr	r2, [r1, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011a8:	20fa      	movs	r0, #250	; 0xfa
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80011aa:	431a      	orrs	r2, r3
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	025b      	lsls	r3, r3, #9
 80011b0:	4313      	orrs	r3, r2
 80011b2:	614b      	str	r3, [r1, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011b4:	0080      	lsls	r0, r0, #2
 80011b6:	f7ff ff3b 	bl	8001030 <FLASH_WaitForLastOperation>
 80011ba:	0004      	movs	r4, r0
  __HAL_UNLOCK(&pFlash);
 80011bc:	2300      	movs	r3, #0
 80011be:	703b      	strb	r3, [r7, #0]
}
 80011c0:	0020      	movs	r0, r4
 80011c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      *PageError = 0xFFFFFFFFU;
 80011c4:	2301      	movs	r3, #1
 80011c6:	9a01      	ldr	r2, [sp, #4]
 80011c8:	425b      	negs	r3, r3
 80011ca:	6013      	str	r3, [r2, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80011cc:	68ae      	ldr	r6, [r5, #8]
 80011ce:	68ab      	ldr	r3, [r5, #8]
 80011d0:	68ea      	ldr	r2, [r5, #12]
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	42b3      	cmp	r3, r6
 80011d6:	d90c      	bls.n	80011f2 <HAL_FLASHEx_Erase+0x7a>
        FLASH_PageErase(pEraseInit->Banks, index);
 80011d8:	6868      	ldr	r0, [r5, #4]
 80011da:	0031      	movs	r1, r6
 80011dc:	f7ff ffb2 	bl	8001144 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011e0:	20fa      	movs	r0, #250	; 0xfa
 80011e2:	0080      	lsls	r0, r0, #2
 80011e4:	f7ff ff24 	bl	8001030 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d008      	beq.n	80011fe <HAL_FLASHEx_Erase+0x86>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011ec:	0004      	movs	r4, r0
          *PageError = index;
 80011ee:	9b01      	ldr	r3, [sp, #4]
 80011f0:	601e      	str	r6, [r3, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80011f2:	2102      	movs	r1, #2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_FLASHEx_Erase+0x90>)
 80011f6:	6953      	ldr	r3, [r2, #20]
 80011f8:	438b      	bics	r3, r1
 80011fa:	6153      	str	r3, [r2, #20]
 80011fc:	e7de      	b.n	80011bc <HAL_FLASHEx_Erase+0x44>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80011fe:	3601      	adds	r6, #1
 8001200:	e7e5      	b.n	80011ce <HAL_FLASHEx_Erase+0x56>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	200001d8 	.word	0x200001d8
 8001208:	40022000 	.word	0x40022000

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800120e:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001210:	680b      	ldr	r3, [r1, #0]
 8001212:	001c      	movs	r4, r3
 8001214:	40d4      	lsrs	r4, r2
 8001216:	d100      	bne.n	800121a <HAL_GPIO_Init+0xe>
//      }
    }

    position++;
  }
}
 8001218:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800121a:	2401      	movs	r4, #1
 800121c:	4094      	lsls	r4, r2
 800121e:	46a4      	mov	ip, r4
    if (iocurrent != 0x00u)
 8001220:	4223      	tst	r3, r4
 8001222:	d037      	beq.n	8001294 <HAL_GPIO_Init+0x88>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001224:	2503      	movs	r5, #3
 8001226:	0056      	lsls	r6, r2, #1
 8001228:	40b5      	lsls	r5, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122a:	2403      	movs	r4, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800122c:	43ed      	mvns	r5, r5
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122e:	684b      	ldr	r3, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001230:	9501      	str	r5, [sp, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001232:	401c      	ands	r4, r3
 8001234:	1e65      	subs	r5, r4, #1
 8001236:	2d01      	cmp	r5, #1
 8001238:	d80f      	bhi.n	800125a <HAL_GPIO_Init+0x4e>
        temp = GPIOx->OSPEEDR;
 800123a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800123c:	9d01      	ldr	r5, [sp, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	091b      	lsrs	r3, r3, #4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001240:	402f      	ands	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001242:	68cd      	ldr	r5, [r1, #12]
 8001244:	40b5      	lsls	r5, r6
 8001246:	433d      	orrs	r5, r7
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001248:	4667      	mov	r7, ip
        GPIOx->OSPEEDR = temp;
 800124a:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800124c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800124e:	43bd      	bics	r5, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001250:	2701      	movs	r7, #1
 8001252:	403b      	ands	r3, r7
 8001254:	4093      	lsls	r3, r2
 8001256:	432b      	orrs	r3, r5
        GPIOx->OTYPER = temp;
 8001258:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	2c02      	cmp	r4, #2
 800125c:	d114      	bne.n	8001288 <HAL_GPIO_Init+0x7c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125e:	2707      	movs	r7, #7
 8001260:	250f      	movs	r5, #15
 8001262:	4017      	ands	r7, r2
 8001264:	00bf      	lsls	r7, r7, #2
 8001266:	40bd      	lsls	r5, r7
 8001268:	46ac      	mov	ip, r5
        temp = GPIOx->AFR[position >> 3u];
 800126a:	08d3      	lsrs	r3, r2, #3
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	18c3      	adds	r3, r0, r3
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	6a1b      	ldr	r3, [r3, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001274:	001d      	movs	r5, r3
 8001276:	4663      	mov	r3, ip
 8001278:	439d      	bics	r5, r3
 800127a:	46ac      	mov	ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800127c:	690d      	ldr	r5, [r1, #16]
 800127e:	4663      	mov	r3, ip
 8001280:	40bd      	lsls	r5, r7
 8001282:	431d      	orrs	r5, r3
        GPIOx->AFR[position >> 3u] = temp;
 8001284:	9b00      	ldr	r3, [sp, #0]
 8001286:	621d      	str	r5, [r3, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	40b4      	lsls	r4, r6
      temp = GPIOx->MODER;
 800128a:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800128c:	9d01      	ldr	r5, [sp, #4]
 800128e:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001290:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001292:	6004      	str	r4, [r0, #0]
    position++;
 8001294:	3201      	adds	r2, #1
 8001296:	e7bb      	b.n	8001210 <HAL_GPIO_Init+0x4>

08001298 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	2a00      	cmp	r2, #0
 800129a:	d001      	beq.n	80012a0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80012a2:	e7fc      	b.n	800129e <HAL_GPIO_WritePin+0x6>

080012a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012a6:	4c11      	ldr	r4, [pc, #68]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0x48>)
 80012a8:	4911      	ldr	r1, [pc, #68]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80012aa:	6823      	ldr	r3, [r4, #0]
{
 80012ac:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012ae:	400b      	ands	r3, r1
 80012b0:	4303      	orrs	r3, r0
 80012b2:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b4:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012b6:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d10e      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80012c0:	490d      	ldr	r1, [pc, #52]	; (80012f8 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	2306      	movs	r3, #6
 80012c6:	4358      	muls	r0, r3
 80012c8:	f7fe ff1e 	bl	8000108 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012cc:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012ce:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	6961      	ldr	r1, [r4, #20]
 80012d4:	0008      	movs	r0, r1
 80012d6:	4010      	ands	r0, r2
 80012d8:	4211      	tst	r1, r2
 80012da:	d100      	bne.n	80012de <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80012dc:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80012e2:	3b01      	subs	r3, #1
 80012e4:	e7f5      	b.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80012e6:	2003      	movs	r0, #3
 80012e8:	e7f8      	b.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x38>
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40007000 	.word	0x40007000
 80012f0:	fffff9ff 	.word	0xfffff9ff
 80012f4:	20000000 	.word	0x20000000
 80012f8:	000f4240 	.word	0x000f4240

080012fc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80012fc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80012fe:	f7ff fb6d 	bl	80009dc <HAL_GetTick>

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001302:	2380      	movs	r3, #128	; 0x80

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001304:	2680      	movs	r6, #128	; 0x80
  tickstart = HAL_GetTick();
 8001306:	0005      	movs	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001308:	4c24      	ldr	r4, [pc, #144]	; (800139c <HAL_RCC_DeInit+0xa0>)
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	6822      	ldr	r2, [r4, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130e:	00f6      	lsls	r6, r6, #3
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001310:	4313      	orrs	r3, r2
 8001312:	6023      	str	r3, [r4, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	4233      	tst	r3, r6
 8001318:	d02b      	beq.n	8001372 <HAL_RCC_DeInit+0x76>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	6063      	str	r3, [r4, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001320:	f7ff fb5c 	bl	80009dc <HAL_GetTick>

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8001324:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8001326:	0005      	movs	r5, r0

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001328:	2638      	movs	r6, #56	; 0x38
  RCC->CFGR = 0x00000000u;
 800132a:	60a3      	str	r3, [r4, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800132c:	68a3      	ldr	r3, [r4, #8]
 800132e:	4233      	tst	r3, r6
 8001330:	d126      	bne.n	8001380 <HAL_RCC_DeInit+0x84>
      return HAL_TIMEOUT;
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	6023      	str	r3, [r4, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001338:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800133a:	f7ff fb4f 	bl	80009dc <HAL_GetTick>

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800133e:	2680      	movs	r6, #128	; 0x80
  tickstart = HAL_GetTick();
 8001340:	0005      	movs	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001342:	04b6      	lsls	r6, r6, #18
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	001a      	movs	r2, r3
 8001348:	4032      	ands	r2, r6
 800134a:	4233      	tst	r3, r6
 800134c:	d11f      	bne.n	800138e <HAL_RCC_DeInit+0x92>
      return HAL_TIMEOUT;
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	60e3      	str	r3, [r4, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8001354:	2301      	movs	r3, #1
 8001356:	425b      	negs	r3, r3
  RCC->CIER = 0x00000000u;
 8001358:	61a2      	str	r2, [r4, #24]
  RCC->CICR = 0xFFFFFFFFu;
 800135a:	6223      	str	r3, [r4, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_RCC_DeInit+0xa4>)
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_RCC_DeInit+0xa8>)
 8001360:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_RCC_DeInit+0xac>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	f7ff faf1 	bl	800094c <HAL_InitTick>
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
      return HAL_TIMEOUT;
 800136e:	b2c0      	uxtb	r0, r0
 8001370:	e005      	b.n	800137e <HAL_RCC_DeInit+0x82>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fb33 	bl	80009dc <HAL_GetTick>
 8001376:	1b40      	subs	r0, r0, r5
 8001378:	2802      	cmp	r0, #2
 800137a:	d9cb      	bls.n	8001314 <HAL_RCC_DeInit+0x18>
      return HAL_TIMEOUT;
 800137c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 800137e:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001380:	f7ff fb2c 	bl	80009dc <HAL_GetTick>
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_DeInit+0xb0>)
 8001386:	1b40      	subs	r0, r0, r5
 8001388:	4298      	cmp	r0, r3
 800138a:	d9cf      	bls.n	800132c <HAL_RCC_DeInit+0x30>
 800138c:	e7f6      	b.n	800137c <HAL_RCC_DeInit+0x80>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fb25 	bl	80009dc <HAL_GetTick>
 8001392:	1b40      	subs	r0, r0, r5
 8001394:	2802      	cmp	r0, #2
 8001396:	d9d5      	bls.n	8001344 <HAL_RCC_DeInit+0x48>
 8001398:	e7f0      	b.n	800137c <HAL_RCC_DeInit+0x80>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40021000 	.word	0x40021000
 80013a0:	00f42400 	.word	0x00f42400
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	00001388 	.word	0x00001388

080013b0 <HAL_RCC_OscConfig>:
//        }
//      }
//    }
//  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b0:	6803      	ldr	r3, [r0, #0]
{
 80013b2:	b510      	push	{r4, lr}
 80013b4:	0004      	movs	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	079b      	lsls	r3, r3, #30
 80013b8:	d404      	bmi.n	80013c4 <HAL_RCC_OscConfig+0x14>
//#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ba:	6a22      	ldr	r2, [r4, #32]
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d128      	bne.n	8001412 <HAL_RCC_OscConfig+0x62>
//          return HAL_ERROR;
//        }
      }
    }
  }
  return HAL_OK;
 80013c0:	2000      	movs	r0, #0
 80013c2:	e007      	b.n	80013d4 <HAL_RCC_OscConfig+0x24>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0xe8>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	d504      	bpl.n	80013d6 <HAL_RCC_OscConfig+0x26>
 80013cc:	68c2      	ldr	r2, [r0, #12]
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x26>
        return HAL_ERROR;
 80013d2:	2001      	movs	r0, #1
}
 80013d4:	bd10      	pop	{r4, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	6962      	ldr	r2, [r4, #20]
 80013da:	4830      	ldr	r0, [pc, #192]	; (800149c <HAL_RCC_OscConfig+0xec>)
 80013dc:	0212      	lsls	r2, r2, #8
 80013de:	4001      	ands	r1, r0
 80013e0:	430a      	orrs	r2, r1
 80013e2:	605a      	str	r2, [r3, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e4:	2200      	movs	r2, #0
 80013e6:	4292      	cmp	r2, r2
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x54>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	492c      	ldr	r1, [pc, #176]	; (80014a0 <HAL_RCC_OscConfig+0xf0>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	6921      	ldr	r1, [r4, #16]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0xf4>)
 80013fa:	049b      	lsls	r3, r3, #18
 80013fc:	0f5b      	lsrs	r3, r3, #29
 80013fe:	40da      	lsrs	r2, r3
 8001400:	4929      	ldr	r1, [pc, #164]	; (80014a8 <HAL_RCC_OscConfig+0xf8>)
 8001402:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <HAL_RCC_OscConfig+0xfc>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	f7ff faa0 	bl	800094c <HAL_InitTick>
 800140c:	2800      	cmp	r0, #0
 800140e:	d0d4      	beq.n	80013ba <HAL_RCC_OscConfig+0xa>
 8001410:	e7df      	b.n	80013d2 <HAL_RCC_OscConfig+0x22>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001412:	2038      	movs	r0, #56	; 0x38
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_RCC_OscConfig+0xe8>)
 8001416:	6899      	ldr	r1, [r3, #8]
 8001418:	4001      	ands	r1, r0
 800141a:	2910      	cmp	r1, #16
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	4823      	ldr	r0, [pc, #140]	; (80014b0 <HAL_RCC_OscConfig+0x100>)
 8001422:	0489      	lsls	r1, r1, #18
 8001424:	2a02      	cmp	r2, #2
 8001426:	d126      	bne.n	8001476 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4002      	ands	r2, r0
 800142c:	601a      	str	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	420a      	tst	r2, r1
 8001432:	d1fc      	bne.n	800142e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001434:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001436:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001438:	68d9      	ldr	r1, [r3, #12]
 800143a:	4302      	orrs	r2, r0
 800143c:	481d      	ldr	r0, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x104>)
 800143e:	4001      	ands	r1, r0
 8001440:	430a      	orrs	r2, r1
 8001442:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001444:	430a      	orrs	r2, r1
 8001446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001448:	430a      	orrs	r2, r1
 800144a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800144c:	430a      	orrs	r2, r1
 800144e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001450:	0209      	lsls	r1, r1, #8
 8001452:	430a      	orrs	r2, r1
 8001454:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLL_ENABLE();
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	0452      	lsls	r2, r2, #17
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	68d9      	ldr	r1, [r3, #12]
 8001464:	0552      	lsls	r2, r2, #21
 8001466:	430a      	orrs	r2, r1
 8001468:	60da      	str	r2, [r3, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	0492      	lsls	r2, r2, #18
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	4211      	tst	r1, r2
 8001472:	d0fc      	beq.n	800146e <HAL_RCC_OscConfig+0xbe>
 8001474:	e7a4      	b.n	80013c0 <HAL_RCC_OscConfig+0x10>
        __HAL_RCC_PLL_DISABLE();
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4002      	ands	r2, r0
 800147a:	601a      	str	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	0010      	movs	r0, r2
 8001480:	4008      	ands	r0, r1
 8001482:	420a      	tst	r2, r1
 8001484:	d1fa      	bne.n	800147c <HAL_RCC_OscConfig+0xcc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	490b      	ldr	r1, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x108>)
 800148a:	400a      	ands	r2, r1
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e7a1      	b.n	80013d4 <HAL_RCC_OscConfig+0x24>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001490:	2a01      	cmp	r2, #1
 8001492:	d09e      	beq.n	80013d2 <HAL_RCC_OscConfig+0x22>
        temp_pllckcfg = RCC->PLLCFGR;
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	e793      	b.n	80013c0 <HAL_RCC_OscConfig+0x10>
 8001498:	40021000 	.word	0x40021000
 800149c:	ffff80ff 	.word	0xffff80ff
 80014a0:	ffffc7ff 	.word	0xffffc7ff
 80014a4:	00f42400 	.word	0x00f42400
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000008 	.word	0x20000008
 80014b0:	feffffff 	.word	0xfeffffff
 80014b4:	11c1808c 	.word	0x11c1808c
 80014b8:	eefefffc 	.word	0xeefefffc

080014bc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014bc:	2338      	movs	r3, #56	; 0x38
{
 80014be:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c0:	4c1d      	ldr	r4, [pc, #116]	; (8001538 <HAL_RCC_GetSysClockFreq+0x7c>)
 80014c2:	68a2      	ldr	r2, [r4, #8]
 80014c4:	421a      	tst	r2, r3
 80014c6:	d105      	bne.n	80014d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014c8:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014cc:	049b      	lsls	r3, r3, #18
 80014ce:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014d0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d4:	68a2      	ldr	r2, [r4, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	2a08      	cmp	r2, #8
 80014da:	d027      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x70>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014dc:	68a2      	ldr	r2, [r4, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	2a10      	cmp	r2, #16
 80014e2:	d117      	bne.n	8001514 <HAL_RCC_GetSysClockFreq+0x58>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014e4:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014e6:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014e8:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014ea:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014ec:	0649      	lsls	r1, r1, #25
 80014ee:	0f49      	lsrs	r1, r1, #29
 80014f0:	326f      	adds	r2, #111	; 0x6f
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014f2:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014f4:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014f6:	4015      	ands	r5, r2
    switch (pllsource)
 80014f8:	079b      	lsls	r3, r3, #30
 80014fa:	d109      	bne.n	8001510 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014fe:	f7fe fe03 	bl	8000108 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001502:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001504:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001506:	0f49      	lsrs	r1, r1, #29
 8001508:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800150a:	f7fe fdfd 	bl	8000108 <__udivsi3>
 800150e:	e7e0      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <HAL_RCC_GetSysClockFreq+0x80>)
 8001512:	e7f4      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001514:	68a2      	ldr	r2, [r4, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	2a20      	cmp	r2, #32
 800151a:	d009      	beq.n	8001530 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800151c:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800151e:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001520:	4013      	ands	r3, r2
 8001522:	2b18      	cmp	r3, #24
 8001524:	d1d5      	bne.n	80014d2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 8001526:	20fa      	movs	r0, #250	; 0xfa
 8001528:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 800152a:	e7d2      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <HAL_RCC_GetSysClockFreq+0x84>)
 800152e:	e7d0      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8001530:	2080      	movs	r0, #128	; 0x80
 8001532:	0200      	lsls	r0, r0, #8
 8001534:	e7cd      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x16>
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40021000 	.word	0x40021000
 800153c:	00f42400 	.word	0x00f42400
 8001540:	007a1200 	.word	0x007a1200

08001544 <HAL_RCC_ClockConfig>:
{
 8001544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001546:	0004      	movs	r4, r0
 8001548:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800154a:	2800      	cmp	r0, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
}
 8001550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001552:	2707      	movs	r7, #7
 8001554:	4e4a      	ldr	r6, [pc, #296]	; (8001680 <HAL_RCC_ClockConfig+0x13c>)
 8001556:	6833      	ldr	r3, [r6, #0]
 8001558:	403b      	ands	r3, r7
 800155a:	428b      	cmp	r3, r1
 800155c:	d32a      	bcc.n	80015b4 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	0793      	lsls	r3, r2, #30
 8001562:	d43b      	bmi.n	80015dc <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001564:	07d2      	lsls	r2, r2, #31
 8001566:	d448      	bmi.n	80015fa <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001568:	2707      	movs	r7, #7
 800156a:	6833      	ldr	r3, [r6, #0]
 800156c:	403b      	ands	r3, r7
 800156e:	42ab      	cmp	r3, r5
 8001570:	d90a      	bls.n	8001588 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	6833      	ldr	r3, [r6, #0]
 8001574:	43bb      	bics	r3, r7
 8001576:	432b      	orrs	r3, r5
 8001578:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800157a:	f7ff fa2f 	bl	80009dc <HAL_GetTick>
 800157e:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001580:	6833      	ldr	r3, [r6, #0]
 8001582:	403b      	ands	r3, r7
 8001584:	42ab      	cmp	r3, r5
 8001586:	d16b      	bne.n	8001660 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	4d3e      	ldr	r5, [pc, #248]	; (8001684 <HAL_RCC_ClockConfig+0x140>)
 800158c:	075b      	lsls	r3, r3, #29
 800158e:	d46f      	bmi.n	8001670 <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001590:	f7ff ff94 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 8001594:	68ab      	ldr	r3, [r5, #8]
 8001596:	493c      	ldr	r1, [pc, #240]	; (8001688 <HAL_RCC_ClockConfig+0x144>)
 8001598:	051b      	lsls	r3, r3, #20
 800159a:	0f1b      	lsrs	r3, r3, #28
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	585b      	ldr	r3, [r3, r1]
 80015a0:	211f      	movs	r1, #31
 80015a2:	400b      	ands	r3, r1
 80015a4:	40d8      	lsrs	r0, r3
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <HAL_RCC_ClockConfig+0x148>)
  return HAL_InitTick(uwTickPrio);
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015aa:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	f7ff f9cd 	bl	800094c <HAL_InitTick>
 80015b2:	e7cd      	b.n	8001550 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	43bb      	bics	r3, r7
 80015b8:	430b      	orrs	r3, r1
 80015ba:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80015bc:	f7ff fa0e 	bl	80009dc <HAL_GetTick>
 80015c0:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015c2:	6833      	ldr	r3, [r6, #0]
 80015c4:	403b      	ands	r3, r7
 80015c6:	42ab      	cmp	r3, r5
 80015c8:	d0c9      	beq.n	800155e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ca:	f7ff fa07 	bl	80009dc <HAL_GetTick>
 80015ce:	9b01      	ldr	r3, [sp, #4]
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_ClockConfig+0x150>)
 80015d4:	4298      	cmp	r0, r3
 80015d6:	d9f4      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 80015d8:	2003      	movs	r0, #3
 80015da:	e7b9      	b.n	8001550 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	4929      	ldr	r1, [pc, #164]	; (8001684 <HAL_RCC_ClockConfig+0x140>)
 80015de:	0753      	lsls	r3, r2, #29
 80015e0:	d504      	bpl.n	80015ec <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015e2:	23e0      	movs	r3, #224	; 0xe0
 80015e4:	6888      	ldr	r0, [r1, #8]
 80015e6:	01db      	lsls	r3, r3, #7
 80015e8:	4303      	orrs	r3, r0
 80015ea:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	688b      	ldr	r3, [r1, #8]
 80015ee:	482a      	ldr	r0, [pc, #168]	; (8001698 <HAL_RCC_ClockConfig+0x154>)
 80015f0:	4003      	ands	r3, r0
 80015f2:	68a0      	ldr	r0, [r4, #8]
 80015f4:	4303      	orrs	r3, r0
 80015f6:	608b      	str	r3, [r1, #8]
 80015f8:	e7b4      	b.n	8001564 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	6862      	ldr	r2, [r4, #4]
 80015fc:	4f21      	ldr	r7, [pc, #132]	; (8001684 <HAL_RCC_ClockConfig+0x140>)
 80015fe:	2a01      	cmp	r2, #1
 8001600:	d119      	bne.n	8001636 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	039b      	lsls	r3, r3, #14
 8001606:	d5a2      	bpl.n	800154e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001608:	2107      	movs	r1, #7
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	438b      	bics	r3, r1
 800160e:	4313      	orrs	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8001612:	f7ff f9e3 	bl	80009dc <HAL_GetTick>
 8001616:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001618:	2338      	movs	r3, #56	; 0x38
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	401a      	ands	r2, r3
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	429a      	cmp	r2, r3
 8001624:	d0a0      	beq.n	8001568 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001626:	f7ff f9d9 	bl	80009dc <HAL_GetTick>
 800162a:	9b01      	ldr	r3, [sp, #4]
 800162c:	1ac0      	subs	r0, r0, r3
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_RCC_ClockConfig+0x150>)
 8001630:	4298      	cmp	r0, r3
 8001632:	d9f1      	bls.n	8001618 <HAL_RCC_ClockConfig+0xd4>
 8001634:	e7d0      	b.n	80015d8 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	2a02      	cmp	r2, #2
 8001638:	d103      	bne.n	8001642 <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	d4e3      	bmi.n	8001608 <HAL_RCC_ClockConfig+0xc4>
 8001640:	e785      	b.n	800154e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001642:	2a00      	cmp	r2, #0
 8001644:	d103      	bne.n	800164e <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	055b      	lsls	r3, r3, #21
 800164a:	d4dd      	bmi.n	8001608 <HAL_RCC_ClockConfig+0xc4>
 800164c:	e77f      	b.n	800154e <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800164e:	2302      	movs	r3, #2
 8001650:	2a03      	cmp	r2, #3
 8001652:	d103      	bne.n	800165c <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001654:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001656:	4219      	tst	r1, r3
 8001658:	d1d6      	bne.n	8001608 <HAL_RCC_ClockConfig+0xc4>
 800165a:	e778      	b.n	800154e <HAL_RCC_ClockConfig+0xa>
 800165c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800165e:	e7fa      	b.n	8001656 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001660:	f7ff f9bc 	bl	80009dc <HAL_GetTick>
 8001664:	9b01      	ldr	r3, [sp, #4]
 8001666:	1ac0      	subs	r0, r0, r3
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x150>)
 800166a:	4298      	cmp	r0, r3
 800166c:	d988      	bls.n	8001580 <HAL_RCC_ClockConfig+0x3c>
 800166e:	e7b3      	b.n	80015d8 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	68ab      	ldr	r3, [r5, #8]
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x158>)
 8001674:	4013      	ands	r3, r2
 8001676:	68e2      	ldr	r2, [r4, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60ab      	str	r3, [r5, #8]
 800167c:	e788      	b.n	8001590 <HAL_RCC_ClockConfig+0x4c>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40022000 	.word	0x40022000
 8001684:	40021000 	.word	0x40021000
 8001688:	08002cf4 	.word	0x08002cf4
 800168c:	20000000 	.word	0x20000000
 8001690:	20000008 	.word	0x20000008
 8001694:	00001388 	.word	0x00001388
 8001698:	fffff0ff 	.word	0xfffff0ff
 800169c:	ffff8fff 	.word	0xffff8fff

080016a0 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80016a2:	4907      	ldr	r1, [pc, #28]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80016a8:	045b      	lsls	r3, r3, #17
 80016aa:	0f5b      	lsrs	r3, r3, #29
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	585b      	ldr	r3, [r3, r1]
 80016b0:	211f      	movs	r1, #31
 80016b2:	6810      	ldr	r0, [r2, #0]
 80016b4:	400b      	ands	r3, r1
 80016b6:	40d8      	lsrs	r0, r3
}
 80016b8:	4770      	bx	lr
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08002d34 	.word	0x08002d34
 80016c4:	20000000 	.word	0x20000000

080016c8 <HAL_RCCEx_PeriphCLKConfig>:
//  }
//#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016c8:	6802      	ldr	r2, [r0, #0]
{
 80016ca:	b510      	push	{r4, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016cc:	0753      	lsls	r3, r2, #29
 80016ce:	d506      	bpl.n	80016de <HAL_RCCEx_PeriphCLKConfig+0x16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016d0:	2430      	movs	r4, #48	; 0x30
 80016d2:	490d      	ldr	r1, [pc, #52]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x40>)
 80016d4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80016d6:	43a3      	bics	r3, r4
 80016d8:	68c4      	ldr	r4, [r0, #12]
 80016da:	4323      	orrs	r3, r4
 80016dc:	654b      	str	r3, [r1, #84]	; 0x54
//  }
//#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80016de:	0192      	lsls	r2, r2, #6
 80016e0:	d50f      	bpl.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x40>)
 80016e4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x44>)
 80016ea:	4003      	ands	r3, r0
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6593      	str	r3, [r2, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4299      	cmp	r1, r3
 80016f6:	d104      	bne.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	68d1      	ldr	r1, [r2, #12]
 80016fc:	045b      	lsls	r3, r3, #17
 80016fe:	430b      	orrs	r3, r1
 8001700:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8001702:	2000      	movs	r0, #0
 8001704:	bd10      	pop	{r4, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	40021000 	.word	0x40021000
 800170c:	fffffcff 	.word	0xfffffcff

08001710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001710:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001712:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001716:	2201      	movs	r2, #1
 8001718:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800171c:	6801      	ldr	r1, [r0, #0]
 800171e:	4d13      	ldr	r5, [pc, #76]	; (800176c <UART_EndRxTransfer+0x5c>)
 8001720:	680b      	ldr	r3, [r1, #0]
 8001722:	402b      	ands	r3, r5
 8001724:	600b      	str	r3, [r1, #0]
 8001726:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800172a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800172e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001732:	6802      	ldr	r2, [r0, #0]
 8001734:	4c0e      	ldr	r4, [pc, #56]	; (8001770 <UART_EndRxTransfer+0x60>)
 8001736:	6893      	ldr	r3, [r2, #8]
 8001738:	4023      	ands	r3, r4
 800173a:	6093      	str	r3, [r2, #8]
 800173c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001740:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10a      	bne.n	800175c <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001746:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800174a:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800174e:	2410      	movs	r4, #16
 8001750:	6802      	ldr	r2, [r0, #0]
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	43a3      	bics	r3, r4
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800175c:	0003      	movs	r3, r0
 800175e:	2220      	movs	r2, #32
 8001760:	338c      	adds	r3, #140	; 0x8c
 8001762:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001764:	2300      	movs	r3, #0
 8001766:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001768:	6743      	str	r3, [r0, #116]	; 0x74
}
 800176a:	bd30      	pop	{r4, r5, pc}
 800176c:	fffffedf 	.word	0xfffffedf
 8001770:	effffffe 	.word	0xeffffffe

08001774 <UART_SetConfig>:
{
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8001778:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800177a:	6882      	ldr	r2, [r0, #8]
 800177c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800177e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001780:	4302      	orrs	r2, r0
 8001782:	6960      	ldr	r0, [r4, #20]
 8001784:	4302      	orrs	r2, r0
 8001786:	69e0      	ldr	r0, [r4, #28]
 8001788:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800178a:	481f      	ldr	r0, [pc, #124]	; (8001808 <UART_SetConfig+0x94>)
 800178c:	4001      	ands	r1, r0
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	491d      	ldr	r1, [pc, #116]	; (800180c <UART_SetConfig+0x98>)
 8001796:	400a      	ands	r2, r1
 8001798:	68e1      	ldr	r1, [r4, #12]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <UART_SetConfig+0x9c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80017a0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d004      	beq.n	80017b0 <UART_SetConfig+0x3c>
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <UART_SetConfig+0xa0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d001      	beq.n	80017b0 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 80017ac:	6a22      	ldr	r2, [r4, #32]
 80017ae:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	4819      	ldr	r0, [pc, #100]	; (8001818 <UART_SetConfig+0xa4>)
 80017b4:	4002      	ands	r2, r0
 80017b6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80017b8:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80017ba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80017bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017be:	438a      	bics	r2, r1
 80017c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017c2:	430a      	orrs	r2, r1
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pclk = HAL_RCC_GetPCLK1Freq();
 80017c6:	f7ff ff6b 	bl	80016a0 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80017ca:	2200      	movs	r2, #0
    if (pclk != 0U)
 80017cc:	4290      	cmp	r0, r2
 80017ce:	d014      	beq.n	80017fa <UART_SetConfig+0x86>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80017d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <UART_SetConfig+0xa8>)
 80017d4:	0052      	lsls	r2, r2, #1
 80017d6:	5ad1      	ldrh	r1, [r2, r3]
 80017d8:	f7fe fc96 	bl	8000108 <__udivsi3>
 80017dc:	6865      	ldr	r5, [r4, #4]
 80017de:	086b      	lsrs	r3, r5, #1
 80017e0:	0029      	movs	r1, r5
 80017e2:	18c0      	adds	r0, r0, r3
 80017e4:	f7fe fc90 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017e8:	490d      	ldr	r1, [pc, #52]	; (8001820 <UART_SetConfig+0xac>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80017ea:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017ec:	3810      	subs	r0, #16
        ret = HAL_ERROR;
 80017ee:	2201      	movs	r2, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017f0:	4288      	cmp	r0, r1
 80017f2:	d802      	bhi.n	80017fa <UART_SetConfig+0x86>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80017f4:	6822      	ldr	r2, [r4, #0]
 80017f6:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80017f8:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <UART_SetConfig+0xb0>)
}
 80017fc:	0010      	movs	r0, r2
  huart->NbRxDataToProcess = 1;
 80017fe:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001804:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	cfff69f3 	.word	0xcfff69f3
 800180c:	ffffcfff 	.word	0xffffcfff
 8001810:	40008000 	.word	0x40008000
 8001814:	40008400 	.word	0x40008400
 8001818:	11fff4ff 	.word	0x11fff4ff
 800181c:	08002d64 	.word	0x08002d64
 8001820:	0000ffef 	.word	0x0000ffef
 8001824:	00010001 	.word	0x00010001

08001828 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001828:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800182a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800182c:	071a      	lsls	r2, r3, #28
 800182e:	d506      	bpl.n	800183e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001830:	6801      	ldr	r1, [r0, #0]
 8001832:	4c28      	ldr	r4, [pc, #160]	; (80018d4 <UART_AdvFeatureConfig+0xac>)
 8001834:	684a      	ldr	r2, [r1, #4]
 8001836:	4022      	ands	r2, r4
 8001838:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800183a:	4322      	orrs	r2, r4
 800183c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800183e:	07da      	lsls	r2, r3, #31
 8001840:	d506      	bpl.n	8001850 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001842:	6801      	ldr	r1, [r0, #0]
 8001844:	4c24      	ldr	r4, [pc, #144]	; (80018d8 <UART_AdvFeatureConfig+0xb0>)
 8001846:	684a      	ldr	r2, [r1, #4]
 8001848:	4022      	ands	r2, r4
 800184a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800184c:	4322      	orrs	r2, r4
 800184e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001850:	079a      	lsls	r2, r3, #30
 8001852:	d506      	bpl.n	8001862 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001854:	6801      	ldr	r1, [r0, #0]
 8001856:	4c21      	ldr	r4, [pc, #132]	; (80018dc <UART_AdvFeatureConfig+0xb4>)
 8001858:	684a      	ldr	r2, [r1, #4]
 800185a:	4022      	ands	r2, r4
 800185c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800185e:	4322      	orrs	r2, r4
 8001860:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001862:	075a      	lsls	r2, r3, #29
 8001864:	d506      	bpl.n	8001874 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001866:	6801      	ldr	r1, [r0, #0]
 8001868:	4c1d      	ldr	r4, [pc, #116]	; (80018e0 <UART_AdvFeatureConfig+0xb8>)
 800186a:	684a      	ldr	r2, [r1, #4]
 800186c:	4022      	ands	r2, r4
 800186e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001870:	4322      	orrs	r2, r4
 8001872:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001874:	06da      	lsls	r2, r3, #27
 8001876:	d506      	bpl.n	8001886 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001878:	6801      	ldr	r1, [r0, #0]
 800187a:	4c1a      	ldr	r4, [pc, #104]	; (80018e4 <UART_AdvFeatureConfig+0xbc>)
 800187c:	688a      	ldr	r2, [r1, #8]
 800187e:	4022      	ands	r2, r4
 8001880:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001882:	4322      	orrs	r2, r4
 8001884:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001886:	069a      	lsls	r2, r3, #26
 8001888:	d506      	bpl.n	8001898 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800188a:	6801      	ldr	r1, [r0, #0]
 800188c:	4c16      	ldr	r4, [pc, #88]	; (80018e8 <UART_AdvFeatureConfig+0xc0>)
 800188e:	688a      	ldr	r2, [r1, #8]
 8001890:	4022      	ands	r2, r4
 8001892:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001894:	4322      	orrs	r2, r4
 8001896:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001898:	065a      	lsls	r2, r3, #25
 800189a:	d510      	bpl.n	80018be <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800189c:	6801      	ldr	r1, [r0, #0]
 800189e:	4d13      	ldr	r5, [pc, #76]	; (80018ec <UART_AdvFeatureConfig+0xc4>)
 80018a0:	684a      	ldr	r2, [r1, #4]
 80018a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80018a4:	402a      	ands	r2, r5
 80018a6:	4322      	orrs	r2, r4
 80018a8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	0352      	lsls	r2, r2, #13
 80018ae:	4294      	cmp	r4, r2
 80018b0:	d105      	bne.n	80018be <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018b2:	684a      	ldr	r2, [r1, #4]
 80018b4:	4c0e      	ldr	r4, [pc, #56]	; (80018f0 <UART_AdvFeatureConfig+0xc8>)
 80018b6:	4022      	ands	r2, r4
 80018b8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80018ba:	4322      	orrs	r2, r4
 80018bc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018be:	061b      	lsls	r3, r3, #24
 80018c0:	d506      	bpl.n	80018d0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018c2:	6802      	ldr	r2, [r0, #0]
 80018c4:	490b      	ldr	r1, [pc, #44]	; (80018f4 <UART_AdvFeatureConfig+0xcc>)
 80018c6:	6853      	ldr	r3, [r2, #4]
 80018c8:	400b      	ands	r3, r1
 80018ca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6053      	str	r3, [r2, #4]
}
 80018d0:	bd30      	pop	{r4, r5, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	ffff7fff 	.word	0xffff7fff
 80018d8:	fffdffff 	.word	0xfffdffff
 80018dc:	fffeffff 	.word	0xfffeffff
 80018e0:	fffbffff 	.word	0xfffbffff
 80018e4:	ffffefff 	.word	0xffffefff
 80018e8:	ffffdfff 	.word	0xffffdfff
 80018ec:	ffefffff 	.word	0xffefffff
 80018f0:	ff9fffff 	.word	0xff9fffff
 80018f4:	fff7ffff 	.word	0xfff7ffff

080018f8 <UART_WaitOnFlagUntilTimeout>:
{
 80018f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018fa:	0004      	movs	r4, r0
 80018fc:	000d      	movs	r5, r1
 80018fe:	0017      	movs	r7, r2
 8001900:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	69d3      	ldr	r3, [r2, #28]
 8001906:	402b      	ands	r3, r5
 8001908:	1b5b      	subs	r3, r3, r5
 800190a:	4259      	negs	r1, r3
 800190c:	414b      	adcs	r3, r1
 800190e:	42bb      	cmp	r3, r7
 8001910:	d001      	beq.n	8001916 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001912:	2000      	movs	r0, #0
 8001914:	e027      	b.n	8001966 <UART_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8001916:	9b08      	ldr	r3, [sp, #32]
 8001918:	3301      	adds	r3, #1
 800191a:	d0f3      	beq.n	8001904 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800191c:	f7ff f85e 	bl	80009dc <HAL_GetTick>
 8001920:	9b00      	ldr	r3, [sp, #0]
 8001922:	1ac0      	subs	r0, r0, r3
 8001924:	9b08      	ldr	r3, [sp, #32]
 8001926:	4298      	cmp	r0, r3
 8001928:	d82e      	bhi.n	8001988 <UART_WaitOnFlagUntilTimeout+0x90>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d02c      	beq.n	8001988 <UART_WaitOnFlagUntilTimeout+0x90>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800192e:	2104      	movs	r1, #4
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	420a      	tst	r2, r1
 8001936:	d0e4      	beq.n	8001902 <UART_WaitOnFlagUntilTimeout+0xa>
 8001938:	002a      	movs	r2, r5
 800193a:	313c      	adds	r1, #60	; 0x3c
 800193c:	3a40      	subs	r2, #64	; 0x40
 800193e:	438a      	bics	r2, r1
 8001940:	d0df      	beq.n	8001902 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	2608      	movs	r6, #8
 8001946:	0011      	movs	r1, r2
 8001948:	4031      	ands	r1, r6
 800194a:	9101      	str	r1, [sp, #4]
 800194c:	4232      	tst	r2, r6
 800194e:	d00b      	beq.n	8001968 <UART_WaitOnFlagUntilTimeout+0x70>
          UART_EndRxTransfer(huart);
 8001950:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001952:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8001954:	f7ff fedc 	bl	8001710 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001958:	0023      	movs	r3, r4
 800195a:	3390      	adds	r3, #144	; 0x90
 800195c:	601e      	str	r6, [r3, #0]
          __HAL_UNLOCK(huart);
 800195e:	2300      	movs	r3, #0
          return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8001962:	3484      	adds	r4, #132	; 0x84
 8001964:	7023      	strb	r3, [r4, #0]
}
 8001966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	69d9      	ldr	r1, [r3, #28]
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	4211      	tst	r1, r2
 8001970:	d0c7      	beq.n	8001902 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001972:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8001974:	0020      	movs	r0, r4
 8001976:	f7ff fecb 	bl	8001710 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800197a:	0023      	movs	r3, r4
 800197c:	2220      	movs	r2, #32
 800197e:	3390      	adds	r3, #144	; 0x90
 8001980:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(huart);
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	3484      	adds	r4, #132	; 0x84
 8001986:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001988:	2003      	movs	r0, #3
 800198a:	e7ec      	b.n	8001966 <UART_WaitOnFlagUntilTimeout+0x6e>

0800198c <HAL_UART_Transmit>:
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	0016      	movs	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001990:	0002      	movs	r2, r0
{
 8001992:	b085      	sub	sp, #20
  if (huart->gState == HAL_UART_STATE_READY)
 8001994:	3288      	adds	r2, #136	; 0x88
{
 8001996:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8001998:	6813      	ldr	r3, [r2, #0]
{
 800199a:	0004      	movs	r4, r0
 800199c:	000d      	movs	r5, r1
    return HAL_BUSY;
 800199e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d13a      	bne.n	8001a1a <HAL_UART_Transmit+0x8e>
      return  HAL_ERROR;
 80019a4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80019a6:	2900      	cmp	r1, #0
 80019a8:	d037      	beq.n	8001a1a <HAL_UART_Transmit+0x8e>
 80019aa:	2e00      	cmp	r6, #0
 80019ac:	d035      	beq.n	8001a1a <HAL_UART_Transmit+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	68a1      	ldr	r1, [r4, #8]
 80019b2:	015b      	lsls	r3, r3, #5
 80019b4:	4299      	cmp	r1, r3
 80019b6:	d104      	bne.n	80019c2 <HAL_UART_Transmit+0x36>
 80019b8:	6923      	ldr	r3, [r4, #16]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 80019be:	4205      	tst	r5, r0
 80019c0:	d12b      	bne.n	8001a1a <HAL_UART_Transmit+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c2:	0023      	movs	r3, r4
 80019c4:	2100      	movs	r1, #0
 80019c6:	3390      	adds	r3, #144	; 0x90
 80019c8:	6019      	str	r1, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ca:	2321      	movs	r3, #33	; 0x21
 80019cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80019ce:	f7ff f805 	bl	80009dc <HAL_GetTick>
    huart->TxXferSize  = Size;
 80019d2:	0023      	movs	r3, r4
 80019d4:	3354      	adds	r3, #84	; 0x54
 80019d6:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80019d8:	3302      	adds	r3, #2
 80019da:	801e      	strh	r6, [r3, #0]
 80019dc:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80019e2:	0007      	movs	r7, r0
      pdata16bits = NULL;
 80019e4:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019e6:	015b      	lsls	r3, r3, #5
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d104      	bne.n	80019f6 <HAL_UART_Transmit+0x6a>
 80019ec:	6923      	ldr	r3, [r4, #16]
 80019ee:	42b3      	cmp	r3, r6
 80019f0:	d101      	bne.n	80019f6 <HAL_UART_Transmit+0x6a>
 80019f2:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80019f4:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80019f6:	0023      	movs	r3, r4
 80019f8:	3356      	adds	r3, #86	; 0x56
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_UART_Transmit+0x92>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a02:	9b03      	ldr	r3, [sp, #12]
 8001a04:	0020      	movs	r0, r4
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2140      	movs	r1, #64	; 0x40
 8001a0a:	003b      	movs	r3, r7
 8001a0c:	f7ff ff74 	bl	80018f8 <UART_WaitOnFlagUntilTimeout>
 8001a10:	2320      	movs	r3, #32
 8001a12:	3488      	adds	r4, #136	; 0x88
      huart->gState = HAL_UART_STATE_READY;
 8001a14:	6023      	str	r3, [r4, #0]
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a16:	2800      	cmp	r0, #0
 8001a18:	d10e      	bne.n	8001a38 <HAL_UART_Transmit+0xac>
}
 8001a1a:	b005      	add	sp, #20
 8001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a1e:	9b03      	ldr	r3, [sp, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	003b      	movs	r3, r7
 8001a28:	0020      	movs	r0, r4
 8001a2a:	f7ff ff65 	bl	80018f8 <UART_WaitOnFlagUntilTimeout>
 8001a2e:	2800      	cmp	r0, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_UART_Transmit+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8001a32:	2320      	movs	r3, #32
 8001a34:	3488      	adds	r4, #136	; 0x88
 8001a36:	6023      	str	r3, [r4, #0]
      return HAL_TIMEOUT;
 8001a38:	2003      	movs	r0, #3
 8001a3a:	e7ee      	b.n	8001a1a <HAL_UART_Transmit+0x8e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a3c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	d10b      	bne.n	8001a5a <HAL_UART_Transmit+0xce>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a42:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001a44:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a46:	05db      	lsls	r3, r3, #23
 8001a48:	0ddb      	lsrs	r3, r3, #23
 8001a4a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001a4c:	9b02      	ldr	r3, [sp, #8]
 8001a4e:	9a02      	ldr	r2, [sp, #8]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	8013      	strh	r3, [r2, #0]
 8001a58:	e7cd      	b.n	80019f6 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a5a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001a5c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a5e:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8001a60:	e7f4      	b.n	8001a4c <HAL_UART_Transmit+0xc0>
	...

08001a64 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a64:	0003      	movs	r3, r0
{
 8001a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a68:	2600      	movs	r6, #0
{
 8001a6a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a6c:	3390      	adds	r3, #144	; 0x90
 8001a6e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8001a70:	f7fe ffb4 	bl	80009dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a74:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001a76:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	071b      	lsls	r3, r3, #28
 8001a7c:	d51f      	bpl.n	8001abe <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <UART_CheckIdleState+0xc0>)
 8001a82:	0032      	movs	r2, r6
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	0389      	lsls	r1, r1, #14
 8001a88:	0003      	movs	r3, r0
 8001a8a:	0020      	movs	r0, r4
 8001a8c:	f7ff ff34 	bl	80018f8 <UART_WaitOnFlagUntilTimeout>
 8001a90:	42b0      	cmp	r0, r6
 8001a92:	d014      	beq.n	8001abe <UART_CheckIdleState+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001a9e:	2080      	movs	r0, #128	; 0x80
 8001aa0:	6822      	ldr	r2, [r4, #0]
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	4383      	bics	r3, r0
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001aac:	0023      	movs	r3, r4
 8001aae:	2220      	movs	r2, #32
 8001ab0:	3388      	adds	r3, #136	; 0x88
 8001ab2:	601a      	str	r2, [r3, #0]
      return HAL_TIMEOUT;
 8001ab4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	3484      	adds	r4, #132	; 0x84
 8001aba:	7023      	strb	r3, [r4, #0]
}
 8001abc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001abe:	0026      	movs	r6, r4
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	368c      	adds	r6, #140	; 0x8c
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	075b      	lsls	r3, r3, #29
 8001ac8:	d523      	bpl.n	8001b12 <UART_CheckIdleState+0xae>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <UART_CheckIdleState+0xc0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	002b      	movs	r3, r5
 8001ad6:	03c9      	lsls	r1, r1, #15
 8001ad8:	f7ff ff0e 	bl	80018f8 <UART_WaitOnFlagUntilTimeout>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d018      	beq.n	8001b12 <UART_CheckIdleState+0xae>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ae0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001aea:	6821      	ldr	r1, [r4, #0]
 8001aec:	4d0e      	ldr	r5, [pc, #56]	; (8001b28 <UART_CheckIdleState+0xc4>)
 8001aee:	680b      	ldr	r3, [r1, #0]
 8001af0:	402b      	ands	r3, r5
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001afc:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b00:	6821      	ldr	r1, [r4, #0]
 8001b02:	688b      	ldr	r3, [r1, #8]
 8001b04:	4393      	bics	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
 8001b08:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	6033      	str	r3, [r6, #0]
 8001b10:	e7d0      	b.n	8001ab4 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001b12:	0023      	movs	r3, r4
 8001b14:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b16:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b18:	3388      	adds	r3, #136	; 0x88
 8001b1a:	601a      	str	r2, [r3, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001b1c:	6032      	str	r2, [r6, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b1e:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b20:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8001b22:	e7c8      	b.n	8001ab6 <UART_CheckIdleState+0x52>
 8001b24:	01ffffff 	.word	0x01ffffff
 8001b28:	fffffedf 	.word	0xfffffedf

08001b2c <HAL_UART_Init>:
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001b30:	d101      	bne.n	8001b36 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
}
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b36:	0005      	movs	r5, r0
 8001b38:	3588      	adds	r5, #136	; 0x88
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8001b40:	0002      	movs	r2, r0
 8001b42:	3284      	adds	r2, #132	; 0x84
 8001b44:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001b46:	f7fe fe81 	bl	800084c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b4a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b50:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	438b      	bics	r3, r1
 8001b56:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8001b5e:	0020      	movs	r0, r4
 8001b60:	f7ff fe62 	bl	8001828 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b64:	0020      	movs	r0, r4
 8001b66:	f7ff fe05 	bl	8001774 <UART_SetConfig>
 8001b6a:	2801      	cmp	r0, #1
 8001b6c:	d0e1      	beq.n	8001b32 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <HAL_UART_Init+0x64>)
 8001b72:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001b74:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b76:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b78:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	438a      	bics	r2, r1
 8001b80:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001b82:	2201      	movs	r2, #1
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001b8a:	f7ff ff6b 	bl	8001a64 <UART_CheckIdleState>
 8001b8e:	e7d1      	b.n	8001b34 <HAL_UART_Init+0x8>
 8001b90:	ffffb7ff 	.word	0xffffb7ff

08001b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8001b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b96:	0007      	movs	r7, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8001b98:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8001b9a:	0004      	movs	r4, r0
 8001b9c:	376a      	adds	r7, #106	; 0x6a
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d104      	bne.n	8001bac <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	8038      	strh	r0, [r7, #0]
    huart->NbRxDataToProcess = 1U;
 8001ba6:	3468      	adds	r4, #104	; 0x68
 8001ba8:	8020      	strh	r0, [r4, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8001baa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001bac:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001bae:	4e0b      	ldr	r6, [pc, #44]	; (8001bdc <UARTEx_SetNbDataToProcess+0x48>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001bb0:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8001bb2:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8001bb4:	4d0a      	ldr	r5, [pc, #40]	; (8001be0 <UARTEx_SetNbDataToProcess+0x4c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8001bb6:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001bb8:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8001bba:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001bbc:	00c0      	lsls	r0, r0, #3
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001bbe:	9201      	str	r2, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001bc0:	f7fe fb2c 	bl	800021c <__divsi3>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001bc4:	9b01      	ldr	r3, [sp, #4]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8001bc6:	8038      	strh	r0, [r7, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8001bc8:	011b      	lsls	r3, r3, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001bca:	0f5b      	lsrs	r3, r3, #29
 8001bcc:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8001bce:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8001bd0:	00c0      	lsls	r0, r0, #3
 8001bd2:	f7fe fb23 	bl	800021c <__divsi3>
 8001bd6:	b280      	uxth	r0, r0
}
 8001bd8:	e7e5      	b.n	8001ba6 <UARTEx_SetNbDataToProcess+0x12>
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	08002d84 	.word	0x08002d84
 8001be0:	08002d7c 	.word	0x08002d7c

08001be4 <HAL_UARTEx_DisableFifoMode>:
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8001be6:	0004      	movs	r4, r0
 8001be8:	3484      	adds	r4, #132	; 0x84
 8001bea:	7822      	ldrb	r2, [r4, #0]
{
 8001bec:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8001bee:	2002      	movs	r0, #2
 8001bf0:	2a01      	cmp	r2, #1
 8001bf2:	d011      	beq.n	8001c18 <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bf4:	001d      	movs	r5, r3
 8001bf6:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001bf8:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8001bfa:	3588      	adds	r5, #136	; 0x88
 8001bfc:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8001c02:	6810      	ldr	r0, [r2, #0]
 8001c04:	43b0      	bics	r0, r6
 8001c06:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <HAL_UARTEx_DisableFifoMode+0x38>)
 8001c0a:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8001c10:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001c12:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001c14:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 8001c16:	7020      	strb	r0, [r4, #0]
}
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	dfffffff 	.word	0xdfffffff

08001c20 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8001c22:	0005      	movs	r5, r0
 8001c24:	3584      	adds	r5, #132	; 0x84
{
 8001c26:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8001c28:	7829      	ldrb	r1, [r5, #0]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	2901      	cmp	r1, #1
 8001c2e:	d015      	beq.n	8001c5c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c30:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8001c32:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001c34:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c36:	3688      	adds	r6, #136	; 0x88
 8001c38:	3222      	adds	r2, #34	; 0x22
 8001c3a:	6032      	str	r2, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001c3c:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8001c3e:	6822      	ldr	r2, [r4, #0]
 8001c40:	438a      	bics	r2, r1
 8001c42:	6022      	str	r2, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8001c44:	68a1      	ldr	r1, [r4, #8]
 8001c46:	00c9      	lsls	r1, r1, #3
 8001c48:	08c9      	lsrs	r1, r1, #3
 8001c4a:	4319      	orrs	r1, r3
 8001c4c:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8001c4e:	f7ff ffa1 	bl	8001b94 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8001c52:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001c54:	2200      	movs	r2, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001c56:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001c58:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8001c5a:	702a      	strb	r2, [r5, #0]
}
 8001c5c:	0010      	movs	r0, r2
 8001c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c60 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 8001c62:	0005      	movs	r5, r0
 8001c64:	3584      	adds	r5, #132	; 0x84
{
 8001c66:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8001c68:	7829      	ldrb	r1, [r5, #0]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	2901      	cmp	r1, #1
 8001c6e:	d015      	beq.n	8001c9c <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c70:	0006      	movs	r6, r0
  __HAL_UART_DISABLE(huart);
 8001c72:	2101      	movs	r1, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001c74:	6804      	ldr	r4, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c76:	3688      	adds	r6, #136	; 0x88
 8001c78:	3322      	adds	r3, #34	; 0x22
 8001c7a:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001c7c:	6827      	ldr	r7, [r4, #0]
  __HAL_UART_DISABLE(huart);
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	438b      	bics	r3, r1
 8001c82:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8001c84:	68a1      	ldr	r1, [r4, #8]
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_UARTEx_SetRxFifoThreshold+0x40>)
 8001c88:	4019      	ands	r1, r3
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	60a1      	str	r1, [r4, #8]
  UARTEx_SetNbDataToProcess(huart);
 8001c8e:	f7ff ff81 	bl	8001b94 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8001c92:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001c94:	6027      	str	r7, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001c96:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	702b      	strb	r3, [r5, #0]
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ca0:	f1ffffff 	.word	0xf1ffffff

08001ca4 <enterNormalMode>:
{
	HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
}

void enterNormalMode(void)									//正常模式
{
 8001ca4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_SET);		//CAN1_STB
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <enterNormalMode+0x1c>)
 8001cac:	f7ff faf4 	bl	8001298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FDCAN1_EN_GPIO_Port, FDCAN1_EN_Pin, GPIO_PIN_SET);		//CAN1_EN
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	20a0      	movs	r0, #160	; 0xa0
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	0209      	lsls	r1, r1, #8
 8001cb8:	05c0      	lsls	r0, r0, #23
 8001cba:	f7ff faed 	bl	8001298 <HAL_GPIO_WritePin>
}
 8001cbe:	bd10      	pop	{r4, pc}
 8001cc0:	50000800 	.word	0x50000800

08001cc4 <FLASH_GetReadOutProtectionLevel>:

	return status;
}

uint32_t FLASH_GetReadOutProtectionLevel(void)
{
 8001cc4:	b500      	push	{lr}
 8001cc6:	b095      	sub	sp, #84	; 0x54
	FLASH_OBProgramInitTypeDef flash_ob;

	/* Get the Option bytes configuration */
	HAL_FLASHEx_OBGetConfig(&flash_ob);
 8001cc8:	a801      	add	r0, sp, #4
 8001cca:	f7ff fa2f 	bl	800112c <HAL_FLASHEx_OBGetConfig>

	return flash_ob.RDPLevel;
 8001cce:	9805      	ldr	r0, [sp, #20]
}
 8001cd0:	b015      	add	sp, #84	; 0x54
 8001cd2:	bd00      	pop	{pc}

08001cd4 <GetReadOutProtectionStatus>:
{
 8001cd4:	b510      	push	{r4, lr}
	if (FLASH_GetReadOutProtectionLevel() != OB_RDP_LEVEL_0)
 8001cd6:	f7ff fff5 	bl	8001cc4 <FLASH_GetReadOutProtectionLevel>
 8001cda:	38aa      	subs	r0, #170	; 0xaa
 8001cdc:	1e43      	subs	r3, r0, #1
 8001cde:	4198      	sbcs	r0, r3
	return status;
 8001ce0:	b2c0      	uxtb	r0, r0
}
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <FLASH_Read>:

uint8_t FLASH_Read(uint32_t Address)
{
  return (*(uint8_t *)(Address));
 8001ce4:	7800      	ldrb	r0, [r0, #0]
}
 8001ce6:	4770      	bx	lr

08001ce8 <FLASH_Write>:

void FLASH_Write(uint32_t Address, uint8_t *Data, uint32_t DataLength)
{
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	0015      	movs	r5, r2
 8001cec:	0006      	movs	r6, r0
 8001cee:	000f      	movs	r7, r1
	uint32_t index  = 0U;
	uint32_t length = DataLength;

	/* Unlock the flash memory for write operation */
	HAL_FLASH_Unlock();
 8001cf0:	f7ff f98c 	bl	800100c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001cf4:	2280      	movs	r2, #128	; 0x80

	for (index = 0U; index < length; (index += 8U))
 8001cf6:	2400      	movs	r4, #0
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <FLASH_Write+0x34>)
 8001cfa:	0612      	lsls	r2, r2, #24
 8001cfc:	611a      	str	r2, [r3, #16]
	for (index = 0U; index < length; (index += 8U))
 8001cfe:	42ac      	cmp	r4, r5
 8001d00:	d302      	bcc.n	8001d08 <FLASH_Write+0x20>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + index), *(uint64_t *)(&Data[index]));
	}

	/* Lock the Flash to disable the flash control register access */
	HAL_FLASH_Lock();
 8001d02:	f7ff fa01 	bl	8001108 <HAL_FLASH_Lock>
}
 8001d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + index), *(uint64_t *)(&Data[index]));
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	19a1      	adds	r1, r4, r6
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f7ff f9c5 	bl	80010a0 <HAL_FLASH_Program>
	for (index = 0U; index < length; (index += 8U))
 8001d16:	3408      	adds	r4, #8
 8001d18:	e7f1      	b.n	8001cfe <FLASH_Write+0x16>
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	40022000 	.word	0x40022000

08001d20 <FLASH_Erase>:

void FLASH_Erase(uint8_t *p_Data, uint32_t DataLength)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t counter      = 0U;
	uint32_t pages_number = 0U;
	uint32_t PageError = 0;
 8001d22:	2500      	movs	r5, #0
{
 8001d24:	b087      	sub	sp, #28
 8001d26:	0004      	movs	r4, r0
 8001d28:	000e      	movs	r6, r1
	uint32_t PageError = 0;
 8001d2a:	9501      	str	r5, [sp, #4]
	FLASH_EraseInitTypeDef pEraseInit;

	HAL_FLASH_Unlock();
 8001d2c:	f7ff f96e 	bl	800100c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <FLASH_Erase+0x4c>)
 8001d34:	0612      	lsls	r2, r2, #24
 8001d36:	611a      	str	r2, [r3, #16]

	pages_number  = (uint32_t)(*(uint16_t *)(p_Data));
	p_Data += 2;

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9302      	str	r3, [sp, #8]
	pEraseInit.Banks = FLASH_BANK_1;
 8001d3c:	18db      	adds	r3, r3, r3
 8001d3e:	9303      	str	r3, [sp, #12]
	pEraseInit.NbPages   = 1U;
 8001d40:	3b03      	subs	r3, #3
	pages_number  = (uint32_t)(*(uint16_t *)(p_Data));
 8001d42:	8827      	ldrh	r7, [r4, #0]
	pEraseInit.NbPages   = 1U;
 8001d44:	9305      	str	r3, [sp, #20]
	p_Data += 2;
 8001d46:	3402      	adds	r4, #2

	for (counter = 0U; ((counter < pages_number) && (counter < DataLength)) ; counter++)
 8001d48:	42bd      	cmp	r5, r7
 8001d4a:	d201      	bcs.n	8001d50 <FLASH_Erase+0x30>
 8001d4c:	42b5      	cmp	r5, r6
 8001d4e:	d103      	bne.n	8001d58 <FLASH_Erase+0x38>
		HAL_FLASHEx_Erase(&pEraseInit, &PageError);
		p_Data += 2;
//		HAL_Delay(1);
	}

	HAL_FLASH_Lock();
 8001d50:	f7ff f9da 	bl	8001108 <HAL_FLASH_Lock>
}
 8001d54:	b007      	add	sp, #28
 8001d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pEraseInit.Page = ((uint32_t)(*(uint16_t *)(p_Data)));
 8001d58:	8823      	ldrh	r3, [r4, #0]
		HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8001d5a:	a901      	add	r1, sp, #4
 8001d5c:	a802      	add	r0, sp, #8
		pEraseInit.Page = ((uint32_t)(*(uint16_t *)(p_Data)));
 8001d5e:	9304      	str	r3, [sp, #16]
		p_Data += 2;
 8001d60:	3402      	adds	r4, #2
		HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8001d62:	f7ff fa09 	bl	8001178 <HAL_FLASHEx_Erase>
	for (counter = 0U; ((counter < pages_number) && (counter < DataLength)) ; counter++)
 8001d66:	3501      	adds	r5, #1
 8001d68:	e7ee      	b.n	8001d48 <FLASH_Erase+0x28>
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40022000 	.word	0x40022000

08001d70 <jump_to_app>:
{
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	/* 检查栈顶地址是否合法 */
	if(((*(__IO uint32_t *)APP_FLASH_ADDR) & 0x2FFDB000) == 0x20000000)
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <jump_to_app+0x30>)
 8001d72:	6803      	ldr	r3, [r0, #0]
{
 8001d74:	b510      	push	{r4, lr}
	if(((*(__IO uint32_t *)APP_FLASH_ADDR) & 0x2FFDB000) == 0x20000000)
 8001d76:	4013      	ands	r3, r2
 8001d78:	2280      	movs	r2, #128	; 0x80
{
 8001d7a:	0004      	movs	r4, r0
	if(((*(__IO uint32_t *)APP_FLASH_ADDR) & 0x2FFDB000) == 0x20000000)
 8001d7c:	0592      	lsls	r2, r2, #22
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10c      	bne.n	8001d9c <jump_to_app+0x2c>
	{
		printf("jump\n");
 8001d82:	4808      	ldr	r0, [pc, #32]	; (8001da4 <jump_to_app+0x34>)
 8001d84:	f000 fbb8 	bl	80024f8 <puts>

		/* 去初始化 */
		HAL_RCC_DeInit();
 8001d88:	f7ff fab8 	bl	80012fc <HAL_RCC_DeInit>
		HAL_DeInit();
 8001d8c:	f7fe fdca 	bl	8000924 <HAL_DeInit>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i

		/* 屏蔽所有中断，防止在跳转过程中，中断干扰出现异常 */
		__disable_irq();

		/* 用户代码区第二个 字 为程序开始地址(复位地址) */
		JumpAddress = *(__IO uint32_t *) (APP_FLASH_ADDR + 4);
 8001d92:	6863      	ldr	r3, [r4, #4]

		/* Initialize user application's Stack Pointer */
		/* 初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址) */
		__set_MSP(*(__IO uint32_t *) APP_FLASH_ADDR);
 8001d94:	6822      	ldr	r2, [r4, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001d96:	f382 8808 	msr	MSP, r2

		/* 类型转换 */
		Jump_To_Application = (pFunction) JumpAddress;

		/* 跳转到 APP */
		Jump_To_Application();
 8001d9a:	4798      	blx	r3
	}
}
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	2ffdb000 	.word	0x2ffdb000
 8001da4:	08002d8c 	.word	0x08002d8c

08001da8 <FDCAN_Config>:
#define PAGE_SIZE   FLASH_PAGE_SIZE          /* 2KB Page */
#define	MAX_SIZE	0x08000000 + 0x020000 - 0x0800F000

void FDCAN_Config(void)
{
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 8001da8:	2300      	movs	r3, #0
 8001daa:	4914      	ldr	r1, [pc, #80]	; (8001dfc <FDCAN_Config+0x54>)
{
 8001dac:	b510      	push	{r4, lr}
	hfdcan_filter.IdType = FDCAN_STANDARD_ID;
 8001dae:	600b      	str	r3, [r1, #0]
	hfdcan_filter.FilterIndex = 0;
 8001db0:	604b      	str	r3, [r1, #4]
	hfdcan_filter.FilterType = FDCAN_FILTER_MASK;
 8001db2:	3302      	adds	r3, #2
 8001db4:	608b      	str	r3, [r1, #8]
	hfdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001db6:	3b01      	subs	r3, #1
 8001db8:	60cb      	str	r3, [r1, #12]
	hfdcan_filter.FilterID1 = 0x111;
 8001dba:	2312      	movs	r3, #18
	hfdcan_filter.FilterID2 = 0x7FF;

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8001dbc:	4c10      	ldr	r4, [pc, #64]	; (8001e00 <FDCAN_Config+0x58>)
	hfdcan_filter.FilterID1 = 0x111;
 8001dbe:	33ff      	adds	r3, #255	; 0xff
 8001dc0:	610b      	str	r3, [r1, #16]
	hfdcan_filter.FilterID2 = 0x7FF;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <FDCAN_Config+0x5c>)
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8001dc4:	0020      	movs	r0, r4
	hfdcan_filter.FilterID2 = 0x7FF;
 8001dc6:	614b      	str	r3, [r1, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &hfdcan_filter) != HAL_OK)
 8001dc8:	f7fe ff3a 	bl	8000c40 <HAL_FDCAN_ConfigFilter>
 8001dcc:	2800      	cmp	r0, #0
 8001dce:	d001      	beq.n	8001dd4 <FDCAN_Config+0x2c>
	{
		Error_Handler();
 8001dd0:	f7fe fc92 	bl	80006f8 <Error_Handler>
	}

	/* Configure and enable Tx Delay Compensation, required for BRS mode.
		 TdcOffset default recommended value: DataTimeSeg1 * DataPrescaler
		 TdcFilter default recommended value: 0 */
	if (HAL_FDCAN_ConfigTxDelayCompensation(&hfdcan1, hfdcan1.Init.DataPrescaler * hfdcan1.Init.DataTimeSeg1, 0) != HAL_OK)
 8001dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	0020      	movs	r0, r4
 8001ddc:	4359      	muls	r1, r3
 8001dde:	f7fe ff58 	bl	8000c92 <HAL_FDCAN_ConfigTxDelayCompensation>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d001      	beq.n	8001dea <FDCAN_Config+0x42>
	{
		Error_Handler();
 8001de6:	f7fe fc87 	bl	80006f8 <Error_Handler>
	}

	if (HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1) != HAL_OK)
 8001dea:	0020      	movs	r0, r4
 8001dec:	f7fe ff62 	bl	8000cb4 <HAL_FDCAN_EnableTxDelayCompensation>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d001      	beq.n	8001df8 <FDCAN_Config+0x50>
	{
		Error_Handler();
 8001df4:	f7fe fc80 	bl	80006f8 <Error_Handler>
	}
}
 8001df8:	bd10      	pop	{r4, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	20000124 	.word	0x20000124
 8001e00:	200000c0 	.word	0x200000c0
 8001e04:	000007ff 	.word	0x000007ff

08001e08 <FDCAN_Enable>:

void FDCAN_Enable(void)
{
 8001e08:	b510      	push	{r4, lr}
	FDCAN_Config();
 8001e0a:	f7ff ffcd 	bl	8001da8 <FDCAN_Config>
	enterNormalMode();											//CAN收发器正常模�?????
 8001e0e:	f7ff ff49 	bl	8001ca4 <enterNormalMode>
	HAL_Delay(5);
 8001e12:	2005      	movs	r0, #5
 8001e14:	f7fe fde8 	bl	80009e8 <HAL_Delay>

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0) != HAL_OK)		//使能FIFO0新消息中�?????
 8001e18:	4c13      	ldr	r4, [pc, #76]	; (8001e68 <FDCAN_Enable+0x60>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	0020      	movs	r0, r4
 8001e20:	f7ff f86a 	bl	8000ef8 <HAL_FDCAN_ActivateNotification>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d001      	beq.n	8001e2c <FDCAN_Enable+0x24>
	{
		Error_Handler();
 8001e28:	f7fe fc66 	bl	80006f8 <Error_Handler>
	}
	if (HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)														//使能FDCAN
 8001e2c:	0020      	movs	r0, r4
 8001e2e:	f7fe ff54 	bl	8000cda <HAL_FDCAN_Start>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d001      	beq.n	8001e3a <FDCAN_Enable+0x32>
	{
		Error_Handler();
 8001e36:	f7fe fc5f 	bl	80006f8 <Error_Handler>
	}

	isCommandID = 1;
 8001e3a:	2201      	movs	r2, #1

	TxHeader.Identifier = 0xFFF111;
	TxHeader.IdType = FDCAN_EXTENDED_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8001e3c:	210f      	movs	r1, #15
	isCommandID = 1;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <FDCAN_Enable+0x64>)
 8001e40:	701a      	strb	r2, [r3, #0]
	TxHeader.Identifier = 0xFFF111;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <FDCAN_Enable+0x68>)
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <FDCAN_Enable+0x6c>)
	TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8001e46:	60d9      	str	r1, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001e48:	2180      	movs	r1, #128	; 0x80
	TxHeader.Identifier = 0xFFF111;
 8001e4a:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001e4c:	2280      	movs	r2, #128	; 0x80
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001e4e:	0349      	lsls	r1, r1, #13
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001e50:	05d2      	lsls	r2, r2, #23
	TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001e52:	6159      	str	r1, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001e54:	2180      	movs	r1, #128	; 0x80
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001e56:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001e58:	2200      	movs	r2, #0
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001e5a:	0389      	lsls	r1, r1, #14
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001e5c:	609a      	str	r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001e5e:	611a      	str	r2, [r3, #16]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8001e60:	6199      	str	r1, [r3, #24]
	TxHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 8001e62:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker       = 0;
 8001e64:	621a      	str	r2, [r3, #32]
}
 8001e66:	bd10      	pop	{r4, pc}
 8001e68:	200000c0 	.word	0x200000c0
 8001e6c:	2000a504 	.word	0x2000a504
 8001e70:	200001f4 	.word	0x200001f4
 8001e74:	00fff111 	.word	0x00fff111

08001e78 <FDCAN_SendByte>:
	header->TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
	header->MessageMarker       = 0;
}

void FDCAN_SendByte(uint8_t byte)
{
 8001e78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e7a:	466b      	mov	r3, sp
 8001e7c:	1dde      	adds	r6, r3, #7
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4d0d      	ldr	r5, [pc, #52]	; (8001eb8 <FDCAN_SendByte+0x40>)
{
 8001e82:	7030      	strb	r0, [r6, #0]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8001e84:	60eb      	str	r3, [r5, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8001e86:	4c0d      	ldr	r4, [pc, #52]	; (8001ebc <FDCAN_SendByte+0x44>)
 8001e88:	0020      	movs	r0, r4
 8001e8a:	f7ff f82f 	bl	8000eec <HAL_FDCAN_GetTxFifoFreeLevel>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d0f9      	beq.n	8001e86 <FDCAN_SendByte+0xe>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1,&TxHeader,&byte);
 8001e92:	0029      	movs	r1, r5
 8001e94:	0032      	movs	r2, r6
 8001e96:	0020      	movs	r0, r4
 8001e98:	f7fe ff36 	bl	8000d08 <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE );
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	0089      	lsls	r1, r1, #2
 8001ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ea4:	420a      	tst	r2, r1
 8001ea6:	d0fc      	beq.n	8001ea2 <FDCAN_SendByte+0x2a>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8001ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8001eaa:	2001      	movs	r0, #1
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8001eac:	400a      	ands	r2, r1
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_Delay(1);
 8001eb0:	f7fe fd9a 	bl	80009e8 <HAL_Delay>
}
 8001eb4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	200001f4 	.word	0x200001f4
 8001ebc:	200000c0 	.word	0x200000c0

08001ec0 <FDCAN_SendBytes>:

void FDCAN_SendBytes(uint8_t *Buffer, uint32_t BufferSize)
{
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	0005      	movs	r5, r0
	TxHeader.DataLength = BufferSize;
 8001ec4:	4e0c      	ldr	r6, [pc, #48]	; (8001ef8 <FDCAN_SendBytes+0x38>)
 8001ec6:	60f1      	str	r1, [r6, #12]

	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0);
 8001ec8:	4c0c      	ldr	r4, [pc, #48]	; (8001efc <FDCAN_SendBytes+0x3c>)
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f7ff f80e 	bl	8000eec <HAL_FDCAN_GetTxFifoFreeLevel>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	d0f9      	beq.n	8001ec8 <FDCAN_SendBytes+0x8>

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Buffer);
 8001ed4:	0031      	movs	r1, r6
 8001ed6:	002a      	movs	r2, r5
 8001ed8:	0020      	movs	r0, r4
 8001eda:	f7fe ff15 	bl	8000d08 <HAL_FDCAN_AddMessageToTxFifoQ>

	/* Wait that the data is completely sent (sent FIFO empty) */
	while (((&hfdcan1)->Instance->IR & FDCAN_IR_TFE) != FDCAN_IR_TFE);
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	0089      	lsls	r1, r1, #2
 8001ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee6:	420a      	tst	r2, r1
 8001ee8:	d0fc      	beq.n	8001ee4 <FDCAN_SendBytes+0x24>

	/* Clear the complete flag */
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8001eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50

	HAL_Delay(1);
 8001eec:	2001      	movs	r0, #1
	(&hfdcan1)->Instance->IR &= FDCAN_IR_TFE;
 8001eee:	400a      	ands	r2, r1
 8001ef0:	651a      	str	r2, [r3, #80]	; 0x50
	HAL_Delay(1);
 8001ef2:	f7fe fd79 	bl	80009e8 <HAL_Delay>
}
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	200001f4 	.word	0x200001f4
 8001efc:	200000c0 	.word	0x200000c0

08001f00 <getNextPos>:
	}
}

int getNextPos(int cur)
{
	return (cur+1) == size ? 0 : cur+1;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <getNextPos+0x10>)
 8001f02:	3001      	adds	r0, #1
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4298      	cmp	r0, r3
 8001f08:	d100      	bne.n	8001f0c <getNextPos+0xc>
 8001f0a:	2000      	movs	r0, #0
}
 8001f0c:	4770      	bx	lr
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	2000000c 	.word	0x2000000c

08001f14 <write>:

int write(FDCanRxHeader *content)
{
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int ret = 1;
	if (validCount < size) {
 8001f16:	4d0c      	ldr	r5, [pc, #48]	; (8001f48 <write+0x34>)
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <write+0x38>)
 8001f1a:	682c      	ldr	r4, [r5, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
{
 8001f1e:	0001      	movs	r1, r0
		_Buffer[tail] = *content;
		tail = getNextPos(tail);
		validCount++;
	} else {
		/* Buffer is FULL */
		ret = 0;
 8001f20:	2000      	movs	r0, #0
	if (validCount < size) {
 8001f22:	429c      	cmp	r4, r3
 8001f24:	da0f      	bge.n	8001f46 <write+0x32>
		_Buffer[tail] = *content;
 8001f26:	2268      	movs	r2, #104	; 0x68
 8001f28:	0013      	movs	r3, r2
 8001f2a:	4e09      	ldr	r6, [pc, #36]	; (8001f50 <write+0x3c>)
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <write+0x40>)
 8001f2e:	6837      	ldr	r7, [r6, #0]
		validCount++;
 8001f30:	3401      	adds	r4, #1
		_Buffer[tail] = *content;
 8001f32:	437b      	muls	r3, r7
 8001f34:	18c0      	adds	r0, r0, r3
 8001f36:	f000 fc5e 	bl	80027f6 <memcpy>
		tail = getNextPos(tail);
 8001f3a:	0038      	movs	r0, r7
 8001f3c:	f7ff ffe0 	bl	8001f00 <getNextPos>
 8001f40:	6030      	str	r0, [r6, #0]
	int ret = 1;
 8001f42:	2001      	movs	r0, #1
		validCount++;
 8001f44:	602c      	str	r4, [r5, #0]
	}
	return ret;
}
 8001f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f48:	2000a50c 	.word	0x2000a50c
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	2000a508 	.word	0x2000a508
 8001f54:	20000218 	.word	0x20000218

08001f58 <HAL_FDCAN_RxFifo0Callback>:
{
 8001f58:	b510      	push	{r4, lr}
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001f5a:	07c9      	lsls	r1, r1, #31
 8001f5c:	d526      	bpl.n	8001fac <HAL_FDCAN_RxFifo0Callback+0x54>
		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &(header.RxHeader), header.data);
 8001f5e:	4c14      	ldr	r4, [pc, #80]	; (8001fb0 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8001f60:	2140      	movs	r1, #64	; 0x40
 8001f62:	0023      	movs	r3, r4
 8001f64:	0022      	movs	r2, r4
 8001f66:	3328      	adds	r3, #40	; 0x28
 8001f68:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001f6a:	f7fe ff31 	bl	8000dd0 <HAL_FDCAN_GetRxMessage>
		if((header.RxHeader.Identifier == GET) || (header.RxHeader.Identifier == GETID)\
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	2202      	movs	r2, #2
 8001f72:	0019      	movs	r1, r3
 8001f74:	4391      	bics	r1, r2
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8001f78:	4291      	cmp	r1, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_FDCAN_RxFifo0Callback+0x42>
				|| (header.RxHeader.Identifier == READ) || (header.RxHeader.Identifier == GO)\
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	0019      	movs	r1, r3
 8001f80:	4391      	bics	r1, r2
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001f84:	4291      	cmp	r1, r2
 8001f86:	d008      	beq.n	8001f9a <HAL_FDCAN_RxFifo0Callback+0x42>
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d005      	beq.n	8001f9a <HAL_FDCAN_RxFifo0Callback+0x42>
				|| (header.RxHeader.Identifier == WRITE) || (header.RxHeader.Identifier == ERASE)\
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d002      	beq.n	8001f9a <HAL_FDCAN_RxFifo0Callback+0x42>
				|| (header.RxHeader.Identifier == 0xFFF111) )
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <HAL_FDCAN_RxFifo0Callback+0x54>
			write(&header);
 8001f9a:	0020      	movs	r0, r4
 8001f9c:	f7ff ffba 	bl	8001f14 <write>
			if(isCommandID == 1)
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_FDCAN_RxFifo0Callback+0x74>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_FDCAN_RxFifo0Callback+0x54>
				isSelectID = 1;
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8001faa:	7013      	strb	r3, [r2, #0]
}
 8001fac:	bd10      	pop	{r4, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	2000a49c 	.word	0x2000a49c
 8001fb4:	200000c0 	.word	0x200000c0
 8001fb8:	00ffff00 	.word	0x00ffff00
 8001fbc:	00ffff11 	.word	0x00ffff11
 8001fc0:	00ffff21 	.word	0x00ffff21
 8001fc4:	00ffff44 	.word	0x00ffff44
 8001fc8:	00fff111 	.word	0x00fff111
 8001fcc:	2000a504 	.word	0x2000a504
 8001fd0:	2000a505 	.word	0x2000a505

08001fd4 <read>:

int read(FDCanRxHeader* buf)
{
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		*buf = _Buffer[head];
		head = getNextPos(head);
		validCount--;
	} else {
		/* Buffer is Empty */
		ret = 0;
 8001fd6:	2300      	movs	r3, #0
	if (validCount > 0) {
 8001fd8:	4d0a      	ldr	r5, [pc, #40]	; (8002004 <read+0x30>)
 8001fda:	682c      	ldr	r4, [r5, #0]
 8001fdc:	429c      	cmp	r4, r3
 8001fde:	dd0f      	ble.n	8002000 <read+0x2c>
		*buf = _Buffer[head];
 8001fe0:	2268      	movs	r2, #104	; 0x68
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	4e08      	ldr	r6, [pc, #32]	; (8002008 <read+0x34>)
 8001fe6:	4909      	ldr	r1, [pc, #36]	; (800200c <read+0x38>)
 8001fe8:	6837      	ldr	r7, [r6, #0]
		validCount--;
 8001fea:	3c01      	subs	r4, #1
		*buf = _Buffer[head];
 8001fec:	437b      	muls	r3, r7
 8001fee:	18c9      	adds	r1, r1, r3
 8001ff0:	f000 fc01 	bl	80027f6 <memcpy>
		head = getNextPos(head);
 8001ff4:	0038      	movs	r0, r7
 8001ff6:	f7ff ff83 	bl	8001f00 <getNextPos>
	int ret = 1;
 8001ffa:	2301      	movs	r3, #1
		head = getNextPos(head);
 8001ffc:	6030      	str	r0, [r6, #0]
		validCount--;
 8001ffe:	602c      	str	r4, [r5, #0]
	}
	return ret;
}
 8002000:	0018      	movs	r0, r3
 8002002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002004:	2000a50c 	.word	0x2000a50c
 8002008:	2000a498 	.word	0x2000a498
 800200c:	20000218 	.word	0x20000218

08002010 <FDCAN_ReadByte>:
{
 8002010:	b500      	push	{lr}
 8002012:	b09b      	sub	sp, #108	; 0x6c
	err = read(&header);
 8002014:	4668      	mov	r0, sp
 8002016:	f7ff ffdd 	bl	8001fd4 <read>
	if(err){
 800201a:	2800      	cmp	r0, #0
 800201c:	d006      	beq.n	800202c <FDCAN_ReadByte+0x1c>
		HAL_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f7fe fce2 	bl	80009e8 <HAL_Delay>
		return header.data[0];
 8002024:	ab0a      	add	r3, sp, #40	; 0x28
 8002026:	7818      	ldrb	r0, [r3, #0]
}
 8002028:	b01b      	add	sp, #108	; 0x6c
 800202a:	bd00      	pop	{pc}
		printf("Buffer is Empty\n");
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <FDCAN_ReadByte+0x24>)
 800202e:	f000 fa63 	bl	80024f8 <puts>
}
 8002032:	e7f9      	b.n	8002028 <FDCAN_ReadByte+0x18>
 8002034:	08002d91 	.word	0x08002d91

08002038 <FDCAN_ReadBytes>:
{
 8002038:	b510      	push	{r4, lr}
 800203a:	b09a      	sub	sp, #104	; 0x68
 800203c:	0004      	movs	r4, r0
	err = read(&header);
 800203e:	4668      	mov	r0, sp
 8002040:	f7ff ffc8 	bl	8001fd4 <read>
	if(err){
 8002044:	2800      	cmp	r0, #0
 8002046:	d009      	beq.n	800205c <FDCAN_ReadBytes+0x24>
		memcpy(Buffer,header.data,sizeof(header.data));
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	0020      	movs	r0, r4
 800204c:	a90a      	add	r1, sp, #40	; 0x28
 800204e:	f000 fbd2 	bl	80027f6 <memcpy>
		HAL_Delay(1);
 8002052:	2001      	movs	r0, #1
 8002054:	f7fe fcc8 	bl	80009e8 <HAL_Delay>
}
 8002058:	b01a      	add	sp, #104	; 0x68
 800205a:	bd10      	pop	{r4, pc}
		printf("Buffer is Empty\n");
 800205c:	4801      	ldr	r0, [pc, #4]	; (8002064 <FDCAN_ReadBytes+0x2c>)
 800205e:	f000 fa4b 	bl	80024f8 <puts>
}
 8002062:	e7f9      	b.n	8002058 <FDCAN_ReadBytes+0x20>
 8002064:	08002d91 	.word	0x08002d91

08002068 <FDCAN_GetCommand_d>:

void FDCAN_GetCommand_d(void)
{
 8002068:	b530      	push	{r4, r5, lr}
 800206a:	b085      	sub	sp, #20
	uint32_t counter;
	const uint8_t a_FDCAN_CommandsList[OPENBL_FDCAN_COMMANDS_NB] =
 800206c:	ad01      	add	r5, sp, #4
 800206e:	220b      	movs	r2, #11
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <FDCAN_GetCommand_d+0x3c>)
 8002072:	0028      	movs	r0, r5
 8002074:	f000 fbbf 	bl	80027f6 <memcpy>
		WRDS,
		RDEN,
		RDDS
	};

	FDCAN_SendByte(ACK_BYTE);
 8002078:	2079      	movs	r0, #121	; 0x79
 800207a:	f7ff fefd 	bl	8001e78 <FDCAN_SendByte>
	/*Send 1 message: number of bytes*/
	FDCAN_SendByte(OPENBL_FDCAN_COMMANDS_NB);
 800207e:	200b      	movs	r0, #11
 8002080:	f7ff fefa 	bl	8001e78 <FDCAN_SendByte>
	/*Send 1 message: protocol version*/
	FDCAN_SendByte(0x01);
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff fef7 	bl	8001e78 <FDCAN_SendByte>
	/*Send 12 messages (message by message): command opcodes */
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 800208a:	2400      	movs	r4, #0
	{
		FDCAN_SendByte(a_FDCAN_CommandsList[i]);
 800208c:	5d28      	ldrb	r0, [r5, r4]
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 800208e:	3401      	adds	r4, #1
		FDCAN_SendByte(a_FDCAN_CommandsList[i]);
 8002090:	f7ff fef2 	bl	8001e78 <FDCAN_SendByte>
	for(int i=0;i<OPENBL_FDCAN_COMMANDS_NB;i++)
 8002094:	2c0b      	cmp	r4, #11
 8002096:	d1f9      	bne.n	800208c <FDCAN_GetCommand_d+0x24>
	}

	FDCAN_SendByte(ACK_BYTE);
 8002098:	2079      	movs	r0, #121	; 0x79
 800209a:	f7ff feed 	bl	8001e78 <FDCAN_SendByte>
}
 800209e:	b005      	add	sp, #20
 80020a0:	bd30      	pop	{r4, r5, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	08002cd0 	.word	0x08002cd0

080020a8 <FDCAN_GetID_d>:

void FDCAN_GetID_d(void)
{
 80020a8:	b500      	push	{lr}
	uint8_t TxData[64];
	FDCAN_SendByte(ACK_BYTE);
 80020aa:	2079      	movs	r0, #121	; 0x79
{
 80020ac:	b091      	sub	sp, #68	; 0x44
	FDCAN_SendByte(ACK_BYTE);
 80020ae:	f7ff fee3 	bl	8001e78 <FDCAN_SendByte>

	TxData[0] = DEVICE_ID_MSB;
 80020b2:	466a      	mov	r2, sp
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <FDCAN_GetID_d+0x24>)
	TxData[1] = DEVICE_ID_LSB;
	//STM32 product ID
	FDCAN_SendBytes(TxData,FDCAN_DLC_BYTES_2);
 80020b6:	2102      	movs	r1, #2
 80020b8:	4668      	mov	r0, sp
	TxData[0] = DEVICE_ID_MSB;
 80020ba:	8013      	strh	r3, [r2, #0]
	FDCAN_SendBytes(TxData,FDCAN_DLC_BYTES_2);
 80020bc:	f7ff ff00 	bl	8001ec0 <FDCAN_SendBytes>

	FDCAN_SendByte(ACK_BYTE);
 80020c0:	2079      	movs	r0, #121	; 0x79
 80020c2:	f7ff fed9 	bl	8001e78 <FDCAN_SendByte>
}
 80020c6:	b011      	add	sp, #68	; 0x44
 80020c8:	bd00      	pop	{pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	00006704 	.word	0x00006704

080020d0 <FDCAN_EraseMemory_d>:
		}
	}
}

void FDCAN_EraseMemory_d(void)
{
 80020d0:	b530      	push	{r4, r5, lr}
 80020d2:	b095      	sub	sp, #84	; 0x54
	uint8_t tempdata;
	uint8_t status = ACK_BYTE;
	ErrorStatus error_value;
	uint8_t data[80];

	if (GetReadOutProtectionStatus() != RESET)
 80020d4:	f7ff fdfe 	bl	8001cd4 <GetReadOutProtectionStatus>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d004      	beq.n	80020e6 <FDCAN_EraseMemory_d+0x16>
	{
		FDCAN_SendByte(NACK_BYTE);
 80020dc:	201f      	movs	r0, #31
				i++;
			}

			FLASH_Erase(data,64);

			FDCAN_SendByte(ACK_BYTE);
 80020de:	f7ff fecb 	bl	8001e78 <FDCAN_SendByte>
		}
	}
}
 80020e2:	b015      	add	sp, #84	; 0x54
 80020e4:	bd30      	pop	{r4, r5, pc}
		FDCAN_SendByte(ACK_BYTE);
 80020e6:	2079      	movs	r0, #121	; 0x79
 80020e8:	f7ff fec6 	bl	8001e78 <FDCAN_SendByte>
		data_a = data_a | (header.data[1]);
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <FDCAN_EraseMemory_d+0x7c>)
 80020ee:	8d13      	ldrh	r3, [r2, #40]	; 0x28
 80020f0:	ba5b      	rev16	r3, r3
		(header.data[0]) = (uint8_t)(data_a & 0x00FFU);
 80020f2:	8513      	strh	r3, [r2, #40]	; 0x28
		data[0] = (header.data[0]);
 80020f4:	466a      	mov	r2, sp
 80020f6:	b29c      	uxth	r4, r3
 80020f8:	8013      	strh	r3, [r2, #0]
		if ((data_a & 0xFFF0U) != 0xFFF0U)
 80020fa:	230f      	movs	r3, #15
 80020fc:	0022      	movs	r2, r4
 80020fe:	439a      	bics	r2, r3
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <FDCAN_EraseMemory_d+0x80>)
 8002102:	429a      	cmp	r2, r3
 8002104:	d0ed      	beq.n	80020e2 <FDCAN_EraseMemory_d+0x12>
			HAL_Delay(10);
 8002106:	200a      	movs	r0, #10
 8002108:	f7fe fc6e 	bl	80009e8 <HAL_Delay>
			FDCAN_ReadBytes(&data[2], 64U);
 800210c:	466b      	mov	r3, sp
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	1c98      	adds	r0, r3, #2
 8002112:	f7ff ff91 	bl	8002038 <FDCAN_ReadBytes>
			i = 2;
 8002116:	2302      	movs	r3, #2
			for (counter = data_a; counter != (uint16_t)0; counter--)
 8002118:	2c00      	cmp	r4, #0
 800211a:	d105      	bne.n	8002128 <FDCAN_EraseMemory_d+0x58>
			FLASH_Erase(data,64);
 800211c:	4668      	mov	r0, sp
 800211e:	2140      	movs	r1, #64	; 0x40
 8002120:	f7ff fdfe 	bl	8001d20 <FLASH_Erase>
			FDCAN_SendByte(ACK_BYTE);
 8002124:	2079      	movs	r0, #121	; 0x79
 8002126:	e7da      	b.n	80020de <FDCAN_EraseMemory_d+0xe>
				tempdata = data[i];
 8002128:	466a      	mov	r2, sp
				data[i - (uint16_t)1] = data[i];
 800212a:	4669      	mov	r1, sp
				tempdata = data[i];
 800212c:	5cd0      	ldrb	r0, [r2, r3]
				i++;
 800212e:	1c5a      	adds	r2, r3, #1
				data[i - (uint16_t)1] = data[i];
 8002130:	b292      	uxth	r2, r2
 8002132:	5c8d      	ldrb	r5, [r1, r2]
 8002134:	0011      	movs	r1, r2
 8002136:	4469      	add	r1, sp
 8002138:	3901      	subs	r1, #1
 800213a:	700d      	strb	r5, [r1, #0]
				data[i] = tempdata;
 800213c:	4669      	mov	r1, sp
				i++;
 800213e:	3302      	adds	r3, #2
			for (counter = data_a; counter != (uint16_t)0; counter--)
 8002140:	3c01      	subs	r4, #1
				data[i] = tempdata;
 8002142:	5488      	strb	r0, [r1, r2]
				i++;
 8002144:	b29b      	uxth	r3, r3
			for (counter = data_a; counter != (uint16_t)0; counter--)
 8002146:	b2a4      	uxth	r4, r4
 8002148:	e7e6      	b.n	8002118 <FDCAN_EraseMemory_d+0x48>
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	2000a49c 	.word	0x2000a49c
 8002150:	0000fff0 	.word	0x0000fff0

08002154 <FDCAN_GetAddress>:
			   (((uint32_t) header.data[1]) << 16)  |
			   (((uint32_t) header.data[2]) << 8)   |
			   (((uint32_t) header.data[3]))));

	/* Check if received address is valid or not */
	if ((*Address >= 0x08000000) && (*Address <= 0x08020000))
 8002154:	22f8      	movs	r2, #248	; 0xf8
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <FDCAN_GetAddress+0x1c>)
 8002158:	0612      	lsls	r2, r2, #24
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	ba1b      	rev	r3, r3
	*Address = (((((uint32_t) header.data[0]) << 24)  |
 800215e:	6003      	str	r3, [r0, #0]
	if ((*Address >= 0x08000000) && (*Address <= 0x08020000))
 8002160:	189b      	adds	r3, r3, r2
 8002162:	2280      	movs	r2, #128	; 0x80
	{
		status = ACK_BYTE;
 8002164:	2079      	movs	r0, #121	; 0x79
	if ((*Address >= 0x08000000) && (*Address <= 0x08020000))
 8002166:	0292      	lsls	r2, r2, #10
 8002168:	4293      	cmp	r3, r2
 800216a:	d900      	bls.n	800216e <FDCAN_GetAddress+0x1a>
	}
	else
	{
		status = NACK_BYTE;
 800216c:	385a      	subs	r0, #90	; 0x5a
	}

	return status;
}
 800216e:	4770      	bx	lr
 8002170:	2000a49c 	.word	0x2000a49c

08002174 <FDCAN_ReadMemory_d>:
{
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	b093      	sub	sp, #76	; 0x4c
	if (GetReadOutProtectionStatus() != RESET)
 8002178:	f7ff fdac 	bl	8001cd4 <GetReadOutProtectionStatus>
 800217c:	2800      	cmp	r0, #0
 800217e:	d004      	beq.n	800218a <FDCAN_ReadMemory_d+0x16>
		FDCAN_SendByte(NACK_BYTE);
 8002180:	201f      	movs	r0, #31
			FDCAN_SendByte(ACK_BYTE);
 8002182:	f7ff fe79 	bl	8001e78 <FDCAN_SendByte>
}
 8002186:	b013      	add	sp, #76	; 0x4c
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 800218a:	a801      	add	r0, sp, #4
 800218c:	f7ff ffe2 	bl	8002154 <FDCAN_GetAddress>
 8002190:	281f      	cmp	r0, #31
 8002192:	d0f5      	beq.n	8002180 <FDCAN_ReadMemory_d+0xc>
			FDCAN_SendByte(ACK_BYTE);
 8002194:	2079      	movs	r0, #121	; 0x79
 8002196:	f7ff fe6f 	bl	8001e78 <FDCAN_SendByte>
			number_of_bytes = (uint32_t)(header.data[4]) + 1U;
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <FDCAN_ReadMemory_d+0xa0>)
 800219c:	332c      	adds	r3, #44	; 0x2c
 800219e:	781c      	ldrb	r4, [r3, #0]
			single = (uint32_t)(number_of_bytes % 64U);
 80021a0:	233f      	movs	r3, #63	; 0x3f
			number_of_bytes = (uint32_t)(header.data[4]) + 1U;
 80021a2:	3401      	adds	r4, #1
			count  = number_of_bytes / 64U;
 80021a4:	09a7      	lsrs	r7, r4, #6
			single = (uint32_t)(number_of_bytes % 64U);
 80021a6:	401c      	ands	r4, r3
			while (count != 0U)
 80021a8:	2f00      	cmp	r7, #0
 80021aa:	d120      	bne.n	80021ee <FDCAN_ReadMemory_d+0x7a>
			if (single != 0U)
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d01c      	beq.n	80021ea <FDCAN_ReadMemory_d+0x76>
 80021b0:	0027      	movs	r7, r4
 80021b2:	ad02      	add	r5, sp, #8
					TxData[data_length] = FLASH_Read(address);
 80021b4:	9e01      	ldr	r6, [sp, #4]
				for (counter = single ; counter > 0U; counter--)
 80021b6:	3f01      	subs	r7, #1
					TxData[data_length] = FLASH_Read(address);
 80021b8:	0030      	movs	r0, r6
 80021ba:	f7ff fd93 	bl	8001ce4 <FLASH_Read>
					address++;
 80021be:	3601      	adds	r6, #1
					TxData[data_length] = FLASH_Read(address);
 80021c0:	7028      	strb	r0, [r5, #0]
					address++;
 80021c2:	9601      	str	r6, [sp, #4]
				for (counter = single ; counter > 0U; counter--)
 80021c4:	3501      	adds	r5, #1
 80021c6:	2f00      	cmp	r7, #0
 80021c8:	d1f4      	bne.n	80021b4 <FDCAN_ReadMemory_d+0x40>
				for (counter = (64U - single) ; counter > 0U; counter--)
 80021ca:	2340      	movs	r3, #64	; 0x40
					TxData[data_length] = 0xFF;
 80021cc:	21ff      	movs	r1, #255	; 0xff
					data_length++;
 80021ce:	b2e2      	uxtb	r2, r4
				for (counter = (64U - single) ; counter > 0U; counter--)
 80021d0:	1b1b      	subs	r3, r3, r4
					TxData[data_length] = 0xFF;
 80021d2:	4668      	mov	r0, sp
 80021d4:	2408      	movs	r4, #8
 80021d6:	1900      	adds	r0, r0, r4
 80021d8:	5481      	strb	r1, [r0, r2]
				for (counter = (64U - single) ; counter > 0U; counter--)
 80021da:	3b01      	subs	r3, #1
					data_length++;
 80021dc:	3201      	adds	r2, #1
 80021de:	b2d2      	uxtb	r2, r2
				for (counter = (64U - single) ; counter > 0U; counter--)
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f6      	bne.n	80021d2 <FDCAN_ReadMemory_d+0x5e>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
 80021e4:	210f      	movs	r1, #15
 80021e6:	f7ff fe6b 	bl	8001ec0 <FDCAN_SendBytes>
			FDCAN_SendByte(ACK_BYTE);
 80021ea:	2079      	movs	r0, #121	; 0x79
 80021ec:	e7c9      	b.n	8002182 <FDCAN_ReadMemory_d+0xe>
 80021ee:	2500      	movs	r5, #0
					TxData[data_length] = FLASH_Read(address);
 80021f0:	9e01      	ldr	r6, [sp, #4]
 80021f2:	0030      	movs	r0, r6
 80021f4:	f7ff fd76 	bl	8001ce4 <FLASH_Read>
 80021f8:	ab02      	add	r3, sp, #8
 80021fa:	5558      	strb	r0, [r3, r5]
					address++;
 80021fc:	3601      	adds	r6, #1
				for (counter = 64U ; counter > 0U; counter--)
 80021fe:	3501      	adds	r5, #1
					address++;
 8002200:	9601      	str	r6, [sp, #4]
				for (counter = 64U ; counter > 0U; counter--)
 8002202:	2d40      	cmp	r5, #64	; 0x40
 8002204:	d1f4      	bne.n	80021f0 <FDCAN_ReadMemory_d+0x7c>
				FDCAN_SendBytes(TxData, FDCAN_DLC_BYTES_64);
 8002206:	210f      	movs	r1, #15
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff fe59 	bl	8001ec0 <FDCAN_SendBytes>
				count--;
 800220e:	3f01      	subs	r7, #1
 8002210:	e7ca      	b.n	80021a8 <FDCAN_ReadMemory_d+0x34>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	2000a49c 	.word	0x2000a49c

08002218 <FDCAN_WriteMemory_d>:
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	b0c3      	sub	sp, #268	; 0x10c
	if (GetReadOutProtectionStatus() != RESET)
 800221c:	f7ff fd5a 	bl	8001cd4 <GetReadOutProtectionStatus>
 8002220:	1e04      	subs	r4, r0, #0
 8002222:	d004      	beq.n	800222e <FDCAN_WriteMemory_d+0x16>
		FDCAN_SendByte(NACK_BYTE);
 8002224:	201f      	movs	r0, #31
			FDCAN_SendByte(ACK_BYTE);
 8002226:	f7ff fe27 	bl	8001e78 <FDCAN_SendByte>
}
 800222a:	b043      	add	sp, #268	; 0x10c
 800222c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 800222e:	a801      	add	r0, sp, #4
 8002230:	f7ff ff90 	bl	8002154 <FDCAN_GetAddress>
 8002234:	281f      	cmp	r0, #31
 8002236:	d0f5      	beq.n	8002224 <FDCAN_WriteMemory_d+0xc>
			single = (uint32_t)(CodeSize % 64U);
 8002238:	253f      	movs	r5, #63	; 0x3f
			FDCAN_SendByte(ACK_BYTE);
 800223a:	2079      	movs	r0, #121	; 0x79
 800223c:	f7ff fe1c 	bl	8001e78 <FDCAN_SendByte>
			CodeSize = (uint32_t)(header.data[4]) + 1U;
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <FDCAN_WriteMemory_d+0x78>)
			HAL_Delay(10);
 8002242:	200a      	movs	r0, #10
			CodeSize = (uint32_t)(header.data[4]) + 1U;
 8002244:	332c      	adds	r3, #44	; 0x2c
 8002246:	781e      	ldrb	r6, [r3, #0]
 8002248:	3601      	adds	r6, #1
			single = (uint32_t)(CodeSize % 64U);
 800224a:	4035      	ands	r5, r6
			HAL_Delay(10);
 800224c:	f7fe fbcc 	bl	80009e8 <HAL_Delay>
			if (count != 0U)
 8002250:	2e3f      	cmp	r6, #63	; 0x3f
 8002252:	d80e      	bhi.n	8002272 <FDCAN_WriteMemory_d+0x5a>
			if (single != 0U)
 8002254:	2d00      	cmp	r5, #0
 8002256:	d005      	beq.n	8002264 <FDCAN_WriteMemory_d+0x4c>
				FDCAN_ReadBytes(&data[(CodeSize - single)], FDCAN_DLC_BYTES_64);
 8002258:	1b70      	subs	r0, r6, r5
 800225a:	ab02      	add	r3, sp, #8
 800225c:	210f      	movs	r1, #15
 800225e:	1818      	adds	r0, r3, r0
 8002260:	f7ff feea 	bl	8002038 <FDCAN_ReadBytes>
			FLASH_Write(address, (uint8_t *)data, CodeSize);
 8002264:	9801      	ldr	r0, [sp, #4]
 8002266:	0032      	movs	r2, r6
 8002268:	a902      	add	r1, sp, #8
 800226a:	f7ff fd3d 	bl	8001ce8 <FLASH_Write>
			FDCAN_SendByte(ACK_BYTE);
 800226e:	2079      	movs	r0, #121	; 0x79
 8002270:	e7d9      	b.n	8002226 <FDCAN_WriteMemory_d+0xe>
			count = CodeSize / 64U;
 8002272:	09b7      	lsrs	r7, r6, #6
				while (data_length != count)
 8002274:	42bc      	cmp	r4, r7
 8002276:	d0ed      	beq.n	8002254 <FDCAN_WriteMemory_d+0x3c>
					FDCAN_ReadBytes(&data[data_length * 64U], FDCAN_DLC_BYTES_64);
 8002278:	ab02      	add	r3, sp, #8
 800227a:	01a0      	lsls	r0, r4, #6
 800227c:	1818      	adds	r0, r3, r0
 800227e:	210f      	movs	r1, #15
 8002280:	f7ff feda 	bl	8002038 <FDCAN_ReadBytes>
					data_length++;
 8002284:	3401      	adds	r4, #1
					HAL_Delay(5);
 8002286:	2005      	movs	r0, #5
 8002288:	f7fe fbae 	bl	80009e8 <HAL_Delay>
					data_length++;
 800228c:	b2e4      	uxtb	r4, r4
 800228e:	e7f1      	b.n	8002274 <FDCAN_WriteMemory_d+0x5c>
 8002290:	2000a49c 	.word	0x2000a49c

08002294 <FDCAN_Go_d>:
{
 8002294:	b507      	push	{r0, r1, r2, lr}
	if (GetReadOutProtectionStatus() != RESET)
 8002296:	f7ff fd1d 	bl	8001cd4 <GetReadOutProtectionStatus>
 800229a:	2800      	cmp	r0, #0
 800229c:	d003      	beq.n	80022a6 <FDCAN_Go_d+0x12>
		FDCAN_SendByte(NACK_BYTE);
 800229e:	201f      	movs	r0, #31
 80022a0:	f7ff fdea 	bl	8001e78 <FDCAN_SendByte>
}
 80022a4:	bd07      	pop	{r0, r1, r2, pc}
		FDCAN_SendByte(ACK_BYTE);
 80022a6:	2079      	movs	r0, #121	; 0x79
 80022a8:	f7ff fde6 	bl	8001e78 <FDCAN_SendByte>
		if (FDCAN_GetAddress(&address) == NACK_BYTE)
 80022ac:	a801      	add	r0, sp, #4
 80022ae:	f7ff ff51 	bl	8002154 <FDCAN_GetAddress>
 80022b2:	281f      	cmp	r0, #31
 80022b4:	d0f3      	beq.n	800229e <FDCAN_Go_d+0xa>
			FDCAN_SendByte(ACK_BYTE);
 80022b6:	2079      	movs	r0, #121	; 0x79
 80022b8:	f7ff fdde 	bl	8001e78 <FDCAN_SendByte>
			jump_to_app(address);
 80022bc:	9801      	ldr	r0, [sp, #4]
 80022be:	f7ff fd57 	bl	8001d70 <jump_to_app>
}
 80022c2:	e7ef      	b.n	80022a4 <FDCAN_Go_d+0x10>

080022c4 <std>:
 80022c4:	2300      	movs	r3, #0
 80022c6:	b510      	push	{r4, lr}
 80022c8:	0004      	movs	r4, r0
 80022ca:	6003      	str	r3, [r0, #0]
 80022cc:	6043      	str	r3, [r0, #4]
 80022ce:	6083      	str	r3, [r0, #8]
 80022d0:	8181      	strh	r1, [r0, #12]
 80022d2:	6643      	str	r3, [r0, #100]	; 0x64
 80022d4:	81c2      	strh	r2, [r0, #14]
 80022d6:	6103      	str	r3, [r0, #16]
 80022d8:	6143      	str	r3, [r0, #20]
 80022da:	6183      	str	r3, [r0, #24]
 80022dc:	0019      	movs	r1, r3
 80022de:	2208      	movs	r2, #8
 80022e0:	305c      	adds	r0, #92	; 0x5c
 80022e2:	f000 fa05 	bl	80026f0 <memset>
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <std+0x50>)
 80022e8:	6224      	str	r4, [r4, #32]
 80022ea:	6263      	str	r3, [r4, #36]	; 0x24
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <std+0x54>)
 80022ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <std+0x58>)
 80022f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <std+0x5c>)
 80022f6:	6323      	str	r3, [r4, #48]	; 0x30
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <std+0x60>)
 80022fa:	429c      	cmp	r4, r3
 80022fc:	d005      	beq.n	800230a <std+0x46>
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <std+0x64>)
 8002300:	429c      	cmp	r4, r3
 8002302:	d002      	beq.n	800230a <std+0x46>
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <std+0x68>)
 8002306:	429c      	cmp	r4, r3
 8002308:	d103      	bne.n	8002312 <std+0x4e>
 800230a:	0020      	movs	r0, r4
 800230c:	3058      	adds	r0, #88	; 0x58
 800230e:	f000 fa6f 	bl	80027f0 <__retarget_lock_init_recursive>
 8002312:	bd10      	pop	{r4, pc}
 8002314:	0800250d 	.word	0x0800250d
 8002318:	08002535 	.word	0x08002535
 800231c:	0800256d 	.word	0x0800256d
 8002320:	08002599 	.word	0x08002599
 8002324:	2000a510 	.word	0x2000a510
 8002328:	2000a578 	.word	0x2000a578
 800232c:	2000a5e0 	.word	0x2000a5e0

08002330 <stdio_exit_handler>:
 8002330:	b510      	push	{r4, lr}
 8002332:	4a03      	ldr	r2, [pc, #12]	; (8002340 <stdio_exit_handler+0x10>)
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <stdio_exit_handler+0x14>)
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <stdio_exit_handler+0x18>)
 8002338:	f000 f86c 	bl	8002414 <_fwalk_sglue>
 800233c:	bd10      	pop	{r4, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000010 	.word	0x20000010
 8002344:	08002b19 	.word	0x08002b19
 8002348:	2000001c 	.word	0x2000001c

0800234c <cleanup_stdio>:
 800234c:	6841      	ldr	r1, [r0, #4]
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <cleanup_stdio+0x30>)
 8002350:	b510      	push	{r4, lr}
 8002352:	0004      	movs	r4, r0
 8002354:	4299      	cmp	r1, r3
 8002356:	d001      	beq.n	800235c <cleanup_stdio+0x10>
 8002358:	f000 fbde 	bl	8002b18 <_fflush_r>
 800235c:	68a1      	ldr	r1, [r4, #8]
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <cleanup_stdio+0x34>)
 8002360:	4299      	cmp	r1, r3
 8002362:	d002      	beq.n	800236a <cleanup_stdio+0x1e>
 8002364:	0020      	movs	r0, r4
 8002366:	f000 fbd7 	bl	8002b18 <_fflush_r>
 800236a:	68e1      	ldr	r1, [r4, #12]
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <cleanup_stdio+0x38>)
 800236e:	4299      	cmp	r1, r3
 8002370:	d002      	beq.n	8002378 <cleanup_stdio+0x2c>
 8002372:	0020      	movs	r0, r4
 8002374:	f000 fbd0 	bl	8002b18 <_fflush_r>
 8002378:	bd10      	pop	{r4, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	2000a510 	.word	0x2000a510
 8002380:	2000a578 	.word	0x2000a578
 8002384:	2000a5e0 	.word	0x2000a5e0

08002388 <global_stdio_init.part.0>:
 8002388:	b510      	push	{r4, lr}
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <global_stdio_init.part.0+0x28>)
 800238c:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <global_stdio_init.part.0+0x2c>)
 800238e:	2104      	movs	r1, #4
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	4809      	ldr	r0, [pc, #36]	; (80023b8 <global_stdio_init.part.0+0x30>)
 8002394:	2200      	movs	r2, #0
 8002396:	f7ff ff95 	bl	80022c4 <std>
 800239a:	2201      	movs	r2, #1
 800239c:	2109      	movs	r1, #9
 800239e:	4807      	ldr	r0, [pc, #28]	; (80023bc <global_stdio_init.part.0+0x34>)
 80023a0:	f7ff ff90 	bl	80022c4 <std>
 80023a4:	2202      	movs	r2, #2
 80023a6:	2112      	movs	r1, #18
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <global_stdio_init.part.0+0x38>)
 80023aa:	f7ff ff8b 	bl	80022c4 <std>
 80023ae:	bd10      	pop	{r4, pc}
 80023b0:	2000a648 	.word	0x2000a648
 80023b4:	08002331 	.word	0x08002331
 80023b8:	2000a510 	.word	0x2000a510
 80023bc:	2000a578 	.word	0x2000a578
 80023c0:	2000a5e0 	.word	0x2000a5e0

080023c4 <__sfp_lock_acquire>:
 80023c4:	b510      	push	{r4, lr}
 80023c6:	4802      	ldr	r0, [pc, #8]	; (80023d0 <__sfp_lock_acquire+0xc>)
 80023c8:	f000 fa13 	bl	80027f2 <__retarget_lock_acquire_recursive>
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	2000a651 	.word	0x2000a651

080023d4 <__sfp_lock_release>:
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4802      	ldr	r0, [pc, #8]	; (80023e0 <__sfp_lock_release+0xc>)
 80023d8:	f000 fa0c 	bl	80027f4 <__retarget_lock_release_recursive>
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	2000a651 	.word	0x2000a651

080023e4 <__sinit>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	0004      	movs	r4, r0
 80023e8:	f7ff ffec 	bl	80023c4 <__sfp_lock_acquire>
 80023ec:	6a23      	ldr	r3, [r4, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <__sinit+0x14>
 80023f2:	f7ff ffef 	bl	80023d4 <__sfp_lock_release>
 80023f6:	bd10      	pop	{r4, pc}
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__sinit+0x28>)
 80023fa:	6223      	str	r3, [r4, #32]
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__sinit+0x2c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f6      	bne.n	80023f2 <__sinit+0xe>
 8002404:	f7ff ffc0 	bl	8002388 <global_stdio_init.part.0>
 8002408:	e7f3      	b.n	80023f2 <__sinit+0xe>
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	0800234d 	.word	0x0800234d
 8002410:	2000a648 	.word	0x2000a648

08002414 <_fwalk_sglue>:
 8002414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002416:	0014      	movs	r4, r2
 8002418:	2600      	movs	r6, #0
 800241a:	9000      	str	r0, [sp, #0]
 800241c:	9101      	str	r1, [sp, #4]
 800241e:	68a5      	ldr	r5, [r4, #8]
 8002420:	6867      	ldr	r7, [r4, #4]
 8002422:	3f01      	subs	r7, #1
 8002424:	d504      	bpl.n	8002430 <_fwalk_sglue+0x1c>
 8002426:	6824      	ldr	r4, [r4, #0]
 8002428:	2c00      	cmp	r4, #0
 800242a:	d1f8      	bne.n	800241e <_fwalk_sglue+0xa>
 800242c:	0030      	movs	r0, r6
 800242e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002430:	89ab      	ldrh	r3, [r5, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d908      	bls.n	8002448 <_fwalk_sglue+0x34>
 8002436:	220e      	movs	r2, #14
 8002438:	5eab      	ldrsh	r3, [r5, r2]
 800243a:	3301      	adds	r3, #1
 800243c:	d004      	beq.n	8002448 <_fwalk_sglue+0x34>
 800243e:	0029      	movs	r1, r5
 8002440:	9800      	ldr	r0, [sp, #0]
 8002442:	9b01      	ldr	r3, [sp, #4]
 8002444:	4798      	blx	r3
 8002446:	4306      	orrs	r6, r0
 8002448:	3568      	adds	r5, #104	; 0x68
 800244a:	e7ea      	b.n	8002422 <_fwalk_sglue+0xe>

0800244c <_puts_r>:
 800244c:	6a03      	ldr	r3, [r0, #32]
 800244e:	b570      	push	{r4, r5, r6, lr}
 8002450:	0005      	movs	r5, r0
 8002452:	000e      	movs	r6, r1
 8002454:	6884      	ldr	r4, [r0, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <_puts_r+0x12>
 800245a:	f7ff ffc3 	bl	80023e4 <__sinit>
 800245e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002460:	07db      	lsls	r3, r3, #31
 8002462:	d405      	bmi.n	8002470 <_puts_r+0x24>
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	059b      	lsls	r3, r3, #22
 8002468:	d402      	bmi.n	8002470 <_puts_r+0x24>
 800246a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800246c:	f000 f9c1 	bl	80027f2 <__retarget_lock_acquire_recursive>
 8002470:	89a3      	ldrh	r3, [r4, #12]
 8002472:	071b      	lsls	r3, r3, #28
 8002474:	d502      	bpl.n	800247c <_puts_r+0x30>
 8002476:	6923      	ldr	r3, [r4, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11f      	bne.n	80024bc <_puts_r+0x70>
 800247c:	0021      	movs	r1, r4
 800247e:	0028      	movs	r0, r5
 8002480:	f000 f8d2 	bl	8002628 <__swsetup_r>
 8002484:	2800      	cmp	r0, #0
 8002486:	d019      	beq.n	80024bc <_puts_r+0x70>
 8002488:	2501      	movs	r5, #1
 800248a:	426d      	negs	r5, r5
 800248c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800248e:	07db      	lsls	r3, r3, #31
 8002490:	d405      	bmi.n	800249e <_puts_r+0x52>
 8002492:	89a3      	ldrh	r3, [r4, #12]
 8002494:	059b      	lsls	r3, r3, #22
 8002496:	d402      	bmi.n	800249e <_puts_r+0x52>
 8002498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800249a:	f000 f9ab 	bl	80027f4 <__retarget_lock_release_recursive>
 800249e:	0028      	movs	r0, r5
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	3601      	adds	r6, #1
 80024a4:	60a3      	str	r3, [r4, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da04      	bge.n	80024b4 <_puts_r+0x68>
 80024aa:	69a2      	ldr	r2, [r4, #24]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dc16      	bgt.n	80024de <_puts_r+0x92>
 80024b0:	290a      	cmp	r1, #10
 80024b2:	d014      	beq.n	80024de <_puts_r+0x92>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	6022      	str	r2, [r4, #0]
 80024ba:	7019      	strb	r1, [r3, #0]
 80024bc:	68a3      	ldr	r3, [r4, #8]
 80024be:	7831      	ldrb	r1, [r6, #0]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	2900      	cmp	r1, #0
 80024c4:	d1ed      	bne.n	80024a2 <_puts_r+0x56>
 80024c6:	60a3      	str	r3, [r4, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da0f      	bge.n	80024ec <_puts_r+0xa0>
 80024cc:	0028      	movs	r0, r5
 80024ce:	0022      	movs	r2, r4
 80024d0:	310a      	adds	r1, #10
 80024d2:	f000 f867 	bl	80025a4 <__swbuf_r>
 80024d6:	250a      	movs	r5, #10
 80024d8:	3001      	adds	r0, #1
 80024da:	d1d7      	bne.n	800248c <_puts_r+0x40>
 80024dc:	e7d4      	b.n	8002488 <_puts_r+0x3c>
 80024de:	0022      	movs	r2, r4
 80024e0:	0028      	movs	r0, r5
 80024e2:	f000 f85f 	bl	80025a4 <__swbuf_r>
 80024e6:	3001      	adds	r0, #1
 80024e8:	d1e8      	bne.n	80024bc <_puts_r+0x70>
 80024ea:	e7cd      	b.n	8002488 <_puts_r+0x3c>
 80024ec:	250a      	movs	r5, #10
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	6022      	str	r2, [r4, #0]
 80024f4:	701d      	strb	r5, [r3, #0]
 80024f6:	e7c9      	b.n	800248c <_puts_r+0x40>

080024f8 <puts>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <puts+0x10>)
 80024fc:	0001      	movs	r1, r0
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f7ff ffa4 	bl	800244c <_puts_r>
 8002504:	bd10      	pop	{r4, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	20000068 	.word	0x20000068

0800250c <__sread>:
 800250c:	b570      	push	{r4, r5, r6, lr}
 800250e:	000c      	movs	r4, r1
 8002510:	250e      	movs	r5, #14
 8002512:	5f49      	ldrsh	r1, [r1, r5]
 8002514:	f000 f91a 	bl	800274c <_read_r>
 8002518:	2800      	cmp	r0, #0
 800251a:	db03      	blt.n	8002524 <__sread+0x18>
 800251c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800251e:	181b      	adds	r3, r3, r0
 8002520:	6563      	str	r3, [r4, #84]	; 0x54
 8002522:	bd70      	pop	{r4, r5, r6, pc}
 8002524:	89a3      	ldrh	r3, [r4, #12]
 8002526:	4a02      	ldr	r2, [pc, #8]	; (8002530 <__sread+0x24>)
 8002528:	4013      	ands	r3, r2
 800252a:	81a3      	strh	r3, [r4, #12]
 800252c:	e7f9      	b.n	8002522 <__sread+0x16>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	ffffefff 	.word	0xffffefff

08002534 <__swrite>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	001f      	movs	r7, r3
 8002538:	898b      	ldrh	r3, [r1, #12]
 800253a:	0005      	movs	r5, r0
 800253c:	000c      	movs	r4, r1
 800253e:	0016      	movs	r6, r2
 8002540:	05db      	lsls	r3, r3, #23
 8002542:	d505      	bpl.n	8002550 <__swrite+0x1c>
 8002544:	230e      	movs	r3, #14
 8002546:	5ec9      	ldrsh	r1, [r1, r3]
 8002548:	2200      	movs	r2, #0
 800254a:	2302      	movs	r3, #2
 800254c:	f000 f8ea 	bl	8002724 <_lseek_r>
 8002550:	89a3      	ldrh	r3, [r4, #12]
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <__swrite+0x34>)
 8002554:	0028      	movs	r0, r5
 8002556:	4013      	ands	r3, r2
 8002558:	81a3      	strh	r3, [r4, #12]
 800255a:	0032      	movs	r2, r6
 800255c:	230e      	movs	r3, #14
 800255e:	5ee1      	ldrsh	r1, [r4, r3]
 8002560:	003b      	movs	r3, r7
 8002562:	f000 f907 	bl	8002774 <_write_r>
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002568:	ffffefff 	.word	0xffffefff

0800256c <__sseek>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	000c      	movs	r4, r1
 8002570:	250e      	movs	r5, #14
 8002572:	5f49      	ldrsh	r1, [r1, r5]
 8002574:	f000 f8d6 	bl	8002724 <_lseek_r>
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	1c42      	adds	r2, r0, #1
 800257c:	d103      	bne.n	8002586 <__sseek+0x1a>
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <__sseek+0x28>)
 8002580:	4013      	ands	r3, r2
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	bd70      	pop	{r4, r5, r6, pc}
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	0152      	lsls	r2, r2, #5
 800258a:	4313      	orrs	r3, r2
 800258c:	81a3      	strh	r3, [r4, #12]
 800258e:	6560      	str	r0, [r4, #84]	; 0x54
 8002590:	e7f8      	b.n	8002584 <__sseek+0x18>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	ffffefff 	.word	0xffffefff

08002598 <__sclose>:
 8002598:	b510      	push	{r4, lr}
 800259a:	230e      	movs	r3, #14
 800259c:	5ec9      	ldrsh	r1, [r1, r3]
 800259e:	f000 f8af 	bl	8002700 <_close_r>
 80025a2:	bd10      	pop	{r4, pc}

080025a4 <__swbuf_r>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	0006      	movs	r6, r0
 80025a8:	000d      	movs	r5, r1
 80025aa:	0014      	movs	r4, r2
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d004      	beq.n	80025ba <__swbuf_r+0x16>
 80025b0:	6a03      	ldr	r3, [r0, #32]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <__swbuf_r+0x16>
 80025b6:	f7ff ff15 	bl	80023e4 <__sinit>
 80025ba:	69a3      	ldr	r3, [r4, #24]
 80025bc:	60a3      	str	r3, [r4, #8]
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	d528      	bpl.n	8002616 <__swbuf_r+0x72>
 80025c4:	6923      	ldr	r3, [r4, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d025      	beq.n	8002616 <__swbuf_r+0x72>
 80025ca:	6923      	ldr	r3, [r4, #16]
 80025cc:	6820      	ldr	r0, [r4, #0]
 80025ce:	b2ef      	uxtb	r7, r5
 80025d0:	1ac0      	subs	r0, r0, r3
 80025d2:	6963      	ldr	r3, [r4, #20]
 80025d4:	b2ed      	uxtb	r5, r5
 80025d6:	4283      	cmp	r3, r0
 80025d8:	dc05      	bgt.n	80025e6 <__swbuf_r+0x42>
 80025da:	0021      	movs	r1, r4
 80025dc:	0030      	movs	r0, r6
 80025de:	f000 fa9b 	bl	8002b18 <_fflush_r>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d11d      	bne.n	8002622 <__swbuf_r+0x7e>
 80025e6:	68a3      	ldr	r3, [r4, #8]
 80025e8:	3001      	adds	r0, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	60a3      	str	r3, [r4, #8]
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	6022      	str	r2, [r4, #0]
 80025f4:	701f      	strb	r7, [r3, #0]
 80025f6:	6963      	ldr	r3, [r4, #20]
 80025f8:	4283      	cmp	r3, r0
 80025fa:	d004      	beq.n	8002606 <__swbuf_r+0x62>
 80025fc:	89a3      	ldrh	r3, [r4, #12]
 80025fe:	07db      	lsls	r3, r3, #31
 8002600:	d507      	bpl.n	8002612 <__swbuf_r+0x6e>
 8002602:	2d0a      	cmp	r5, #10
 8002604:	d105      	bne.n	8002612 <__swbuf_r+0x6e>
 8002606:	0021      	movs	r1, r4
 8002608:	0030      	movs	r0, r6
 800260a:	f000 fa85 	bl	8002b18 <_fflush_r>
 800260e:	2800      	cmp	r0, #0
 8002610:	d107      	bne.n	8002622 <__swbuf_r+0x7e>
 8002612:	0028      	movs	r0, r5
 8002614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002616:	0021      	movs	r1, r4
 8002618:	0030      	movs	r0, r6
 800261a:	f000 f805 	bl	8002628 <__swsetup_r>
 800261e:	2800      	cmp	r0, #0
 8002620:	d0d3      	beq.n	80025ca <__swbuf_r+0x26>
 8002622:	2501      	movs	r5, #1
 8002624:	426d      	negs	r5, r5
 8002626:	e7f4      	b.n	8002612 <__swbuf_r+0x6e>

08002628 <__swsetup_r>:
 8002628:	4b30      	ldr	r3, [pc, #192]	; (80026ec <__swsetup_r+0xc4>)
 800262a:	b570      	push	{r4, r5, r6, lr}
 800262c:	0005      	movs	r5, r0
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	000c      	movs	r4, r1
 8002632:	2800      	cmp	r0, #0
 8002634:	d004      	beq.n	8002640 <__swsetup_r+0x18>
 8002636:	6a03      	ldr	r3, [r0, #32]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <__swsetup_r+0x18>
 800263c:	f7ff fed2 	bl	80023e4 <__sinit>
 8002640:	230c      	movs	r3, #12
 8002642:	5ee2      	ldrsh	r2, [r4, r3]
 8002644:	b293      	uxth	r3, r2
 8002646:	0711      	lsls	r1, r2, #28
 8002648:	d423      	bmi.n	8002692 <__swsetup_r+0x6a>
 800264a:	06d9      	lsls	r1, r3, #27
 800264c:	d407      	bmi.n	800265e <__swsetup_r+0x36>
 800264e:	2309      	movs	r3, #9
 8002650:	2001      	movs	r0, #1
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	3337      	adds	r3, #55	; 0x37
 8002656:	4313      	orrs	r3, r2
 8002658:	81a3      	strh	r3, [r4, #12]
 800265a:	4240      	negs	r0, r0
 800265c:	bd70      	pop	{r4, r5, r6, pc}
 800265e:	075b      	lsls	r3, r3, #29
 8002660:	d513      	bpl.n	800268a <__swsetup_r+0x62>
 8002662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002664:	2900      	cmp	r1, #0
 8002666:	d008      	beq.n	800267a <__swsetup_r+0x52>
 8002668:	0023      	movs	r3, r4
 800266a:	3344      	adds	r3, #68	; 0x44
 800266c:	4299      	cmp	r1, r3
 800266e:	d002      	beq.n	8002676 <__swsetup_r+0x4e>
 8002670:	0028      	movs	r0, r5
 8002672:	f000 f8c9 	bl	8002808 <_free_r>
 8002676:	2300      	movs	r3, #0
 8002678:	6363      	str	r3, [r4, #52]	; 0x34
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	89a3      	ldrh	r3, [r4, #12]
 800267e:	4393      	bics	r3, r2
 8002680:	81a3      	strh	r3, [r4, #12]
 8002682:	2300      	movs	r3, #0
 8002684:	6063      	str	r3, [r4, #4]
 8002686:	6923      	ldr	r3, [r4, #16]
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	2308      	movs	r3, #8
 800268c:	89a2      	ldrh	r2, [r4, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	81a3      	strh	r3, [r4, #12]
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <__swsetup_r+0x88>
 8002698:	21a0      	movs	r1, #160	; 0xa0
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	89a3      	ldrh	r3, [r4, #12]
 800269e:	0089      	lsls	r1, r1, #2
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	400b      	ands	r3, r1
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <__swsetup_r+0x88>
 80026a8:	0021      	movs	r1, r4
 80026aa:	0028      	movs	r0, r5
 80026ac:	f000 fa88 	bl	8002bc0 <__smakebuf_r>
 80026b0:	220c      	movs	r2, #12
 80026b2:	5ea3      	ldrsh	r3, [r4, r2]
 80026b4:	2001      	movs	r0, #1
 80026b6:	001a      	movs	r2, r3
 80026b8:	b299      	uxth	r1, r3
 80026ba:	4002      	ands	r2, r0
 80026bc:	4203      	tst	r3, r0
 80026be:	d00f      	beq.n	80026e0 <__swsetup_r+0xb8>
 80026c0:	2200      	movs	r2, #0
 80026c2:	60a2      	str	r2, [r4, #8]
 80026c4:	6962      	ldr	r2, [r4, #20]
 80026c6:	4252      	negs	r2, r2
 80026c8:	61a2      	str	r2, [r4, #24]
 80026ca:	2000      	movs	r0, #0
 80026cc:	6922      	ldr	r2, [r4, #16]
 80026ce:	4282      	cmp	r2, r0
 80026d0:	d1c4      	bne.n	800265c <__swsetup_r+0x34>
 80026d2:	0609      	lsls	r1, r1, #24
 80026d4:	d5c2      	bpl.n	800265c <__swsetup_r+0x34>
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	4313      	orrs	r3, r2
 80026da:	81a3      	strh	r3, [r4, #12]
 80026dc:	3801      	subs	r0, #1
 80026de:	e7bd      	b.n	800265c <__swsetup_r+0x34>
 80026e0:	0788      	lsls	r0, r1, #30
 80026e2:	d400      	bmi.n	80026e6 <__swsetup_r+0xbe>
 80026e4:	6962      	ldr	r2, [r4, #20]
 80026e6:	60a2      	str	r2, [r4, #8]
 80026e8:	e7ef      	b.n	80026ca <__swsetup_r+0xa2>
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000068 	.word	0x20000068

080026f0 <memset>:
 80026f0:	0003      	movs	r3, r0
 80026f2:	1882      	adds	r2, r0, r2
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d100      	bne.n	80026fa <memset+0xa>
 80026f8:	4770      	bx	lr
 80026fa:	7019      	strb	r1, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	e7f9      	b.n	80026f4 <memset+0x4>

08002700 <_close_r>:
 8002700:	2300      	movs	r3, #0
 8002702:	b570      	push	{r4, r5, r6, lr}
 8002704:	4d06      	ldr	r5, [pc, #24]	; (8002720 <_close_r+0x20>)
 8002706:	0004      	movs	r4, r0
 8002708:	0008      	movs	r0, r1
 800270a:	602b      	str	r3, [r5, #0]
 800270c:	f7fe f83a 	bl	8000784 <_close>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d103      	bne.n	800271c <_close_r+0x1c>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d000      	beq.n	800271c <_close_r+0x1c>
 800271a:	6023      	str	r3, [r4, #0]
 800271c:	bd70      	pop	{r4, r5, r6, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	2000a64c 	.word	0x2000a64c

08002724 <_lseek_r>:
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	0004      	movs	r4, r0
 8002728:	0008      	movs	r0, r1
 800272a:	0011      	movs	r1, r2
 800272c:	001a      	movs	r2, r3
 800272e:	2300      	movs	r3, #0
 8002730:	4d05      	ldr	r5, [pc, #20]	; (8002748 <_lseek_r+0x24>)
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fe f830 	bl	8000798 <_lseek>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d103      	bne.n	8002744 <_lseek_r+0x20>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d000      	beq.n	8002744 <_lseek_r+0x20>
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	bd70      	pop	{r4, r5, r6, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	2000a64c 	.word	0x2000a64c

0800274c <_read_r>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	0004      	movs	r4, r0
 8002750:	0008      	movs	r0, r1
 8002752:	0011      	movs	r1, r2
 8002754:	001a      	movs	r2, r3
 8002756:	2300      	movs	r3, #0
 8002758:	4d05      	ldr	r5, [pc, #20]	; (8002770 <_read_r+0x24>)
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	f7fd fff8 	bl	8000750 <_read>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d103      	bne.n	800276c <_read_r+0x20>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d000      	beq.n	800276c <_read_r+0x20>
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	2000a64c 	.word	0x2000a64c

08002774 <_write_r>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	0004      	movs	r4, r0
 8002778:	0008      	movs	r0, r1
 800277a:	0011      	movs	r1, r2
 800277c:	001a      	movs	r2, r3
 800277e:	2300      	movs	r3, #0
 8002780:	4d05      	ldr	r5, [pc, #20]	; (8002798 <_write_r+0x24>)
 8002782:	602b      	str	r3, [r5, #0]
 8002784:	f7fd fff1 	bl	800076a <_write>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d103      	bne.n	8002794 <_write_r+0x20>
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d000      	beq.n	8002794 <_write_r+0x20>
 8002792:	6023      	str	r3, [r4, #0]
 8002794:	bd70      	pop	{r4, r5, r6, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	2000a64c 	.word	0x2000a64c

0800279c <__errno>:
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <__errno+0x8>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	4770      	bx	lr
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	20000068 	.word	0x20000068

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	2600      	movs	r6, #0
 80027ac:	4c0c      	ldr	r4, [pc, #48]	; (80027e0 <__libc_init_array+0x38>)
 80027ae:	4d0d      	ldr	r5, [pc, #52]	; (80027e4 <__libc_init_array+0x3c>)
 80027b0:	1b64      	subs	r4, r4, r5
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	2600      	movs	r6, #0
 80027ba:	f000 fa75 	bl	8002ca8 <_init>
 80027be:	4c0a      	ldr	r4, [pc, #40]	; (80027e8 <__libc_init_array+0x40>)
 80027c0:	4d0a      	ldr	r5, [pc, #40]	; (80027ec <__libc_init_array+0x44>)
 80027c2:	1b64      	subs	r4, r4, r5
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	42a6      	cmp	r6, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	00b3      	lsls	r3, r6, #2
 80027ce:	58eb      	ldr	r3, [r5, r3]
 80027d0:	4798      	blx	r3
 80027d2:	3601      	adds	r6, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	00b3      	lsls	r3, r6, #2
 80027d8:	58eb      	ldr	r3, [r5, r3]
 80027da:	4798      	blx	r3
 80027dc:	3601      	adds	r6, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	08002da4 	.word	0x08002da4
 80027e4:	08002da4 	.word	0x08002da4
 80027e8:	08002da8 	.word	0x08002da8
 80027ec:	08002da4 	.word	0x08002da4

080027f0 <__retarget_lock_init_recursive>:
 80027f0:	4770      	bx	lr

080027f2 <__retarget_lock_acquire_recursive>:
 80027f2:	4770      	bx	lr

080027f4 <__retarget_lock_release_recursive>:
 80027f4:	4770      	bx	lr

080027f6 <memcpy>:
 80027f6:	2300      	movs	r3, #0
 80027f8:	b510      	push	{r4, lr}
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d100      	bne.n	8002800 <memcpy+0xa>
 80027fe:	bd10      	pop	{r4, pc}
 8002800:	5ccc      	ldrb	r4, [r1, r3]
 8002802:	54c4      	strb	r4, [r0, r3]
 8002804:	3301      	adds	r3, #1
 8002806:	e7f8      	b.n	80027fa <memcpy+0x4>

08002808 <_free_r>:
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	0005      	movs	r5, r0
 800280c:	2900      	cmp	r1, #0
 800280e:	d010      	beq.n	8002832 <_free_r+0x2a>
 8002810:	1f0c      	subs	r4, r1, #4
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da00      	bge.n	800281a <_free_r+0x12>
 8002818:	18e4      	adds	r4, r4, r3
 800281a:	0028      	movs	r0, r5
 800281c:	f000 f8e2 	bl	80029e4 <__malloc_lock>
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <_free_r+0x90>)
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <_free_r+0x2c>
 8002828:	6063      	str	r3, [r4, #4]
 800282a:	6014      	str	r4, [r2, #0]
 800282c:	0028      	movs	r0, r5
 800282e:	f000 f8e1 	bl	80029f4 <__malloc_unlock>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	42a3      	cmp	r3, r4
 8002836:	d908      	bls.n	800284a <_free_r+0x42>
 8002838:	6820      	ldr	r0, [r4, #0]
 800283a:	1821      	adds	r1, r4, r0
 800283c:	428b      	cmp	r3, r1
 800283e:	d1f3      	bne.n	8002828 <_free_r+0x20>
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	1809      	adds	r1, r1, r0
 8002846:	6021      	str	r1, [r4, #0]
 8002848:	e7ee      	b.n	8002828 <_free_r+0x20>
 800284a:	001a      	movs	r2, r3
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <_free_r+0x4e>
 8002852:	42a3      	cmp	r3, r4
 8002854:	d9f9      	bls.n	800284a <_free_r+0x42>
 8002856:	6811      	ldr	r1, [r2, #0]
 8002858:	1850      	adds	r0, r2, r1
 800285a:	42a0      	cmp	r0, r4
 800285c:	d10b      	bne.n	8002876 <_free_r+0x6e>
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	1809      	adds	r1, r1, r0
 8002862:	1850      	adds	r0, r2, r1
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	4283      	cmp	r3, r0
 8002868:	d1e0      	bne.n	800282c <_free_r+0x24>
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	1841      	adds	r1, r0, r1
 8002870:	6011      	str	r1, [r2, #0]
 8002872:	6053      	str	r3, [r2, #4]
 8002874:	e7da      	b.n	800282c <_free_r+0x24>
 8002876:	42a0      	cmp	r0, r4
 8002878:	d902      	bls.n	8002880 <_free_r+0x78>
 800287a:	230c      	movs	r3, #12
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	e7d5      	b.n	800282c <_free_r+0x24>
 8002880:	6820      	ldr	r0, [r4, #0]
 8002882:	1821      	adds	r1, r4, r0
 8002884:	428b      	cmp	r3, r1
 8002886:	d103      	bne.n	8002890 <_free_r+0x88>
 8002888:	6819      	ldr	r1, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	1809      	adds	r1, r1, r0
 800288e:	6021      	str	r1, [r4, #0]
 8002890:	6063      	str	r3, [r4, #4]
 8002892:	6054      	str	r4, [r2, #4]
 8002894:	e7ca      	b.n	800282c <_free_r+0x24>
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	2000a654 	.word	0x2000a654

0800289c <sbrk_aligned>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4e0f      	ldr	r6, [pc, #60]	; (80028dc <sbrk_aligned+0x40>)
 80028a0:	000d      	movs	r5, r1
 80028a2:	6831      	ldr	r1, [r6, #0]
 80028a4:	0004      	movs	r4, r0
 80028a6:	2900      	cmp	r1, #0
 80028a8:	d102      	bne.n	80028b0 <sbrk_aligned+0x14>
 80028aa:	f000 f9eb 	bl	8002c84 <_sbrk_r>
 80028ae:	6030      	str	r0, [r6, #0]
 80028b0:	0029      	movs	r1, r5
 80028b2:	0020      	movs	r0, r4
 80028b4:	f000 f9e6 	bl	8002c84 <_sbrk_r>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d00a      	beq.n	80028d2 <sbrk_aligned+0x36>
 80028bc:	2303      	movs	r3, #3
 80028be:	1cc5      	adds	r5, r0, #3
 80028c0:	439d      	bics	r5, r3
 80028c2:	42a8      	cmp	r0, r5
 80028c4:	d007      	beq.n	80028d6 <sbrk_aligned+0x3a>
 80028c6:	1a29      	subs	r1, r5, r0
 80028c8:	0020      	movs	r0, r4
 80028ca:	f000 f9db 	bl	8002c84 <_sbrk_r>
 80028ce:	3001      	adds	r0, #1
 80028d0:	d101      	bne.n	80028d6 <sbrk_aligned+0x3a>
 80028d2:	2501      	movs	r5, #1
 80028d4:	426d      	negs	r5, r5
 80028d6:	0028      	movs	r0, r5
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	2000a658 	.word	0x2000a658

080028e0 <_malloc_r>:
 80028e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028e2:	2203      	movs	r2, #3
 80028e4:	1ccb      	adds	r3, r1, #3
 80028e6:	4393      	bics	r3, r2
 80028e8:	3308      	adds	r3, #8
 80028ea:	0006      	movs	r6, r0
 80028ec:	001f      	movs	r7, r3
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d238      	bcs.n	8002964 <_malloc_r+0x84>
 80028f2:	270c      	movs	r7, #12
 80028f4:	42b9      	cmp	r1, r7
 80028f6:	d837      	bhi.n	8002968 <_malloc_r+0x88>
 80028f8:	0030      	movs	r0, r6
 80028fa:	f000 f873 	bl	80029e4 <__malloc_lock>
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <_malloc_r+0x100>)
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	001c      	movs	r4, r3
 8002906:	2c00      	cmp	r4, #0
 8002908:	d133      	bne.n	8002972 <_malloc_r+0x92>
 800290a:	0039      	movs	r1, r7
 800290c:	0030      	movs	r0, r6
 800290e:	f7ff ffc5 	bl	800289c <sbrk_aligned>
 8002912:	0004      	movs	r4, r0
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d15e      	bne.n	80029d6 <_malloc_r+0xf6>
 8002918:	9b00      	ldr	r3, [sp, #0]
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	0025      	movs	r5, r4
 800291e:	2d00      	cmp	r5, #0
 8002920:	d14e      	bne.n	80029c0 <_malloc_r+0xe0>
 8002922:	2c00      	cmp	r4, #0
 8002924:	d051      	beq.n	80029ca <_malloc_r+0xea>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	0029      	movs	r1, r5
 800292a:	18e3      	adds	r3, r4, r3
 800292c:	0030      	movs	r0, r6
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	f000 f9a8 	bl	8002c84 <_sbrk_r>
 8002934:	9b01      	ldr	r3, [sp, #4]
 8002936:	4283      	cmp	r3, r0
 8002938:	d147      	bne.n	80029ca <_malloc_r+0xea>
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	0030      	movs	r0, r6
 800293e:	1aff      	subs	r7, r7, r3
 8002940:	0039      	movs	r1, r7
 8002942:	f7ff ffab 	bl	800289c <sbrk_aligned>
 8002946:	3001      	adds	r0, #1
 8002948:	d03f      	beq.n	80029ca <_malloc_r+0xea>
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	19db      	adds	r3, r3, r7
 800294e:	6023      	str	r3, [r4, #0]
 8002950:	9b00      	ldr	r3, [sp, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d040      	beq.n	80029da <_malloc_r+0xfa>
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	42a2      	cmp	r2, r4
 800295c:	d133      	bne.n	80029c6 <_malloc_r+0xe6>
 800295e:	2200      	movs	r2, #0
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	e014      	b.n	800298e <_malloc_r+0xae>
 8002964:	2b00      	cmp	r3, #0
 8002966:	dac5      	bge.n	80028f4 <_malloc_r+0x14>
 8002968:	230c      	movs	r3, #12
 800296a:	2500      	movs	r5, #0
 800296c:	6033      	str	r3, [r6, #0]
 800296e:	0028      	movs	r0, r5
 8002970:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002972:	6821      	ldr	r1, [r4, #0]
 8002974:	1bc9      	subs	r1, r1, r7
 8002976:	d420      	bmi.n	80029ba <_malloc_r+0xda>
 8002978:	290b      	cmp	r1, #11
 800297a:	d918      	bls.n	80029ae <_malloc_r+0xce>
 800297c:	19e2      	adds	r2, r4, r7
 800297e:	6027      	str	r7, [r4, #0]
 8002980:	42a3      	cmp	r3, r4
 8002982:	d112      	bne.n	80029aa <_malloc_r+0xca>
 8002984:	9b00      	ldr	r3, [sp, #0]
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	6863      	ldr	r3, [r4, #4]
 800298a:	6011      	str	r1, [r2, #0]
 800298c:	6053      	str	r3, [r2, #4]
 800298e:	0030      	movs	r0, r6
 8002990:	0025      	movs	r5, r4
 8002992:	f000 f82f 	bl	80029f4 <__malloc_unlock>
 8002996:	2207      	movs	r2, #7
 8002998:	350b      	adds	r5, #11
 800299a:	1d23      	adds	r3, r4, #4
 800299c:	4395      	bics	r5, r2
 800299e:	1aea      	subs	r2, r5, r3
 80029a0:	429d      	cmp	r5, r3
 80029a2:	d0e4      	beq.n	800296e <_malloc_r+0x8e>
 80029a4:	1b5b      	subs	r3, r3, r5
 80029a6:	50a3      	str	r3, [r4, r2]
 80029a8:	e7e1      	b.n	800296e <_malloc_r+0x8e>
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	e7ec      	b.n	8002988 <_malloc_r+0xa8>
 80029ae:	6862      	ldr	r2, [r4, #4]
 80029b0:	42a3      	cmp	r3, r4
 80029b2:	d1d5      	bne.n	8002960 <_malloc_r+0x80>
 80029b4:	9b00      	ldr	r3, [sp, #0]
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e7e9      	b.n	800298e <_malloc_r+0xae>
 80029ba:	0023      	movs	r3, r4
 80029bc:	6864      	ldr	r4, [r4, #4]
 80029be:	e7a2      	b.n	8002906 <_malloc_r+0x26>
 80029c0:	002c      	movs	r4, r5
 80029c2:	686d      	ldr	r5, [r5, #4]
 80029c4:	e7ab      	b.n	800291e <_malloc_r+0x3e>
 80029c6:	0013      	movs	r3, r2
 80029c8:	e7c4      	b.n	8002954 <_malloc_r+0x74>
 80029ca:	230c      	movs	r3, #12
 80029cc:	0030      	movs	r0, r6
 80029ce:	6033      	str	r3, [r6, #0]
 80029d0:	f000 f810 	bl	80029f4 <__malloc_unlock>
 80029d4:	e7cb      	b.n	800296e <_malloc_r+0x8e>
 80029d6:	6027      	str	r7, [r4, #0]
 80029d8:	e7d9      	b.n	800298e <_malloc_r+0xae>
 80029da:	605b      	str	r3, [r3, #4]
 80029dc:	deff      	udf	#255	; 0xff
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	2000a654 	.word	0x2000a654

080029e4 <__malloc_lock>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4802      	ldr	r0, [pc, #8]	; (80029f0 <__malloc_lock+0xc>)
 80029e8:	f7ff ff03 	bl	80027f2 <__retarget_lock_acquire_recursive>
 80029ec:	bd10      	pop	{r4, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	2000a650 	.word	0x2000a650

080029f4 <__malloc_unlock>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4802      	ldr	r0, [pc, #8]	; (8002a00 <__malloc_unlock+0xc>)
 80029f8:	f7ff fefc 	bl	80027f4 <__retarget_lock_release_recursive>
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	2000a650 	.word	0x2000a650

08002a04 <__sflush_r>:
 8002a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a06:	898b      	ldrh	r3, [r1, #12]
 8002a08:	0005      	movs	r5, r0
 8002a0a:	000c      	movs	r4, r1
 8002a0c:	071a      	lsls	r2, r3, #28
 8002a0e:	d45c      	bmi.n	8002aca <__sflush_r+0xc6>
 8002a10:	684a      	ldr	r2, [r1, #4]
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	dc04      	bgt.n	8002a20 <__sflush_r+0x1c>
 8002a16:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	dc01      	bgt.n	8002a20 <__sflush_r+0x1c>
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a20:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002a22:	2f00      	cmp	r7, #0
 8002a24:	d0fa      	beq.n	8002a1c <__sflush_r+0x18>
 8002a26:	2200      	movs	r2, #0
 8002a28:	2080      	movs	r0, #128	; 0x80
 8002a2a:	682e      	ldr	r6, [r5, #0]
 8002a2c:	602a      	str	r2, [r5, #0]
 8002a2e:	001a      	movs	r2, r3
 8002a30:	0140      	lsls	r0, r0, #5
 8002a32:	6a21      	ldr	r1, [r4, #32]
 8002a34:	4002      	ands	r2, r0
 8002a36:	4203      	tst	r3, r0
 8002a38:	d034      	beq.n	8002aa4 <__sflush_r+0xa0>
 8002a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	075b      	lsls	r3, r3, #29
 8002a40:	d506      	bpl.n	8002a50 <__sflush_r+0x4c>
 8002a42:	6863      	ldr	r3, [r4, #4]
 8002a44:	1ac0      	subs	r0, r0, r3
 8002a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <__sflush_r+0x4c>
 8002a4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a4e:	1ac0      	subs	r0, r0, r3
 8002a50:	0002      	movs	r2, r0
 8002a52:	2300      	movs	r3, #0
 8002a54:	0028      	movs	r0, r5
 8002a56:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002a58:	6a21      	ldr	r1, [r4, #32]
 8002a5a:	47b8      	blx	r7
 8002a5c:	89a2      	ldrh	r2, [r4, #12]
 8002a5e:	1c43      	adds	r3, r0, #1
 8002a60:	d106      	bne.n	8002a70 <__sflush_r+0x6c>
 8002a62:	6829      	ldr	r1, [r5, #0]
 8002a64:	291d      	cmp	r1, #29
 8002a66:	d82c      	bhi.n	8002ac2 <__sflush_r+0xbe>
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <__sflush_r+0x110>)
 8002a6a:	410b      	asrs	r3, r1
 8002a6c:	07db      	lsls	r3, r3, #31
 8002a6e:	d428      	bmi.n	8002ac2 <__sflush_r+0xbe>
 8002a70:	2300      	movs	r3, #0
 8002a72:	6063      	str	r3, [r4, #4]
 8002a74:	6923      	ldr	r3, [r4, #16]
 8002a76:	6023      	str	r3, [r4, #0]
 8002a78:	04d2      	lsls	r2, r2, #19
 8002a7a:	d505      	bpl.n	8002a88 <__sflush_r+0x84>
 8002a7c:	1c43      	adds	r3, r0, #1
 8002a7e:	d102      	bne.n	8002a86 <__sflush_r+0x82>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d100      	bne.n	8002a88 <__sflush_r+0x84>
 8002a86:	6560      	str	r0, [r4, #84]	; 0x54
 8002a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a8a:	602e      	str	r6, [r5, #0]
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	d0c5      	beq.n	8002a1c <__sflush_r+0x18>
 8002a90:	0023      	movs	r3, r4
 8002a92:	3344      	adds	r3, #68	; 0x44
 8002a94:	4299      	cmp	r1, r3
 8002a96:	d002      	beq.n	8002a9e <__sflush_r+0x9a>
 8002a98:	0028      	movs	r0, r5
 8002a9a:	f7ff feb5 	bl	8002808 <_free_r>
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8002aa2:	e7bc      	b.n	8002a1e <__sflush_r+0x1a>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	0028      	movs	r0, r5
 8002aa8:	47b8      	blx	r7
 8002aaa:	1c43      	adds	r3, r0, #1
 8002aac:	d1c6      	bne.n	8002a3c <__sflush_r+0x38>
 8002aae:	682b      	ldr	r3, [r5, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0c3      	beq.n	8002a3c <__sflush_r+0x38>
 8002ab4:	2b1d      	cmp	r3, #29
 8002ab6:	d001      	beq.n	8002abc <__sflush_r+0xb8>
 8002ab8:	2b16      	cmp	r3, #22
 8002aba:	d101      	bne.n	8002ac0 <__sflush_r+0xbc>
 8002abc:	602e      	str	r6, [r5, #0]
 8002abe:	e7ad      	b.n	8002a1c <__sflush_r+0x18>
 8002ac0:	89a2      	ldrh	r2, [r4, #12]
 8002ac2:	2340      	movs	r3, #64	; 0x40
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	81a3      	strh	r3, [r4, #12]
 8002ac8:	e7a9      	b.n	8002a1e <__sflush_r+0x1a>
 8002aca:	690e      	ldr	r6, [r1, #16]
 8002acc:	2e00      	cmp	r6, #0
 8002ace:	d0a5      	beq.n	8002a1c <__sflush_r+0x18>
 8002ad0:	680f      	ldr	r7, [r1, #0]
 8002ad2:	600e      	str	r6, [r1, #0]
 8002ad4:	1bba      	subs	r2, r7, r6
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	079b      	lsls	r3, r3, #30
 8002adc:	d100      	bne.n	8002ae0 <__sflush_r+0xdc>
 8002ade:	694a      	ldr	r2, [r1, #20]
 8002ae0:	60a2      	str	r2, [r4, #8]
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	dd99      	ble.n	8002a1c <__sflush_r+0x18>
 8002ae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aea:	0032      	movs	r2, r6
 8002aec:	001f      	movs	r7, r3
 8002aee:	0028      	movs	r0, r5
 8002af0:	9b01      	ldr	r3, [sp, #4]
 8002af2:	6a21      	ldr	r1, [r4, #32]
 8002af4:	47b8      	blx	r7
 8002af6:	2800      	cmp	r0, #0
 8002af8:	dc06      	bgt.n	8002b08 <__sflush_r+0x104>
 8002afa:	2340      	movs	r3, #64	; 0x40
 8002afc:	2001      	movs	r0, #1
 8002afe:	89a2      	ldrh	r2, [r4, #12]
 8002b00:	4240      	negs	r0, r0
 8002b02:	4313      	orrs	r3, r2
 8002b04:	81a3      	strh	r3, [r4, #12]
 8002b06:	e78a      	b.n	8002a1e <__sflush_r+0x1a>
 8002b08:	9b01      	ldr	r3, [sp, #4]
 8002b0a:	1836      	adds	r6, r6, r0
 8002b0c:	1a1b      	subs	r3, r3, r0
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	e7e7      	b.n	8002ae2 <__sflush_r+0xde>
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	dfbffffe 	.word	0xdfbffffe

08002b18 <_fflush_r>:
 8002b18:	690b      	ldr	r3, [r1, #16]
 8002b1a:	b570      	push	{r4, r5, r6, lr}
 8002b1c:	0005      	movs	r5, r0
 8002b1e:	000c      	movs	r4, r1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <_fflush_r+0x12>
 8002b24:	2500      	movs	r5, #0
 8002b26:	0028      	movs	r0, r5
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d004      	beq.n	8002b38 <_fflush_r+0x20>
 8002b2e:	6a03      	ldr	r3, [r0, #32]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <_fflush_r+0x20>
 8002b34:	f7ff fc56 	bl	80023e4 <__sinit>
 8002b38:	220c      	movs	r2, #12
 8002b3a:	5ea3      	ldrsh	r3, [r4, r2]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f1      	beq.n	8002b24 <_fflush_r+0xc>
 8002b40:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b42:	07d2      	lsls	r2, r2, #31
 8002b44:	d404      	bmi.n	8002b50 <_fflush_r+0x38>
 8002b46:	059b      	lsls	r3, r3, #22
 8002b48:	d402      	bmi.n	8002b50 <_fflush_r+0x38>
 8002b4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b4c:	f7ff fe51 	bl	80027f2 <__retarget_lock_acquire_recursive>
 8002b50:	0028      	movs	r0, r5
 8002b52:	0021      	movs	r1, r4
 8002b54:	f7ff ff56 	bl	8002a04 <__sflush_r>
 8002b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b5a:	0005      	movs	r5, r0
 8002b5c:	07db      	lsls	r3, r3, #31
 8002b5e:	d4e2      	bmi.n	8002b26 <_fflush_r+0xe>
 8002b60:	89a3      	ldrh	r3, [r4, #12]
 8002b62:	059b      	lsls	r3, r3, #22
 8002b64:	d4df      	bmi.n	8002b26 <_fflush_r+0xe>
 8002b66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b68:	f7ff fe44 	bl	80027f4 <__retarget_lock_release_recursive>
 8002b6c:	e7db      	b.n	8002b26 <_fflush_r+0xe>
	...

08002b70 <__swhatbuf_r>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	000e      	movs	r6, r1
 8002b74:	001d      	movs	r5, r3
 8002b76:	230e      	movs	r3, #14
 8002b78:	5ec9      	ldrsh	r1, [r1, r3]
 8002b7a:	0014      	movs	r4, r2
 8002b7c:	b096      	sub	sp, #88	; 0x58
 8002b7e:	2900      	cmp	r1, #0
 8002b80:	da0c      	bge.n	8002b9c <__swhatbuf_r+0x2c>
 8002b82:	89b2      	ldrh	r2, [r6, #12]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	0011      	movs	r1, r2
 8002b88:	4019      	ands	r1, r3
 8002b8a:	421a      	tst	r2, r3
 8002b8c:	d013      	beq.n	8002bb6 <__swhatbuf_r+0x46>
 8002b8e:	2100      	movs	r1, #0
 8002b90:	3b40      	subs	r3, #64	; 0x40
 8002b92:	2000      	movs	r0, #0
 8002b94:	6029      	str	r1, [r5, #0]
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	b016      	add	sp, #88	; 0x58
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	466a      	mov	r2, sp
 8002b9e:	f000 f84d 	bl	8002c3c <_fstat_r>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	dbed      	blt.n	8002b82 <__swhatbuf_r+0x12>
 8002ba6:	23f0      	movs	r3, #240	; 0xf0
 8002ba8:	9901      	ldr	r1, [sp, #4]
 8002baa:	021b      	lsls	r3, r3, #8
 8002bac:	4019      	ands	r1, r3
 8002bae:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <__swhatbuf_r+0x4c>)
 8002bb0:	18c9      	adds	r1, r1, r3
 8002bb2:	424b      	negs	r3, r1
 8002bb4:	4159      	adcs	r1, r3
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	e7ea      	b.n	8002b92 <__swhatbuf_r+0x22>
 8002bbc:	ffffe000 	.word	0xffffe000

08002bc0 <__smakebuf_r>:
 8002bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bc2:	2602      	movs	r6, #2
 8002bc4:	898b      	ldrh	r3, [r1, #12]
 8002bc6:	0005      	movs	r5, r0
 8002bc8:	000c      	movs	r4, r1
 8002bca:	4233      	tst	r3, r6
 8002bcc:	d006      	beq.n	8002bdc <__smakebuf_r+0x1c>
 8002bce:	0023      	movs	r3, r4
 8002bd0:	3347      	adds	r3, #71	; 0x47
 8002bd2:	6023      	str	r3, [r4, #0]
 8002bd4:	6123      	str	r3, [r4, #16]
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	6163      	str	r3, [r4, #20]
 8002bda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002bdc:	466a      	mov	r2, sp
 8002bde:	ab01      	add	r3, sp, #4
 8002be0:	f7ff ffc6 	bl	8002b70 <__swhatbuf_r>
 8002be4:	9900      	ldr	r1, [sp, #0]
 8002be6:	0007      	movs	r7, r0
 8002be8:	0028      	movs	r0, r5
 8002bea:	f7ff fe79 	bl	80028e0 <_malloc_r>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d108      	bne.n	8002c04 <__smakebuf_r+0x44>
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	5ea3      	ldrsh	r3, [r4, r2]
 8002bf6:	059a      	lsls	r2, r3, #22
 8002bf8:	d4ef      	bmi.n	8002bda <__smakebuf_r+0x1a>
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	431e      	orrs	r6, r3
 8002c00:	81a6      	strh	r6, [r4, #12]
 8002c02:	e7e4      	b.n	8002bce <__smakebuf_r+0xe>
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	89a2      	ldrh	r2, [r4, #12]
 8002c08:	6020      	str	r0, [r4, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	9b00      	ldr	r3, [sp, #0]
 8002c10:	6120      	str	r0, [r4, #16]
 8002c12:	6163      	str	r3, [r4, #20]
 8002c14:	9b01      	ldr	r3, [sp, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <__smakebuf_r+0x74>
 8002c1a:	0028      	movs	r0, r5
 8002c1c:	230e      	movs	r3, #14
 8002c1e:	5ee1      	ldrsh	r1, [r4, r3]
 8002c20:	f000 f81e 	bl	8002c60 <_isatty_r>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d005      	beq.n	8002c34 <__smakebuf_r+0x74>
 8002c28:	2303      	movs	r3, #3
 8002c2a:	89a2      	ldrh	r2, [r4, #12]
 8002c2c:	439a      	bics	r2, r3
 8002c2e:	3b02      	subs	r3, #2
 8002c30:	4313      	orrs	r3, r2
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	433b      	orrs	r3, r7
 8002c38:	81a3      	strh	r3, [r4, #12]
 8002c3a:	e7ce      	b.n	8002bda <__smakebuf_r+0x1a>

08002c3c <_fstat_r>:
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	b570      	push	{r4, r5, r6, lr}
 8002c40:	4d06      	ldr	r5, [pc, #24]	; (8002c5c <_fstat_r+0x20>)
 8002c42:	0004      	movs	r4, r0
 8002c44:	0008      	movs	r0, r1
 8002c46:	0011      	movs	r1, r2
 8002c48:	602b      	str	r3, [r5, #0]
 8002c4a:	f7fd fd9e 	bl	800078a <_fstat>
 8002c4e:	1c43      	adds	r3, r0, #1
 8002c50:	d103      	bne.n	8002c5a <_fstat_r+0x1e>
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d000      	beq.n	8002c5a <_fstat_r+0x1e>
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	2000a64c 	.word	0x2000a64c

08002c60 <_isatty_r>:
 8002c60:	2300      	movs	r3, #0
 8002c62:	b570      	push	{r4, r5, r6, lr}
 8002c64:	4d06      	ldr	r5, [pc, #24]	; (8002c80 <_isatty_r+0x20>)
 8002c66:	0004      	movs	r4, r0
 8002c68:	0008      	movs	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fd fd92 	bl	8000794 <_isatty>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d103      	bne.n	8002c7c <_isatty_r+0x1c>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d000      	beq.n	8002c7c <_isatty_r+0x1c>
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	2000a64c 	.word	0x2000a64c

08002c84 <_sbrk_r>:
 8002c84:	2300      	movs	r3, #0
 8002c86:	b570      	push	{r4, r5, r6, lr}
 8002c88:	4d06      	ldr	r5, [pc, #24]	; (8002ca4 <_sbrk_r+0x20>)
 8002c8a:	0004      	movs	r4, r0
 8002c8c:	0008      	movs	r0, r1
 8002c8e:	602b      	str	r3, [r5, #0]
 8002c90:	f7fd fd84 	bl	800079c <_sbrk>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d103      	bne.n	8002ca0 <_sbrk_r+0x1c>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d000      	beq.n	8002ca0 <_sbrk_r+0x1c>
 8002c9e:	6023      	str	r3, [r4, #0]
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	2000a64c 	.word	0x2000a64c

08002ca8 <_init>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

08002cb4 <_fini>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr

08002cc0 <__FLASH_Program_Fast_veneer>:
 8002cc0:	b401      	push	{r0}
 8002cc2:	4802      	ldr	r0, [pc, #8]	; (8002ccc <__FLASH_Program_Fast_veneer+0xc>)
 8002cc4:	4684      	mov	ip, r0
 8002cc6:	bc01      	pop	{r0}
 8002cc8:	4760      	bx	ip
 8002cca:	bf00      	nop
 8002ccc:	2000006d 	.word	0x2000006d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickFreq>:
20000004:	00000001                                ....

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <size>:
2000000c:	00000190                                ....

20000010 <__sglue>:
20000010:	00000000 00000003 2000a510              ........... 

2000001c <_impure_data>:
2000001c:	00000000 2000a510 2000a578 2000a5e0     ....... x.. ... 
	...

20000068 <_impure_ptr>:
20000068:	2000001c                                ... 

2000006c <FLASH_Program_Fast>:
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000006c:	2280      	movs	r2, #128	; 0x80
2000006e:	4b0c      	ldr	r3, [pc, #48]	; (200000a0 <FLASH_Program_Fast+0x34>)
{
20000070:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000072:	695c      	ldr	r4, [r3, #20]
20000074:	02d2      	lsls	r2, r2, #11
20000076:	4322      	orrs	r2, r4
20000078:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000007a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
2000007e:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000080:	1c4c      	adds	r4, r1, #1
20000082:	34ff      	adds	r4, #255	; 0xff
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000084:	1a40      	subs	r0, r0, r1
20000086:	680d      	ldr	r5, [r1, #0]
20000088:	5045      	str	r5, [r0, r1]
    src += 4U;
2000008a:	3104      	adds	r1, #4
  while (index < 64U)
2000008c:	42a1      	cmp	r1, r4
2000008e:	d1fa      	bne.n	20000086 <FLASH_Program_Fast+0x1a>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
20000090:	21c0      	movs	r1, #192	; 0xc0
20000092:	0289      	lsls	r1, r1, #10
20000094:	6918      	ldr	r0, [r3, #16]
20000096:	4208      	tst	r0, r1
20000098:	d1fc      	bne.n	20000094 <FLASH_Program_Fast+0x28>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000009a:	f382 8810 	msr	PRIMASK, r2
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000009e:	bd30      	pop	{r4, r5, pc}
200000a0:	40022000 	.word	0x40022000
